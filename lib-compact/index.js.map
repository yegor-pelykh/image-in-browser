{
  "version": 3,
  "sources": ["../src/common/bit-operators.ts", "../src/common/blend-mode.ts", "../src/common/clamp.ts", "../src/common/color-channel.ts", "../src/common/color-model.ts", "../src/error/image-error.ts", "../src/common/color-utils.ts", "../src/common/color.ts", "../src/common/crc32.ts", "../src/common/dispose-mode.ts", "../src/common/list-utils.ts", "../src/common/exif_data.ts", "../src/common/frame-type.ts", "../src/common/frame-animation.ts", "../src/common/iccp-compression-mode.ts", "../src/formats/util/interpolation.ts", "../src/common/rgb-channel-set.ts", "../src/common/memory-image.ts", "../src/common/text-codec.ts", "../src/common/typings.ts", "../src/draw/draw-pixel.ts", "../src/error/not-implemented-error.ts", "../src/hdr/half.ts", "../src/hdr/hdr-slice.ts", "../src/hdr/hdr-image.ts", "../src/formats/util/input-buffer.ts", "../src/formats/bmp/bitmap-file-header.ts", "../src/formats/bmp/bitmap-compression-mode.ts", "../src/formats/bmp/bmp-info.ts", "../src/formats/bmp-decoder.ts", "../src/formats/util/output-buffer.ts", "../src/formats/bmp-encoder.ts", "../src/formats/decode-info.ts", "../src/formats/decoder.ts", "../src/formats/dib-decoder.ts", "../src/formats/encoder.ts", "../src/transform/copy-into.ts", "../src/formats/gif/gif-color-map.ts", "../src/formats/gif/gif-image-desc.ts", "../src/formats/gif/gif-info.ts", "../src/formats/gif-decoder.ts", "../src/formats/util/dither-kernel.ts", "../src/formats/util/dither-pixel.ts", "../src/formats/util/neural-quantizer.ts", "../src/formats/gif-encoder.ts", "../src/formats/ico/ico-bmp-info.ts", "../src/formats/ico/ico-info-image.ts", "../src/formats/ico/ico-info.ts", "../src/formats/png/png-frame.ts", "../src/formats/png/png-info.ts", "../src/formats/png-decoder.ts", "../src/formats/ico-decoder.ts", "../src/formats/png-encoder.ts", "../src/formats/win-encoder.ts", "../src/formats/ico-encoder.ts", "../src/formats/jpeg/component-data.ts", "../src/formats/jpeg/jpeg.ts", "../src/formats/jpeg/jpeg-adobe.ts", "../src/formats/jpeg/jpeg-component.ts", "../src/formats/jpeg/jpeg-frame.ts", "../src/formats/jpeg/jpeg-huffman.ts", "../src/formats/jpeg/jpeg-info.ts", "../src/formats/jpeg/jpeg-jfif.ts", "../src/formats/jpeg/jpeg-quantize.ts", "../src/formats/jpeg/jpeg-scan.ts", "../src/formats/jpeg/jpeg-data.ts", "../src/formats/jpeg-decoder.ts", "../src/formats/jpeg-encoder.ts", "../src/formats/util/quantizer.ts", "../src/index.ts", "../src/transform/copy-rotate.ts", "../src/transform/flip-direction.ts", "../src/transform/flip.ts", "../src/transform/bake-orientation.ts", "../src/transform/copy-resize.ts", "../node_modules/uzip/UZIP.js", "../src/common/icc_profile_data.ts", "<stdin>"],
  "sourcesContent": ["/** @format */\n\nexport abstract class BitOperators {\n  private static readonly uint8arr: Uint8Array = new Uint8Array(1);\n  private static readonly uint8ToInt8arr: Int8Array = new Int8Array(\n    BitOperators.uint8arr.buffer\n  );\n  private static readonly uint16arr: Uint16Array = new Uint16Array(1);\n  private static readonly uint16ToInt16arr: Int16Array = new Int16Array(\n    BitOperators.uint16arr.buffer\n  );\n  private static readonly uint32arr: Uint32Array = new Uint32Array(1);\n  private static readonly uint32ToInt32arr: Int32Array = new Int32Array(\n    BitOperators.uint32arr.buffer\n  );\n  private static readonly uint32ToFloat32arr: Float32Array = new Float32Array(\n    BitOperators.uint32arr.buffer\n  );\n  private static readonly int32arr: Int32Array = new Int32Array(1);\n  private static readonly int32ToUint32arr: Uint32Array = new Uint32Array(\n    BitOperators.int32arr.buffer\n  );\n  private static readonly uint64arr: BigUint64Array = new BigUint64Array(1);\n  private static readonly uint64ToFloat64arr: Float64Array = new Float64Array(\n    BitOperators.uint64arr.buffer\n  );\n\n  public static signed(bits: number, value: number) {\n    return value & (1 << (bits - 1)) ? value - (1 << bits) : value;\n  }\n\n  public static shiftR(v: number, n: number): number {\n    return BitOperators.signed(32, v >> n);\n  }\n\n  public static shiftL(v: number, n: number): number {\n    return BitOperators.signed(32, v << n);\n  }\n\n  /**\n   * Binary conversion to an int8. This is equivalent in C to\n   * typecasting to a char.\n   */\n  public static toInt8(d: number): number {\n    BitOperators.uint8arr[0] = d;\n    return BitOperators.uint8ToInt8arr[0];\n  }\n\n  /**\n   * Binary conversion to an int16. This is equivalent in C to\n   * typecasting to a short.\n   */\n  public static toInt16(d: number): number {\n    BitOperators.uint16arr[0] = d;\n    return BitOperators.uint16ToInt16arr[0];\n  }\n\n  /**\n   * Binary conversion to an int32. This is equivalent in C to\n   * typecasting to signed int.\n   */\n  public static toInt32(d: number): number {\n    BitOperators.uint32arr[0] = d;\n    return BitOperators.uint32ToInt32arr[0];\n  }\n\n  /**\n   * Binary conversion to a float32. This is equivalent in C to\n   * typecasting to float.\n   */\n  public static toFloat32(d: number): number {\n    BitOperators.uint32arr[0] = d;\n    return BitOperators.uint32ToFloat32arr[0];\n  }\n\n  /**\n   * Binary conversion to a float64. This is equivalent in C to\n   * typecasting to double.\n   */\n  public static toFloat64(d: bigint): number {\n    BitOperators.uint64arr[0] = d;\n    return BitOperators.uint64ToFloat64arr[0];\n  }\n\n  /**\n   * Binary conversion of an int32 to a uint32. This is equivalent in C to\n   * typecasting to unsigned int.\n   */\n  public static toUint32(d: number): number {\n    BitOperators.int32arr[0] = d;\n    return BitOperators.int32ToUint32arr[0];\n  }\n\n  public static debugBits32(value?: number): string {\n    if (value === undefined) {\n      return 'undefined';\n    }\n    const bitCount = 32;\n    let result = '';\n    for (let i = bitCount; i > -1; i--) {\n      result += (value & (1 << i)) === 0 ? '0' : '1';\n    }\n    return result;\n  }\n}\n", "/** @format */\n\nexport enum BlendMode {\n  /**\n   * No alpha blending should be done when drawing this frame (replace pixels in canvas).\n   */\n  source,\n\n  /**\n   * * Alpha blending should be used when drawing this frame (composited over\n   * the current canvas image).\n   */\n  over,\n}\n", "/** @format */\n\nexport abstract class Clamp {\n  public static clamp(number: number, low: number, high: number) {\n    return Math.max(low, Math.min(number, high));\n  }\n\n  /**\n   * Clamp [x] to [a] [b]\n   */\n  public static clampInt(x: number, a: number, b: number): number {\n    return Math.trunc(Clamp.clamp(x, a, b));\n  }\n\n  /**\n   * Clamp [x] to [0, 255]\n   */\n  public static clampInt255(x: number): number {\n    return Math.trunc(Clamp.clamp(x, 0, 255));\n  }\n}\n", "/** @format */\n\nexport enum ColorChannel {\n  /**\n   * Red channel of a color.\n   */\n  red,\n\n  /**\n   * Green channel of a color.\n   */\n  green,\n\n  /**\n   * Blue channel of a color.\n   */\n  blue,\n\n  /**\n   * Alpha channel of a color.\n   */\n  alpha,\n\n  /**\n   * Luminance (brightness) of a color.\n   */\n  luminance,\n}\n", "/** @format */\n\nexport enum ColorModel {\n  argb,\n  abgr,\n  rgba,\n  bgra,\n  rgb,\n  bgr,\n  luminance,\n}\n", "/** @format */\n\n/**\n * An Error thrown when there was a problem in the image library.\n */\nexport class ImageError extends Error {\n  toString(): string {\n    return `ImageError: ${this.message}`;\n  }\n}\n", "/** @format */\n\nimport { ColorChannel } from './color-channel';\nimport { Clamp } from './clamp';\nimport { BitOperators } from './bit-operators';\nimport { ImageError } from '../error/image-error';\n\nexport abstract class ColorUtils {\n  /**\n   * Returns a new color of [src] alpha-blended onto [dst]. The opacity of [src]\n   * is additionally scaled by [fraction] / 255.\n   */\n  public static alphaBlendColors(\n    dst: number,\n    src: number,\n    fraction = 0xff\n  ): number {\n    const srcAlpha = ColorUtils.getAlpha(src);\n    if (srcAlpha === 255 && fraction === 0xff) {\n      // src is fully opaque, nothing to blend\n      return src;\n    }\n    if (srcAlpha === 0 && fraction === 0xff) {\n      // src is fully transparent, nothing to blend\n      return dst;\n    }\n\n    let a = srcAlpha / 255.0;\n    if (fraction !== 0xff) {\n      a *= fraction / 255.0;\n    }\n\n    const sr = Math.round(ColorUtils.getRed(src) * a);\n    const sg = Math.round(ColorUtils.getGreen(src) * a);\n    const sb = Math.round(ColorUtils.getBlue(src) * a);\n    const sa = Math.round(srcAlpha * a);\n\n    const dr = Math.round(ColorUtils.getRed(dst) * (1.0 - a));\n    const dg = Math.round(ColorUtils.getGreen(dst) * (1.0 - a));\n    const db = Math.round(ColorUtils.getBlue(dst) * (1.0 - a));\n    const da = Math.round(ColorUtils.getAlpha(dst) * (1.0 - a));\n\n    return ColorUtils.getColor(sr + dr, sg + dg, sb + db, sa + da);\n  }\n\n  /**\n   * Get the [channel] from the [color].\n   */\n  public static getChannel(color: number, channel: ColorChannel): number {\n    if (channel === ColorChannel.red) {\n      return ColorUtils.getRed(color);\n    } else if (channel === ColorChannel.green) {\n      return ColorUtils.getGreen(color);\n    } else if (channel === ColorChannel.blue) {\n      return ColorUtils.getBlue(color);\n    } else if (channel === ColorChannel.alpha) {\n      return ColorUtils.getAlpha(color);\n    }\n    return ColorUtils.getLuminance(color);\n  }\n\n  /**\n   * Get the alpha channel from the [color].\n   */\n  public static getAlpha(color: number): number {\n    return (color >> 24) & 0xff;\n  }\n\n  /**\n   * Get the blue channel from the [color].\n   */\n  public static getBlue(color: number): number {\n    return (color >> 16) & 0xff;\n  }\n\n  /**\n   * Get the color with the given [r], [g], [b], and [a] components.\n   * The channel order of a uint32 encoded color is RGBA.\n   */\n  public static getColor(r: number, g: number, b: number, a = 255): number {\n    // What we're doing here, is creating a 32 bit\n    // integer by collecting the rgba in one integer.\n    // we know for certain and we're also assuring that\n    // all our letiables' values are 255 at maximum,\n    // which means that they can never be bigger than\n    // 8 bits  so we can safely slide each one by 8 bits\n    // for adding the other.\n    const color =\n      (Clamp.clampInt255(a) << 24) |\n      (Clamp.clampInt255(b) << 16) |\n      (Clamp.clampInt255(g) << 8) |\n      Clamp.clampInt255(r);\n    return BitOperators.toUint32(color);\n  }\n\n  /**\n   * Get the green channel from the [color].\n   */\n  public static getGreen(color: number): number {\n    return (color >> 8) & 0xff;\n  }\n\n  /**\n   * Returns the luminance (grayscale) value of the [color].\n   */\n  public static getLuminance(color: number): number {\n    const r = ColorUtils.getRed(color);\n    const g = ColorUtils.getGreen(color);\n    const b = ColorUtils.getBlue(color);\n    return ColorUtils.getLuminanceRgb(r, g, b);\n  }\n\n  /**\n   * Returns the luminance (grayscale) value of the color.\n   */\n  public static getLuminanceRgb(r: number, g: number, b: number): number {\n    return Math.round(0.299 * r + 0.587 * g + 0.114 * b);\n  }\n\n  /**\n   * Get the red channel from the [color].\n   */\n  public static getRed(color: number): number {\n    return color & 0xff;\n  }\n\n  /**\n   * Check if [color] is white\n   */\n  public static isBlack(color: number): boolean {\n    return (color & 0xffffff) === 0x0;\n  }\n\n  /**\n   * Check if [color] is white\n   */\n  public static isWhite(color: number): boolean {\n    return (color & 0xffffff) === 0xffffff;\n  }\n\n  /**\n   * Returns a new color where the alpha channel of [color] has been replaced by [value].\n   */\n  public static setAlpha(color: number, value: number): number {\n    return (color & 0x00ffffff) | (Clamp.clampInt255(value) << 24);\n  }\n\n  /**\n   * Returns a new color where the blue channel of [color] has been replaced by [value].\n   */\n  public static setBlue(color: number, value: number): number {\n    return (color & 0xff00ffff) | (Clamp.clampInt255(value) << 16);\n  }\n\n  /**\n   * Returns a new color, where the given [color]'s [channel] has been\n   * replaced with the given [value].\n   */\n  public static setChannel(\n    color: number,\n    channel: ColorChannel,\n    value: number\n  ): number {\n    if (channel === ColorChannel.red) {\n      return ColorUtils.setRed(color, value);\n    } else if (channel === ColorChannel.green) {\n      return ColorUtils.setGreen(color, value);\n    } else if (channel === ColorChannel.blue) {\n      return ColorUtils.setBlue(color, value);\n    } else if (channel === ColorChannel.alpha) {\n      return ColorUtils.setAlpha(color, value);\n    }\n    return color;\n  }\n\n  /**\n   * Returns a new color where the green channel of [color] has been replaced\n   * by [value].\n   */\n  public static setGreen(color: number, value: number): number {\n    return (color & 0xffff00ff) | (Clamp.clampInt255(value) << 8);\n  }\n\n  /**\n   * Returns a new color where the red channel of [color] has been replaced\n   * by [value].\n   */\n  public static setRed(color: number, value: number): number {\n    return (color & 0xffffff00) | Clamp.clampInt255(value);\n  }\n\n  /**\n   * Convert an HSL color to RGB, where h is specified in normalized degrees\n   * [0, 1] (where 1 is 360-degrees); s and l are in the range [0, 1].\n   * Returns a list [r, g, b] with values in the range [0, 255].\n   */\n  public static hslToRgb(\n    hue: number,\n    saturation: number,\n    lightness: number\n  ): number[] {\n    if (saturation === 0) {\n      const gray = Math.trunc(lightness * 255.0);\n      return [gray, gray, gray];\n    }\n\n    const hue2rgb = (p: number, q: number, t: number) => {\n      let ti = t;\n      if (ti < 0.0) {\n        ti += 1.0;\n      }\n      if (ti > 1) {\n        ti -= 1.0;\n      }\n      if (ti < 1.0 / 6.0) {\n        return p + (q - p) * 6.0 * ti;\n      }\n      if (ti < 1.0 / 2.0) {\n        return q;\n      }\n      if (ti < 2.0 / 3.0) {\n        return p + (q - p) * (2.0 / 3.0 - ti) * 6.0;\n      }\n      return p;\n    };\n\n    const q =\n      lightness < 0.5\n        ? lightness * (1.0 + saturation)\n        : lightness + saturation - lightness * saturation;\n    const p = 2.0 * lightness - q;\n\n    const r = hue2rgb(p, q, hue + 1.0 / 3.0);\n    const g = hue2rgb(p, q, hue);\n    const b = hue2rgb(p, q, hue - 1.0 / 3.0);\n\n    return [\n      Math.round(r * 255.0),\n      Math.round(g * 255.0),\n      Math.round(b * 255.0),\n    ];\n  }\n\n  /**\n   * Convert an HSV color to RGB, where h is specified in normalized degrees\n   * [0, 1] (where 1 is 360-degrees); s and l are in the range [0, 1].\n   * Returns a list [r, g, b] with values in the range [0, 255].\n   */\n  public static hsvToRgb(\n    hue: number,\n    saturation: number,\n    brightness: number\n  ): number[] {\n    if (saturation === 0) {\n      const gray = Math.round(brightness * 255.0);\n      return [gray, gray, gray];\n    }\n\n    const h = (hue - Math.floor(hue)) * 6.0;\n    const f = h - Math.floor(h);\n    const p = brightness * (1.0 - saturation);\n    const q = brightness * (1.0 - saturation * f);\n    const t = brightness * (1.0 - saturation * (1.0 - f));\n\n    switch (Math.trunc(h)) {\n      case 0:\n        return [\n          Math.round(brightness * 255.0),\n          Math.round(t * 255.0),\n          Math.round(p * 255.0),\n        ];\n      case 1:\n        return [\n          Math.round(q * 255.0),\n          Math.round(brightness * 255.0),\n          Math.round(p * 255.0),\n        ];\n      case 2:\n        return [\n          Math.round(p * 255.0),\n          Math.round(brightness * 255.0),\n          Math.round(t * 255.0),\n        ];\n      case 3:\n        return [\n          Math.round(p * 255.0),\n          Math.round(q * 255.0),\n          Math.round(brightness * 255.0),\n        ];\n      case 4:\n        return [\n          Math.round(t * 255.0),\n          Math.round(p * 255.0),\n          Math.round(brightness * 255.0),\n        ];\n      case 5:\n        return [\n          Math.round(brightness * 255.0),\n          Math.round(p * 255.0),\n          Math.round(q * 255.0),\n        ];\n      default:\n        throw new ImageError('Invalid hue');\n    }\n  }\n\n  /**\n   * Convert an RGB color to HSL, where r, g and b are in the range [0, 255].\n   * Returns a list [h, s, l] with values in the range [0, 1].\n   */\n  public static rgbToHsl(r: number, g: number, b: number): number[] {\n    const ri = r / 255.0;\n    const gi = g / 255.0;\n    const bi = b / 255.0;\n    const mx = Math.max(ri, Math.max(gi, bi));\n    const mn = Math.min(ri, Math.min(gi, bi));\n\n    const l = (mx + mn) / 2.0;\n\n    if (mx === mn) {\n      return [0.0, 0.0, l];\n    }\n\n    const d = mx - mn;\n    const s = l > 0.5 ? d / (2.0 - mx - mn) : d / (mx + mn);\n\n    let h = 0;\n    if (mx === ri) {\n      h = (gi - bi) / d + (gi < bi ? 6.0 : 0.0);\n    } else if (mx === gi) {\n      h = (bi - ri) / d + 2.0;\n    } else {\n      h = (ri - gi) / d + 4.0;\n    }\n\n    h /= 6.0;\n\n    return [h, s, l];\n  }\n\n  /**\n   * Convert a CIE-L*a*b color to XYZ.\n   */\n  public static labToXyz(l: number, a: number, b: number): number[] {\n    let y = (l + 16) / 116;\n    let x = y + a / 500;\n    let z = y - b / 200;\n    if (Math.pow(x, 3) > 0.008856) {\n      x = Math.pow(x, 3);\n    } else {\n      x = (x - 16 / 116) / 7.787;\n    }\n    if (Math.pow(y, 3) > 0.008856) {\n      y = Math.pow(y, 3);\n    } else {\n      y = (y - 16 / 116) / 7.787;\n    }\n    if (Math.pow(z, 3) > 0.008856) {\n      z = Math.pow(z, 3);\n    } else {\n      z = (z - 16 / 116) / 7.787;\n    }\n\n    return [\n      Math.trunc(x * 95.047),\n      Math.trunc(y * 100.0),\n      Math.trunc(z * 108.883),\n    ];\n  }\n\n  /**\n   * Convert an XYZ color to RGB.\n   */\n  public static xyzToRgb(x: number, y: number, z: number): number[] {\n    const xi = x / 100;\n    const yi = y / 100;\n    const zi = z / 100;\n    let r = 3.2406 * xi + -1.5372 * yi + -0.4986 * zi;\n    let g = -0.9689 * xi + 1.8758 * yi + 0.0415 * zi;\n    let b = 0.0557 * xi + -0.204 * yi + 1.057 * zi;\n    if (r > 0.0031308) {\n      r = 1.055 * Math.pow(r, 0.4166666667) - 0.055;\n    } else {\n      r *= 12.92;\n    }\n    if (g > 0.0031308) {\n      g = 1.055 * Math.pow(g, 0.4166666667) - 0.055;\n    } else {\n      g *= 12.92;\n    }\n    if (b > 0.0031308) {\n      b = 1.055 * Math.pow(b, 0.4166666667) - 0.055;\n    } else {\n      b *= 12.92;\n    }\n\n    return [\n      Math.trunc(Clamp.clamp(r * 255, 0, 255)),\n      Math.trunc(Clamp.clamp(g * 255, 0, 255)),\n      Math.trunc(Clamp.clamp(b * 255, 0, 255)),\n    ];\n  }\n\n  /**\n   * Convert a CMYK color to RGB, where c, m, y, k values are in the range\n   * [0, 255]. Returns a list [r, g, b] with values in the range [0, 255].\n   */\n  public static cmykToRgb(\n    c: number,\n    m: number,\n    y: number,\n    k: number\n  ): number[] {\n    const ci = c / 255.0;\n    const mi = m / 255.0;\n    const yi = y / 255.0;\n    const ki = k / 255.0;\n    return [\n      Math.round(255.0 * (1.0 - ci) * (1.0 - ki)),\n      Math.round(255.0 * (1.0 - mi) * (1.0 - ki)),\n      Math.round(255.0 * (1.0 - yi) * (1.0 - ki)),\n    ];\n  }\n\n  /**\n   * Convert a CIE-L*a*b color to RGB.\n   */\n  public static labToRgb(l: number, a: number, b: number): number[] {\n    const refX = 95.047;\n    const refY = 100.0;\n    const refZ = 108.883;\n\n    let y = (l + 16) / 116;\n    let x = a / 500 + y;\n    let z = y - b / 200;\n\n    const y3 = Math.pow(y, 3);\n    if (y3 > 0.008856) {\n      y = y3;\n    } else {\n      y = (y - 16 / 116) / 7.787;\n    }\n\n    const x3 = Math.pow(x, 3);\n    if (x3 > 0.008856) {\n      x = x3;\n    } else {\n      x = (x - 16 / 116) / 7.787;\n    }\n\n    const z3 = Math.pow(z, 3);\n    if (z3 > 0.008856) {\n      z = z3;\n    } else {\n      z = (z - 16 / 116) / 7.787;\n    }\n\n    x *= refX;\n    y *= refY;\n    z *= refZ;\n\n    x /= 100;\n    y /= 100;\n    z /= 100;\n\n    // Xyz to rgb\n    let R = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    let G = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    let B = x * 0.0557 + y * -0.204 + z * 1.057;\n\n    if (R > 0.0031308) {\n      R = 1.055 * Math.pow(R, 1.0 / 2.4) - 0.055;\n    } else {\n      R *= 12.92;\n    }\n\n    if (G > 0.0031308) {\n      G = 1.055 * Math.pow(G, 1.0 / 2.4) - 0.055;\n    } else {\n      G *= 12.92;\n    }\n\n    if (B > 0.0031308) {\n      B = 1.055 * Math.pow(B, 1.0 / 2.4) - 0.055;\n    } else {\n      B *= 12.92;\n    }\n\n    return [\n      Math.trunc(Clamp.clamp(R * 255.0, 0, 255)),\n      Math.trunc(Clamp.clamp(G * 255.0, 0, 255)),\n      Math.trunc(Clamp.clamp(B * 255.0, 0, 255)),\n    ];\n  }\n\n  /**\n   * Convert a RGB color to XYZ.\n   */\n  public static rgbToXyz(r: number, g: number, b: number): number[] {\n    let ri = r / 255;\n    let gi = g / 255;\n    let bi = b / 255;\n\n    if (ri > 0.04045) {\n      ri = Math.pow((ri + 0.055) / 1.055, 2.4);\n    } else {\n      ri /= 12.92;\n    }\n    if (gi > 0.04045) {\n      gi = Math.pow((gi + 0.055) / 1.055, 2.4);\n    } else {\n      gi /= 12.92;\n    }\n    if (bi > 0.04045) {\n      bi = Math.pow((bi + 0.055) / 1.055, 2.4);\n    } else {\n      bi /= 12.92;\n    }\n\n    ri *= 100.0;\n    gi *= 100.0;\n    bi *= 100.0;\n\n    return [\n      ri * 0.4124 + gi * 0.3576 + bi * 0.1805,\n      ri * 0.2126 + gi * 0.7152 + bi * 0.0722,\n      ri * 0.0193 + gi * 0.1192 + bi * 0.9505,\n    ];\n  }\n\n  /**\n   * Convert a XYZ color to CIE-L*a*b.\n   */\n  public static xyzToLab(x: number, y: number, z: number): number[] {\n    let xi = x / 95.047;\n    let yi = y / 100;\n    let zi = z / 108.883;\n\n    if (xi > 0.008856) {\n      xi = Math.pow(xi, 1 / 3);\n    } else {\n      xi = 7.787 * xi + 16 / 116;\n    }\n    if (yi > 0.008856) {\n      yi = Math.pow(yi, 1 / 3);\n    } else {\n      yi = 7.787 * yi + 16 / 116;\n    }\n    if (zi > 0.008856) {\n      zi = Math.pow(zi, 1 / 3);\n    } else {\n      zi = 7.787 * zi + 16 / 116;\n    }\n\n    return [116 * yi - 16, 500 * (xi - yi), 200 * (yi - zi)];\n  }\n\n  /**\n   * Convert a RGB color to CIE-L*a*b.\n   */\n  public static rgbToLab(r: number, g: number, b: number): number[] {\n    let ri = r / 255;\n    let gi = g / 255;\n    let bi = b / 255;\n\n    if (ri > 0.04045) {\n      ri = Math.pow((ri + 0.055) / 1.055, 2.4);\n    } else {\n      ri /= 12.92;\n    }\n    if (gi > 0.04045) {\n      gi = Math.pow((gi + 0.055) / 1.055, 2.4);\n    } else {\n      gi /= 12.92;\n    }\n    if (bi > 0.04045) {\n      bi = Math.pow((bi + 0.055) / 1.055, 2.4);\n    } else {\n      bi /= 12.92;\n    }\n\n    ri *= 100;\n    gi *= 100;\n    bi *= 100;\n\n    let x = ri * 0.4124 + gi * 0.3576 + bi * 0.1805;\n    let y = ri * 0.2126 + gi * 0.7152 + bi * 0.0722;\n    let z = ri * 0.0193 + gi * 0.1192 + bi * 0.9505;\n\n    x /= 95.047;\n    y /= 100.0;\n    z /= 108.883;\n\n    if (x > 0.008856) {\n      x = Math.pow(x, 1 / 3.0);\n    } else {\n      x = 7.787 * x + 16 / 116;\n    }\n    if (y > 0.008856) {\n      y = Math.pow(y, 1 / 3);\n    } else {\n      y = 7.787 * y + 16 / 116;\n    }\n    if (z > 0.008856) {\n      z = Math.pow(z, 1 / 3);\n    } else {\n      z = 7.787 * z + 16 / 116;\n    }\n\n    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n  }\n}\n", "/** @format */\n\nimport { ColorUtils } from './color-utils';\n\n/**\n * Image pixel colors are instantiated as an int object rather than an instance\n * of the Color class in order to reduce object allocations.\n */\nexport abstract class Color {\n  /**\n   * Create a color value from RGB values in the range [0, 255].\n   *\n   * The channel order of a uint32 encoded color is BGRA.\n   */\n  public static fromRgb(red: number, green: number, blue: number): number {\n    return ColorUtils.getColor(red, green, blue);\n  }\n\n  /**\n   * Create a color value from RGBA values in the range [0, 255].\n   *\n   * The channel order of a uint32 encoded color is BGRA.\n   */\n  public static fromRgba(\n    red: number,\n    green: number,\n    blue: number,\n    alpha: number\n  ): number {\n    return ColorUtils.getColor(red, green, blue, alpha);\n  }\n\n  /**\n   * Create a color value from HSL values in the range [0, 1].\n   */\n  public static fromHsl(\n    hue: number,\n    saturation: number,\n    lightness: number\n  ): number {\n    const rgb = ColorUtils.hslToRgb(hue, saturation, lightness);\n    return ColorUtils.getColor(rgb[0], rgb[1], rgb[2]);\n  }\n\n  /**\n   * Create a color value from HSV values in the range [0, 1].\n   */\n  public static fromHsv(\n    hue: number,\n    saturation: number,\n    value: number\n  ): number {\n    const rgb = ColorUtils.hsvToRgb(hue, saturation, value);\n    return ColorUtils.getColor(rgb[0], rgb[1], rgb[2]);\n  }\n\n  /**\n   * Create a color value from XYZ values.\n   */\n  public static fromXyz(x: number, y: number, z: number): number {\n    const rgb = ColorUtils.xyzToRgb(x, y, z);\n    return ColorUtils.getColor(rgb[0], rgb[1], rgb[2]);\n  }\n\n  /**\n   * Create a color value from CIE-L*ab values.\n   */\n  public static fromLab(L: number, a: number, b: number): number {\n    const rgb = ColorUtils.labToRgb(L, a, b);\n    return ColorUtils.getColor(rgb[0], rgb[1], rgb[2]);\n  }\n\n  /**\n   * Compare colors from a 3 or 4 dimensional color space\n   */\n  public static distance(\n    c1: number[],\n    c2: number[],\n    compareAlpha: boolean\n  ): number {\n    const d1 = c1[0] - c2[0];\n    const d2 = c1[1] - c2[1];\n    const d3 = c1[2] - c2[2];\n    if (compareAlpha) {\n      const dA = c1[3] - c2[3];\n      return Math.sqrt(\n        Math.max(d1 * d1, (d1 - dA) * (d1 - dA)) +\n          Math.max(d2 * d2, (d2 - dA) * (d2 - dA)) +\n          Math.max(d3 * d3, (d3 - dA) * (d3 - dA))\n      );\n    } else {\n      return Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3);\n    }\n  }\n}\n", "/** @format */\n\nexport interface Crc32Parameters {\n  buffer: Uint8Array;\n  baseCrc?: number;\n  position?: number;\n  length?: number;\n}\n\nexport abstract class Crc32 {\n  private static readonly crcTable = new Uint32Array(Crc32.makeTable());\n\n  private static makeTable() {\n    const table: number[] = [];\n    let c = 0;\n    for (let n = 0; n < 256; n++) {\n      c = n;\n      for (let k = 0; k < 8; k++) {\n        c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;\n      }\n      table[n] = c;\n    }\n    return table;\n  }\n\n  public static getChecksum(options: Crc32Parameters) {\n    const t = Crc32.crcTable;\n    const len = options.length ?? options.buffer.length;\n    const pos = options.position ?? 0;\n    const end = pos + len;\n\n    let result = (options.baseCrc ?? 0) ^ -1;\n    for (let i = pos; i < end; i++) {\n      result = (result >>> 8) ^ t[(result ^ options.buffer[i]) & 0xff];\n    }\n\n    return (result ^ -1) >>> 0;\n  }\n}\n", "/** @format */\n\nexport enum DisposeMode {\n  /**\n   * When drawing a frame, the canvas should be left as it is.\n   */\n  none,\n\n  /**\n   * When drawing a frame, the canvas should be cleared first.\n   */\n  clear,\n\n  /**\n   * When drawing this frame, the canvas should be reverted to how it was before drawing it.\n   */\n  previous,\n}\n", "/** @format */\n\nimport { ImageError } from '../error/image-error';\nimport { TypedArray } from './typings';\n\nexport abstract class ListUtils {\n  public static copyInt8(\n    from: Int8Array,\n    begin?: number,\n    end?: number\n  ): Int8Array {\n    return Int8Array.from(from.subarray(begin, end));\n  }\n\n  public static copyUint8(\n    from: Uint8Array,\n    begin?: number,\n    end?: number\n  ): Uint8Array {\n    return Uint8Array.from(from.subarray(begin, end));\n  }\n\n  public static copyInt16(\n    from: Int16Array,\n    begin?: number,\n    end?: number\n  ): Int16Array {\n    return Int16Array.from(from.subarray(begin, end));\n  }\n\n  public static copyUint16(\n    from: Uint16Array,\n    begin?: number,\n    end?: number\n  ): Uint16Array {\n    return Uint16Array.from(from.subarray(begin, end));\n  }\n\n  public static copyInt32(\n    from: Int32Array,\n    begin?: number,\n    end?: number\n  ): Int32Array {\n    return Int32Array.from(from.subarray(begin, end));\n  }\n\n  public static copyUint32(\n    from: Uint32Array,\n    begin?: number,\n    end?: number\n  ): Uint32Array {\n    return Uint32Array.from(from.subarray(begin, end));\n  }\n\n  public static copyFloat32(\n    from: Float32Array,\n    begin?: number,\n    end?: number\n  ): Float32Array {\n    return Float32Array.from(from.subarray(begin, end));\n  }\n\n  public static copyFloat64(\n    from: Float64Array,\n    begin?: number,\n    end?: number\n  ): Float64Array {\n    return Float64Array.from(from.subarray(begin, end));\n  }\n\n  public static copy(\n    from: TypedArray,\n    begin?: number,\n    end?: number\n  ): TypedArray {\n    if (from instanceof Int8Array) {\n      return ListUtils.copyInt8(from, begin, end);\n    } else if (from instanceof Uint8Array) {\n      return ListUtils.copyUint8(from, begin, end);\n    } else if (from instanceof Int16Array) {\n      return ListUtils.copyInt16(from, begin, end);\n    } else if (from instanceof Uint16Array) {\n      return ListUtils.copyUint16(from, begin, end);\n    } else if (from instanceof Int32Array) {\n      return ListUtils.copyInt32(from, begin, end);\n    } else if (from instanceof Uint32Array) {\n      return ListUtils.copyUint32(from, begin, end);\n    } else if (from instanceof Float32Array) {\n      return ListUtils.copyFloat32(from, begin, end);\n    } else if (from instanceof Float64Array) {\n      return ListUtils.copyFloat64(from, begin, end);\n    }\n    throw new ImageError('Unknown array type');\n  }\n\n  public static setRange<T extends TypedArray>(\n    to: T,\n    start: number,\n    end: number,\n    from: T,\n    skipCount = 0\n  ): void {\n    const viewFrom = from.subarray(skipCount, end - start);\n    to.set(viewFrom, start);\n  }\n}\n", "/** @format */\n\nimport { ListUtils } from './list-utils';\n\nexport type ExifDataType = string | number;\n\nexport interface ExifDataInitOptions {\n  data?: Map<number, ExifDataType>;\n  rawData?: Uint8Array[];\n}\n\n/**\n * Exif data stored with an image.\n */\nexport class ExifData {\n  public static readonly ORIENTATION = 0x0112;\n\n  private _rawData?: Uint8Array[];\n  public get rawData(): Uint8Array[] | undefined {\n    return this._rawData;\n  }\n\n  private _data: Map<number, ExifDataType>;\n  public get data(): Map<number, ExifDataType> {\n    return this._data;\n  }\n\n  public get hasRawData(): boolean {\n    return this.rawData !== undefined && this.rawData.length > 0;\n  }\n\n  public get hasOrientation(): boolean {\n    return this.data.has(ExifData.ORIENTATION);\n  }\n\n  public get orientation(): number | undefined {\n    return this.data.get(ExifData.ORIENTATION) as number | undefined;\n  }\n\n  constructor(options?: ExifDataInitOptions) {\n    this._data = options?.data ?? new Map<number, ExifDataType>();\n    this._rawData = options?.rawData;\n  }\n\n  public static from(other?: ExifData) {\n    let data: Map<number, ExifDataType> | undefined = undefined;\n    let rawData: Uint8Array[] | undefined = undefined;\n    if (other !== undefined) {\n      if (other._data !== undefined) {\n        data = new Map<number, ExifDataType>(other._data);\n      }\n      if (other._rawData !== undefined) {\n        rawData = new Array(other._rawData.length);\n        for (let i = 0; i < rawData.length; i++) {\n          rawData[i] = ListUtils.copyUint8(other._rawData[i]);\n        }\n      }\n    }\n    return new ExifData({\n      data: data,\n      rawData: rawData,\n    });\n  }\n\n  public addRowData(data: Uint8Array) {\n    if (this._rawData === undefined) {\n      this._rawData = new Array<Uint8Array>();\n    }\n    this._rawData.push(data);\n  }\n}\n", "/** @format */\n\nexport enum FrameType {\n  /**\n   * The frames of this document are to be interpreted as animation.\n   */\n  animation,\n\n  /**\n   * The frames of this document are to be interpreted as pages of a document.\n   */\n  page,\n}\n", "/** @format */\n\nimport { FrameType } from './frame-type';\nimport { MemoryImage } from './memory-image';\n\nexport interface FrameAnimationInitOptions {\n  width?: number;\n  height?: number;\n  loopCount?: number;\n}\n\n/**\n * Stores multiple images, most often as the frames of an animation.\n *\n * Some formats support multiple images that are not\n * to be interpreted as animation, but rather multiple pages of a document.\n * The [FrameAnimation] container is still used to store the images for these files.\n * The [frameType] property is used to differentiate multi-page documents from\n * multi-frame animations, where it is set to [FrameType.page] for documents\n * and [FrameType.animation] for animated frames.\n *\n * All [Decoder] classes support decoding to an [FrameAnimation], where the\n * [FrameAnimation] will only contain a single frame for single image formats\n * such as JPEG, or if the file doesn't contain any animation such as a single\n * image GIF. If you want to generically support both animated and non-animated\n * files, you can always decode to an animation and if the animation has only\n * a single frame, then it's a non-animated image.\n *\n * In some cases, the frames of the animation may only provide a portion of the\n * canvas, such as the case of animations encoding only the changing pixels\n * from one frame to the next. The [width] and [height] and [backgroundColor]\n * properties of the [FrameAnimation] provide information about the canvas that\n * contains the animation, and the [Image] frames provide information about\n * how to draw the particular frame, such as the area of the canvas to draw\n * into, and if the canvas should be cleared prior to drawing the frame.\n */\nexport class FrameAnimation implements Iterable<MemoryImage> {\n  /**\n   * The canvas width for containing the animation.\n   */\n  private _width = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  /**\n   * The canvas height for containing the animation.\n   */\n  private _height = 0;\n  public get height(): number {\n    return this._height;\n  }\n\n  /**\n   * The suggested background color to clear the canvas with.\n   */\n  private _backgroundColor = 0xffffffff;\n  public get backgroundColor(): number {\n    return this._backgroundColor;\n  }\n\n  /**\n   * How many times should the animation loop(0 means forever)?\n   */\n  private _loopCount = 0;\n  public get loopCount(): number {\n    return this._loopCount;\n  }\n\n  /**\n   * How should the frames be interpreted?  If [FrameType.animation], the\n   * frames are part of an animated sequence. If [FrameType.page], the frames\n   * are the pages of a document.\n   */\n  private _frameType: FrameType = FrameType.animation;\n  public get frameType(): FrameType {\n    return this._frameType;\n  }\n\n  /**\n   * The frames of the animation.\n   */\n  private _frames: MemoryImage[] = [];\n  public get frames(): MemoryImage[] {\n    return this._frames;\n  }\n\n  /**\n   * How many frames are in the animation?\n   */\n  public get numFrames(): number {\n    return this.frames.length;\n  }\n\n  /**\n   * The first frame of the animation.\n   */\n  public get first(): MemoryImage {\n    return this.frames[0];\n  }\n\n  /**\n   * The last frame of the animation.\n   */\n  public get last(): MemoryImage {\n    return this.frames[this.frames.length - 1];\n  }\n\n  /**\n   * Is the animation empty(no frames)?\n   */\n  public get isEmpty(): boolean {\n    return this.frames.length === 0;\n  }\n\n  /**\n   * Returns true if there is at least one frame in the animation.\n   */\n  public get isNotEmpty(): boolean {\n    return this.frames.length > 0;\n  }\n\n  constructor(options?: FrameAnimationInitOptions) {\n    this._width = options?.width ?? 0;\n    this._height = options?.height ?? 0;\n    this._loopCount = options?.loopCount ?? 0;\n  }\n\n  /**\n   * Get the frame at the given[index].\n   */\n  public getFrame(index: number): MemoryImage {\n    return this.frames[index];\n  }\n\n  /**\n   * Add a frame to the animation.\n   */\n  public addFrame(image: MemoryImage): void {\n    if (this._width < image.width) {\n      this._width = image.width;\n    }\n    if (this._height < image.height) {\n      this._height = image.height;\n    }\n    this.frames.push(image);\n  }\n\n  /**\n   * Get the iterator for looping over the animation.\n   */\n  public [Symbol.iterator](): Iterator<MemoryImage, MemoryImage, undefined> {\n    let index = -1;\n    return {\n      next: () => {\n        return {\n          value: this._frames[++index],\n          done: !(index in this._frames),\n        };\n      },\n    };\n  }\n}\n", "/** @format */\n\nexport enum ICCPCompressionMode {\n  none,\n  deflate,\n}\n", "/** @format */\n\nexport enum Interpolation {\n  nearest,\n  linear,\n  cubic,\n  average,\n}\n", "/** @format */\n\nexport enum RgbChannelSet {\n  rgb,\n  rgba,\n}\n", "/** @format */\n\nimport { ExifData } from './exif_data';\nimport { ICCProfileData } from './icc_profile_data';\nimport { Interpolation } from '../formats/util/interpolation';\nimport { ListUtils } from './list-utils';\nimport { ColorUtils } from './color-utils';\nimport { RgbChannelSet } from './rgb-channel-set';\nimport { DisposeMode } from './dispose-mode';\nimport { BlendMode } from './blend-mode';\nimport { ColorModel } from './color-model';\nimport { ImageError } from '../error/image-error';\n\nexport interface RgbMemoryImageInitOptions {\n  width: number;\n  height: number;\n  exifData?: ExifData;\n  iccProfile?: ICCProfileData;\n  textData?: Map<string, string>;\n}\n\nexport interface MemoryImageInitOptions extends RgbMemoryImageInitOptions {\n  rgbChannelSet?: RgbChannelSet;\n  data?: Uint32Array;\n}\n\nexport interface MemoryImageInitOptionsColorModel {\n  width: number;\n  height: number;\n  data: Uint8Array;\n  rgbChannelSet?: RgbChannelSet;\n  exifData?: ExifData;\n  iccProfile?: ICCProfileData;\n  textData?: Map<string, string>;\n  colorModel?: ColorModel;\n}\n\n/**\n * An image buffer where pixels are encoded into 32-bit unsigned ints (Uint32).\n *\n * Pixels are stored in 32-bit unsigned integers in #AARRGGBB format.\n * This is to be consistent with the Flutter image data. You can use\n * [getBytes] to access the pixel data at the byte (channel) level, optionally\n * providing the format to get the image data as. You can use the letious color\n * functions, such as [getRed], [getGreen], [getBlue], and [getAlpha] to access\n * the individual channels of a given pixel color.\n *\n * If this image is a frame of an animation as decoded by the [decodeFrame]\n * method of [Decoder], then the [xOffset], [yOffset], [width] and [height]\n * determine the area of the canvas this image should be drawn into,\n * as some frames of an animation only modify part of the canvas (recording\n * the part of the frame that actually changes). The [decodeAnimation] method\n * will always return the fully composed animation, so these coordinate\n * properties are not used.\n */\nexport class MemoryImage {\n  /**\n   * Pixels are encoded into 4-byte Uint32 integers in #AABBGGRR channel order.\n   */\n  private readonly _data: Uint32Array;\n  public get data(): Uint32Array {\n    return this._data;\n  }\n\n  /**\n   * x position at which to render the frame. This is used for frames\n   * in an animation, such as from an animated GIF.\n   */\n  private _xOffset = 0;\n  public get xOffset(): number {\n    return this._xOffset;\n  }\n\n  /**\n   * y position at which to render the frame. This is used for frames\n   * in an animation, such as from an animated GIF.\n   */\n  private _yOffset = 0;\n  public get yOffset(): number {\n    return this._yOffset;\n  }\n\n  /**\n   * How long this frame should be displayed, in milliseconds.\n   * A duration of 0 indicates no delay and the next frame will be drawn\n   * as quickly as it can.\n   */\n  private _duration = 0;\n  public set duration(v: number) {\n    this._duration = v;\n  }\n  public get duration(): number {\n    return this._duration;\n  }\n\n  /**\n   * Defines what should be done to the canvas when drawing this frame\n   *  in an animation.\n   */\n  private _disposeMethod: DisposeMode = DisposeMode.clear;\n  public get disposeMethod(): DisposeMode {\n    return this._disposeMethod;\n  }\n\n  /**\n   * Defines the blending method (alpha compositing) to use when drawing this\n   * frame in an animation.\n   */\n  private _blendMethod: BlendMode = BlendMode.over;\n  public get blendMethod(): BlendMode {\n    return this._blendMethod;\n  }\n\n  /**\n   * The channels used by this image, indicating whether the alpha channel\n   * is used or not. All images have an implicit alpha channel due to the\n   * image data being stored in a Uint32, but some images, such as those\n   * decoded from a Jpeg, don't use the alpha channel. This allows\n   * image encoders that support both rgb and rgba formats, to know which\n   * one it should use.\n   */\n  private _rgbChannelSet: RgbChannelSet;\n  public get rgbChannelSet(): RgbChannelSet {\n    return this._rgbChannelSet;\n  }\n\n  /**\n   * EXIF data decoded from an image file.\n   */\n  private _exifData: ExifData;\n  public get exifData(): ExifData {\n    return this._exifData;\n  }\n\n  /**\n   * ICC color profile read from an image file.\n   */\n  private _iccProfile?: ICCProfileData;\n  public set iccProfile(v: ICCProfileData | undefined) {\n    this._iccProfile = v;\n  }\n  public get iccProfile(): ICCProfileData | undefined {\n    return this._iccProfile;\n  }\n\n  /**\n   * Some formats, like PNG, can encode and decode text data with the image.\n   */\n  private _textData?: Map<string, string>;\n  public get textData(): Map<string, string> | undefined {\n    return this._textData;\n  }\n\n  /**\n   * Width of the image.\n   */\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Height of the image.\n   */\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  /**\n   * The number of channels used by this Image. While all images\n   * are stored internally with 4 bytes, some images, such as those\n   * loaded from a Jpeg, don't use the 4th (alpha) channel.\n   */\n  public get numberOfChannels(): number {\n    return this.rgbChannelSet === RgbChannelSet.rgba ? 4 : 3;\n  }\n\n  /**\n   * The size of the image buffer.\n   */\n  public get length(): number {\n    return this.data.length;\n  }\n\n  /**\n   * Create an image with the given dimensions and format.\n   */\n  constructor(options: MemoryImageInitOptions) {\n    this._width = options.width;\n    this._height = options.height;\n    this._rgbChannelSet = options.rgbChannelSet ?? RgbChannelSet.rgba;\n    this._exifData = ExifData.from(options.exifData);\n    this._iccProfile = options.iccProfile;\n    this._textData = options.textData;\n    this._data =\n      options.data ?? new Uint32Array(options.width * options.height);\n  }\n\n  private static convertData(\n    width: number,\n    height: number,\n    bytes: Uint8Array | Uint32Array,\n    colorModel: ColorModel\n  ): Uint32Array {\n    if (colorModel === ColorModel.rgba) {\n      return bytes instanceof Uint32Array\n        ? ListUtils.copyUint32(bytes)\n        : ListUtils.copyUint32(new Uint32Array(bytes.buffer));\n    }\n    const input =\n      bytes instanceof Uint32Array ? new Uint8Array(bytes.buffer) : bytes;\n\n    const data = new Uint32Array(width * height);\n    const rgba = new Uint8Array(data.buffer);\n\n    switch (colorModel) {\n      case ColorModel.bgra:\n        for (let i = 0, len = input.length; i < len; i += 4) {\n          rgba[i + 0] = input[i + 2];\n          rgba[i + 1] = input[i + 1];\n          rgba[i + 2] = input[i + 0];\n          rgba[i + 3] = input[i + 3];\n        }\n        break;\n      case ColorModel.abgr:\n        for (let i = 0, len = input.length; i < len; i += 4) {\n          rgba[i + 0] = input[i + 3];\n          rgba[i + 1] = input[i + 2];\n          rgba[i + 2] = input[i + 1];\n          rgba[i + 3] = input[i + 0];\n        }\n        break;\n      case ColorModel.argb:\n        for (let i = 0, len = input.length; i < len; i += 4) {\n          rgba[i + 0] = input[i + 1];\n          rgba[i + 1] = input[i + 2];\n          rgba[i + 2] = input[i + 3];\n          rgba[i + 3] = input[i + 0];\n        }\n        break;\n      case ColorModel.bgr:\n        for (let i = 0, j = 0, len = input.length; j < len; i += 4, j += 3) {\n          rgba[i + 0] = input[j + 2];\n          rgba[i + 1] = input[j + 1];\n          rgba[i + 2] = input[j + 0];\n          rgba[i + 3] = 255;\n        }\n        break;\n      case ColorModel.rgb:\n        for (let i = 0, j = 0, len = input.length; j < len; i += 4, j += 3) {\n          rgba[i + 0] = input[j + 0];\n          rgba[i + 1] = input[j + 1];\n          rgba[i + 2] = input[j + 2];\n          rgba[i + 3] = 255;\n        }\n        break;\n      case ColorModel.luminance:\n        for (let i = 0, j = 0, len = input.length; j < len; i += 4, ++j) {\n          rgba[i + 0] = input[j];\n          rgba[i + 1] = input[j];\n          rgba[i + 2] = input[j];\n          rgba[i + 3] = 255;\n        }\n        break;\n    }\n    return data;\n  }\n\n  public static rgb(options: RgbMemoryImageInitOptions): MemoryImage {\n    const opt = {\n      ...options,\n      rgbChannelSet: RgbChannelSet.rgb,\n    } as MemoryImageInitOptions;\n    return new MemoryImage(opt);\n  }\n\n  public static from(other: MemoryImage): MemoryImage {\n    const result = new MemoryImage({\n      width: other._width,\n      height: other._height,\n      rgbChannelSet: other._rgbChannelSet,\n      exifData: ExifData.from(other._exifData),\n      iccProfile: other._iccProfile,\n      textData:\n        other._textData !== undefined ? new Map(other._textData) : undefined,\n      data: ListUtils.copyUint32(other._data),\n    });\n    result._xOffset = other._xOffset;\n    result._yOffset = other._yOffset;\n    result._duration = other._duration;\n    result._disposeMethod = other._disposeMethod;\n    result._blendMethod = other._blendMethod;\n    return result;\n  }\n\n  /**\n   *\n   * [format] defines the order of color channels in [bytes].\n   * An HTML canvas element stores colors in Format.rgba format; a Flutter\n   * Image object stores colors in Format.rgba format.\n   * The length of [bytes] should be (width * height) * format-byte-count,\n   * where format-byte-count is 1, 3, or 4 depending on the number of\n   * channels in the format (luminance, rgb, rgba, etc).\n   *\n   * The native format of an image is Format.rgba. If another format\n   * is specified, the input data will be converted to rgba to store\n   * in the Image.\n   *\n   * For example, given an Html Canvas, you could create an image:\n   * let bytes = canvas.getContext('2d').getImageData(0, 0,\n   *   canvas.width, canvas.height).data;\n   * let image = Image.fromBytes(canvas.width, canvas.height, bytes,\n   *                             format: Format.rgba);\n   */\n  public static fromBytes(\n    options: MemoryImageInitOptionsColorModel\n  ): MemoryImage {\n    options.rgbChannelSet ??= RgbChannelSet.rgba;\n    options.colorModel ??= ColorModel.rgba;\n    const data = this.convertData(\n      options.width,\n      options.height,\n      options.data,\n      options.colorModel\n    );\n    const result = new MemoryImage({\n      width: options.width,\n      height: options.height,\n      rgbChannelSet: options.rgbChannelSet,\n      exifData: options.exifData,\n      iccProfile: options.iccProfile,\n      textData: options.textData,\n      data: data,\n    });\n    return result;\n  }\n\n  /**\n   * Clone this image.\n   * */\n  public clone(): MemoryImage {\n    return MemoryImage.from(this);\n  }\n\n  /**\n   * Get the bytes from the image. You can use this to access the\n   * color channels directly, or to pass it to something like an\n   * Html canvas context.\n   *\n   * Specifying the [format] will convert the image data to the specified\n   * format. Images are stored internally in Format.rgba format; any\n   * other format will require a conversion.\n   *\n   * For example, given an Html Canvas, you could draw this image into the\n   * canvas:\n   * Html.ImageData d = context2D.createImageData(image.width, image.height);\n   * d.data.setRange(0, image.length, image.getBytes(format: Format.rgba));\n   * context2D.putImageData(data, 0, 0);\n   */\n  public getBytes(colorModel: ColorModel = ColorModel.rgba): Uint8Array {\n    const rgba = new Uint8Array(this._data.buffer);\n    switch (colorModel) {\n      case ColorModel.rgba:\n        return rgba;\n      case ColorModel.bgra: {\n        const bytes = new Uint8Array(this._width * this._height * 4);\n        for (let i = 0, len = bytes.length; i < len; i += 4) {\n          bytes[i + 0] = rgba[i + 2];\n          bytes[i + 1] = rgba[i + 1];\n          bytes[i + 2] = rgba[i + 0];\n          bytes[i + 3] = rgba[i + 3];\n        }\n        return bytes;\n      }\n      case ColorModel.abgr: {\n        const bytes = new Uint8Array(this._width * this._height * 4);\n        for (let i = 0, len = bytes.length; i < len; i += 4) {\n          bytes[i + 0] = rgba[i + 3];\n          bytes[i + 1] = rgba[i + 2];\n          bytes[i + 2] = rgba[i + 1];\n          bytes[i + 3] = rgba[i + 0];\n        }\n        return bytes;\n      }\n      case ColorModel.argb: {\n        const bytes = new Uint8Array(this._width * this._height * 4);\n        for (let i = 0, len = bytes.length; i < len; i += 4) {\n          bytes[i + 0] = rgba[i + 3];\n          bytes[i + 1] = rgba[i + 0];\n          bytes[i + 2] = rgba[i + 1];\n          bytes[i + 3] = rgba[i + 2];\n        }\n        return bytes;\n      }\n      case ColorModel.rgb: {\n        const bytes = new Uint8Array(this._width * this._height * 3);\n        for (let i = 0, j = 0, len = bytes.length; j < len; i += 4, j += 3) {\n          bytes[j + 0] = rgba[i + 0];\n          bytes[j + 1] = rgba[i + 1];\n          bytes[j + 2] = rgba[i + 2];\n        }\n        return bytes;\n      }\n      case ColorModel.bgr: {\n        const bytes = new Uint8Array(this._width * this._height * 3);\n        for (let i = 0, j = 0, len = bytes.length; j < len; i += 4, j += 3) {\n          bytes[j + 0] = rgba[i + 2];\n          bytes[j + 1] = rgba[i + 1];\n          bytes[j + 2] = rgba[i + 0];\n        }\n        return bytes;\n      }\n      case ColorModel.luminance: {\n        const bytes = new Uint8Array(this._width * this._height);\n        for (let i = 0, len = this.length; i < len; ++i) {\n          bytes[i] = ColorUtils.getLuminance(this._data[i]);\n        }\n        return bytes;\n      }\n    }\n    throw new ImageError('Unknown color model');\n  }\n\n  /**\n   * Set all of the pixels of the image to the given [color].\n   */\n  public fill(color: number): MemoryImage {\n    this._data.fill(color);\n    return this;\n  }\n\n  /**\n   * Set all of the empty pixels (for png's) of the image to the given [color].\n   */\n  public fillBackground(color: number): void {\n    // Loop all pixels\n    for (let i = 0; i < this.length; i++) {\n      // Value 0 means null pixel\n      if (this._data[i] === 0) {\n        // Set the pixel to the given color\n        this._data[i] = color;\n      }\n    }\n  }\n\n  /**\n   * Add the colors of [other] to the pixels of this image.\n   */\n  public addImage(other: MemoryImage): MemoryImage {\n    const h = Math.min(this._height, other._height);\n    const w = Math.min(this._width, other._width);\n    for (let y = 0; y < h; ++y) {\n      for (let x = 0; x < w; ++x) {\n        const c1 = this.getPixel(x, y);\n        const r1 = ColorUtils.getRed(c1);\n        const g1 = ColorUtils.getGreen(c1);\n        const b1 = ColorUtils.getBlue(c1);\n        const a1 = ColorUtils.getAlpha(c1);\n\n        const c2 = other.getPixel(x, y);\n        const r2 = ColorUtils.getRed(c2);\n        const g2 = ColorUtils.getGreen(c2);\n        const b2 = ColorUtils.getBlue(c2);\n        const a2 = ColorUtils.getAlpha(c2);\n\n        this.setPixel(\n          x,\n          y,\n          ColorUtils.getColor(r1 + r2, g1 + g2, b1 + b2, a1 + a2)\n        );\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Subtract the colors of [other] from the pixels of this image.\n   */\n  public subtractImage(other: MemoryImage): MemoryImage {\n    const h = Math.min(this._height, other._height);\n    const w = Math.min(this._width, other._width);\n    for (let y = 0; y < h; ++y) {\n      for (let x = 0; x < w; ++x) {\n        const c1 = this.getPixel(x, y);\n        const r1 = ColorUtils.getRed(c1);\n        const g1 = ColorUtils.getGreen(c1);\n        const b1 = ColorUtils.getBlue(c1);\n        const a1 = ColorUtils.getAlpha(c1);\n\n        const c2 = other.getPixel(x, y);\n        const r2 = ColorUtils.getRed(c2);\n        const g2 = ColorUtils.getGreen(c2);\n        const b2 = ColorUtils.getBlue(c2);\n        const a2 = ColorUtils.getAlpha(c2);\n\n        this.setPixel(\n          x,\n          y,\n          ColorUtils.getColor(r1 - r2, g1 - g2, b1 - b2, a1 - a2)\n        );\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Multiply the colors of [other] with the pixels of this image.\n   */\n  public multiplyImage(other: MemoryImage): MemoryImage {\n    const h = Math.min(this._height, other._height);\n    const w = Math.min(this._width, other._width);\n    for (let y = 0; y < h; ++y) {\n      for (let x = 0; x < w; ++x) {\n        const c1 = this.getPixel(x, y);\n        const r1 = ColorUtils.getRed(c1);\n        const g1 = ColorUtils.getGreen(c1);\n        const b1 = ColorUtils.getBlue(c1);\n        const a1 = ColorUtils.getAlpha(c1);\n\n        const c2 = other.getPixel(x, y);\n        const r2 = ColorUtils.getRed(c2);\n        const g2 = ColorUtils.getGreen(c2);\n        const b2 = ColorUtils.getBlue(c2);\n        const a2 = ColorUtils.getAlpha(c2);\n\n        this.setPixel(\n          x,\n          y,\n          ColorUtils.getColor(r1 * r2, g1 * g2, b1 * b2, a1 * a2)\n        );\n      }\n    }\n    return this;\n  }\n\n  /**\n   * OR the colors of [other] to the pixels of this image.\n   */\n  public orImage(other: MemoryImage): MemoryImage {\n    const h = Math.min(this._height, other._height);\n    const w = Math.min(this._width, other._width);\n    for (let y = 0; y < h; ++y) {\n      for (let x = 0; x < w; ++x) {\n        const c1 = this.getPixel(x, y);\n        const r1 = ColorUtils.getRed(c1);\n        const g1 = ColorUtils.getGreen(c1);\n        const b1 = ColorUtils.getBlue(c1);\n        const a1 = ColorUtils.getAlpha(c1);\n\n        const c2 = other.getPixel(x, y);\n        const r2 = ColorUtils.getRed(c2);\n        const g2 = ColorUtils.getGreen(c2);\n        const b2 = ColorUtils.getBlue(c2);\n        const a2 = ColorUtils.getAlpha(c2);\n\n        this.setPixel(\n          x,\n          y,\n          ColorUtils.getColor(r1 | r2, g1 | g2, b1 | b2, a1 | a2)\n        );\n      }\n    }\n    return this;\n  }\n\n  /**\n   * AND the colors of [other] with the pixels of this image.\n   */\n  public andImage(other: MemoryImage): MemoryImage {\n    const h = Math.min(this._height, other._height);\n    const w = Math.min(this._width, other._width);\n    for (let y = 0; y < h; ++y) {\n      for (let x = 0; x < w; ++x) {\n        const c1 = this.getPixel(x, y);\n        const r1 = ColorUtils.getRed(c1);\n        const g1 = ColorUtils.getGreen(c1);\n        const b1 = ColorUtils.getBlue(c1);\n        const a1 = ColorUtils.getAlpha(c1);\n\n        const c2 = other.getPixel(x, y);\n        const r2 = ColorUtils.getRed(c2);\n        const g2 = ColorUtils.getGreen(c2);\n        const b2 = ColorUtils.getBlue(c2);\n        const a2 = ColorUtils.getAlpha(c2);\n\n        this.setPixel(\n          x,\n          y,\n          ColorUtils.getColor(r1 & r2, g1 & g2, b1 & b2, a1 & a2)\n        );\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Modula the colors of [other] with the pixels of this image.\n   */\n  public modImage(other: MemoryImage): MemoryImage {\n    const h = Math.min(this._height, other._height);\n    const w = Math.min(this._width, other._width);\n    for (let y = 0; y < h; ++y) {\n      for (let x = 0; x < w; ++x) {\n        const c1 = this.getPixel(x, y);\n        const r1 = ColorUtils.getRed(c1);\n        const g1 = ColorUtils.getGreen(c1);\n        const b1 = ColorUtils.getBlue(c1);\n        const a1 = ColorUtils.getAlpha(c1);\n\n        const c2 = other.getPixel(x, y);\n        const r2 = ColorUtils.getRed(c2);\n        const g2 = ColorUtils.getGreen(c2);\n        const b2 = ColorUtils.getBlue(c2);\n        const a2 = ColorUtils.getAlpha(c2);\n\n        this.setPixel(\n          x,\n          y,\n          ColorUtils.getColor(r1 % r2, g1 % g2, b1 % b2, a1 % a2)\n        );\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Get a pixel from the buffer. No range checking is done.\\\n   */\n  public getPixelByIndex(index: number): number {\n    return this._data[index];\n  }\n\n  /**\n   * Set a pixel in the buffer. No range checking is done.\n   */\n  public setPixelByIndex(index: number, color: number): void {\n    this._data[index] = color;\n  }\n\n  /**\n   * Get the buffer index for the [x], [y] pixel coordinates.\n   * No range checking is done.\n   */\n  public getBufferIndex(x: number, y: number): number {\n    return y * this._width + x;\n  }\n\n  /**\n   * Is the given [x], [y] pixel coordinates within the resolution of the image.\n   */\n  public boundsSafe(x: number, y: number): boolean {\n    return x >= 0 && x < this._width && y >= 0 && y < this._height;\n  }\n\n  /**\n   * Get the pixel from the given [x], [y] coordinate. Color is encoded in a\n   * Uint32 as #AABBGGRR. No range checking is done.\n   */\n  public getPixel(x: number, y: number): number {\n    const index = this.getBufferIndex(x, y);\n    return this._data[index];\n  }\n\n  /**\n   * Get the pixel from the given [x], [y] coordinate. Color is encoded in a\n   * Uint32 as #AABBGGRR. If the pixel coordinates are out of bounds, 0 is\n   * returned.\n   */\n  public getPixelSafe(x: number, y: number): number {\n    const index = this.getBufferIndex(x, y);\n    return this.boundsSafe(x, y) ? this._data[index] : 0;\n  }\n\n  /**\n   * Get the pixel using the given [interpolation] type for non-integer pixel\n   * coordinates.\n   */\n  public getPixelInterpolate(\n    fx: number,\n    fy: number,\n    interpolation: Interpolation = Interpolation.linear\n  ): number {\n    if (interpolation === Interpolation.cubic) {\n      return this.getPixelCubic(fx, fy);\n    } else if (interpolation === Interpolation.linear) {\n      return this.getPixelLinear(fx, fy);\n    }\n    return this.getPixelSafe(Math.trunc(fx), Math.trunc(fy));\n  }\n\n  /**\n   * Get the pixel using linear interpolation for non-integer pixel\n   * coordinates.\n   */\n  public getPixelLinear(fx: number, fy: number): number {\n    const x = Math.trunc(fx) - (fx >= 0 ? 0 : 1);\n    const nx = x + 1;\n    const y = Math.trunc(fy) - (fy >= 0 ? 0 : 1);\n    const ny = y + 1;\n    const dx = fx - x;\n    const dy = fy - y;\n\n    const linear = (\n      icc: number,\n      inc: number,\n      icn: number,\n      inn: number\n    ): number => {\n      return Math.trunc(\n        icc + dx * (inc - icc + dy * (icc + inn - icn - inc)) + dy * (icn - icc)\n      );\n    };\n\n    const icc = this.getPixelSafe(x, y);\n    const icn = ny >= this._height ? icc : this.getPixelSafe(x, ny);\n    const inc = nx >= this._width ? icc : this.getPixelSafe(nx, y);\n    const inn =\n      nx >= this._width || ny >= this._height ? icc : this.getPixelSafe(nx, ny);\n\n    return ColorUtils.getColor(\n      linear(\n        ColorUtils.getRed(icc),\n        ColorUtils.getRed(inc),\n        ColorUtils.getRed(icn),\n        ColorUtils.getRed(inn)\n      ),\n      linear(\n        ColorUtils.getGreen(icc),\n        ColorUtils.getGreen(inc),\n        ColorUtils.getGreen(icn),\n        ColorUtils.getGreen(inn)\n      ),\n      linear(\n        ColorUtils.getBlue(icc),\n        ColorUtils.getBlue(inc),\n        ColorUtils.getBlue(icn),\n        ColorUtils.getBlue(inn)\n      ),\n      linear(\n        ColorUtils.getAlpha(icc),\n        ColorUtils.getAlpha(inc),\n        ColorUtils.getAlpha(icn),\n        ColorUtils.getAlpha(inn)\n      )\n    );\n  }\n\n  /**\n   * Get the pixel using cubic interpolation for non-integer pixel\n   * coordinates.\n   */\n  public getPixelCubic(fx: number, fy: number): number {\n    const x = Math.trunc(fx) - (fx >= 0.0 ? 0 : 1);\n    const px = x - 1;\n    const nx = x + 1;\n    const ax = x + 2;\n    const y = Math.trunc(fy) - (fy >= 0.0 ? 0 : 1);\n    const py = y - 1;\n    const ny = y + 1;\n    const ay = y + 2;\n\n    const dx = fx - x;\n    const dy = fy - y;\n\n    const cubic = (\n      dx: number,\n      ipp: number,\n      icp: number,\n      inp: number,\n      iap: number\n    ): number => {\n      return (\n        icp +\n        0.5 *\n          (dx * (-ipp + inp) +\n            (dx * (dx * (2 * ipp)) - 5 * icp + 4 * inp - iap) +\n            dx * (dx * (dx * (-ipp + 3 * icp - 3 * inp + iap))))\n      );\n    };\n\n    const icc = this.getPixelSafe(x, y);\n\n    const ipp = px < 0 || py < 0 ? icc : this.getPixelSafe(px, py);\n    const icp = px < 0 ? icc : this.getPixelSafe(x, py);\n    const inp = py < 0 || nx >= this._width ? icc : this.getPixelSafe(nx, py);\n    const iap = ax >= this._width || py < 0 ? icc : this.getPixelSafe(ax, py);\n\n    const ip0 = cubic(\n      dx,\n      ColorUtils.getRed(ipp),\n      ColorUtils.getRed(icp),\n      ColorUtils.getRed(inp),\n      ColorUtils.getRed(iap)\n    );\n\n    const ip1 = cubic(\n      dx,\n      ColorUtils.getGreen(ipp),\n      ColorUtils.getGreen(icp),\n      ColorUtils.getGreen(inp),\n      ColorUtils.getGreen(iap)\n    );\n    const ip2 = cubic(\n      dx,\n      ColorUtils.getBlue(ipp),\n      ColorUtils.getBlue(icp),\n      ColorUtils.getBlue(inp),\n      ColorUtils.getBlue(iap)\n    );\n    const ip3 = cubic(\n      dx,\n      ColorUtils.getAlpha(ipp),\n      ColorUtils.getAlpha(icp),\n      ColorUtils.getAlpha(inp),\n      ColorUtils.getAlpha(iap)\n    );\n\n    const ipc = px < 0 ? icc : this.getPixelSafe(px, y);\n    const inc = nx >= this._width ? icc : this.getPixelSafe(nx, y);\n    const iac = ax >= this._width ? icc : this.getPixelSafe(ax, y);\n\n    const Ic0 = cubic(\n      dx,\n      ColorUtils.getRed(ipc),\n      ColorUtils.getRed(icc),\n      ColorUtils.getRed(inc),\n      ColorUtils.getRed(iac)\n    );\n    const Ic1 = cubic(\n      dx,\n      ColorUtils.getGreen(ipc),\n      ColorUtils.getGreen(icc),\n      ColorUtils.getGreen(inc),\n      ColorUtils.getGreen(iac)\n    );\n    const Ic2 = cubic(\n      dx,\n      ColorUtils.getBlue(ipc),\n      ColorUtils.getBlue(icc),\n      ColorUtils.getBlue(inc),\n      ColorUtils.getBlue(iac)\n    );\n    const Ic3 = cubic(\n      dx,\n      ColorUtils.getAlpha(ipc),\n      ColorUtils.getAlpha(icc),\n      ColorUtils.getAlpha(inc),\n      ColorUtils.getAlpha(iac)\n    );\n\n    const ipn = px < 0 || ny >= this._height ? icc : this.getPixelSafe(px, ny);\n    const icn = ny >= this._height ? icc : this.getPixelSafe(x, ny);\n    const inn =\n      nx >= this._width || ny >= this._height ? icc : this.getPixelSafe(nx, ny);\n    const ian =\n      ax >= this._width || ny >= this._height ? icc : this.getPixelSafe(ax, ny);\n\n    const in0 = cubic(\n      dx,\n      ColorUtils.getRed(ipn),\n      ColorUtils.getRed(icn),\n      ColorUtils.getRed(inn),\n      ColorUtils.getRed(ian)\n    );\n    const in1 = cubic(\n      dx,\n      ColorUtils.getGreen(ipn),\n      ColorUtils.getGreen(icn),\n      ColorUtils.getGreen(inn),\n      ColorUtils.getGreen(ian)\n    );\n    const in2 = cubic(\n      dx,\n      ColorUtils.getBlue(ipn),\n      ColorUtils.getBlue(icn),\n      ColorUtils.getBlue(inn),\n      ColorUtils.getBlue(ian)\n    );\n    const in3 = cubic(\n      dx,\n      ColorUtils.getAlpha(ipn),\n      ColorUtils.getAlpha(icn),\n      ColorUtils.getAlpha(inn),\n      ColorUtils.getAlpha(ian)\n    );\n\n    const ipa = px < 0 || ay >= this._height ? icc : this.getPixelSafe(px, ay);\n    const ica = ay >= this._height ? icc : this.getPixelSafe(x, ay);\n    const ina =\n      nx >= this._width || ay >= this._height ? icc : this.getPixelSafe(nx, ay);\n    const iaa =\n      ax >= this._width || ay >= this._height ? icc : this.getPixelSafe(ax, ay);\n\n    const ia0 = cubic(\n      dx,\n      ColorUtils.getRed(ipa),\n      ColorUtils.getRed(ica),\n      ColorUtils.getRed(ina),\n      ColorUtils.getRed(iaa)\n    );\n    const ia1 = cubic(\n      dx,\n      ColorUtils.getGreen(ipa),\n      ColorUtils.getGreen(ica),\n      ColorUtils.getGreen(ina),\n      ColorUtils.getGreen(iaa)\n    );\n    const ia2 = cubic(\n      dx,\n      ColorUtils.getBlue(ipa),\n      ColorUtils.getBlue(ica),\n      ColorUtils.getBlue(ina),\n      ColorUtils.getBlue(iaa)\n    );\n    const ia3 = cubic(\n      dx,\n      ColorUtils.getAlpha(ipa),\n      ColorUtils.getAlpha(ica),\n      ColorUtils.getAlpha(ina),\n      ColorUtils.getAlpha(iaa)\n    );\n\n    const c0 = cubic(dy, ip0, Ic0, in0, ia0);\n    const c1 = cubic(dy, ip1, Ic1, in1, ia1);\n    const c2 = cubic(dy, ip2, Ic2, in2, ia2);\n    const c3 = cubic(dy, ip3, Ic3, in3, ia3);\n\n    return ColorUtils.getColor(\n      Math.trunc(c0),\n      Math.trunc(c1),\n      Math.trunc(c2),\n      Math.trunc(c3)\n    );\n  }\n\n  /**\n   * Set the pixel at the given [x], [y] coordinate to the [color].\n   * No range checking is done.\n   */\n  public setPixel(x: number, y: number, color: number): void {\n    const index = this.getBufferIndex(x, y);\n    this._data[index] = color;\n  }\n\n  /**\n   * Set the pixel at the given [x], [y] coordinate to the [color].\n   * If the pixel coordinates are out of bounds, nothing is done.\n   */\n  public setPixelSafe(x: number, y: number, color: number): void {\n    if (this.boundsSafe(x, y)) {\n      const index = this.getBufferIndex(x, y);\n      this._data[index] = color;\n    }\n  }\n\n  /**\n   * Set the pixel at the given [x], [y] coordinate to the color\n   * [r], [g], [b], [a].\n   *\n   * This simply replaces the existing color, it does not do any alpha\n   * blending. Use [drawPixel] for that. No range checking is done.\n   */\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a = 0xff\n  ): void {\n    const index = this.getBufferIndex(x, y);\n    this._data[index] = ColorUtils.getColor(r, g, b, a);\n  }\n\n  /**\n   * Return the average gray value of the image.\n   */\n  public getWhiteBalance(asDouble = false) {\n    const len = this._data.length;\n    let r = 0.0;\n    let g = 0.0;\n    let b = 0.0;\n    let t = 1;\n    for (let i = 0; i < len; ++i) {\n      r += (ColorUtils.getRed(this._data[i]) - r) / t;\n      g += (ColorUtils.getGreen(this._data[i]) - g) / t;\n      b += (ColorUtils.getBlue(this._data[i]) - b) / t;\n      ++t;\n    }\n    const averageGray = (r + g + b) / 3.0;\n    return asDouble ? averageGray : Math.trunc(averageGray);\n  }\n\n  public addTextData(data: Map<string, string>): void {\n    if (this._textData === undefined) {\n      this._textData = new Map<string, string>();\n    }\n    for (const [key, value] of data) {\n      this._textData.set(key, value);\n    }\n  }\n}\n", "/** @format */\n\nimport { ImageError } from '../error/image-error';\n\nexport abstract class TextCodec {\n  public static readonly utf8Decoder = new TextDecoder('utf8');\n  public static readonly latin1Decoder = new TextDecoder('latin1');\n\n  public static getCodePoints(str: string): Uint8Array {\n    const array = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      const codePoint = str.codePointAt(i);\n      if (codePoint !== undefined) {\n        if (0 <= codePoint && codePoint < 256) {\n          array[i] = codePoint;\n        } else {\n          throw new ImageError(\n            `Error encoding text \"${str}\": unknown character code point ${codePoint}`\n          );\n        }\n      } else {\n        throw new ImageError(`Error encoding text \"${str}\"`);\n      }\n    }\n    return array;\n  }\n}\n", "/** @format */\n\nexport type TypedArray =\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Uint8Array\n  | Uint16Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\nexport type BufferEncoding =\n  | 'ascii'\n  | 'utf8'\n  | 'utf-8'\n  | 'utf16le'\n  | 'ucs2'\n  | 'ucs-2'\n  | 'base64'\n  | 'latin1'\n  | 'binary'\n  | 'hex';\n\nexport type CompressionLevel =\n  | -1\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | undefined;\n", "/** @format */\n\nimport { ColorUtils } from '../common/color-utils';\nimport { MemoryImage } from '../common/memory-image';\n\n/**\n * Draw a single pixel into the image, applying alpha and opacity blending.\n */\nexport function drawPixel(\n  image: MemoryImage,\n  x: number,\n  y: number,\n  color: number,\n  opacity = 0xff\n): MemoryImage {\n  if (image.boundsSafe(x, y)) {\n    const index = image.getBufferIndex(x, y);\n    const dst = image.getPixelByIndex(index);\n    image.setPixelByIndex(\n      index,\n      ColorUtils.alphaBlendColors(dst, color, opacity)\n    );\n  }\n  return image;\n}\n", "/** @format */\n\n/**\n * An error thrown when some functionality has not yet been implemented.\n */\nexport class NotImplementedError extends Error {\n  toString(): string {\n    return this.message.length > 0\n      ? `NotImplementedError: ${this.message}`\n      : 'NotImplementedError';\n  }\n}\n", "/** @format */\n\nimport { BitOperators } from '../common/bit-operators';\n\n/**\n * A 16-bit floating-point number, used by high-dynamic-range image formats\n * as a more efficient storage for floating-point values that don't require\n * full 32-bit precision. A list of Half floats can be stored in a [Uint16List],\n * and converted to a double using the [HalfToDouble] static method.\n *\n * This class is derived from the OpenEXR library.\n */\nexport class Half {\n  private static toFloatUint32: Uint32Array;\n  private static toFloatFloat32: Float32Array;\n  private static eLut: Uint16Array;\n\n  static {\n    Half.toFloatUint32 = new Uint32Array(1 << 16);\n    Half.toFloatFloat32 = new Float32Array(Half.toFloatUint32.buffer);\n    Half.eLut = new Uint16Array(1 << 9);\n\n    // Init eLut\n    for (let i = 0; i < 0x100; i++) {\n      const e = (i & 0x0ff) - (127 - 15);\n      if (e <= 0 || e >= 30) {\n        // Special case\n        Half.eLut[i] = 0;\n        Half.eLut[i | 0x100] = 0;\n      } else {\n        // Common case - normalized half, no exponent overflow possible\n        Half.eLut[i] = e << 10;\n        Half.eLut[i | 0x100] = (e << 10) | 0x8000;\n      }\n    }\n\n    // Init toFloat\n    const iMax = 1 << 16;\n    for (let i = 0; i < iMax; i++) {\n      Half.toFloatUint32[i] = Half.halfToFloat(i);\n    }\n  }\n\n  private bits: number;\n\n  constructor(bits: number) {\n    this.bits = bits;\n  }\n\n  private static convert(i: number): number {\n    // Our floating point number, f, is represented by the bit\n    // pattern in integer i. Disassemble that bit pattern into\n    // the sign, s, the exponent, e, and the significand, m.\n    // Shift s into the position where it will go in in the\n    // resulting half number.\n    // Adjust e, accounting for the different exponent bias\n    // of float and half (127 versus 15).\n    const s = (i >> 16) & 0x00008000;\n    let e = ((i >> 23) & 0x000000ff) - (127 - 15);\n    let m = i & 0x007fffff;\n\n    // Now reassemble s, e and m into a half:\n    if (e <= 0) {\n      if (e < -10) {\n        // E is less than -10. The absolute value of f is\n        // less than HALF_MIN (f may be a small normalized\n        // float, a denormalized float or a zero).\n        //\n        // We convert f to a half zero with the same sign as f.\n        return s;\n      }\n\n      // E is between -10 and 0. F is a normalized float\n      // whose magnitude is less than HALF_NRM_MIN.\n      //\n      // We convert f to a denormalized half.\n\n      // Add an explicit leading 1 to the significand.\n\n      m |= 0x00800000;\n\n      // Round to m to the nearest (10+e)-bit value (with e between\n      // -10 and 0); in case of a tie, round to the nearest even value.\n      //\n      // Rounding may cause the significand to overflow and make\n      // our number normalized. Because of the way a half's bits\n      // are laid out, we don't have to treat this case separately;\n      // the code below will handle it correctly.\n\n      const t = 14 - e;\n      const a = (1 << (t - 1)) - 1;\n      const b = (m >> t) & 1;\n\n      m = (m + a + b) >> t;\n\n      // Assemble the half from s, e (zero) and m.\n      return s | m;\n    } else if (e === 0xff - (127 - 15)) {\n      if (m === 0) {\n        // F is an infinity; convert f to a half\n        // infinity with the same sign as f.\n        return s | 0x7c00;\n      } else {\n        // F is a NAN; we produce a half NAN that preserves\n        // the sign bit and the 10 leftmost bits of the\n        // significand of f, with one exception: If the 10\n        // leftmost bits are all zero, the NAN would turn\n        // into an infinity, so we have to set at least one\n        // bit in the significand.\n\n        m >>= 13;\n        return s | 0x7c00 | m | (m === 0 ? 1 : 0);\n      }\n    } else {\n      // E is greater than zero. F is a normalized float.\n      // We try to convert f to a normalized half.\n\n      // Round to m to the nearest 10-bit value. In case of\n      // a tie, round to the nearest even value.\n      m = m + 0x00000fff + ((m >> 13) & 1);\n\n      if ((m & 0x00800000) !== 0) {\n        // Overflow in significand,\n        m = 0;\n        // Adjust exponent\n        e += 1;\n      }\n\n      // Handle exponent overflow\n\n      if (e > 30) {\n        // If this returns, the half becomes an\n        // infinity with the same sign as f.\n        return s | 0x7c00;\n      }\n\n      // Assemble the half from s, e and m.\n      return s | (e << 10) | (m >> 13);\n    }\n  }\n\n  private static halfToFloat(y: number): number {\n    const s = (y >> 15) & 0x00000001;\n    let e = (y >> 10) & 0x0000001f;\n    let m = y & 0x000003ff;\n\n    if (e === 0) {\n      if (m === 0) {\n        // Plus or minus zero\n        return s << 31;\n      } else {\n        // Denormalized number -- re-normalize it\n        while ((m & 0x00000400) === 0) {\n          m <<= 1;\n          e -= 1;\n        }\n\n        e += 1;\n        m &= ~0x00000400;\n      }\n    } else if (e === 31) {\n      if (m === 0) {\n        // Positive or negative infinity\n        return (s << 31) | 0x7f800000;\n      } else {\n        // Nan -- preserve sign and significand bits\n        return (s << 31) | 0x7f800000 | (m << 13);\n      }\n    }\n\n    // Normalized number\n    e += 127 - 15;\n    m <<= 13;\n\n    // Assemble s, e and m.\n    return (s << 31) | (e << 23) | m;\n  }\n\n  private static fromBits(bits: number) {\n    return new Half(bits);\n  }\n\n  public static halfToDouble(bits: number): number {\n    return this.toFloatFloat32[bits];\n  }\n\n  public static doubleToHalf(n: number): number {\n    const f = n;\n    const xi = BitOperators.toUint32(f);\n    if (f === 0.0) {\n      // Common special case - zero.\n      // Preserve the zero's sign bit.\n      return xi >> 16;\n    }\n\n    // We extract the combined sign and exponent, e, from our\n    // floating-point number, f. Then we convert e to the sign\n    // and exponent of the half number via a table lookup.\n    //\n    // For the most common case, where a normalized half is produced,\n    // the table lookup returns a non-zero value; in this case, all\n    // we have to do is round f's significand to 10 bits and combine\n    // the result with e.\n    //\n    // For all other cases (overflow, zeroes, denormalized numbers\n    // resulting from underflow, infinities and NANs), the table\n    // lookup returns zero, and we call a longer, non-inline function\n    // to do the float-to-half conversion.\n    let e = (xi >> 23) & 0x000001ff;\n\n    e = this.eLut[e];\n\n    if (e !== 0) {\n      // Simple case - round the significand, m, to 10\n      // bits and combine it with the sign and exponent.\n      const m = xi & 0x007fffff;\n      return e + ((m + 0x00000fff + ((m >> 13) & 1)) >> 13);\n    }\n\n    // Difficult case - call a function.\n    return this.convert(xi);\n  }\n\n  /**\n   * Returns +infinity.\n   */\n  public static positiveInfinity(): Half {\n    return Half.fromBits(0x7c00);\n  }\n\n  /**\n   * Returns -infinity.\n   */\n  public static negativeInfinity(): Half {\n    return Half.fromBits(0xfc00);\n  }\n\n  /**\n   * Returns a NAN with the bit pattern 0111111111111111.\n   */\n  public static qNan(): Half {\n    return Half.fromBits(0x7fff);\n  }\n\n  /**\n   * Returns a NAN with the bit pattern 0111110111111111.\n   */\n  public static sNan(): Half {\n    return Half.fromBits(0x7dff);\n  }\n\n  public toDouble(): number {\n    return Half.toFloatFloat32[this.bits];\n  }\n\n  /**\n   * Unary minus\n   */\n  public unaryMinus(): Half {\n    return Half.fromBits(this.bits ^ 0x8000);\n  }\n\n  /**\n   * Addition operator for Half or num left operands.\n   */\n  public add(other: Half | number): Half {\n    let d = 0;\n    if (other instanceof Half) {\n      d = other.toDouble();\n    } else if (typeof other === 'number') {\n      d = other;\n    }\n    const bits = Half.doubleToHalf(this.toDouble() + d);\n    return new Half(bits);\n  }\n\n  /**\n   * Subtraction operator for Half or num left operands.\n   */\n  public subtract(other: Half | number): Half {\n    let d = 0;\n    if (other instanceof Half) {\n      d = other.toDouble();\n    } else if (typeof other === 'number') {\n      d = other;\n    }\n    const bits = Half.doubleToHalf(this.toDouble() - d);\n    return new Half(bits);\n  }\n\n  /**\n   * Multiplication operator for Half or num left operands.\n   */\n  public multiply(other: Half | number): Half {\n    let d = 0;\n    if (other instanceof Half) {\n      d = other.toDouble();\n    } else if (typeof other === 'number') {\n      d = other;\n    }\n    const bits = Half.doubleToHalf(this.toDouble() * d);\n    return new Half(bits);\n  }\n\n  /**\n   * Division operator for Half or num left operands.\n   */\n  public divide(other: Half | number): Half {\n    let d = 0;\n    if (other instanceof Half) {\n      d = other.toDouble();\n    } else if (typeof other === 'number') {\n      d = other;\n    }\n    const bits = Half.doubleToHalf(this.toDouble() / d);\n    return new Half(bits);\n  }\n\n  /**\n   * Round to n-bit precision (n should be between 0 and 10).\n   * After rounding, the significand's 10-n least significant\n   * bits will be zero.\n   */\n  public round(n: number): Half {\n    if (n >= 10) {\n      return this;\n    }\n\n    // Disassemble h into the sign, s,\n    // and the combined exponent and significand, e.\n    const s = this.bits & 0x8000;\n    let e = this.bits & 0x7fff;\n\n    // Round the exponent and significand to the nearest value\n    // where ones occur only in the (10-n) most significant bits.\n    // Note that the exponent adjusts automatically if rounding\n    // up causes the significand to overflow.\n\n    e >>= 9 - n;\n    e += e & 1;\n    e <<= 9 - n;\n\n    // Check for exponent overflow.\n    if (e >= 0x7c00) {\n      // Overflow occurred -- truncate instead of rounding.\n      e = this.bits;\n      e >>= 10 - n;\n      e <<= 10 - n;\n    }\n\n    // Put the original sign bit back.\n\n    return Half.fromBits(s | e);\n  }\n\n  /**\n   * Returns true if h is a normalized number, a denormalized number or zero.\n   */\n  public isFinite(): boolean {\n    const e = (this.bits >> 10) & 0x001f;\n    return e < 31;\n  }\n\n  /**\n   * Returns true if h is a normalized number.\n   */\n  public isNormalized(): boolean {\n    const e = (this.bits >> 10) & 0x001f;\n    return e > 0 && e < 31;\n  }\n\n  /**\n   * Returns true if h is a denormalized number.\n   */\n  public isDenormalized(): boolean {\n    const e = (this.bits >> 10) & 0x001f;\n    const m = this.bits & 0x3ff;\n    return e === 0 && m !== 0;\n  }\n\n  /**\n   * Returns true if h is zero.\n   */\n  public isZero(): boolean {\n    return (this.bits & 0x7fff) === 0;\n  }\n\n  /**\n   * Returns true if h is a NAN.\n   */\n  public isNan(): boolean {\n    const e = (this.bits >> 10) & 0x001f;\n    const m = this.bits & 0x3ff;\n    return e === 31 && m !== 0;\n  }\n\n  /**\n   * Returns true if h is a positive or a negative infinity.\n   */\n  public isInfinity(): boolean {\n    const e = (this.bits >> 10) & 0x001f;\n    const m = this.bits & 0x3ff;\n    return e === 31 && m === 0;\n  }\n\n  /**\n   * Returns true if the sign bit of h is set (negative).\n   */\n  public isNegative(): boolean {\n    return (this.bits & 0x8000) !== 0;\n  }\n\n  public getBits(): number {\n    return this.bits;\n  }\n\n  public setBits(bits: number): void {\n    this.bits = bits;\n  }\n}\n", "/** @format */\n\nimport { ListUtils } from '../common/list-utils';\nimport { TypedArray } from '../common/typings';\nimport { NotImplementedError } from '../error/not-implemented-error';\nimport { Half } from './half';\n\nexport interface HdrSliceInitOptions {\n  name: string;\n  width: number;\n  height: number;\n  format: number;\n  bitsPerSample: number;\n  data?: TypedArray;\n}\n\n/**\n * A slice is the data for an image framebuffer for a single channel.\n */\nexport class HdrSlice {\n  public static UINT = 0;\n  public static INT = 1;\n  public static FLOAT = 3;\n\n  /**\n   * [data] will be one of the type data lists, depending on the [type] and\n   * [bitsPerSample]. 16-bit FLOAT slices will be stored in a [Uint16List].\n   */\n  private readonly data: TypedArray;\n\n  private readonly _name: string;\n  public get name(): string {\n    return this._name;\n  }\n\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Indicates the type of data stored by the slice, either [HdrSlice.INT],\n   * [HdrSlice.FLOAT], or [HdrSlice.UINT].\n   */\n  private readonly _format: number;\n  public get format(): number {\n    return this._format;\n  }\n\n  /**\n   * How many bits per sample, either 8, 16, 32, or 64.\n   */\n  private readonly _bitsPerSample: number;\n  public get bitsPerSample(): number {\n    return this._bitsPerSample;\n  }\n\n  private get maxIntSize(): number {\n    let v = 0xffffffff;\n    if (this._bitsPerSample === 8) {\n      v = 0xff;\n    } else if (this._bitsPerSample === 16) {\n      v = 0xffff;\n    }\n    if (this._format === HdrSlice.INT) {\n      v -= 1;\n    }\n    return v;\n  }\n\n  /**\n   * Does this channel store floating-point data?\n   */\n  public get isFloat(): boolean {\n    return this._format === HdrSlice.FLOAT;\n  }\n\n  constructor(options: HdrSliceInitOptions) {\n    this._name = options.name;\n    this._width = options.width;\n    this._height = options.height;\n    this._format = options.format;\n    this._bitsPerSample = options.bitsPerSample;\n    this.data =\n      options.data ??\n      HdrSlice.allocateDataForType(\n        options.width * options.height,\n        options.format,\n        options.bitsPerSample\n      );\n  }\n\n  private static allocateDataForType(\n    size: number,\n    type: number,\n    bitsPerSample: number\n  ): TypedArray {\n    switch (type) {\n      case HdrSlice.INT:\n        if (bitsPerSample === 8) {\n          return new Int8Array(size);\n        } else if (bitsPerSample === 16) {\n          return new Int16Array(size);\n        } else if (bitsPerSample === 32) {\n          return new Int32Array(size);\n        }\n        break;\n      case HdrSlice.UINT:\n        if (bitsPerSample === 8) {\n          return new Uint8Array(size);\n        } else if (bitsPerSample === 16) {\n          return new Uint16Array(size);\n        } else if (bitsPerSample === 32) {\n          return new Uint32Array(size);\n        }\n        break;\n      case HdrSlice.FLOAT:\n        if (bitsPerSample === 16) {\n          return new Uint16Array(size);\n        } else if (bitsPerSample === 32) {\n          return new Float32Array(size);\n        } else if (bitsPerSample === 64) {\n          return new Float64Array(size);\n        }\n        break;\n    }\n    throw new NotImplementedError();\n  }\n\n  /**\n   * Create a copy of the [other] HdrSlice.\n   */\n  public static from(other: HdrSlice): HdrSlice {\n    return new HdrSlice({\n      name: other._name,\n      width: other._width,\n      height: other._height,\n      format: other._format,\n      bitsPerSample: other._bitsPerSample,\n      data: ListUtils.copy(other.data),\n    });\n  }\n\n  /**\n   * Get the raw bytes of the data buffer.\n   */\n  public getBytes(): Uint8Array {\n    return new Uint8Array(this.data.buffer);\n  }\n\n  /**\n   * Get the float value of the sample at the coordinates [x],[y].\n   * [Half] samples are converted to double.\n   */\n  public getFloat(x: number, y: number): number {\n    const pi = y * this._width + x;\n    if (this._format === HdrSlice.INT || this._format === HdrSlice.UINT) {\n      return Math.trunc(this.data[pi]) / this.maxIntSize;\n    }\n    const s =\n      this._format === HdrSlice.FLOAT && this._bitsPerSample === 16\n        ? Half.halfToDouble(this.data[pi])\n        : this.data[pi];\n    return s;\n  }\n\n  /**\n   * Set the float value of the sample at the coordinates [x],[y] for\n   * [FLOAT] slices.\n   */\n  public setFloat(x: number, y: number, v: number): void {\n    if (this._format !== HdrSlice.FLOAT) {\n      return;\n    }\n    const pi = y * this._width + x;\n    if (this._bitsPerSample === 16) {\n      this.data[pi] = Half.doubleToHalf(v);\n    } else {\n      this.data[pi] = v;\n    }\n  }\n\n  /**\n   * Get the int value of the sample at the coordinates [x],[y].\n   * An exception will occur if the slice stores FLOAT data.\n   */\n  public getInt(x: number, y: number): number {\n    const pi = y * this._width + x;\n    return Math.trunc(this.data[pi]);\n  }\n\n  /**\n   * Set the int value of the sample at the coordinates [x],[y] for [INT] and\n   * [UINT] slices.\n   */\n  public setInt(x: number, y: number, v: number): void {\n    const pi = y * this._width + x;\n    this.data[pi] = Math.trunc(v);\n  }\n}\n", "/** @format */\n\nimport { MemoryImage } from '../common/memory-image';\nimport { RgbChannelSet } from '../common/rgb-channel-set';\nimport { HdrSlice } from './hdr-slice';\n\n/**\n * A high dynamic range RGBA image stored in 16-bit or 32-bit floating-point\n * channels.\n */\nexport class HdrImage {\n  /**\n   * Red value of a sample\n   */\n  private static R = 'R';\n  /**\n   * Green value of a sample\n   */\n  private static G = 'G';\n  /**\n   * Blue value of a sample\n   */\n  private static B = 'B';\n  /**\n   * Alpha/opacity\n   */\n  private static A = 'A';\n  /**\n   * Distance of the front of a sample from the viewer\n   */\n  private static Z = 'Z';\n\n  private readonly slices: Map<string, HdrSlice> = new Map<string, HdrSlice>();\n\n  private red?: HdrSlice;\n\n  private green?: HdrSlice;\n\n  private blue?: HdrSlice;\n\n  private alpha?: HdrSlice;\n\n  private depth?: HdrSlice;\n\n  /**\n   * Does the image have any color channels?\n   */\n  get hasColor(): boolean {\n    return (\n      this.red !== undefined ||\n      this.green !== undefined ||\n      this.blue !== undefined\n    );\n  }\n\n  /**\n   * Does the image have an alpha channel?\n   */\n  get hasAlpha(): boolean {\n    return this.alpha !== undefined;\n  }\n\n  /**\n   * Does the image have a depth channel?\n   */\n  get hasDepth(): boolean {\n    return this.depth !== undefined;\n  }\n\n  /**\n   * The width of the framebuffer.\n   */\n  get width(): number {\n    if (this.slices.size > 0) {\n      const firstSlice = this.slices.values().next().value as HdrSlice;\n      return firstSlice.width;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * The height of the framebuffer.\n   */\n  get height(): number {\n    if (this.slices.size > 0) {\n      const firstSlice = this.slices.values().next().value as HdrSlice;\n      return firstSlice.height;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * The number of bits per sample.\n   */\n  get bitsPerSample(): number {\n    if (this.red !== undefined) {\n      return this.red.bitsPerSample;\n    } else {\n      if (this.slices.size > 0) {\n        const firstSlice = this.slices.values().next().value as HdrSlice;\n        return firstSlice.bitsPerSample;\n      } else {\n        return 0;\n      }\n    }\n  }\n\n  get sampleFormat(): number {\n    if (this.red !== undefined) {\n      return this.red.format;\n    } else {\n      if (this.slices.size > 0) {\n        const firstSlice = this.slices.values().next().value as HdrSlice;\n        return firstSlice.format;\n      } else {\n        return 0;\n      }\n    }\n  }\n\n  /**\n   * The number of channels used by the image\n   */\n  get numberOfChannels(): number {\n    return this.slices.size;\n  }\n\n  /**\n   * Create an RGB[A] image.\n   */\n  public static create(\n    width: number,\n    height: number,\n    channels: number,\n    type: number,\n    bitsPerSample: number\n  ): HdrImage {\n    const image = new HdrImage();\n    if (0 <= channels && channels <= 4) {\n      const channelList = [HdrImage.R, HdrImage.G, HdrImage.B, HdrImage.A];\n      for (let i = 0; i < channels; ++i) {\n        image.addChannel(\n          new HdrSlice({\n            name: channelList[i],\n            width: width,\n            height: height,\n            format: type,\n            bitsPerSample: bitsPerSample,\n          })\n        );\n      }\n      return image;\n    } else {\n      return image;\n    }\n  }\n\n  /**\n   * Create a copy of the [other] HdrImage.\n   */\n  public static from(other: HdrImage): HdrImage {\n    const image = new HdrImage();\n    for (const [, value] of other.slices) {\n      image.addChannel(HdrSlice.from(value));\n    }\n    return image;\n  }\n\n  /**\n   * Create an HDR image from a LDR [Image] by transforming the channel values\n   * to the range [0, 1].\n   */\n  public static fromImage(\n    other: MemoryImage,\n    type: number = HdrSlice.FLOAT,\n    bitsPerSample = 16\n  ): HdrImage {\n    const image = new HdrImage();\n    image.addChannel(\n      new HdrSlice({\n        name: HdrImage.R,\n        width: other.width,\n        height: other.height,\n        format: type,\n        bitsPerSample: bitsPerSample,\n      })\n    );\n    image.addChannel(\n      new HdrSlice({\n        name: HdrImage.G,\n        width: other.width,\n        height: other.height,\n        format: type,\n        bitsPerSample: bitsPerSample,\n      })\n    );\n    image.addChannel(\n      new HdrSlice({\n        name: HdrImage.B,\n        width: other.width,\n        height: other.height,\n        format: type,\n        bitsPerSample: bitsPerSample,\n      })\n    );\n    if (other.rgbChannelSet === RgbChannelSet.rgba) {\n      image.addChannel(\n        new HdrSlice({\n          name: HdrImage.A,\n          width: other.width,\n          height: other.height,\n          format: type,\n          bitsPerSample: bitsPerSample,\n        })\n      );\n    }\n    const rgb = other.getBytes();\n    for (let y = 0, si = 0; y < other.height; ++y) {\n      for (let x = 0; x < other.width; ++x) {\n        image.setRed(x, y, rgb[si++] / 255);\n        image.setGreen(x, y, rgb[si++] / 255);\n        image.setBlue(x, y, rgb[si++] / 255);\n        if (image.alpha !== undefined) {\n          image.setAlpha(x, y, rgb[si++] / 255);\n        }\n      }\n    }\n    return image;\n  }\n\n  /**\n   * Get the value of the red channel at the given pixel coordinates [x], [y].\n   */\n  public getRed(x: number, y: number): number {\n    if (this.red !== undefined) {\n      return this.red.isFloat ? this.red.getFloat(x, y) : this.red.getInt(x, y);\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Set the value of the red channel at the given pixel coordinates [x], [y].\n   */\n  public setRed(x: number, y: number, c: number): void {\n    if (this.red !== undefined) {\n      if (this.red.isFloat) {\n        this.red.setFloat(x, y, c);\n      } else {\n        this.red.setInt(x, y, c);\n      }\n    }\n  }\n\n  public setRedInt(x: number, y: number, c: number): void {\n    if (this.red !== undefined) {\n      this.red.setInt(x, y, c);\n    }\n  }\n\n  /**\n   * Get the value of the green channel at the given pixel coordinates [x], [y].\n   */\n  public getGreen(x: number, y: number): number {\n    if (this.green !== undefined) {\n      return this.green.isFloat\n        ? this.green.getFloat(x, y)\n        : this.green.getInt(x, y);\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Set the value of the green channel at the given pixel coordinates [x], [y].\n   */\n  public setGreen(x: number, y: number, c: number): void {\n    if (this.green !== undefined) {\n      if (this.green.isFloat) {\n        this.green.setFloat(x, y, c);\n      } else {\n        this.green.setInt(x, y, c);\n      }\n    }\n  }\n\n  public setGreenInt(x: number, y: number, c: number): void {\n    if (this.green !== undefined) {\n      this.green.setInt(x, y, c);\n    }\n  }\n\n  /**\n   * Get the value of the blue channel at the given pixel coordinates [x], [y].\n   */\n  public getBlue(x: number, y: number): number {\n    if (this.blue !== undefined) {\n      return this.blue.isFloat\n        ? this.blue.getFloat(x, y)\n        : this.blue.getInt(x, y);\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * Set the value of the blue channel at the given pixel coordinates [x], [y].\n   */\n  public setBlue(x: number, y: number, c: number): void {\n    if (this.blue !== undefined) {\n      if (this.blue.isFloat) {\n        this.blue.setFloat(x, y, c);\n      } else {\n        this.blue.setInt(x, y, c);\n      }\n    }\n  }\n\n  public setBlueInt(x: number, y: number, c: number): void {\n    if (this.blue !== undefined) {\n      this.blue.setInt(x, y, c);\n    }\n  }\n\n  /**\n   * Get the value of the alpha channel at the given pixel coordinates [x], [y].\n   */\n  public getAlpha(x: number, y: number): number {\n    if (this.alpha !== undefined) {\n      return this.alpha.isFloat\n        ? this.alpha.getFloat(x, y)\n        : this.alpha.getInt(x, y);\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Set the value of the alpha channel at the given pixel coordinates [x], [y].\n   */\n  public setAlpha(x: number, y: number, c: number): void {\n    if (this.alpha !== undefined) {\n      if (this.alpha.isFloat) {\n        this.alpha.setFloat(x, y, c);\n      } else {\n        this.alpha.setInt(x, y, c);\n      }\n    }\n  }\n\n  public setAlphaInt(x: number, y: number, c: number): void {\n    if (this.alpha !== undefined) {\n      this.alpha.setInt(x, y, c);\n    }\n  }\n\n  /**\n   * Get the value of the depth channel at the given pixel coordinates [x], [y].\n   */\n  public getDepth(x: number, y: number): number {\n    if (this.depth !== undefined) {\n      return this.depth.isFloat\n        ? this.depth.getFloat(x, y)\n        : this.depth.getInt(x, y);\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Set the value of the depth channel at the given pixel coordinates [x], [y].\n   */\n  public setDepth(x: number, y: number, c: number): void {\n    if (this.depth !== undefined) {\n      if (this.depth.isFloat) {\n        this.depth.setFloat(x, y, c);\n      } else {\n        this.depth.setInt(x, y, c);\n      }\n    }\n  }\n\n  public setDepthInt(x: number, y: number, c: number): void {\n    if (this.depth !== undefined) {\n      this.depth.setInt(x, y, c);\n    }\n  }\n\n  /**\n   * Does this image contain the given channel?\n   */\n  public hasChannel(ch: string): boolean {\n    return this.slices.has(ch);\n  }\n\n  /**\n   * Access a framebuffer slice by name.\n   */\n  public getChannel(ch: string): HdrSlice | undefined {\n    return this.slices.get(ch);\n  }\n\n  /**\n   * Add a channel [slice] to the\n   */\n  public addChannel(slice: HdrSlice): void {\n    const ch = slice.name;\n    this.slices.set(ch, slice);\n    switch (ch) {\n      case HdrImage.R:\n        this.red = slice;\n        break;\n      case HdrImage.G:\n        this.green = slice;\n        break;\n      case HdrImage.B:\n        this.blue = slice;\n        break;\n      case HdrImage.A:\n        this.alpha = slice;\n        break;\n      case HdrImage.Z:\n        this.depth = slice;\n        break;\n    }\n  }\n\n  /**\n   * Convert the framebuffer to an floating-point image, as a sequence of\n   * floats in RGBA order.\n   */\n  public toFloatRgba(): Float32Array {\n    const rgba = new Float32Array(this.width * this.height * 4);\n    const w = this.width;\n    const h = this.height;\n    for (let y = 0, di = 0; y < h; ++y) {\n      for (let x = 0; x < w; ++x) {\n        rgba[di++] = this.red === undefined ? 0.0 : this.red.getFloat(x, y);\n        rgba[di++] = this.green === undefined ? 0.0 : this.green.getFloat(x, y);\n        rgba[di++] = this.blue === undefined ? 0.0 : this.blue.getFloat(x, y);\n        rgba[di++] = this.alpha === undefined ? 1.0 : this.alpha.getFloat(x, y);\n      }\n    }\n    return rgba;\n  }\n}\n", "/** @format */\n\nimport { BitOperators } from '../../common/bit-operators';\nimport { TextCodec } from '../../common/text-codec';\nimport { ImageError } from '../../error/image-error';\n\nexport interface InputBufferInitOptions {\n  buffer: Uint8Array;\n  offset?: number;\n  length?: number;\n  bigEndian?: boolean;\n}\n\n/**\n * A buffer that can be read as a stream of bytes.\n */\nexport class InputBuffer {\n  private readonly _buffer: Uint8Array;\n  public get buffer(): Uint8Array {\n    return this._buffer;\n  }\n\n  private _bigEndian: boolean;\n  public set bigEndian(v: boolean) {\n    this._bigEndian = v;\n  }\n  public get bigEndian(): boolean {\n    return this._bigEndian;\n  }\n\n  private _offset: number;\n  public set offset(v: number) {\n    this._offset = v;\n  }\n  public get offset(): number {\n    return this._offset;\n  }\n\n  private _start: number;\n  public get start(): number {\n    return this._start;\n  }\n\n  private _end: number;\n  public get end(): number {\n    return this._end;\n  }\n\n  /**\n   *  The current read position relative to the start of the buffer.\n   */\n  get position(): number {\n    return this._offset - this._start;\n  }\n\n  /**\n   * How many bytes are left in the stream.\n   */\n  get length(): number {\n    return this._end - this._offset;\n  }\n\n  /**\n   * Is the current position at the end of the stream?\n   */\n  get isEOS(): boolean {\n    return this._offset >= this._end;\n  }\n\n  /**\n   * Create a InputStream for reading from an Array<int>\n   */\n  constructor(options: InputBufferInitOptions) {\n    this._buffer = options.buffer;\n    this._bigEndian = options.bigEndian ?? false;\n    this._offset = options.offset ?? 0;\n    this._start = this._offset;\n    this._end =\n      options.length !== undefined\n        ? this._start + options.length\n        : this._buffer.length;\n  }\n\n  /**\n   * Create a copy of [other].\n   */\n  public static from(other: InputBuffer, offset?: number, length?: number) {\n    const offsetFromOther = offset ?? 0;\n    const result = new InputBuffer({\n      buffer: other._buffer,\n      bigEndian: other._bigEndian,\n      offset: other._offset + offsetFromOther,\n      length: length,\n    });\n    result._start = other._start;\n    result._end =\n      length !== undefined\n        ? other.offset + offsetFromOther + length\n        : other._end;\n    return result;\n  }\n\n  /**\n   * Reset to the beginning of the stream.\n   */\n  public rewind(): void {\n    this._offset = this._start;\n  }\n\n  /**\n   * Access the buffer relative from the current position.\n   */\n  public getByte(index: number): number {\n    return this._buffer[this._offset + index];\n  }\n\n  /**\n   * Set a buffer element relative to the current position.\n   */\n  public setByte(index: number, value: number) {\n    return (this._buffer[this._offset + index] = value);\n  }\n\n  /**\n   * Set a range of bytes in this buffer to [value], at [start] offset from the\n   * current read position, and [length] number of bytes.\n   */\n  public memset(start: number, length: number, value: number): void {\n    this._buffer.fill(\n      this._offset + start,\n      this._offset + start + length,\n      value\n    );\n  }\n\n  /**\n   * Return a InputStream to read a subset of this stream. It does not\n   * move the read position of this stream. [position] is specified relative\n   * to the start of the buffer. If [position] is not specified, the current\n   * read position is used. If [length] is not specified, the remainder of this\n   * stream is used.\n   */\n  public subarray(count: number, position?: number, offset = 0): InputBuffer {\n    let pos = position !== undefined ? this._start + position : this._offset;\n    pos += offset;\n    return new InputBuffer({\n      buffer: this._buffer,\n      bigEndian: this._bigEndian,\n      offset: pos,\n      length: count,\n    });\n  }\n\n  /**\n   * Returns the position of the given [value] within the buffer, starting\n   * from the current read position with the given [offset]. The position\n   * returned is relative to the start of the buffer, or -1 if the [value]\n   * was not found.\n   */\n  public indexOf(value: number, offset = 0): number {\n    for (\n      let i = this._offset + offset, end = this._offset + this.length;\n      i < end;\n      ++i\n    ) {\n      if (this._buffer[i] === value) {\n        return i - this._start;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Read [count] bytes from an [offset] of the current read position, without\n   * moving the read position.\n   */\n  public peekBytes(count: number, offset = 0): InputBuffer {\n    return this.subarray(count, undefined, offset);\n  }\n\n  /**\n   * Move the read position by [count] bytes.\n   */\n  public skip(count: number): void {\n    this._offset += count;\n  }\n\n  /**\n   * Read a single byte.\n   */\n  public readByte(): number {\n    return this._buffer[this._offset++];\n  }\n\n  public readInt8(): number {\n    return BitOperators.toInt8(this.readByte());\n  }\n\n  /**\n   * Read [count] bytes from the stream.\n   */\n  public readBytes(count: number): InputBuffer {\n    const bytes = this.subarray(count);\n    this._offset += bytes.length;\n    return bytes;\n  }\n\n  /**\n   * Read a null-terminated string, or if [length] is provided, that number of\n   * bytes returned as a string.\n   */\n  public readString(length?: number): string {\n    if (length === undefined) {\n      const codes: number[] = [];\n      while (!this.isEOS) {\n        const c = this.readByte();\n        if (c === 0) {\n          return String.fromCharCode(...codes);\n        }\n        codes.push(c);\n      }\n      throw new ImageError('EOF reached without finding string terminator');\n    }\n\n    const s = this.readBytes(length);\n    const bytes = s.toUint8Array();\n    const result = String.fromCharCode(...bytes);\n    return result;\n  }\n\n  /**\n   * Read a null-terminated UTF-8 string.\n   */\n  public readStringUtf8(): string {\n    const codes: number[] = [];\n    while (!this.isEOS) {\n      const c = this.readByte();\n      if (c === 0) {\n        const array = new Uint8Array(codes);\n        return TextCodec.utf8Decoder.decode(array);\n      }\n      codes.push(c);\n    }\n    throw new ImageError('EOF reached without finding string terminator');\n  }\n\n  /**\n   * Read a 16-bit word from the stream.\n   */\n  public readUint16(): number {\n    const b1 = this._buffer[this._offset++] & 0xff;\n    const b2 = this._buffer[this._offset++] & 0xff;\n    if (this._bigEndian) {\n      return (b1 << 8) | b2;\n    }\n    return (b2 << 8) | b1;\n  }\n\n  /**\n   * Read a 16-bit word from the stream.\n   */\n  public readInt16(): number {\n    return BitOperators.toInt16(this.readUint16());\n  }\n\n  /**\n   * Read a 24-bit word from the stream.\n   */\n  public readUint24(): number {\n    const b1 = this._buffer[this._offset++] & 0xff;\n    const b2 = this._buffer[this._offset++] & 0xff;\n    const b3 = this._buffer[this._offset++] & 0xff;\n    if (this._bigEndian) {\n      return b3 | (b2 << 8) | (b1 << 16);\n    }\n    return b1 | (b2 << 8) | (b3 << 16);\n  }\n\n  /**\n   * Read a 32-bit word from the stream.\n   */\n  public readUint32(): number {\n    const b1 = this._buffer[this._offset++] & 0xff;\n    const b2 = this._buffer[this._offset++] & 0xff;\n    const b3 = this._buffer[this._offset++] & 0xff;\n    const b4 = this._buffer[this._offset++] & 0xff;\n    const d = this._bigEndian\n      ? (b1 << 24) | (b2 << 16) | (b3 << 8) | b4\n      : (b4 << 24) | (b3 << 16) | (b2 << 8) | b1;\n    return BitOperators.toUint32(d);\n  }\n\n  /**\n   * Read a signed 32-bit integer from the stream.\n   */\n  public readInt32(): number {\n    return BitOperators.toInt32(this.readUint32());\n  }\n\n  /**\n   * Read a 32-bit float.\n   */\n  public readFloat32(): number {\n    return BitOperators.toFloat32(this.readUint32());\n  }\n\n  /**\n   * Read a 64-bit float.\n   */\n  public readFloat64(): number {\n    return BitOperators.toFloat64(this.readUint64());\n  }\n\n  /**\n   * Read a 64-bit word form the stream.\n   */\n  public readUint64(): bigint {\n    const b1 = this._buffer[this._offset++] & 0xff;\n    const b2 = this._buffer[this._offset++] & 0xff;\n    const b3 = this._buffer[this._offset++] & 0xff;\n    const b4 = this._buffer[this._offset++] & 0xff;\n    const b5 = this._buffer[this._offset++] & 0xff;\n    const b6 = this._buffer[this._offset++] & 0xff;\n    const b7 = this._buffer[this._offset++] & 0xff;\n    const b8 = this._buffer[this._offset++] & 0xff;\n    if (this._bigEndian) {\n      return (\n        BigInt(b1 << 56) |\n        BigInt(b2 << 48) |\n        BigInt(b3 << 40) |\n        BigInt(b4 << 32) |\n        BigInt(b5 << 24) |\n        BigInt(b6 << 16) |\n        BigInt(b7 << 8) |\n        BigInt(b8)\n      );\n    }\n    return (\n      BigInt(b8 << 56) |\n      BigInt(b7 << 48) |\n      BigInt(b6 << 40) |\n      BigInt(b5 << 32) |\n      BigInt(b4 << 24) |\n      BigInt(b3 << 16) |\n      BigInt(b2 << 8) |\n      BigInt(b1)\n    );\n  }\n\n  public toUint8Array(offset?: number, length?: number): Uint8Array {\n    const correctedOffset = offset ?? 0;\n    const correctedLength = length ?? this.length - correctedOffset;\n    return new Uint8Array(\n      this._buffer.buffer,\n      this._buffer.byteOffset + this._offset + correctedOffset,\n      correctedLength\n    );\n  }\n\n  public toUint32Array(offset?: number): Uint32Array {\n    const correctedOffset = offset ?? 0;\n    return new Uint32Array(\n      this._buffer.buffer,\n      this._buffer.byteOffset + this._offset + correctedOffset\n    );\n  }\n}\n", "/** @format */\n\nimport { ImageError } from '../../error/image-error';\nimport { InputBuffer } from '../util/input-buffer';\n\nexport class BitmapFileHeader {\n  // BM\n  public static readonly BMP_HEADER_FILETYPE = 0x42 + (0x4d << 8);\n\n  private readonly _fileLength: number;\n  public get fileLength(): number {\n    return this._fileLength;\n  }\n\n  private _offset: number;\n  public set offset(v: number) {\n    this._offset = v;\n  }\n  public get offset(): number {\n    return this._offset;\n  }\n\n  constructor(b: InputBuffer) {\n    if (!BitmapFileHeader.isValidFile(b)) {\n      throw new ImageError('Not a bitmap file.');\n    }\n    b.skip(2);\n    this._fileLength = b.readInt32();\n    // Skip reserved space\n    b.skip(4);\n    this._offset = b.readInt32();\n  }\n\n  public static isValidFile(b: InputBuffer): boolean {\n    if (b.length < 2) {\n      return false;\n    }\n    const type = InputBuffer.from(b).readUint16();\n    return type === BitmapFileHeader.BMP_HEADER_FILETYPE;\n  }\n\n  public toJson(): Map<string, number> {\n    return new Map<string, number>([\n      ['offset', this._offset],\n      ['fileLength', this.fileLength],\n      ['fileType', BitmapFileHeader.BMP_HEADER_FILETYPE],\n    ]);\n  }\n}\n", "/** @format */\n\nexport enum BitmapCompressionMode {\n  BI_BITFIELDS,\n  NONE,\n}\n", "/** @format */\n\nimport { BitOperators } from '../../common/bit-operators';\nimport { ColorUtils } from '../../common/color-utils';\nimport { ImageError } from '../../error/image-error';\nimport { NotImplementedError } from '../../error/not-implemented-error';\nimport { DecodeInfo } from '../decode-info';\nimport { InputBuffer } from '../util/input-buffer';\nimport { BitmapCompressionMode } from './bitmap-compression-mode';\nimport { BitmapFileHeader } from './bitmap-file-header';\n\nexport class BmpInfo implements DecodeInfo {\n  private readonly _width: number = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  protected readonly _height: number = 0;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _backgroundColor: number = 0xffffffff;\n  public get backgroundColor(): number {\n    return this._backgroundColor;\n  }\n\n  private readonly _numFrames: number = 1;\n  public get numFrames(): number {\n    return this._numFrames;\n  }\n\n  private readonly _fileHeader: BitmapFileHeader;\n  public get fileHeader(): BitmapFileHeader {\n    return this._fileHeader;\n  }\n\n  private readonly _headerSize: number;\n  public get headerSize(): number {\n    return this._headerSize;\n  }\n\n  private readonly _planes: number;\n  public get planes(): number {\n    return this._planes;\n  }\n\n  private readonly _bpp: number;\n  public get bpp(): number {\n    return this._bpp;\n  }\n\n  private readonly _compression: BitmapCompressionMode;\n  public get compression(): BitmapCompressionMode {\n    return this._compression;\n  }\n\n  private readonly _imageSize: number;\n  public get imageSize(): number {\n    return this._imageSize;\n  }\n\n  private readonly _xppm: number;\n  public get xppm(): number {\n    return this._xppm;\n  }\n\n  private readonly _yppm: number;\n  public get yppm(): number {\n    return this._yppm;\n  }\n\n  private readonly _totalColors: number;\n  public get totalColors(): number {\n    return this._totalColors;\n  }\n\n  private readonly _importantColors: number;\n  public get importantColors(): number {\n    return this._importantColors;\n  }\n\n  private readonly _readBottomUp: boolean;\n  public get readBottomUp(): boolean {\n    return this._readBottomUp;\n  }\n\n  private _v5redMask?: number;\n  public get v5redMask(): number | undefined {\n    return this._v5redMask;\n  }\n\n  private _v5greenMask?: number;\n  public get v5greenMask(): number | undefined {\n    return this._v5greenMask;\n  }\n\n  private _v5blueMask?: number;\n  public get v5blueMask(): number | undefined {\n    return this._v5blueMask;\n  }\n\n  private _v5alphaMask?: number;\n  public get v5alphaMask(): number | undefined {\n    return this._v5alphaMask;\n  }\n\n  private _colorPalette?: number[];\n  public get colorPalette(): number[] | undefined {\n    return this._colorPalette;\n  }\n\n  // BITMAPINFOHEADER should (probably) ignore alpha channel altogether.\n  // This is the behavior in gimp (?)\n  // https://gitlab.gnome.org/GNOME/gimp/-/issues/461#note_208715\n  public get ignoreAlphaChannel(): boolean {\n    return (\n      this._headerSize === 40 ||\n      // BITMAPV5HEADER with null alpha mask.\n      (this._headerSize === 124 && this._v5alphaMask === 0)\n    );\n  }\n\n  constructor(p: InputBuffer, fileHeader?: BitmapFileHeader) {\n    this._fileHeader = fileHeader ?? new BitmapFileHeader(p);\n    this._headerSize = p.readUint32();\n    this._width = p.readInt32();\n\n    const height = p.readInt32();\n    this._readBottomUp = height > 0;\n    this._height = Math.abs(height);\n\n    this._planes = p.readUint16();\n    this._bpp = p.readUint16();\n    this._compression = BmpInfo.intToCompressionMode(p.readUint32());\n    this._imageSize = p.readUint32();\n    this._xppm = p.readInt32();\n    this._yppm = p.readInt32();\n    this._totalColors = p.readUint32();\n    this._importantColors = p.readUint32();\n\n    if ([1, 4, 8].includes(this._bpp)) {\n      this.readPalette(p);\n    }\n    if (this._headerSize === 124) {\n      // BITMAPV5HEADER\n      this._v5redMask = p.readUint32();\n      this._v5greenMask = p.readUint32();\n      this._v5blueMask = p.readUint32();\n      this._v5alphaMask = p.readUint32();\n    }\n  }\n\n  private static intToCompressionMode(\n    compIndex: number\n  ): BitmapCompressionMode {\n    const map = new Map<number, BitmapCompressionMode>([\n      [0, BitmapCompressionMode.NONE],\n      // [ 1, BitmapCompression.RLE_8 ],\n      // [ 2, BitmapCompression.RLE_4 ],\n      [3, BitmapCompressionMode.BI_BITFIELDS],\n    ]);\n    const compression = map.get(compIndex);\n    if (compression === undefined) {\n      throw new ImageError(\n        `Bitmap compression ${compIndex} is not supported yet.`\n      );\n    }\n    return compression;\n  }\n\n  private compressionModeToString(): string {\n    switch (this._compression) {\n      case BitmapCompressionMode.BI_BITFIELDS:\n        return 'BI_BITFIELDS';\n      case BitmapCompressionMode.NONE:\n        return 'none';\n    }\n    throw new NotImplementedError();\n  }\n\n  private readPalette(p: InputBuffer): void {\n    const colors = this._totalColors === 0 ? 1 << this._bpp : this._totalColors;\n    const colorBytes = this._headerSize === 12 ? 3 : 4;\n    const colorPalette: number[] = [];\n    for (let i = 0; i < colors; i++) {\n      const color = this.readRgba(p, colorBytes === 3 ? 100 : undefined);\n      colorPalette.push(color);\n    }\n    this._colorPalette = colorPalette;\n  }\n\n  private readRgba(input: InputBuffer, aDefault?: number): number {\n    if (this._readBottomUp) {\n      const b = input.readByte();\n      const g = input.readByte();\n      const r = input.readByte();\n      const a = aDefault ?? input.readByte();\n      return ColorUtils.getColor(r, g, b, this.ignoreAlphaChannel ? 255 : a);\n    } else {\n      const r = input.readByte();\n      const b = input.readByte();\n      const g = input.readByte();\n      const a = aDefault ?? input.readByte();\n      return ColorUtils.getColor(r, b, g, this.ignoreAlphaChannel ? 255 : a);\n    }\n  }\n\n  public decodeRgba(input: InputBuffer, pixel: (color: number) => void): void {\n    if (this._colorPalette !== undefined) {\n      if (this._bpp === 4) {\n        const b = input.readByte();\n        const left = b >> 4;\n        const right = b & 0x0f;\n        pixel(this._colorPalette[left]);\n        pixel(this._colorPalette[right]);\n        return;\n      } else if (this._bpp === 8) {\n        const b = input.readByte();\n        pixel(this._colorPalette[b]);\n        return;\n      }\n    }\n    if (\n      this._bpp === 32 &&\n      this._compression === BitmapCompressionMode.BI_BITFIELDS\n    ) {\n      pixel(this.readRgba(input));\n      return;\n    }\n    if (this._bpp === 32 && this._compression === BitmapCompressionMode.NONE) {\n      pixel(this.readRgba(input));\n      return;\n    }\n    if (this._bpp === 24) {\n      pixel(this.readRgba(input, 255));\n      return;\n    }\n    // If (this.bpp === 16) {\n    //   return this._rgbaFrom16(input);\n    // }\n    throw new ImageError(\n      `Unsupported bpp (${this._bpp}) or compression (${this._compression}).`\n    );\n  }\n\n  // TODO: finish decoding for 16 bit\n  // private rgbaFrom16(input: InputBuffer): number[] {\n  //   const maskRed = 0x7C00;\n  //   const maskGreen = 0x3E0;\n  //   const maskBlue = 0x1F;\n  //   const pixel = input.readUint16();\n  //   return [ (pixel & maskRed), (pixel & maskGreen), (pixel & maskBlue), 0 ];\n  // }\n\n  public toString(): string {\n    return JSON.stringify(\n      {\n        headerSize: this._headerSize,\n        width: this._width,\n        height: this._height,\n        planes: this._planes,\n        bpp: this._bpp,\n        file: this._fileHeader.toJson(),\n        compression: this.compressionModeToString(),\n        imageSize: this._imageSize,\n        xppm: this._xppm,\n        yppm: this._yppm,\n        totalColors: this._totalColors,\n        importantColors: this._importantColors,\n        readBottomUp: this._readBottomUp,\n        v5redMask: BitOperators.debugBits32(this._v5redMask),\n        v5greenMask: BitOperators.debugBits32(this._v5greenMask),\n        v5blueMask: BitOperators.debugBits32(this._v5blueMask),\n        v5alphaMask: BitOperators.debugBits32(this._v5alphaMask),\n      },\n      undefined,\n      2\n    );\n  }\n}\n", "/** @format */\n\nimport { FrameAnimation } from '../common/frame-animation';\nimport { MemoryImage } from '../common/memory-image';\nimport { HdrImage } from '../hdr/hdr-image';\nimport { BitmapFileHeader } from './bmp/bitmap-file-header';\nimport { BmpInfo } from './bmp/bmp-info';\nimport { DecodeInfo } from './decode-info';\nimport { Decoder } from './decoder';\nimport { InputBuffer } from './util/input-buffer';\n\nexport class BmpDecoder implements Decoder {\n  protected input?: InputBuffer;\n\n  protected info?: BmpInfo;\n\n  public get numFrames(): number {\n    return this.info !== undefined ? this.info.numFrames : 0;\n  }\n\n  private pixelDataOffset(): number | undefined {\n    return this.info !== undefined ? this.info.fileHeader.offset : undefined;\n  }\n\n  /**\n   * Is the given file a valid BMP image?\n   */\n  public isValidFile(bytes: Uint8Array): boolean {\n    return BitmapFileHeader.isValidFile(\n      new InputBuffer({\n        buffer: bytes,\n      })\n    );\n  }\n\n  public startDecode(bytes: Uint8Array): DecodeInfo | undefined {\n    if (!this.isValidFile(bytes)) {\n      return undefined;\n    }\n    this.input = new InputBuffer({\n      buffer: bytes,\n    });\n    this.info = new BmpInfo(this.input);\n    return this.info;\n  }\n\n  /**\n   * Decode a single frame from the data stat was set with [startDecode].\n   * If [frame] is out of the range of available frames, null is returned.\n   * Non animated image files will only have [frame] 0. An [AnimationFrame]\n   * is returned, which provides the image, and top-left coordinates of the\n   * image, as animated frames may only occupy a subset of the canvas.\n   */\n  public decodeFrame(_: number): MemoryImage | undefined {\n    if (this.input === undefined || this.info === undefined) {\n      return undefined;\n    }\n\n    const offset = this.pixelDataOffset();\n    if (offset === undefined) {\n      return undefined;\n    }\n\n    this.input.offset = offset;\n    let rowStride = (this.info.width * this.info.bpp) >> 3;\n    if (rowStride % 4 !== 0) {\n      rowStride += 4 - (rowStride % 4);\n    }\n\n    const image = new MemoryImage({\n      width: this.info.width,\n      height: this.info.height,\n    });\n    for (let y = image.height - 1; y >= 0; --y) {\n      const line = this.info.readBottomUp ? y : image.height - 1 - y;\n      const row = this.input.readBytes(rowStride);\n      for (let x = 0; x < image.width; ) {\n        this.info.decodeRgba(row, (color) => {\n          return image.setPixel(x++, line, color);\n        });\n      }\n    }\n\n    return image;\n  }\n\n  public decodeHdrFrame(frame: number): HdrImage | undefined {\n    const img = this.decodeFrame(frame);\n    if (img === undefined) {\n      return undefined;\n    }\n    return HdrImage.fromImage(img);\n  }\n\n  /**\n   * Decode all of the frames from an animation. If the file is not an\n   * animation, a single frame animation is returned. If there was a problem\n   * decoding the file, null is returned.\n   */\n  public decodeAnimation(bytes: Uint8Array): FrameAnimation | undefined {\n    if (!this.isValidFile(bytes)) {\n      return undefined;\n    }\n\n    const image = this.decodeImage(bytes);\n    if (image === undefined) {\n      return undefined;\n    }\n\n    const animation = new FrameAnimation();\n    animation.addFrame(image);\n\n    return animation;\n  }\n\n  /**\n   * Decode the file and extract a single image from it. If the file is\n   * animated, the specified [frame] will be decoded. If there was a problem\n   * decoding the file, null is returned.\n   */\n  public decodeImage(bytes: Uint8Array, frame = 0): MemoryImage | undefined {\n    if (!this.isValidFile(bytes)) {\n      return undefined;\n    }\n\n    this.startDecode(bytes);\n    return this.decodeFrame(frame);\n  }\n\n  public decodeHdrImage(bytes: Uint8Array, frame = 0): HdrImage | undefined {\n    const img = this.decodeImage(bytes, frame);\n    if (img === undefined) {\n      return undefined;\n    }\n    return HdrImage.fromImage(img);\n  }\n}\n", "/** @format */\n\nimport { ListUtils } from '../../common/list-utils';\nimport { InputBuffer } from './input-buffer';\n\nexport interface OutputBufferInitOptions {\n  bigEndian?: boolean;\n  size?: number;\n}\n\nexport class OutputBuffer {\n  // 8k block-size\n  private static readonly BLOCK_SIZE = 0x2000;\n\n  private _buffer: Uint8Array;\n  public get buffer(): Uint8Array {\n    return this._buffer;\n  }\n\n  private readonly _bigEndian: boolean;\n  public get bigEndian(): boolean {\n    return this._bigEndian;\n  }\n\n  private _length: number;\n  public set length(v: number) {\n    this._length = v;\n  }\n  public get length(): number {\n    return this._length;\n  }\n\n  /**\n   * Create a byte buffer for writing.\n   */\n  constructor(options?: OutputBufferInitOptions) {\n    this._bigEndian = options?.bigEndian ?? false;\n    this._buffer = new Uint8Array(options?.size ?? OutputBuffer.BLOCK_SIZE);\n    this._length = 0;\n  }\n\n  /**\n   * Grow the buffer to accommodate additional data.\n   */\n  private expandBuffer(required?: number): void {\n    let blockSize: number = OutputBuffer.BLOCK_SIZE;\n    if (required !== undefined) {\n      blockSize = required;\n    } else if (this._buffer.length > 0) {\n      blockSize = this._buffer.length * 2;\n    }\n    const newBuffer = new Uint8Array(this._buffer.length + blockSize);\n    ListUtils.setRange(newBuffer, 0, this._buffer.length, this._buffer);\n    this._buffer = newBuffer;\n  }\n\n  public rewind(): void {\n    this._length = 0;\n  }\n\n  /**\n   * Clear the buffer.\n   */\n  public clear(): void {\n    this._buffer = new Uint8Array(OutputBuffer.BLOCK_SIZE);\n    this._length = 0;\n  }\n\n  /**\n   * Get the resulting bytes from the buffer.\n   */\n  public getBytes(): Uint8Array {\n    return new Uint8Array(this._buffer.buffer, 0, this._length);\n  }\n\n  /**\n   * Write a byte to the end of the buffer.\n   */\n  public writeByte(value: number): void {\n    if (this._length === this._buffer.length) {\n      this.expandBuffer();\n    }\n    this._buffer[this._length++] = value & 0xff;\n  }\n\n  /**\n   * Write a set of bytes to the end of the buffer.\n   */\n  public writeBytes(bytes: Uint8Array, length?: number): void {\n    const correctedLength = length ?? bytes.length;\n    while (this._length + correctedLength > this._buffer.length) {\n      this.expandBuffer(this._length + correctedLength - this._buffer.length);\n    }\n    ListUtils.setRange(\n      this._buffer,\n      this._length,\n      this._length + correctedLength,\n      bytes\n    );\n    this._length += correctedLength;\n  }\n\n  public writeBuffer(bytes: InputBuffer): void {\n    while (length + bytes.length > this._buffer.length) {\n      this.expandBuffer(length + bytes.length - this._buffer.length);\n    }\n    ListUtils.setRange(\n      this._buffer,\n      length,\n      length + bytes.length,\n      bytes.buffer,\n      bytes.offset\n    );\n    this._length += bytes.length;\n  }\n\n  /**\n   * Write a 16-bit word to the end of the buffer.\n   */\n  public writeUint16(value: number): void {\n    if (this._bigEndian) {\n      this.writeByte((value >> 8) & 0xff);\n      this.writeByte(value & 0xff);\n      return;\n    }\n    this.writeByte(value & 0xff);\n    this.writeByte((value >> 8) & 0xff);\n  }\n\n  /**\n   * Write a 32-bit word to the end of the buffer.\n   */\n  public writeUint32(value: number): void {\n    if (this._bigEndian) {\n      this.writeByte((value >> 24) & 0xff);\n      this.writeByte((value >> 16) & 0xff);\n      this.writeByte((value >> 8) & 0xff);\n      this.writeByte(value & 0xff);\n      return;\n    }\n    this.writeByte(value & 0xff);\n    this.writeByte((value >> 8) & 0xff);\n    this.writeByte((value >> 16) & 0xff);\n    this.writeByte((value >> 24) & 0xff);\n  }\n\n  /**\n   * Return the subarray of the buffer in the range [start:end].\n   * If [start] or [end] are < 0 then it is relative to the end of the buffer.\n   * If [end] is not specified (or null), then it is the end of the buffer.\n   * This is equivalent to the python list range operator.\n   */\n  public subarray(start: number, end?: number): Uint8Array {\n    const correctedStart: number = start >= 0 ? start : this._length + start;\n    let correctedEnd: number = end ?? this._length;\n    if (correctedEnd < 0) {\n      correctedEnd = this._length + correctedEnd;\n    }\n    return new Uint8Array(\n      this._buffer.buffer,\n      correctedStart,\n      correctedEnd - correctedStart\n    );\n  }\n}\n", "/** @format */\n\nimport { ColorUtils } from '../common/color-utils';\nimport { FrameAnimation } from '../common/frame-animation';\nimport { MemoryImage } from '../common/memory-image';\nimport { RgbChannelSet } from '../common/rgb-channel-set';\nimport { BitmapFileHeader } from './bmp/bitmap-file-header';\nimport { Encoder } from './encoder';\nimport { OutputBuffer } from './util/output-buffer';\n\n/**\n * Encode a BMP image.\n */\nexport class BmpEncoder implements Encoder {\n  private _supportsAnimation = false;\n  get supportsAnimation(): boolean {\n    return this._supportsAnimation;\n  }\n\n  public encodeImage(image: MemoryImage): Uint8Array {\n    const bytesPerPixel = image.rgbChannelSet === RgbChannelSet.rgb ? 3 : 4;\n    const bpp = bytesPerPixel * 8;\n    const rgbSize = image.width * image.height * bytesPerPixel;\n    const headerSize = 54;\n    const headerInfoSize = 40;\n    const fileSize = rgbSize + headerSize;\n\n    const out = new OutputBuffer();\n\n    out.writeUint16(BitmapFileHeader.BMP_HEADER_FILETYPE);\n    out.writeUint32(fileSize);\n    // Reserved\n    out.writeUint32(0);\n\n    out.writeUint32(headerSize);\n    out.writeUint32(headerInfoSize);\n    out.writeUint32(image.width);\n    out.writeUint32(-image.height);\n    // Planes\n    out.writeUint16(1);\n    out.writeUint16(bpp);\n    // Compress\n    out.writeUint32(0);\n    out.writeUint32(rgbSize);\n    // Hr\n    out.writeUint32(0);\n    // Vr\n    out.writeUint32(0);\n    // Colors\n    out.writeUint32(0);\n    // ImportantColors\n    out.writeUint32(0);\n\n    for (let y = 0, pi = 0; y < image.height; ++y) {\n      for (let x = 0; x < image.width; ++x, ++pi) {\n        const rgba = image.getPixelByIndex(pi);\n        out.writeByte(ColorUtils.getBlue(rgba));\n        out.writeByte(ColorUtils.getGreen(rgba));\n        out.writeByte(ColorUtils.getRed(rgba));\n        if (bytesPerPixel === 4) {\n          out.writeByte(ColorUtils.getAlpha(rgba));\n        }\n      }\n\n      // Line padding\n      if (bytesPerPixel !== 4) {\n        const padding = 4 - ((image.width * bytesPerPixel) % 4);\n        if (padding !== 4) {\n          const bytes = new Uint8Array(padding - 1).fill(0x00);\n          out.writeBytes(bytes);\n          out.writeByte(0xff);\n        }\n      }\n    }\n\n    return out.getBytes();\n  }\n\n  public encodeAnimation(_: FrameAnimation): Uint8Array | undefined {\n    return undefined;\n  }\n}\n", "/** @format */\n\n/**\n * Provides information about the image being decoded.\n */\nexport interface DecodeInfo {\n  /**\n   * The width of the image canvas.\n   */\n  get width(): number;\n\n  /**\n   * The height of the image canvas.\n   */\n  get height(): number;\n\n  /**\n   * The suggested background color of the canvas.\n   */\n  get backgroundColor(): number;\n\n  /**\n   * The number of frames that can be decoded.\n   */\n  get numFrames(): number;\n}\n", "/** @format */\n\nimport { FrameAnimation } from '../common/frame-animation';\nimport { MemoryImage } from '../common/memory-image';\nimport { HdrImage } from '../hdr/hdr-image';\nimport { DecodeInfo } from './decode-info';\n\n/**\n * Base class for image format decoders.\n *\n * Image pixels are stored as 32-bit unsigned ints, so all formats, regardless\n * of their encoded color resolutions, decode to 32-bit RGBA images. Encoders\n * can reduce the color resolution back down to their required formats.\n *\n * Some image formats support multiple frames, often for encoding animation.\n * In such cases, the [decodeImage] method will decode the first (or otherwise\n * specified with the [frame] parameter) frame of the file. [decodeAnimation]\n * will decode all frames from the image. [startDecode] will initiate\n * decoding of the file, and [decodeFrame] will then decode a specific frame\n * from the file, allowing for animations to be decoded one frame at a time.\n * Some formats, such as TIFF, may store multiple frames, but their use of\n * frames is for multiple page documents and not animation. The terms\n * 'animation' and 'frames' simply refer to 'pages' in this case.\n *\n * If an image file does not have multiple frames, [decodeAnimation] and\n * [startDecode]/[decodeFrame] will return the single image of the\n * file. As such, if you are not sure if a file is animated or not, you can\n * use the animated functions and process it as a single frame image if it\n * has only 1 frame, and as an animation if it has more than 1 frame.\n *\n * Most animated formats do not store full images for frames, but rather\n * some frames will store full images and others will store partial 'change'\n * images. For these files, [decodeAnimation] will always return all images\n * fully composited, meaning full frame images. Decoding frames individually\n * using [startDecode] and [decodeFrame] will return the potentially partial\n * image. In this case, the [DecodeInfo] returned by [startDecode] will include\n * the width and height resolution of the animation canvas, and each [Image]\n * returned by [decodeFrame] will have x, y, width and height properties\n * indicating where in the canvas the frame image should be drawn. It will\n * also have a disposeMethod property that specifies what should be done to\n * the canvas prior to drawing the frame: [Image.DISPOSE_NONE] indicates the\n * canvas should be left alone; [Image.DISPOSE_CLEAR] indicates the canvas\n * should be cleared. For partial frame images,[Image.DISPOSE_NONE] is used\n * so that the partial-frame is drawn on top of the previous frame, applying\n * it's changes to the image.\n */\nexport interface Decoder {\n  /**\n   * How many frames are available to be decoded. [startDecode] should have\n   * been called first. Non animated image files will have a single frame.\n   */\n  get numFrames(): number;\n\n  /**\n   * A light-weight function to test if the given file is able to be decoded\n   * by this Decoder.\n   */\n  isValidFile(bytes: Uint8Array): boolean;\n\n  /**\n   * Start decoding the data as an animation sequence, but don't actually\n   * process the frames until they are requested with decodeFrame.\n   */\n  startDecode(bytes: Uint8Array): DecodeInfo | undefined;\n\n  /**\n   * Decode a single frame from the data that was set with [startDecode].\n   * If [frame] is out of the range of available frames, null is returned.\n   * Non animated image files will only have [frame] 0. An [Image]\n   * is returned, which provides the image, and top-left coordinates of the\n   * image, as animated frames may only occupy a subset of the canvas.\n   */\n  decodeFrame(frame: number): MemoryImage | undefined;\n\n  /**\n   * Decode a single high dynamic range (HDR) frame from the data that was set\n   * with [startDecode]. If the format of the file does not support HDR images,\n   * the regular image will be converted to an HDR image as (color / 255).\n   * If [frame] is out of the range of available frames, null is returned.\n   * Non animated image files will only have [frame] 0. An [Image]\n   * is returned, which provides the image, and top-left coordinates of the\n   * image, as animated frames may only occupy a subset of the canvas.\n   */\n  decodeHdrFrame(frame: number): HdrImage | undefined;\n\n  /**\n   * Decode all of the frames from an animation. If the file is not an\n   * animation, a single frame animation is returned. If there was a problem\n   * decoding the file, null is returned.\n   */\n  decodeAnimation(bytes: Uint8Array): FrameAnimation | undefined;\n\n  /**\n   * Decode the file and extract a single image from it. If the file is\n   * animated, the specified [frame] will be decoded. If there was a problem\n   * decoding the file, null is returned.\n   */\n  decodeImage(bytes: Uint8Array, frame?: number): MemoryImage | undefined;\n\n  /**\n   * Decode the file and extract a single High Dynamic Range (HDR) image from\n   * it. HDR images are stored in floating-poing values. If the format of the\n   * file does not support HDR images, the regular image will be converted to\n   * an HDR image as (color / 255). If the file is animated, the specified\n   * [frame] will be decoded. If there was a problem decoding the file, null is\n   * returned.\n   */\n  decodeHdrImage(bytes: Uint8Array, frame?: number): HdrImage | undefined;\n}\n", "/** @format */\n\nimport { BmpDecoder } from './bmp-decoder';\nimport { BmpInfo } from './bmp/bmp-info';\nimport { InputBuffer } from './util/input-buffer';\n\nexport class DibDecoder extends BmpDecoder {\n  constructor(input: InputBuffer, info: BmpInfo) {\n    super();\n    this.input = input;\n    this.info = info;\n  }\n}\n", "/** @format */\n\nimport { FrameAnimation } from '../common/frame-animation';\nimport { MemoryImage } from '../common/memory-image';\n\n/**\n * Base class for image format encoders.\n */\nexport interface Encoder {\n  /**\n   * Does this encoder support animation?\n   */\n  get supportsAnimation(): boolean;\n\n  /**\n   * Encode a single image.\n   */\n  encodeImage(image: MemoryImage): Uint8Array;\n\n  /**\n   * Encode an animation. Not all formats support animation, and null\n   * will be returned if not.\n   */\n  encodeAnimation(animation: FrameAnimation): Uint8Array | undefined;\n}\n", "/** @format */\n\nimport { MemoryImage } from '../common/memory-image';\nimport { drawPixel } from '../draw/draw-pixel';\n\n/**\n * Copies a rectangular portion of one image to another image. [dst] is the\n * destination image, [src] is the source image identifier.\n *\n * In other words, copyInto will take an rectangular area from src of\n * width [src_w] and height [src_h] at position ([src_x],[src_y]) and place it\n * in a rectangular area of [dst] of width [dst_w] and height [dst_h] at\n * position ([dst_x],[dst_y]).\n *\n * If the source and destination coordinates and width and heights differ,\n * appropriate stretching or shrinking of the image fragment will be performed.\n * The coordinates refer to the upper left corner. This function can be used to\n * copy regions within the same image (if [dst] is the same as [src])\n * but if the regions overlap the results will be unpredictable.\n *\n * [dstX] and [dstY] represent the X and Y position where the [src] will start\n * printing.\n */\nexport interface CopyIntoOptions {\n  dst: MemoryImage;\n  src: MemoryImage;\n  dstX?: number;\n  dstY?: number;\n  srcX?: number;\n  srcY?: number;\n  srcW?: number;\n  srcH?: number;\n  blend?: boolean;\n  center?: boolean;\n}\n\nexport abstract class CopyIntoTransform {\n  /**\n   * if [center] is true, the [src] will be centered in [dst].\n   */\n  public static copyInto(options: CopyIntoOptions): MemoryImage {\n    options.dstX ??= 0;\n    options.dstY ??= 0;\n    options.srcX ??= 0;\n    options.srcY ??= 0;\n    options.srcW ??= options.src.width;\n    options.srcH ??= options.src.height;\n    options.blend ??= true;\n    options.center ??= false;\n\n    if (options.center) {\n      {\n        // If [src] is wider than [dst]\n        let wdt = options.dst.width - options.src.width;\n        if (wdt < 0) {\n          wdt = 0;\n        }\n        options.dstX = Math.floor(wdt / 2);\n      }\n      {\n        // If [src] is higher than [dst]\n        let hight = options.dst.height - options.src.height;\n        if (hight < 0) {\n          hight = 0;\n        }\n        options.dstY = Math.floor(hight / 2);\n      }\n    }\n\n    if (options.blend) {\n      for (let y = 0; y < options.srcH; ++y) {\n        for (let x = 0; x < options.srcW; ++x) {\n          drawPixel(\n            options.dst,\n            options.dstX + x,\n            options.dstY + y,\n            options.src.getPixel(options.srcX + x, options.srcY + y)\n          );\n        }\n      }\n    } else {\n      for (let y = 0; y < options.srcH; ++y) {\n        for (let x = 0; x < options.srcW; ++x) {\n          options.dst.setPixel(\n            options.dstX + x,\n            options.dstY + y,\n            options.src.getPixel(options.srcX + x, options.srcY + y)\n          );\n        }\n      }\n    }\n\n    return options.dst;\n  }\n}\n", "/** @format */\n\nimport { ColorUtils } from '../../common/color-utils';\n\nexport interface GifColorMapInitOptions {\n  numColors: number;\n  bitsPerPixel?: number;\n  colors?: Uint8Array;\n  transparent?: number;\n}\n\nexport class GifColorMap {\n  private readonly _colors: Uint8Array;\n  public get colors(): Uint8Array {\n    return this._colors;\n  }\n\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _bitsPerPixel: number;\n  public get bitsPerPixel(): number {\n    return this._bitsPerPixel;\n  }\n\n  private _transparent?: number;\n  public set transparent(v: number | undefined) {\n    this._transparent = v;\n  }\n  public get transparent(): number | undefined {\n    return this._transparent;\n  }\n\n  constructor(options: GifColorMapInitOptions) {\n    this._numColors = options.numColors;\n    this._bitsPerPixel =\n      options.bitsPerPixel ?? GifColorMap.bitSize(options.numColors);\n    this._colors = options.colors ?? new Uint8Array(options.numColors * 3);\n    this._transparent = options.transparent;\n  }\n\n  private static bitSize(n: number): number {\n    for (let i = 1; i <= 8; i++) {\n      if (1 << i >= n) {\n        return i;\n      }\n    }\n    return 0;\n  }\n\n  public static from(other: GifColorMap) {\n    return new GifColorMap({\n      numColors: other.numColors,\n      bitsPerPixel: other.bitsPerPixel,\n      colors: other.colors,\n      transparent: other.transparent,\n    });\n  }\n\n  public getByte(index: number): number {\n    return this._colors[index];\n  }\n\n  public setByte(index: number, value: number): number {\n    return (this._colors[index] = value);\n  }\n\n  public getColor(index: number): number {\n    const ci = index * 3;\n    const a = index === this._transparent ? 0 : 255;\n    return ColorUtils.getColor(\n      this._colors[ci],\n      this._colors[ci + 1],\n      this._colors[ci + 2],\n      a\n    );\n  }\n\n  public setColor(index: number, r: number, g: number, b: number): void {\n    const ci = index * 3;\n    this._colors[ci] = r;\n    this._colors[ci + 1] = g;\n    this._colors[ci + 2] = b;\n  }\n\n  public getRed(color: number): number {\n    return this._colors[color * 3];\n  }\n\n  public getGreen(color: number): number {\n    return this._colors[color * 3 + 1];\n  }\n\n  public getBlue(color: number): number {\n    return this._colors[color * 3 + 2];\n  }\n\n  public getAlpha(color: number): number {\n    return color === this._transparent ? 0 : 255;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../util/input-buffer';\nimport { GifColorMap } from './gif-color-map';\n\nexport class GifImageDesc {\n  private readonly _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private readonly _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _interlaced: boolean;\n  public get interlaced(): boolean {\n    return this._interlaced;\n  }\n\n  private _colorMap?: GifColorMap;\n  public get colorMap(): GifColorMap | undefined {\n    return this._colorMap;\n  }\n  public set colorMap(v: GifColorMap | undefined) {\n    this._colorMap = v;\n  }\n\n  private _duration = 80;\n  public set duration(v: number) {\n    this._duration = v;\n  }\n  public get duration(): number {\n    return this._duration;\n  }\n\n  private _clearFrame = true;\n  public set clearFrame(v: boolean) {\n    this._clearFrame = v;\n  }\n  public get clearFrame(): boolean {\n    return this._clearFrame;\n  }\n\n  /**\n   * The position in the file after the ImageDesc for this frame.\n   */\n  protected _inputPosition: number;\n  public get inputPosition(): number {\n    return this._inputPosition;\n  }\n\n  constructor(input: InputBuffer) {\n    this._x = input.readUint16();\n    this._y = input.readUint16();\n    this._width = input.readUint16();\n    this._height = input.readUint16();\n\n    const b = input.readByte();\n    const bitsPerPixel = (b & 0x07) + 1;\n\n    this._interlaced = (b & 0x40) !== 0;\n\n    if ((b & 0x80) !== 0) {\n      this._colorMap = new GifColorMap({\n        numColors: 1 << bitsPerPixel,\n      });\n      for (let i = 0; i < this._colorMap.numColors; ++i) {\n        this._colorMap.setColor(\n          i,\n          input.readByte(),\n          input.readByte(),\n          input.readByte()\n        );\n      }\n    }\n\n    this._inputPosition = input.position;\n  }\n}\n", "/** @format */\n\nimport { DecodeInfo } from '../decode-info';\nimport { GifColorMap } from './gif-color-map';\nimport { GifImageDesc } from './gif-image-desc';\n\nexport interface GifInfoInitOptions {\n  width?: number;\n  height?: number;\n  backgroundColor?: number;\n  frames?: Array<GifImageDesc>;\n  colorResolution?: number;\n  globalColorMap?: GifColorMap;\n  isGif89?: boolean;\n}\n\nexport class GifInfo implements DecodeInfo {\n  private _width;\n  public get width(): number {\n    return this._width;\n  }\n\n  private _height;\n  public get height(): number {\n    return this._height;\n  }\n\n  private _backgroundColor;\n  public get backgroundColor(): number {\n    return this._backgroundColor;\n  }\n\n  private _frames: Array<GifImageDesc>;\n  public get frames(): Array<GifImageDesc> {\n    return this._frames;\n  }\n\n  private _colorResolution;\n  public get colorResolution(): number {\n    return this._colorResolution;\n  }\n\n  private _globalColorMap?: GifColorMap;\n  public get globalColorMap(): GifColorMap | undefined {\n    return this._globalColorMap;\n  }\n\n  private _isGif89 = false;\n  public get isGif89(): boolean {\n    return this._isGif89;\n  }\n\n  public get numFrames(): number {\n    return this.frames.length;\n  }\n\n  constructor(options?: GifInfoInitOptions) {\n    this._width = options?.width ?? 0;\n    this._height = options?.height ?? 0;\n    this._backgroundColor = options?.backgroundColor ?? 0xffffffff;\n    this._frames = options?.frames ?? new Array<GifImageDesc>();\n    this._colorResolution = options?.colorResolution ?? 0;\n    this._globalColorMap = options?.globalColorMap;\n    this._isGif89 = options?.isGif89 ?? false;\n  }\n}\n", "/** @format */\n\nimport { FrameAnimation } from '../common/frame-animation';\nimport { ListUtils } from '../common/list-utils';\nimport { MemoryImage } from '../common/memory-image';\nimport { ImageError } from '../error/image-error';\nimport { HdrImage } from '../hdr/hdr-image';\nimport { CopyIntoTransform } from '../transform/copy-into';\nimport { Decoder } from './decoder';\nimport { GifColorMap } from './gif/gif-color-map';\nimport { GifImageDesc } from './gif/gif-image-desc';\nimport { GifInfo } from './gif/gif-info';\nimport { InputBuffer } from './util/input-buffer';\n\n/**\n * A decoder for the GIF image format. This supports both single frame and\n * animated GIF files, and transparency.\n */\nexport class GifDecoder implements Decoder {\n  private static readonly STAMP_SIZE: number = 6;\n\n  private static readonly GIF87_STAMP: string = 'GIF87a';\n\n  private static readonly GIF89_STAMP: string = 'GIF89a';\n\n  private static readonly IMAGE_DESC_RECORD_TYPE: number = 0x2c;\n\n  private static readonly EXTENSION_RECORD_TYPE: number = 0x21;\n\n  private static readonly TERMINATE_RECORD_TYPE: number = 0x3b;\n\n  private static readonly GRAPHIC_CONTROL_EXT: number = 0xf9;\n\n  private static readonly APPLICATION_EXT: number = 0xff;\n\n  private static readonly LZ_MAX_CODE: number = 4095;\n\n  private static readonly LZ_BITS: number = 12;\n\n  // Impossible code, to signal empty.\n  private static readonly NO_SUCH_CODE: number = 4098;\n\n  private static readonly CODE_MASKS: number[] = [\n    0x0000, 0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,\n    0x01ff, 0x03ff, 0x07ff, 0x0fff,\n  ];\n\n  private static readonly INTERLACED_OFFSET: number[] = [0, 4, 2, 1];\n\n  private static readonly INTERLACED_JUMP: number[] = [8, 8, 4, 2];\n\n  private info?: GifInfo;\n\n  private input?: InputBuffer;\n\n  private repeat = 0;\n\n  private buffer?: Uint8Array;\n\n  private stack!: Uint8Array;\n\n  private suffix!: Uint8Array;\n\n  private prefix?: Uint32Array;\n\n  private bitsPerPixel = 0;\n\n  private pixelCount?: number;\n\n  private currentShiftDWord = 0;\n\n  private currentShiftState = 0;\n\n  private stackPtr = 0;\n\n  private currentCode?: number;\n\n  private lastCode = 0;\n\n  private maxCode1 = 0;\n\n  private runningBits = 0;\n\n  private runningCode = 0;\n\n  private eofCode = 0;\n\n  private clearCode = 0;\n\n  /**\n   * How many frames are available to decode?\n   *\n   * You should have prepared the decoder by either passing the file bytes\n   * to the constructor, or calling getInfo.\n   */\n  public get numFrames(): number {\n    return this.info !== undefined ? this.info.numFrames : 0;\n  }\n\n  constructor(bytes?: Uint8Array) {\n    if (bytes !== undefined) {\n      this.startDecode(bytes);\n    }\n  }\n\n  /**\n   * Routine to trace the Prefixes linked list until we get a prefix which is\n   * not code, but a pixel value (less than ClearCode). Returns that pixel value.\n   * If image is defective, we might loop here forever, so we limit the loops to\n   * the maximum possible if image O.k. - LZ_MAX_CODE times.\n   */\n  private static getPrefixChar(\n    prefix: Uint32Array,\n    code: number,\n    clearCode: number\n  ): number {\n    let c = code;\n    let i = 0;\n    while (c > clearCode && i++ <= GifDecoder.LZ_MAX_CODE) {\n      if (c > GifDecoder.LZ_MAX_CODE) {\n        return GifDecoder.NO_SUCH_CODE;\n      }\n      c = prefix[code];\n    }\n    return c;\n  }\n\n  private static updateImage(\n    image: MemoryImage,\n    y: number,\n    colorMap: GifColorMap | undefined,\n    line: Uint8Array\n  ): void {\n    if (colorMap !== undefined) {\n      for (let x = 0, width = line.length; x < width; ++x) {\n        image.setPixel(x, y, colorMap.getColor(line[x]));\n      }\n    }\n  }\n\n  private getInfo(): boolean {\n    if (this.input === undefined) {\n      return false;\n    }\n\n    const tag = this.input.readString(GifDecoder.STAMP_SIZE);\n    if (tag !== GifDecoder.GIF87_STAMP && tag !== GifDecoder.GIF89_STAMP) {\n      return false;\n    }\n\n    const width = this.input.readUint16();\n    const height = this.input.readUint16();\n\n    const b = this.input.readByte();\n    const colorResolution = (((b & 0x70) + 1) >> 4) + 1;\n\n    const bitsPerPixel = (b & 0x07) + 1;\n    const backgroundColor = this.input.readByte();\n\n    this.input.skip(1);\n\n    let globalColorMap: GifColorMap | undefined = undefined;\n    // Is there a global color map?\n    if ((b & 0x80) !== 0) {\n      globalColorMap = new GifColorMap({\n        numColors: 1 << bitsPerPixel,\n      });\n\n      // Get the global color map:\n      for (let i = 0; i < globalColorMap.numColors; ++i) {\n        const r = this.input.readByte();\n        const g = this.input.readByte();\n        const b = this.input.readByte();\n        globalColorMap.setColor(i, r, g, b);\n      }\n    }\n\n    const isGif89 = tag === GifDecoder.GIF89_STAMP;\n\n    this.info = new GifInfo({\n      width: width,\n      height: height,\n      colorResolution: colorResolution,\n      backgroundColor: backgroundColor,\n      globalColorMap: globalColorMap,\n      isGif89: isGif89,\n    });\n\n    return true;\n  }\n\n  private skipImage(): GifImageDesc | undefined {\n    if (this.input === undefined || this.input.isEOS) {\n      return undefined;\n    }\n    const gifImage = new GifImageDesc(this.input);\n    this.input.skip(1);\n    this.skipRemainder();\n    return gifImage;\n  }\n\n  /**\n   * Continue to get the image code in compressed form. This routine should be\n   * called until NULL block is returned.\n   * The block should NOT be freed by the user (not dynamically allocated).\n   */\n  private skipRemainder(): boolean {\n    if (this.input === undefined || this.input.isEOS) {\n      return true;\n    }\n    let b = this.input.readByte();\n    while (b !== 0 && !this.input.isEOS) {\n      this.input.skip(b);\n      if (this.input.isEOS) {\n        return true;\n      }\n      b = this.input.readByte();\n    }\n    return true;\n  }\n\n  private readApplicationExt(input: InputBuffer): void {\n    const blockSize = input.readByte();\n    const tag = input.readString(blockSize);\n    if (tag === 'NETSCAPE2.0') {\n      const b1 = input.readByte();\n      const b2 = input.readByte();\n      if (b1 === 0x03 && b2 === 0x01) {\n        this.repeat = input.readUint16();\n      }\n    } else {\n      this.skipRemainder();\n    }\n  }\n\n  private readGraphicsControlExt(input: InputBuffer): void {\n    /* const blockSize: number = */\n    input.readByte();\n    const b = input.readByte();\n    const duration = input.readUint16();\n    const transparent = input.readByte();\n    /* const endBlock: number = */\n    input.readByte();\n    const disposalMethod = (b >> 2) & 0x7;\n    // const userInput: number = (b >> 1) & 0x1;\n    const transparentFlag = b & 0x1;\n\n    const recordType = input.peekBytes(1).getByte(0);\n    if (recordType === GifDecoder.IMAGE_DESC_RECORD_TYPE) {\n      input.skip(1);\n      const gifImage = this.skipImage();\n      if (gifImage === undefined) {\n        return;\n      }\n\n      gifImage.duration = duration;\n      gifImage.clearFrame = disposalMethod === 2;\n\n      if (transparentFlag !== 0) {\n        if (\n          gifImage.colorMap === undefined &&\n          this.info!.globalColorMap !== undefined\n        ) {\n          gifImage.colorMap = GifColorMap.from(this.info!.globalColorMap);\n        }\n        if (gifImage.colorMap !== undefined) {\n          gifImage.colorMap.transparent = transparent;\n        }\n      }\n\n      this.info!.frames.push(gifImage);\n    }\n  }\n\n  private decodeFrameImage(gifImage: GifImageDesc): MemoryImage | undefined {\n    if (this.buffer === undefined) {\n      this.initDecode();\n    }\n\n    this.bitsPerPixel = this.input!.readByte();\n    this.clearCode = 1 << this.bitsPerPixel;\n    this.eofCode = this.clearCode + 1;\n    this.runningCode = this.eofCode + 1;\n    this.runningBits = this.bitsPerPixel + 1;\n    this.maxCode1 = 1 << this.runningBits;\n    this.stackPtr = 0;\n    this.lastCode = GifDecoder.NO_SUCH_CODE;\n    this.currentShiftState = 0;\n    this.currentShiftDWord = 0;\n    this.buffer![0] = 0;\n    this.prefix!.fill(GifDecoder.NO_SUCH_CODE, 0, this.prefix!.length);\n\n    const width = gifImage.width;\n    const height = gifImage.height;\n\n    if (\n      gifImage.x + width > this.info!.width ||\n      gifImage.y + height > this.info!.height\n    ) {\n      return undefined;\n    }\n\n    const colorMap =\n      gifImage.colorMap !== undefined\n        ? gifImage.colorMap\n        : this.info!.globalColorMap;\n\n    this.pixelCount = width * height;\n\n    const image = new MemoryImage({\n      width: width,\n      height: height,\n    });\n    const line = new Uint8Array(width);\n\n    if (gifImage.interlaced) {\n      const row = gifImage.y;\n      for (let i = 0, j = 0; i < 4; ++i) {\n        for (\n          let y = row + GifDecoder.INTERLACED_OFFSET[i];\n          y < row + height;\n          y += GifDecoder.INTERLACED_JUMP[i], ++j\n        ) {\n          if (!this.getLine(line)) {\n            return image;\n          }\n          GifDecoder.updateImage(image, y, colorMap, line);\n        }\n      }\n    } else {\n      for (let y = 0; y < height; ++y) {\n        if (!this.getLine(line)) {\n          return image;\n        }\n        GifDecoder.updateImage(image, y, colorMap, line);\n      }\n    }\n    return image;\n  }\n\n  private getLine(line: Uint8Array): boolean {\n    this.pixelCount = this.pixelCount! - line.length;\n\n    if (!this.decompressLine(line)) {\n      return false;\n    }\n\n    // Flush any remainder blocks.\n    if (this.pixelCount === 0) {\n      this.skipRemainder();\n    }\n\n    return true;\n  }\n\n  /**\n   * The LZ decompression routine:\n   * This version decompress the given gif file into Line of length LineLen.\n   * This routine can be called few times (one per scan line, for example), in\n   * order the complete the whole image.\n   */\n  private decompressLine(line: Uint8Array): boolean {\n    if (this.stackPtr > GifDecoder.LZ_MAX_CODE) {\n      return false;\n    }\n\n    const lineLen = line.length;\n    let i = 0;\n\n    if (this.stackPtr !== 0) {\n      // Let pop the stack off before continuing to read the gif file:\n      while (this.stackPtr !== 0 && i < lineLen) {\n        line[i++] = this.stack[--this.stackPtr];\n      }\n    }\n\n    let currentPrefix: number | undefined = undefined;\n\n    // Decode LineLen items.\n    while (i < lineLen) {\n      this.currentCode = this.decompressInput();\n      if (this.currentCode === undefined) {\n        return false;\n      }\n\n      if (this.currentCode === this.eofCode) {\n        // Note however that usually we will not be here as we will stop\n        // decoding as soon as we got all the pixel, or EOF code will\n        // not be read at all, and DGifGetLine/Pixel clean everything.\n        return false;\n      }\n\n      if (this.currentCode === this.clearCode) {\n        // We need to start over again:\n        for (let j = 0; j <= GifDecoder.LZ_MAX_CODE; j++) {\n          this.prefix![j] = GifDecoder.NO_SUCH_CODE;\n        }\n\n        this.runningCode = this.eofCode + 1;\n        this.runningBits = this.bitsPerPixel + 1;\n        this.maxCode1 = 1 << this.runningBits;\n        this.lastCode = GifDecoder.NO_SUCH_CODE;\n      } else {\n        // Its regular code - if in pixel range simply add it to output\n        // stream, otherwise trace to codes linked list until the prefix\n        // is in pixel range:\n        if (this.currentCode < this.clearCode) {\n          // This is simple - its pixel scalar, so add it to output:\n          line[i++] = this.currentCode;\n        } else {\n          // Its a code to needed to be traced: trace the linked list\n          // until the prefix is a pixel, while pushing the suffix\n          // pixels on our stack. If we done, pop the stack in reverse\n          // (thats what stack is good for!) order to output. */\n          if (this.prefix![this.currentCode] === GifDecoder.NO_SUCH_CODE) {\n            // Only allowed if CrntCode is exactly the running code:\n            // In that case CrntCode = XXXCode, CrntCode or the\n            // prefix code is last code and the suffix char is\n            // exactly the prefix of last code!\n            if (this.currentCode === this.runningCode - 2) {\n              currentPrefix = this.lastCode;\n              const prefixChar = GifDecoder.getPrefixChar(\n                this.prefix!,\n                this.lastCode,\n                this.clearCode\n              );\n              this.stack[this.stackPtr++] = prefixChar;\n              this.suffix[this.runningCode - 2] = prefixChar;\n            } else {\n              return false;\n            }\n          } else {\n            currentPrefix = this.currentCode;\n          }\n\n          // Now (if image is O.K.) we should not get an NO_SUCH_CODE\n          // During the trace. As we might loop forever, in case of\n          // defective image, we count the number of loops we trace\n          // and stop if we got LZ_MAX_CODE. obviously we can not\n          // loop more than that.\n          let j = 0;\n          while (\n            j++ <= GifDecoder.LZ_MAX_CODE &&\n            currentPrefix > this.clearCode &&\n            currentPrefix <= GifDecoder.LZ_MAX_CODE\n          ) {\n            this.stack[this.stackPtr++] = this.suffix[currentPrefix];\n            currentPrefix = this.prefix![currentPrefix];\n          }\n\n          if (\n            j >= GifDecoder.LZ_MAX_CODE ||\n            currentPrefix > GifDecoder.LZ_MAX_CODE\n          ) {\n            return false;\n          }\n\n          // Push the last character on stack:\n          this.stack[this.stackPtr++] = currentPrefix;\n\n          // Now lets pop all the stack into output:\n          while (this.stackPtr !== 0 && i < lineLen) {\n            line[i++] = this.stack[--this.stackPtr];\n          }\n        }\n\n        if (\n          this.lastCode !== GifDecoder.NO_SUCH_CODE &&\n          this.prefix![this.runningCode - 2] === GifDecoder.NO_SUCH_CODE\n        ) {\n          this.prefix![this.runningCode - 2] = this.lastCode;\n\n          if (this.currentCode === this.runningCode - 2) {\n            // Only allowed if CrntCode is exactly the running code:\n            // In that case CrntCode = XXXCode, CrntCode or the\n            // prefix code is last code and the suffix char is\n            // exactly the prefix of last code!\n            this.suffix[this.runningCode - 2] = GifDecoder.getPrefixChar(\n              this.prefix!,\n              this.lastCode,\n              this.clearCode\n            );\n          } else {\n            this.suffix[this.runningCode - 2] = GifDecoder.getPrefixChar(\n              this.prefix!,\n              this.currentCode,\n              this.clearCode\n            );\n          }\n        }\n\n        this.lastCode = this.currentCode;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * The LZ decompression input routine:\n   * This routine is responsible for the decompression of the bit stream from\n   * 8 bits (bytes) packets, into the real codes.\n   */\n  private decompressInput(): number | undefined {\n    // The image can't contain more than LZ_BITS per code.\n    if (this.runningBits > GifDecoder.LZ_BITS) {\n      return undefined;\n    }\n\n    while (this.currentShiftState < this.runningBits) {\n      // Needs to get more bytes from input stream for next code:\n      const nextByte = this.bufferedInput()!;\n\n      this.currentShiftDWord |= nextByte << this.currentShiftState;\n      this.currentShiftState += 8;\n    }\n\n    const code: number =\n      this.currentShiftDWord & GifDecoder.CODE_MASKS[this.runningBits];\n\n    this.currentShiftDWord >>= this.runningBits;\n    this.currentShiftState -= this.runningBits;\n\n    // If code cannot fit into RunningBits bits, must raise its size. Note\n    // however that codes above 4095 are used for special signaling.\n    // If we're using LZ_BITS bits already and we're at the max code, just\n    // keep using the table as it is, don't increment Private->RunningCode.\n    if (\n      this.runningCode < GifDecoder.LZ_MAX_CODE + 2 &&\n      ++this.runningCode > this.maxCode1 &&\n      this.runningBits < GifDecoder.LZ_BITS\n    ) {\n      this.maxCode1 <<= 1;\n      this.runningBits++;\n    }\n\n    return code;\n  }\n\n  /**\n   * This routines read one gif data block at a time and buffers it internally\n   * so that the decompression routine could access it.\n   * The routine returns the next byte from its internal buffer (or read next\n   * block in if buffer empty) and returns null on failure.\n   */\n  private bufferedInput(): number | undefined {\n    let nextByte = 0;\n    if (this.buffer![0] === 0) {\n      // Needs to read the next buffer - this one is empty:\n      this.buffer![0] = this.input!.readByte();\n\n      // There shouldn't be any empty data blocks here as the LZW spec\n      // says the LZW termination code should come first. Therefore we\n      // shouldn't be inside this routine at that point.\n      if (this.buffer![0] === 0) {\n        return undefined;\n      }\n\n      const from = this.input!.readBytes(this.buffer![0]).toUint8Array();\n      ListUtils.setRange(this.buffer!, 1, 1 + this.buffer![0], from);\n\n      nextByte = this.buffer![1];\n      // We use now the second place as last char read!\n      this.buffer![1] = 2;\n      this.buffer![0]--;\n    } else {\n      nextByte = this.buffer![this.buffer![1]++];\n      this.buffer![0]--;\n    }\n\n    return nextByte;\n  }\n\n  private initDecode(): void {\n    this.buffer = new Uint8Array(256);\n    this.stack = new Uint8Array(GifDecoder.LZ_MAX_CODE);\n    this.suffix = new Uint8Array(GifDecoder.LZ_MAX_CODE + 1);\n    this.prefix = new Uint32Array(GifDecoder.LZ_MAX_CODE + 1);\n  }\n\n  /**\n   * Is the given file a valid Gif image?\n   */\n  public isValidFile(bytes: Uint8Array): boolean {\n    this.input = new InputBuffer({\n      buffer: bytes,\n    });\n    return this.getInfo();\n  }\n\n  /**\n   * Validate the file is a Gif image and get information about it.\n   * If the file is not a valid Gif image, null is returned.\n   */\n  public startDecode(bytes: Uint8Array): GifInfo | undefined {\n    this.input = new InputBuffer({\n      buffer: bytes,\n    });\n\n    if (!this.getInfo()) {\n      return undefined;\n    }\n\n    try {\n      while (!this.input.isEOS) {\n        const recordType = this.input.readByte();\n        switch (recordType) {\n          case GifDecoder.IMAGE_DESC_RECORD_TYPE: {\n            const gifImage = this.skipImage();\n            if (gifImage === undefined) {\n              return this.info;\n            }\n            this.info!.frames.push(gifImage);\n            break;\n          }\n          case GifDecoder.EXTENSION_RECORD_TYPE: {\n            const extCode = this.input.readByte();\n            if (extCode === GifDecoder.APPLICATION_EXT) {\n              this.readApplicationExt(this.input);\n            } else if (extCode === GifDecoder.GRAPHIC_CONTROL_EXT) {\n              this.readGraphicsControlExt(this.input);\n            } else {\n              this.skipRemainder();\n            }\n            break;\n          }\n          case GifDecoder.TERMINATE_RECORD_TYPE: {\n            // this._numFrames = info.numFrames;\n            return this.info;\n          }\n          default:\n            break;\n        }\n      }\n    } catch (error) {\n      const strError = JSON.stringify(error);\n      throw new ImageError(strError);\n    }\n\n    // this._numFrames = info.numFrames;\n    return this.info;\n  }\n\n  public decodeFrame(frame: number): MemoryImage | undefined {\n    if (this.input === undefined || this.info === undefined) {\n      return undefined;\n    }\n\n    if (frame >= this.info.frames.length || frame < 0) {\n      return undefined;\n    }\n\n    // this._frame = frame;\n    const gifImage = this.info.frames[frame];\n    this.input.offset = gifImage.inputPosition;\n\n    return this.decodeFrameImage(this.info.frames[frame]);\n  }\n\n  public decodeHdrFrame(frame: number): HdrImage | undefined {\n    const img = this.decodeFrame(frame);\n    if (img === undefined) {\n      return undefined;\n    }\n    return HdrImage.fromImage(img);\n  }\n\n  /**\n   * Decode all of the frames of an animated gif. For single image gifs,\n   * this will return an animation with a single frame.\n   */\n  public decodeAnimation(bytes: Uint8Array): FrameAnimation | undefined {\n    if (this.startDecode(bytes) === undefined) {\n      return undefined;\n    }\n\n    if (this.input === undefined || this.info === undefined) {\n      return undefined;\n    }\n\n    const animation = new FrameAnimation({\n      width: this.info.width,\n      height: this.info.height,\n      loopCount: this.repeat,\n    });\n\n    let lastImage: MemoryImage | undefined = undefined;\n\n    for (let i = 0; i < this.info.numFrames; ++i) {\n      const frame = this.info.frames[i];\n      const image = this.decodeFrame(i);\n      if (image === undefined) {\n        return undefined;\n      }\n\n      if (lastImage === undefined) {\n        lastImage = image;\n        // Convert to MS\n        lastImage.duration = frame.duration * 10;\n        animation.addFrame(lastImage);\n        continue;\n      }\n\n      if (\n        image.width === lastImage.width &&\n        image.height === lastImage.height &&\n        frame.x === 0 &&\n        frame.y === 0 &&\n        frame.clearFrame\n      ) {\n        lastImage = image;\n        // Convert to MS\n        lastImage.duration = frame.duration * 10;\n        animation.addFrame(lastImage);\n        continue;\n      }\n\n      if (frame.clearFrame) {\n        lastImage = new MemoryImage({\n          width: lastImage.width,\n          height: lastImage.height,\n        });\n        const colorMap =\n          frame.colorMap !== undefined\n            ? frame.colorMap\n            : this.info!.globalColorMap;\n        lastImage.fill(colorMap!.getColor(this.info!.backgroundColor));\n      } else {\n        lastImage = MemoryImage.from(lastImage);\n      }\n\n      CopyIntoTransform.copyInto({\n        dst: lastImage,\n        src: image,\n        dstX: frame.x,\n        dstY: frame.y,\n      });\n\n      // Convert 1/100 sec to ms.\n      lastImage.duration = frame.duration * 10;\n\n      animation.addFrame(lastImage);\n    }\n\n    return animation;\n  }\n\n  public decodeImage(bytes: Uint8Array, frame = 0): MemoryImage | undefined {\n    if (this.startDecode(bytes) === undefined) {\n      return undefined;\n    }\n    // this._frame = 0;\n    // this._numFrames = 1;\n    return this.decodeFrame(frame);\n  }\n\n  public decodeHdrImage(bytes: Uint8Array, frame = 0): HdrImage | undefined {\n    const img = this.decodeImage(bytes, frame);\n    if (img === undefined) {\n      return undefined;\n    }\n    return HdrImage.fromImage(img);\n  }\n}\n", "/** @format */\n\nexport enum DitherKernel {\n  None,\n  FalseFloydSteinberg,\n  FloydSteinberg,\n  Stucki,\n  Atkinson,\n}\n", "/** @format */\n\nimport { MemoryImage } from '../../common/memory-image';\nimport { DitherKernel } from './dither-kernel';\nimport { NeuralQuantizer } from './neural-quantizer';\n\nexport abstract class DitherPixel {\n  private static ditherKernels = [\n    [\n      [0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0],\n    ],\n    // FalseFloydSteinberg\n    [\n      [3 / 8, 1, 0],\n      [3 / 8, 0, 1],\n      [2 / 8, 1, 1],\n    ],\n    // FloydSteinberg\n    [\n      [7 / 16, 1, 0],\n      [3 / 16, -1, 1],\n      [5 / 16, 0, 1],\n      [1 / 16, 1, 1],\n    ],\n    // Stucki\n    [\n      [8 / 42, 1, 0],\n      [4 / 42, 2, 0],\n      [2 / 42, -2, 1],\n      [4 / 42, -1, 1],\n      [8 / 42, 0, 1],\n      [4 / 42, 1, 1],\n      [2 / 42, 2, 1],\n      [1 / 42, -2, 2],\n      [2 / 42, -1, 2],\n      [4 / 42, 0, 2],\n      [2 / 42, 1, 2],\n      [1 / 42, 2, 2],\n    ],\n    //Atkinson:\n    [\n      [1 / 8, 1, 0],\n      [1 / 8, 2, 0],\n      [1 / 8, -1, 1],\n      [1 / 8, 0, 1],\n      [1 / 8, 1, 1],\n      [1 / 8, 0, 2],\n    ],\n  ];\n\n  public static getDitherPixels(\n    image: MemoryImage,\n    quantizer: NeuralQuantizer,\n    kernel: DitherKernel,\n    serpentine: boolean\n  ): Uint8Array {\n    if (kernel === DitherKernel.None) {\n      return quantizer.getIndexMap(image);\n    }\n\n    const ds = DitherPixel.ditherKernels[kernel];\n    const height = image.height;\n    const width = image.width;\n    const data = new Uint8Array(image.getBytes());\n\n    const indexedPixels = new Uint8Array(width * height);\n    const colorMap = quantizer.colorMap8;\n\n    let direction = serpentine ? -1 : 1;\n    let index = 0;\n    for (let y = 0; y < height; y++) {\n      if (serpentine) {\n        direction *= -1;\n      }\n\n      const x0 = direction === 1 ? 0 : width - 1;\n      const x1 = direction === 1 ? width : 0;\n      for (let x = x0; x !== x1; x += direction, ++index) {\n        // Get original color\n        let idx = index * 4;\n        const r1 = data[idx];\n        const g1 = data[idx + 1];\n        const b1 = data[idx + 2];\n\n        // Get converted color\n        idx = quantizer.lookupRGB(r1, g1, b1);\n\n        indexedPixels[index] = idx;\n        idx *= 3;\n        const r2 = colorMap[idx];\n        const g2 = colorMap[idx + 1];\n        const b2 = colorMap[idx + 2];\n\n        const er = r1 - r2;\n        const eg = g1 - g2;\n        const eb = b1 - b2;\n\n        if (er !== 0 || eg !== 0 || eb !== 0) {\n          const i0 = direction === 1 ? 0 : ds.length - 1;\n          const i1 = direction === 1 ? ds.length : 0;\n          for (let i = i0; i !== i1; i += direction) {\n            const x1 = Math.trunc(ds[i][1]);\n            const y1 = Math.trunc(ds[i][2]);\n            if (\n              x1 + x >= 0 &&\n              x1 + x < width &&\n              y1 + y >= 0 &&\n              y1 + y < height\n            ) {\n              const d = ds[i][0];\n              idx = index + x1 + y1 * width;\n              idx *= 4;\n              data[idx] = Math.max(\n                0,\n                Math.min(255, Math.trunc(data[idx] + er * d))\n              );\n              data[idx + 1] = Math.max(\n                0,\n                Math.min(255, Math.trunc(data[idx + 1] + eg * d))\n              );\n              data[idx + 2] = Math.max(\n                0,\n                Math.min(255, Math.trunc(data[idx + 2] + eb * d))\n              );\n            }\n          }\n        }\n      }\n    }\n\n    return indexedPixels;\n  }\n}\n", "/** @format */\n\nimport { ColorUtils } from '../../common/color-utils';\nimport { MemoryImage } from '../../common/memory-image';\nimport { Quantizer } from './quantizer';\n\n/**\n * Compute a color map with a given number of colors that best represents\n * the given image.\n */\nexport class NeuralQuantizer implements Quantizer {\n  // No. of learning cycles\n  private static readonly numCycles: number = 100;\n\n  // Alpha starts at 1\n  private static readonly alphaBiasShift: number = 10;\n\n  // Biased by 10 bits\n  private static readonly initAlpha: number =\n    1 << NeuralQuantizer.alphaBiasShift;\n\n  private static readonly radiusBiasShift: number = 8;\n\n  private static readonly radiusBias: number =\n    1 << NeuralQuantizer.radiusBiasShift;\n\n  private static readonly alphaRadiusBiasShift: number =\n    NeuralQuantizer.alphaBiasShift + NeuralQuantizer.radiusBiasShift;\n\n  private static readonly alphaRadiusBias: number =\n    1 << NeuralQuantizer.alphaRadiusBiasShift;\n\n  // Factor of 1/30 each cycle\n  private static readonly radiusDec: number = 30;\n\n  private static readonly gamma: number = 1024;\n\n  private static readonly beta: number = 1 / 1024;\n\n  private static readonly betaGamma: number =\n    NeuralQuantizer.beta * NeuralQuantizer.gamma;\n\n  // Four primes near 500 - assume no image has a length so large\n  // that it is divisible by all four primes\n\n  private static readonly prime1 = 499;\n\n  private static readonly prime2 = 491;\n\n  private static readonly prime3 = 487;\n\n  private static readonly prime4 = 503;\n\n  private static readonly smallImageBytes = 3 * NeuralQuantizer.prime4;\n\n  private readonly netIndex = new Int32Array(256);\n\n  private samplingFactor: number;\n\n  // Number of colors used\n  private netSize = 16;\n\n  // Number of reserved colors used\n  private specials = 3;\n\n  // Reserved background color\n  private bgColor = 0;\n\n  private cutNetSize = 0;\n\n  private maxNetPos = 0;\n\n  // For 256 cols, radius starts at 32\n  private initRadius = 0;\n\n  private initBiasRadius = 0;\n\n  private radiusPower!: Int32Array;\n\n  /**\n   * The network itself\n   */\n  private network!: number[];\n\n  private _colorMap8!: Uint8Array;\n  public get colorMap8(): Uint8Array {\n    return this._colorMap8;\n  }\n\n  private _colorMap32!: Int32Array;\n  public get colorMap32(): Int32Array {\n    return this._colorMap32;\n  }\n\n  /**\n   * Bias array for learning\n   */\n  private bias!: number[];\n\n  // Freq array for learning\n  private freq!: number[];\n\n  /**\n   * How many colors are in the [colorMap]?\n   */\n  get numColors(): number {\n    return this.netSize;\n  }\n\n  /**\n   * 10 is a reasonable [samplingFactor] according to\n   * https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/.\n   */\n  constructor(image: MemoryImage, numberOfColors = 256, samplingFactor = 10) {\n    this.samplingFactor = samplingFactor;\n    this.initialize(numberOfColors);\n    this.addImage(image);\n  }\n\n  private initialize(numberOfColors: number): void {\n    // Number of colours used\n    this.netSize = Math.max(numberOfColors, 4);\n    this.cutNetSize = this.netSize - this.specials;\n    this.maxNetPos = this.netSize - 1;\n    // For 256 cols, radius starts at 32\n    this.initRadius = Math.floor(this.netSize / 8);\n    this.initBiasRadius = this.initRadius * NeuralQuantizer.radiusBias;\n    this._colorMap32 = new Int32Array(this.netSize * 4);\n    this._colorMap8 = new Uint8Array(this.netSize * 3);\n    // Number of reserved colors used\n    this.specials = 3;\n    this.bgColor = this.specials - 1;\n    this.radiusPower = new Int32Array(this.netSize >> 3);\n\n    this.network = new Array<number>(this.netSize * 3).fill(0);\n    this.bias = new Array<number>(this.netSize).fill(0);\n    this.freq = new Array<number>(this.netSize).fill(0);\n\n    // Black\n    this.network[0] = 0.0;\n    this.network[1] = 0.0;\n    this.network[2] = 0.0;\n\n    // White\n    this.network[3] = 255.0;\n    this.network[4] = 255.0;\n    this.network[5] = 255.0;\n\n    // RESERVED bgColor\n    // background\n    const f = 1.0 / this.netSize;\n    for (let i = 0; i < this.specials; ++i) {\n      this.freq[i] = f;\n      this.bias[i] = 0.0;\n    }\n\n    for (let i = this.specials, p = this.specials * 3; i < this.netSize; ++i) {\n      this.network[p++] = (255.0 * (i - this.specials)) / this.cutNetSize;\n      this.network[p++] = (255.0 * (i - this.specials)) / this.cutNetSize;\n      this.network[p++] = (255.0 * (i - this.specials)) / this.cutNetSize;\n\n      this.freq[i] = f;\n      this.bias[i] = 0.0;\n    }\n  }\n\n  private updateRadiusPower(rad: number, alpha: number): void {\n    for (let i = 0; i < rad; i++) {\n      this.radiusPower[i] = Math.trunc(\n        alpha *\n          (((rad * rad - i * i) * NeuralQuantizer.radiusBias) / (rad * rad))\n      );\n    }\n  }\n\n  private specialFind(b: number, g: number, r: number): number {\n    for (let i = 0, p = 0; i < this.specials; i++) {\n      if (\n        this.network[p++] === b &&\n        this.network[p++] === g &&\n        this.network[p++] === r\n      ) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Search for biased BGR values\n   */\n  private contest(b: number, g: number, r: number): number {\n    // Finds closest neuron (min dist) and updates freq\n    // finds best neuron (min dist-bias) and returns position\n    // for frequently chosen neurons, freq[i] is high and bias[i] is negative\n    // bias[i] = gamma*((1/netsize)-freq[i])\n\n    let bestd = 1.0e30;\n    let bestBiasDist: number = bestd;\n    let bestpos = -1;\n    let bestbiaspos: number = bestpos;\n\n    for (let i = this.specials, p = this.specials * 3; i < this.netSize; i++) {\n      let dist = this.network[p++] - b;\n      if (dist < 0) {\n        dist = -dist;\n      }\n      let a = this.network[p++] - g;\n      if (a < 0) {\n        a = -a;\n      }\n      dist += a;\n      a = this.network[p++] - r;\n      if (a < 0) {\n        a = -a;\n      }\n      dist += a;\n      if (dist < bestd) {\n        bestd = dist;\n        bestpos = i;\n      }\n\n      const biasDist = dist - this.bias[i];\n      if (biasDist < bestBiasDist) {\n        bestBiasDist = biasDist;\n        bestbiaspos = i;\n      }\n      this.freq[i] -= NeuralQuantizer.beta * this.freq[i];\n      this.bias[i] += NeuralQuantizer.betaGamma * this.freq[i];\n    }\n    this.freq[bestpos] += NeuralQuantizer.beta;\n    this.bias[bestpos] -= NeuralQuantizer.betaGamma;\n    return bestbiaspos;\n  }\n\n  private alterSingle(\n    alpha: number,\n    i: number,\n    b: number,\n    g: number,\n    r: number\n  ): void {\n    // Move neuron i towards biased (b,g,r) by factor alpha\n    const p = i * 3;\n    this.network[p] -= alpha * (this.network[p] - b);\n    this.network[p + 1] -= alpha * (this.network[p + 1] - g);\n    this.network[p + 2] -= alpha * (this.network[p + 2] - r);\n  }\n\n  private alterNeighbors(\n    _: number,\n    rad: number,\n    i: number,\n    b: number,\n    g: number,\n    r: number\n  ): void {\n    let lo = i - rad;\n    if (lo < this.specials - 1) {\n      lo = this.specials - 1;\n    }\n\n    let hi = i + rad;\n    if (hi > this.netSize) {\n      hi = this.netSize;\n    }\n\n    let j = i + 1;\n    let k = i - 1;\n    let m = 1;\n    while (j < hi || k > lo) {\n      const a = this.radiusPower[m++];\n      if (j < hi) {\n        const p = j * 3;\n        this.network[p] -=\n          (a * (this.network[p] - b)) / NeuralQuantizer.alphaRadiusBias;\n        this.network[p + 1] -=\n          (a * (this.network[p + 1] - g)) / NeuralQuantizer.alphaRadiusBias;\n        this.network[p + 2] -=\n          (a * (this.network[p + 2] - r)) / NeuralQuantizer.alphaRadiusBias;\n        j++;\n      }\n      if (k > lo) {\n        const p = k * 3;\n        this.network[p] -=\n          (a * (this.network[p] - b)) / NeuralQuantizer.alphaRadiusBias;\n        this.network[p + 1] -=\n          (a * (this.network[p + 1] - g)) / NeuralQuantizer.alphaRadiusBias;\n        this.network[p + 2] -=\n          (a * (this.network[p + 2] - r)) / NeuralQuantizer.alphaRadiusBias;\n        k--;\n      }\n    }\n  }\n\n  private learn(image: MemoryImage): void {\n    let biasRadius = this.initBiasRadius;\n    const alphaDec = 30 + Math.floor((this.samplingFactor - 1) / 3);\n    const lengthCount = image.length;\n    const samplePixels = Math.floor(lengthCount / this.samplingFactor);\n    let delta = Math.max(\n      Math.floor(samplePixels / NeuralQuantizer.numCycles),\n      1\n    );\n    let alpha = NeuralQuantizer.initAlpha;\n\n    if (delta === 0) {\n      delta = 1;\n    }\n\n    let rad = biasRadius >> NeuralQuantizer.radiusBiasShift;\n    if (rad <= 1) {\n      rad = 0;\n    }\n\n    this.updateRadiusPower(rad, alpha);\n\n    let step = 0;\n    let pos = 0;\n    if (lengthCount < NeuralQuantizer.smallImageBytes) {\n      this.samplingFactor = 1;\n      step = 1;\n    } else if (lengthCount % NeuralQuantizer.prime1 !== 0) {\n      step = NeuralQuantizer.prime1;\n    } else {\n      if (lengthCount % NeuralQuantizer.prime2 !== 0) {\n        step = NeuralQuantizer.prime2;\n      } else {\n        if (lengthCount % NeuralQuantizer.prime3 !== 0) {\n          step = NeuralQuantizer.prime3;\n        } else {\n          step = NeuralQuantizer.prime4;\n        }\n      }\n    }\n\n    let i = 0;\n    while (i < samplePixels) {\n      const p = image.getPixelByIndex(pos);\n      const red = ColorUtils.getRed(p);\n      const green = ColorUtils.getGreen(p);\n      const blue = ColorUtils.getBlue(p);\n\n      if (i === 0) {\n        // Remember background colour\n        this.network[this.bgColor * 3] = blue;\n        this.network[this.bgColor * 3 + 1] = green;\n        this.network[this.bgColor * 3 + 2] = red;\n      }\n\n      let j = this.specialFind(blue, green, red);\n      j = j < 0 ? this.contest(blue, green, red) : j;\n\n      if (j >= this.specials) {\n        // Don't learn for specials\n        const a = Number(alpha) / NeuralQuantizer.initAlpha;\n        this.alterSingle(a, j, blue, green, red);\n        if (rad > 0) {\n          // Alter neighbours\n          this.alterNeighbors(a, rad, j, blue, green, red);\n        }\n      }\n\n      pos += step;\n      while (pos >= lengthCount) {\n        pos -= lengthCount;\n      }\n\n      i++;\n      if (i % delta === 0) {\n        alpha -= Math.floor(alpha / alphaDec);\n        biasRadius -= Math.floor(biasRadius / NeuralQuantizer.radiusDec);\n        rad = biasRadius >> NeuralQuantizer.radiusBiasShift;\n        if (rad <= 1) {\n          rad = 0;\n        }\n        this.updateRadiusPower(rad, alpha);\n      }\n    }\n  }\n\n  private fix(): void {\n    for (let i = 0, p = 0, q = 0; i < this.netSize; i++, q += 4) {\n      for (let j = 0; j < 3; ++j, ++p) {\n        let x = Math.trunc(0.5 + this.network[p]);\n        if (x < 0) {\n          x = 0;\n        }\n        if (x > 255) {\n          x = 255;\n        }\n        this._colorMap32[q + j] = x;\n      }\n      this._colorMap32[q + 3] = i;\n    }\n  }\n\n  /**\n   * Insertion sort of network and building of netindex[0..255]\n   */\n  private inxBuild(): void {\n    let previousColor = 0;\n    let startPos = 0;\n\n    for (let i = 0, p = 0; i < this.netSize; i++, p += 4) {\n      let smallpos = i;\n      // Index on g\n      let smallval = this._colorMap32[p + 1];\n\n      // Find smallest in i..netsize-1\n      for (let j = i + 1, q = p + 4; j < this.netSize; j++, q += 4) {\n        if (this._colorMap32[q + 1] < smallval) {\n          // Index on g\n          smallpos = j;\n          // Index on g\n          smallval = this._colorMap32[q + 1];\n        }\n      }\n\n      const q = smallpos * 4;\n\n      // Swap p (i) and q (smallpos) entries\n      if (i !== smallpos) {\n        let j = this._colorMap32[q];\n        this._colorMap32[q] = this._colorMap32[p];\n        this._colorMap32[p] = j;\n\n        j = this._colorMap32[q + 1];\n        this._colorMap32[q + 1] = this._colorMap32[p + 1];\n        this._colorMap32[p + 1] = j;\n\n        j = this._colorMap32[q + 2];\n        this._colorMap32[q + 2] = this._colorMap32[p + 2];\n        this.colorMap32[p + 2] = j;\n\n        j = this._colorMap32[q + 3];\n        this._colorMap32[q + 3] = this._colorMap32[p + 3];\n        this._colorMap32[p + 3] = j;\n      }\n\n      // SmallVal entry is now in position i\n      if (smallval !== previousColor) {\n        this.netIndex[previousColor] = (startPos + i) >> 1;\n        for (let j = previousColor + 1; j < smallval; j++) {\n          this.netIndex[j] = i;\n        }\n        previousColor = smallval;\n        startPos = i;\n      }\n    }\n\n    this.netIndex[previousColor] = (startPos + this.maxNetPos) >> 1;\n    for (let j = previousColor + 1; j < 256; j++) {\n      // Really 256\n      this.netIndex[j] = this.maxNetPos;\n    }\n  }\n\n  private copyColorMap(): void {\n    for (let i = 0, p = 0, q = 0; i < this.netSize; ++i) {\n      this._colorMap8[p++] = Math.abs(this._colorMap32[q + 2]) & 0xff;\n      this._colorMap8[p++] = Math.abs(this._colorMap32[q + 1]) & 0xff;\n      this._colorMap8[p++] = Math.abs(this._colorMap32[q]) & 0xff;\n      q += 4;\n    }\n  }\n\n  /**\n   * Add an image to the quantized color table.\n   */\n  private addImage(image: MemoryImage): void {\n    this.learn(image);\n    this.fix();\n    this.inxBuild();\n    this.copyColorMap();\n  }\n\n  /**\n   * Search for BGR values 0..255 and return color index\n   */\n  private inxSearch(b: number, g: number, r: number): number {\n    // Biggest possible dist is 256*3\n    let bestd = 1000;\n    let best = -1;\n    // Index on g\n    let i = this.netIndex[g];\n    // Start at netindex[g] and work outwards\n    let j = i - 1;\n\n    while (i < this.netSize || j >= 0) {\n      if (i < this.netSize) {\n        const p = i * 4;\n        let dist = this._colorMap32[p + 1] - g;\n        // Inx key\n        if (dist >= bestd) {\n          // Stop iter\n          i = this.netSize;\n        } else {\n          if (dist < 0) {\n            dist = -dist;\n          }\n          let a = this._colorMap32[p] - b;\n          if (a < 0) {\n            a = -a;\n          }\n          dist += a;\n          if (dist < bestd) {\n            a = this._colorMap32[p + 2] - r;\n            if (a < 0) {\n              a = -a;\n            }\n            dist += a;\n            if (dist < bestd) {\n              bestd = dist;\n              best = i;\n            }\n          }\n          i++;\n        }\n      }\n\n      if (j >= 0) {\n        const p = j * 4;\n        // Inx key - reverse dif\n        let dist = g - this._colorMap32[p + 1];\n        if (dist >= bestd) {\n          // Stop iter\n          j = -1;\n        } else {\n          if (dist < 0) {\n            dist = -dist;\n          }\n          let a = this._colorMap32[p] - b;\n          if (a < 0) {\n            a = -a;\n          }\n          dist += a;\n          if (dist < bestd) {\n            a = this._colorMap32[p + 2] - r;\n            if (a < 0) {\n              a = -a;\n            }\n            dist += a;\n            if (dist < bestd) {\n              bestd = dist;\n              best = j;\n            }\n          }\n          j--;\n        }\n      }\n    }\n    return best;\n  }\n\n  /**\n   * Get a color from the [colorMap].\n   */\n  public color(index: number): number {\n    return ColorUtils.getColor(\n      this._colorMap8[index * 3],\n      this._colorMap8[index * 3 + 1],\n      this._colorMap8[index * 3 + 2]\n    );\n  }\n\n  /**\n   * Find the index of the closest color to [c] in the [colorMap].\n   */\n  public lookup(c: number): number {\n    const r = ColorUtils.getRed(c);\n    const g = ColorUtils.getGreen(c);\n    const b = ColorUtils.getBlue(c);\n    return this.inxSearch(b, g, r);\n  }\n\n  /**\n   * Find the index of the closest color to [r],[g],[b] in the [colorMap].\n   */\n  public lookupRGB(r: number, g: number, b: number): number {\n    return this.inxSearch(b, g, r);\n  }\n\n  /**\n   * Find the color closest to [c] in the [colorMap].\n   */\n  public getQuantizedColor(c: number): number {\n    const r = ColorUtils.getRed(c);\n    const g = ColorUtils.getGreen(c);\n    const b = ColorUtils.getBlue(c);\n    const a = ColorUtils.getAlpha(c);\n    const i = this.inxSearch(b, g, r) * 3;\n    return ColorUtils.getColor(\n      this._colorMap8[i],\n      this._colorMap8[i + 1],\n      this._colorMap8[i + 2],\n      a\n    );\n  }\n\n  /**\n   * Convert the [image] to an index map, mapping to this [colorMap].\n   */\n  public getIndexMap(image: MemoryImage): Uint8Array {\n    const map = new Uint8Array(image.width * image.height);\n    for (let i = 0, len = image.length; i < len; ++i) {\n      map[i] = this.lookup(image.getPixelByIndex(i));\n    }\n    return map;\n  }\n}\n", "/** @format */\n\nimport { FrameAnimation } from '../common/frame-animation';\nimport { MemoryImage } from '../common/memory-image';\nimport { TextCodec } from '../common/text-codec';\nimport { Encoder } from './encoder';\nimport { DitherKernel } from './util/dither-kernel';\nimport { DitherPixel } from './util/dither-pixel';\nimport { NeuralQuantizer } from './util/neural-quantizer';\nimport { OutputBuffer } from './util/output-buffer';\n\nexport interface GifEncoderInitOptions {\n  delay?: number;\n  repeat?: number;\n  samplingFactor?: number;\n  dither?: DitherKernel;\n  ditherSerpentine?: boolean;\n}\n\nexport class GifEncoder implements Encoder {\n  private static readonly gif89Id = 'GIF89a';\n\n  private static readonly imageDescRecordType = 0x2c;\n\n  private static readonly extensionRecordType = 0x21;\n\n  private static readonly terminateRecordType = 0x3b;\n\n  private static readonly applicationExt = 0xff;\n\n  private static readonly graphicControlExt = 0xf9;\n\n  private static readonly eof = -1;\n\n  private static readonly bits = 12;\n\n  // 80% occupancy\n  private static readonly hsize = 5003;\n\n  private static readonly masks = [\n    0x0000, 0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,\n    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff,\n  ];\n\n  private lastImage?: Uint8Array;\n\n  private lastImageDuration?: number;\n\n  private lastColorMap?: NeuralQuantizer;\n\n  private width!: number;\n\n  private height!: number;\n\n  private encodedFrames: number;\n\n  private curAccum = 0;\n\n  private curBits = 0;\n\n  private nBits = 0;\n\n  private initBits = 0;\n\n  private EOFCode = 0;\n\n  private maxCode = 0;\n\n  private clearCode = 0;\n\n  private freeEnt = 0;\n\n  private clearFlag = false;\n\n  private block!: Uint8Array;\n\n  private blockSize = 0;\n\n  private outputBuffer?: OutputBuffer;\n\n  private delay: number;\n\n  private repeat: number;\n\n  private samplingFactor: number;\n\n  private dither: DitherKernel;\n\n  private ditherSerpentine: boolean;\n\n  /**\n   * Does this encoder support animation?\n   */\n  private readonly _supportsAnimation = true;\n  get supportsAnimation(): boolean {\n    return this._supportsAnimation;\n  }\n\n  constructor(options?: GifEncoderInitOptions) {\n    this.delay = options?.delay ?? 80;\n    this.repeat = options?.repeat ?? 0;\n    this.samplingFactor = options?.samplingFactor ?? 10;\n    this.dither = options?.dither ?? DitherKernel.FloydSteinberg;\n    this.ditherSerpentine = options?.ditherSerpentine ?? false;\n    this.encodedFrames = 0;\n  }\n\n  private addImage(\n    image: Uint8Array | undefined,\n    width: number,\n    height: number,\n    colorMap: Uint8Array,\n    numColors: number\n  ): void {\n    // Image desc\n    this.outputBuffer!.writeByte(GifEncoder.imageDescRecordType);\n    // Image position x,y = 0,0\n    this.outputBuffer!.writeUint16(0);\n    this.outputBuffer!.writeUint16(0);\n    // Image size\n    this.outputBuffer!.writeUint16(width);\n    this.outputBuffer!.writeUint16(height);\n\n    // Local Color Map\n    // (0x80: Use LCM, 0x07: Palette Size (7 = 8-bit))\n    this.outputBuffer!.writeByte(0x87);\n    this.outputBuffer!.writeBytes(colorMap);\n    for (let i = numColors; i < 256; ++i) {\n      this.outputBuffer!.writeByte(0);\n      this.outputBuffer!.writeByte(0);\n      this.outputBuffer!.writeByte(0);\n    }\n\n    this.encodeLZW(image, width, height);\n  }\n\n  private encodeLZW(\n    image: Uint8Array | undefined,\n    width: number,\n    height: number\n  ): void {\n    this.curAccum = 0;\n    this.curBits = 0;\n    this.blockSize = 0;\n    this.block = new Uint8Array(256);\n\n    const initCodeSize = 8;\n    this.outputBuffer!.writeByte(initCodeSize);\n\n    const hTab = new Int32Array(GifEncoder.hsize);\n    const codeTab = new Int32Array(GifEncoder.hsize);\n    let remaining = width * height;\n    let curPixel = 0;\n\n    this.initBits = initCodeSize + 1;\n    this.nBits = this.initBits;\n    this.maxCode = (1 << this.nBits) - 1;\n    this.clearCode = 1 << (this.initBits - 1);\n    this.EOFCode = this.clearCode + 1;\n    this.clearFlag = false;\n    this.freeEnt = this.clearCode + 2;\n\n    const _nextPixel = () => {\n      if (remaining === 0) {\n        return GifEncoder.eof;\n      }\n      --remaining;\n      return image![curPixel++] & 0xff;\n    };\n\n    let ent = _nextPixel();\n\n    let hshift = 0;\n    for (let fcode = GifEncoder.hsize; fcode < 65536; fcode *= 2) {\n      hshift++;\n    }\n    hshift = 8 - hshift;\n\n    const hSizeReg = GifEncoder.hsize;\n    for (let i = 0; i < hSizeReg; ++i) {\n      hTab[i] = -1;\n    }\n\n    this.output(this.clearCode);\n\n    let outerLoop = true;\n    while (outerLoop) {\n      outerLoop = false;\n\n      let c = _nextPixel();\n      while (c !== GifEncoder.eof) {\n        const fcode = (c << GifEncoder.bits) + ent;\n        // XOR hashing\n        let i = (c << hshift) ^ ent;\n\n        if (hTab[i] === fcode) {\n          ent = codeTab[i];\n          c = _nextPixel();\n          continue;\n        } else if (hTab[i] >= 0) {\n          // Non-empty slot\n          // Secondary hash (after G. Knott)\n          let disp = hSizeReg - i;\n          if (i === 0) {\n            disp = 1;\n          }\n          do {\n            if ((i -= disp) < 0) {\n              i += hSizeReg;\n            }\n\n            if (hTab[i] === fcode) {\n              ent = codeTab[i];\n              outerLoop = true;\n              break;\n            }\n          } while (hTab[i] >= 0);\n          if (outerLoop) {\n            break;\n          }\n        }\n\n        this.output(ent);\n        ent = c;\n\n        if (this.freeEnt < 1 << GifEncoder.bits) {\n          // Code -> hashtable\n          codeTab[i] = this.freeEnt++;\n          hTab[i] = fcode;\n        } else {\n          for (let i = 0; i < GifEncoder.hsize; ++i) {\n            hTab[i] = -1;\n          }\n          this.freeEnt = this.clearCode + 2;\n          this.clearFlag = true;\n          this.output(this.clearCode);\n        }\n\n        c = _nextPixel();\n      }\n    }\n\n    this.output(ent);\n    this.output(this.EOFCode);\n\n    this.outputBuffer!.writeByte(0);\n  }\n\n  private output(code: number | undefined): void {\n    this.curAccum &= GifEncoder.masks[this.curBits];\n\n    if (this.curBits > 0) {\n      this.curAccum |= code! << this.curBits;\n    } else {\n      this.curAccum = code!;\n    }\n\n    this.curBits += this.nBits;\n\n    while (this.curBits >= 8) {\n      this.addToBlock(this.curAccum & 0xff);\n      this.curAccum >>= 8;\n      this.curBits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (this.freeEnt > this.maxCode || this.clearFlag) {\n      if (this.clearFlag) {\n        this.nBits = this.initBits;\n        this.maxCode = (1 << this.nBits) - 1;\n        this.clearFlag = false;\n      } else {\n        ++this.nBits;\n        if (this.nBits === GifEncoder.bits) {\n          this.maxCode = 1 << GifEncoder.bits;\n        } else {\n          this.maxCode = (1 << this.nBits) - 1;\n        }\n      }\n    }\n\n    if (code === this.EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (this.curBits > 0) {\n        this.addToBlock(this.curAccum & 0xff);\n        this.curAccum >>= 8;\n        this.curBits -= 8;\n      }\n      this.writeBlock();\n    }\n  }\n\n  private writeBlock(): void {\n    if (this.blockSize > 0) {\n      this.outputBuffer!.writeByte(this.blockSize);\n      this.outputBuffer!.writeBytes(this.block, this.blockSize);\n      this.blockSize = 0;\n    }\n  }\n\n  private addToBlock(c: number): void {\n    this.block[this.blockSize++] = c;\n    if (this.blockSize >= 254) {\n      this.writeBlock();\n    }\n  }\n\n  private writeApplicationExt(): void {\n    this.outputBuffer!.writeByte(GifEncoder.extensionRecordType);\n    this.outputBuffer!.writeByte(GifEncoder.applicationExt);\n    // Data block size\n    this.outputBuffer!.writeByte(11);\n    const appCodeUnits = TextCodec.getCodePoints('NETSCAPE2.0');\n    // App identifier\n    this.outputBuffer!.writeBytes(appCodeUnits);\n    this.outputBuffer!.writeBytes(new Uint8Array([0x03, 0x01]));\n    // Loop count\n    this.outputBuffer!.writeUint16(this.repeat);\n    // Block terminator\n    this.outputBuffer!.writeByte(0);\n  }\n\n  private writeGraphicsCtrlExt(): void {\n    this.outputBuffer!.writeByte(GifEncoder.extensionRecordType);\n    this.outputBuffer!.writeByte(GifEncoder.graphicControlExt);\n    // Data block size\n    this.outputBuffer!.writeByte(4);\n\n    const transparency = 0;\n    // Dispose = no action\n    const dispose = 0;\n\n    // packed fields\n    this.outputBuffer!.writeByte(0 | dispose | 0 | transparency);\n\n    // Delay x 1/100 sec\n    this.outputBuffer!.writeUint16(this.lastImageDuration ?? this.delay);\n    // Transparent color index\n    this.outputBuffer!.writeByte(0);\n    // Block terminator\n    this.outputBuffer!.writeByte(0);\n  }\n\n  // GIF header and Logical Screen Descriptor\n  private writeHeader(width: number, height: number): void {\n    const idCodeUnits = TextCodec.getCodePoints(GifEncoder.gif89Id);\n    this.outputBuffer!.writeBytes(idCodeUnits);\n    this.outputBuffer!.writeUint16(width);\n    this.outputBuffer!.writeUint16(height);\n    // global color map parameters (not being used).\n    this.outputBuffer!.writeByte(0);\n    // Background color index.\n    this.outputBuffer!.writeByte(0);\n    // Aspect\n    this.outputBuffer!.writeByte(0);\n  }\n\n  /**\n   * Encode the images that were added with [addFrame].\n   * After this has been called (returning the finishes GIF),\n   * calling [addFrame] for a new animation or image is safe again.\n   *\n   * [addFrame] will not encode the first image passed and after that\n   * always encode the previous image. Hence, the last image needs to be\n   * encoded here.\n   */\n  private finish(): Uint8Array | undefined {\n    let bytes: Uint8Array | undefined = undefined;\n    if (this.outputBuffer === undefined) {\n      return bytes;\n    }\n\n    if (this.encodedFrames === 0) {\n      this.writeHeader(this.width, this.height);\n      this.writeApplicationExt();\n    } else {\n      this.writeGraphicsCtrlExt();\n    }\n\n    this.addImage(\n      this.lastImage,\n      this.width,\n      this.height,\n      this.lastColorMap!.colorMap8,\n      256\n    );\n\n    this.outputBuffer.writeByte(GifEncoder.terminateRecordType);\n\n    this.lastImage = undefined;\n    this.lastColorMap = undefined;\n    this.encodedFrames = 0;\n\n    bytes = this.outputBuffer.getBytes();\n    this.outputBuffer = undefined;\n    return bytes;\n  }\n\n  /**\n   * This adds the frame passed to [image].\n   * After the last frame has been added, [finish] is required to be called.\n   * Optional frame [duration] is in 1/100 sec.\n   * */\n  public addFrame(image: MemoryImage, duration?: number): void {\n    if (this.outputBuffer === undefined) {\n      this.outputBuffer = new OutputBuffer();\n\n      this.lastColorMap = new NeuralQuantizer(image, 256, this.samplingFactor);\n      this.lastImage = DitherPixel.getDitherPixels(\n        image,\n        this.lastColorMap,\n        this.dither,\n        this.ditherSerpentine\n      );\n      this.lastImageDuration = duration;\n\n      this.width = image.width;\n      this.height = image.height;\n      return;\n    }\n\n    if (this.encodedFrames === 0) {\n      this.writeHeader(this.width, this.height);\n      this.writeApplicationExt();\n    }\n\n    this.writeGraphicsCtrlExt();\n\n    this.addImage(\n      this.lastImage,\n      this.width,\n      this.height,\n      this.lastColorMap!.colorMap8,\n      256\n    );\n    this.encodedFrames++;\n\n    this.lastColorMap = new NeuralQuantizer(image, 256, this.samplingFactor);\n    this.lastImage = DitherPixel.getDitherPixels(\n      image,\n      this.lastColorMap,\n      this.dither,\n      this.ditherSerpentine\n    );\n    this.lastImageDuration = duration;\n  }\n\n  /**\n   * Encode a single frame image.\n   */\n  public encodeImage(image: MemoryImage): Uint8Array {\n    this.addFrame(image);\n    return this.finish()!;\n  }\n\n  /**\n   * Encode an animation.\n   */\n  public encodeAnimation(animation: FrameAnimation): Uint8Array | undefined {\n    this.repeat = animation.loopCount;\n    for (const f of animation) {\n      this.addFrame(\n        f,\n        // Convert ms to 1 / 100 sec.\n        Math.floor(f.duration / 10)\n      );\n    }\n    return this.finish();\n  }\n}\n", "/** @format */\n\nimport { BmpInfo } from '../bmp/bmp-info';\n\nexport class IcoBmpInfo extends BmpInfo {\n  public get height(): number {\n    return Math.floor(this._height / 2);\n  }\n\n  public get ignoreAlphaChannel(): boolean {\n    return this.headerSize === 40 && this.bpp === 32\n      ? false\n      : super.ignoreAlphaChannel;\n  }\n}\n", "/** @format */\n\nexport class IcoInfoImage {\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _colorPalette: number;\n  public get colorPalette(): number {\n    return this._colorPalette;\n  }\n\n  private readonly _bytesSize: number;\n  public get bytesSize(): number {\n    return this._bytesSize;\n  }\n\n  private readonly _bytesOffset: number;\n  public get bytesOffset(): number {\n    return this._bytesOffset;\n  }\n\n  private readonly _colorPlanes: number;\n  public get colorPlanes(): number {\n    return this._colorPlanes;\n  }\n\n  private readonly _bitsPerPixel: number;\n  public get bitsPerPixel(): number {\n    return this._bitsPerPixel;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    colorPalette: number,\n    bytesSize: number,\n    bytesOffset: number,\n    colorPlanes: number,\n    bitsPerPixel: number\n  ) {\n    this._width = width;\n    this._height = height;\n    this._colorPalette = colorPalette;\n    this._bytesSize = bytesSize;\n    this._bytesOffset = bytesOffset;\n    this._colorPlanes = colorPlanes;\n    this._bitsPerPixel = bitsPerPixel;\n  }\n}\n", "/** @format */\n\nimport { DecodeInfo } from '../decode-info';\nimport { InputBuffer } from '../util/input-buffer';\nimport { IcoInfoImage } from './ico-info-image';\n\nconst TYPE_ICO = 1;\nconst TYPE_CUR = 2;\n\nexport class IcoInfo implements DecodeInfo {\n  private readonly _type?: number;\n  public get type(): number | undefined {\n    return this._type;\n  }\n\n  private readonly _images?: IcoInfoImage[];\n  public get images(): IcoInfoImage[] | undefined {\n    return this._images;\n  }\n\n  private readonly _numFrames: number;\n  public get numFrames(): number {\n    return this._numFrames;\n  }\n\n  private _width = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  private _height = 0;\n  public get height(): number {\n    return this._height;\n  }\n\n  private _backgroundColor = 0xffffffff;\n  public get backgroundColor(): number {\n    return this._backgroundColor;\n  }\n\n  constructor(numFrames: number, type?: number, images?: IcoInfoImage[]) {\n    this._numFrames = numFrames;\n    this._type = type;\n    this._images = images;\n  }\n\n  public static read(input: InputBuffer): IcoInfo | undefined {\n    if (input.readUint16() !== 0) {\n      return undefined;\n    }\n    const type = input.readUint16();\n    if (![TYPE_ICO, TYPE_CUR].includes(type)) {\n      return undefined;\n    }\n    if (type === TYPE_CUR) {\n      // We currently do not support CUR format.\n      return undefined;\n    }\n    const imageCount = input.readUint16();\n    const images: IcoInfoImage[] = [];\n    for (let i = 0; i < imageCount; i++) {\n      const width = input.readByte();\n      const height = input.readByte();\n      const colorPalette = input.readByte();\n      input.skip(1);\n      const colorPlanes = input.readUint16();\n      const bitsPerPixel = input.readUint16();\n      const bytesSize = input.readUint32();\n      const bytesOffset = input.readUint32();\n\n      const image = new IcoInfoImage(\n        width,\n        height,\n        colorPalette,\n        bytesSize,\n        bytesOffset,\n        colorPlanes,\n        bitsPerPixel\n      );\n      images.push(image);\n    }\n    return new IcoInfo(imageCount, type, images);\n  }\n}\n", "/** @format */\n\nexport interface PngFrameInitOptions {\n  sequenceNumber?: number;\n  width?: number;\n  height?: number;\n  xOffset?: number;\n  yOffset?: number;\n  delayNum?: number;\n  delayDen?: number;\n  dispose?: number;\n  blend?: number;\n}\n\n// Decodes a frame from a PNG animation.\nexport class PngFrame {\n  // DisposeMode\n  public static readonly APNG_DISPOSE_OP_NONE = 0;\n\n  public static readonly APNG_DISPOSE_OP_BACKGROUND = 1;\n\n  public static readonly APNG_DISPOSE_OP_PREVIOUS = 2;\n\n  // BlendMode\n  public static readonly APNG_BLEND_OP_SOURCE = 0;\n\n  public static readonly APNG_BLEND_OP_OVER = 1;\n\n  private readonly _fdat: number[] = [];\n  public get fdat(): number[] {\n    return this._fdat;\n  }\n\n  private _sequenceNumber?: number;\n  public get sequenceNumber(): number | undefined {\n    return this._sequenceNumber;\n  }\n\n  private _width?: number;\n  public get width(): number | undefined {\n    return this._width;\n  }\n\n  private _height?: number;\n  public get height(): number | undefined {\n    return this._height;\n  }\n\n  private _xOffset?: number;\n  public get xOffset(): number | undefined {\n    return this._xOffset;\n  }\n\n  private _yOffset?: number;\n  public get yOffset(): number | undefined {\n    return this._yOffset;\n  }\n\n  private _delayNum?: number;\n  public get delayNum(): number | undefined {\n    return this._delayNum;\n  }\n\n  private _delayDen?: number;\n  public get delayDen(): number | undefined {\n    return this._delayDen;\n  }\n\n  private _dispose?: number;\n  public get dispose(): number | undefined {\n    return this._dispose;\n  }\n\n  private _blend?: number;\n  public get blend(): number | undefined {\n    return this._blend;\n  }\n\n  public get delay() {\n    if (this._delayNum === undefined || this._delayDen === undefined) {\n      return 0;\n    }\n    if (this._delayDen === 0) {\n      return 0;\n    }\n    return this._delayNum / this._delayDen;\n  }\n\n  constructor(options: PngFrameInitOptions) {\n    this._sequenceNumber = options?.sequenceNumber;\n    this._width = options?.width;\n    this._height = options?.height;\n    this._xOffset = options?.xOffset;\n    this._yOffset = options?.yOffset;\n    this._delayNum = options?.delayNum;\n    this._delayDen = options?.delayDen;\n    this._dispose = options?.dispose;\n    this._blend = options?.blend;\n  }\n}\n", "/** @format */\n\nimport { DecodeInfo } from '../decode-info';\nimport { PngFrame } from './png-frame';\n\nexport interface PngInfoInitOptions {\n  width?: number;\n  height?: number;\n  bits?: number;\n  colorType?: number;\n  compressionMethod?: number;\n  filterMethod?: number;\n  interlaceMethod?: number;\n}\n\nexport class PngInfo implements DecodeInfo {\n  private _width = 0;\n  public set width(v: number) {\n    this._width = v;\n  }\n  public get width(): number {\n    return this._width;\n  }\n\n  private _height = 0;\n  public set height(v: number) {\n    this._height = v;\n  }\n  public get height(): number {\n    return this._height;\n  }\n\n  private _backgroundColor = 0x00ffffff;\n  public set backgroundColor(v: number) {\n    this._backgroundColor = v;\n  }\n  public get backgroundColor(): number {\n    return this._backgroundColor;\n  }\n\n  private _numFrames = 1;\n  public set numFrames(v: number) {\n    this._numFrames = v;\n  }\n  public get numFrames(): number {\n    return this._numFrames;\n  }\n\n  private _bits?: number;\n  public get bits(): number | undefined {\n    return this._bits;\n  }\n\n  private _colorType?: number;\n  public get colorType(): number | undefined {\n    return this._colorType;\n  }\n\n  private _compressionMethod?: number;\n  public get compressionMethod(): number | undefined {\n    return this._compressionMethod;\n  }\n\n  private _filterMethod?: number;\n  public get filterMethod(): number | undefined {\n    return this._filterMethod;\n  }\n\n  private _interlaceMethod?: number;\n  public get interlaceMethod(): number | undefined {\n    return this._interlaceMethod;\n  }\n\n  private _palette?: Uint8Array;\n  public set palette(v: Uint8Array | undefined) {\n    this._palette = v;\n  }\n  public get palette(): Uint8Array | undefined {\n    return this._palette;\n  }\n\n  private _transparency?: Uint8Array;\n  public set transparency(v: Uint8Array | undefined) {\n    this._transparency = v;\n  }\n  public get transparency(): Uint8Array | undefined {\n    return this._transparency;\n  }\n\n  private _colorLut?: number[];\n  public set colorLut(v: number[] | undefined) {\n    this._colorLut = v;\n  }\n  public get colorLut(): number[] | undefined {\n    return this._colorLut;\n  }\n\n  private _gamma?: number;\n  public set gamma(v: number | undefined) {\n    this._gamma = v;\n  }\n  public get gamma(): number | undefined {\n    return this._gamma;\n  }\n\n  private _iCCPName = '';\n  public set iCCPName(v: string) {\n    this._iCCPName = v;\n  }\n  public get iCCPName(): string {\n    return this._iCCPName;\n  }\n\n  private _iCCPCompression = 0;\n  public set iCCPCompression(v: number) {\n    this._iCCPCompression = v;\n  }\n  public get iCCPCompression(): number {\n    return this._iCCPCompression;\n  }\n\n  private _iCCPData?: Uint8Array;\n  public set iCCPData(v: Uint8Array | undefined) {\n    this._iCCPData = v;\n  }\n  public get iCCPData(): Uint8Array | undefined {\n    return this._iCCPData;\n  }\n\n  private _textData: Map<string, string> = new Map<string, string>();\n  public get textData(): Map<string, string> {\n    return this._textData;\n  }\n\n  private _repeat = 0;\n  public set repeat(v: number) {\n    this._repeat = v;\n  }\n  public get repeat(): number {\n    return this._repeat;\n  }\n\n  private readonly _idat: number[] = [];\n  public get idat(): number[] {\n    return this._idat;\n  }\n\n  private readonly _frames: PngFrame[] = [];\n  public get frames(): PngFrame[] {\n    return this._frames;\n  }\n\n  public get isAnimated(): boolean {\n    return this._frames.length > 0;\n  }\n\n  constructor(options?: PngInfoInitOptions) {\n    this._width = options?.width ?? 0;\n    this._height = options?.height ?? 0;\n    this._bits = options?.bits;\n    this._colorType = options?.colorType;\n    this._compressionMethod = options?.compressionMethod;\n    this._filterMethod = options?.filterMethod;\n    this._interlaceMethod = options?.interlaceMethod;\n  }\n}\n", "/** @format */\n\nimport { inflate } from 'uzip';\nimport { Color } from '../common/color';\nimport { ColorUtils } from '../common/color-utils';\nimport { Crc32 } from '../common/crc32';\nimport { FrameAnimation } from '../common/frame-animation';\nimport { ICCPCompressionMode } from '../common/iccp-compression-mode';\nimport { ICCProfileData } from '../common/icc_profile_data';\nimport { ListUtils } from '../common/list-utils';\nimport { MemoryImage } from '../common/memory-image';\nimport { RgbChannelSet } from '../common/rgb-channel-set';\nimport { TextCodec } from '../common/text-codec';\nimport { ImageError } from '../error/image-error';\nimport { NotImplementedError } from '../error/not-implemented-error';\nimport { HdrImage } from '../hdr/hdr-image';\nimport { CopyIntoTransform } from '../transform/copy-into';\nimport { DecodeInfo } from './decode-info';\nimport { Decoder } from './decoder';\nimport { PngFrame } from './png/png-frame';\nimport { PngInfo } from './png/png-info';\nimport { InputBuffer } from './util/input-buffer';\n\n/**\n * Decode a PNG encoded image.\n */\nexport class PngDecoder implements Decoder {\n  private static readonly GRAYSCALE = 0;\n\n  private static readonly RGB = 2;\n\n  private static readonly INDEXED = 3;\n\n  private static readonly GRAYSCALE_ALPHA = 4;\n\n  private static readonly RGBA = 6;\n\n  private static readonly FILTER_NONE = 0;\n\n  private static readonly FILTER_SUB = 1;\n\n  private static readonly FILTER_UP = 2;\n\n  private static readonly FILTER_AVERAGE = 3;\n\n  private static readonly FILTER_PAETH = 4;\n\n  private _info?: PngInfo;\n  public get info(): PngInfo | undefined {\n    return this._info;\n  }\n\n  private _input?: InputBuffer;\n  public get input(): InputBuffer | undefined {\n    return this._input;\n  }\n\n  private _progressY = 0;\n  public get progressY(): number {\n    return this._progressY;\n  }\n\n  private _bitBuffer = 0;\n  public get bitBuffer(): number {\n    return this._bitBuffer;\n  }\n\n  private _bitBufferLen = 0;\n  public get bitBufferLen(): number {\n    return this._bitBufferLen;\n  }\n\n  /**\n   * The number of frames that can be decoded.\n   */\n  public get numFrames(): number {\n    return this._info !== undefined ? this._info.numFrames : 0;\n  }\n\n  private static unfilter(\n    filterType: number,\n    bpp: number,\n    row: Uint8Array,\n    prevRow: Uint8Array\n  ): void {\n    const rowBytes = row.length;\n\n    switch (filterType) {\n      case PngDecoder.FILTER_NONE:\n        break;\n      case PngDecoder.FILTER_SUB:\n        for (let x = bpp; x < rowBytes; ++x) {\n          row[x] = (row[x] + row[x - bpp]) & 0xff;\n        }\n        break;\n      case PngDecoder.FILTER_UP:\n        for (let x = 0; x < rowBytes; ++x) {\n          row[x] = (row[x] + prevRow[x]) & 0xff;\n        }\n        break;\n      case PngDecoder.FILTER_AVERAGE:\n        for (let x = 0; x < rowBytes; ++x) {\n          const a = x < bpp ? 0 : row[x - bpp];\n          const b = prevRow[x];\n          row[x] = (row[x] + ((a + b) >> 1)) & 0xff;\n        }\n        break;\n      case PngDecoder.FILTER_PAETH:\n        for (let x = 0; x < rowBytes; ++x) {\n          const a = x < bpp ? 0 : row[x - bpp];\n          const b = prevRow[x];\n          const c = x < bpp ? 0 : prevRow[x - bpp];\n\n          const p = a + b - c;\n\n          const pa = Math.abs(p - a);\n          const pb = Math.abs(p - b);\n          const pc = Math.abs(p - c);\n\n          let paeth = 0;\n          if (pa <= pb && pa <= pc) {\n            paeth = a;\n          } else if (pb <= pc) {\n            paeth = b;\n          } else {\n            paeth = c;\n          }\n\n          row[x] = (row[x] + paeth) & 0xff;\n        }\n        break;\n      default:\n        throw new ImageError(`Invalid filter value: ${filterType}`);\n    }\n  }\n\n  private static convert16to8(c: number): number {\n    return c >> 8;\n  }\n\n  private static convert1to8(c: number): number {\n    return c === 0 ? 0 : 255;\n  }\n\n  private static convert2to8(c: number): number {\n    return c * 85;\n  }\n\n  private static convert4to8(c: number): number {\n    return c << 4;\n  }\n\n  /**\n   * Return the CRC of the bytes\n   */\n  private static crc(type: string, bytes: Uint8Array): number {\n    const typeCodeUnits = TextCodec.getCodePoints(type);\n    const crc = Crc32.getChecksum({\n      buffer: typeCodeUnits,\n    });\n    return Crc32.getChecksum({\n      buffer: bytes,\n      baseCrc: crc,\n    });\n  }\n\n  /**\n   * Process a pass of an interlaced image.\n   */\n  private processPass(\n    input: InputBuffer,\n    image: MemoryImage,\n    xOffset: number,\n    yOffset: number,\n    xStep: number,\n    yStep: number,\n    passWidth: number,\n    passHeight: number\n  ): void {\n    let channels = 1;\n    if (this._info!.colorType === PngDecoder.GRAYSCALE_ALPHA) {\n      channels = 2;\n    } else if (this._info!.colorType === PngDecoder.RGB) {\n      channels = 3;\n    } else if (this._info!.colorType === PngDecoder.RGBA) {\n      channels = 4;\n    }\n\n    const pixelDepth = channels * this._info!.bits!;\n    const bpp = (pixelDepth + 7) >> 3;\n    const rowBytes = (pixelDepth * passWidth + 7) >> 3;\n\n    const line = new Uint8Array(rowBytes);\n    const inData = [line, line];\n\n    const pixel = [0, 0, 0, 0];\n\n    // Let pi: number = 0;\n    for (\n      let srcY = 0, dstY = yOffset, ri = 0;\n      srcY < passHeight;\n      ++srcY, dstY += yStep, ri = 1 - ri, this._progressY++\n    ) {\n      const filterType = input.readByte();\n      inData[ri] = input.readBytes(rowBytes).toUint8Array();\n\n      const row = inData[ri];\n      const prevRow = inData[1 - ri];\n\n      // Before the image is compressed, it was filtered to improve compression.\n      // Reverse the filter now.\n      PngDecoder.unfilter(filterType, bpp, row, prevRow);\n\n      // Scanlines are always on byte boundaries, so for bit depths < 8,\n      // reset the bit stream counter.\n      this.resetBits();\n\n      const rowInput = new InputBuffer({\n        buffer: row,\n        bigEndian: true,\n      });\n\n      const blockHeight = xStep;\n      const blockWidth = xStep - xOffset;\n\n      // Let yMax: number = Math.min(dstY + blockHeight, _info.height);\n\n      for (\n        let srcX = 0, dstX = xOffset;\n        srcX < passWidth;\n        ++srcX, dstX += xStep\n      ) {\n        this.readPixel(rowInput, pixel);\n        const c = this.getColor(pixel);\n        image.setPixel(dstX, dstY, c);\n\n        if (blockWidth > 1 || blockHeight > 1) {\n          // Let xMax: number = Math.min(dstX + blockWidth, _info.width);\n          // let xPixels: number = xMax - dstX;\n          for (let i = 0; i < blockHeight; ++i) {\n            for (let j = 0; j < blockWidth; ++j) {\n              image.setPixelSafe(dstX + j, dstY + j, c);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private process(input: InputBuffer, image: MemoryImage): void {\n    let channels = 1;\n    if (this._info!.colorType === PngDecoder.GRAYSCALE_ALPHA) {\n      channels = 2;\n    } else if (this._info!.colorType === PngDecoder.RGB) {\n      channels = 3;\n    } else if (this._info!.colorType === PngDecoder.RGBA) {\n      channels = 4;\n    }\n\n    const pixelDepth = channels * this._info!.bits!;\n\n    const w = this._info!.width;\n    const h = this._info!.height;\n\n    const rowBytes = (w * pixelDepth + 7) >> 3;\n    const bpp = (pixelDepth + 7) >> 3;\n\n    const line = new Uint8Array(rowBytes);\n    const inData = [line, line];\n\n    const pixel = [0, 0, 0, 0];\n\n    for (let y = 0, pi = 0, ri = 0; y < h; ++y, ri = 1 - ri) {\n      const filterType = input.readByte();\n      inData[ri] = input.readBytes(rowBytes).toUint8Array();\n\n      const row = inData[ri];\n      const prevRow = inData[1 - ri];\n\n      // Before the image is compressed, it was filtered to improve compression.\n      // Reverse the filter now.\n      PngDecoder.unfilter(filterType, bpp, row, prevRow);\n\n      // Scanlines are always on byte boundaries, so for bit depths < 8,\n      // reset the bit stream counter.\n      this.resetBits();\n\n      const rowInput = new InputBuffer({\n        buffer: inData[ri],\n        bigEndian: true,\n      });\n\n      for (let x = 0; x < w; ++x) {\n        this.readPixel(rowInput, pixel);\n        image.setPixelByIndex(pi++, this.getColor(pixel));\n      }\n    }\n  }\n\n  private resetBits(): void {\n    this._bitBuffer = 0;\n    this._bitBufferLen = 0;\n  }\n\n  /**\n   * Read a number of bits from the input stream.\n   */\n  private readBits(input: InputBuffer, numBits: number): number {\n    if (numBits === 0) {\n      return 0;\n    }\n\n    if (numBits === 8) {\n      return input.readByte();\n    }\n\n    if (numBits === 16) {\n      return input.readUint16();\n    }\n\n    // Not enough buffer\n    while (this._bitBufferLen < numBits) {\n      if (input.isEOS) {\n        throw new ImageError('Invalid PNG data.');\n      }\n\n      // Input byte\n      const octet = input.readByte();\n\n      // Concat octet\n      this._bitBuffer = octet << this._bitBufferLen;\n      this._bitBufferLen += 8;\n    }\n\n    // Output byte\n    let mask = 0;\n    switch (numBits) {\n      case 1:\n        mask = 1;\n        break;\n      case 2:\n        mask = 3;\n        break;\n      case 4:\n        mask = 0xf;\n        break;\n      case 8:\n        mask = 0xff;\n        break;\n      case 16:\n        mask = 0xffff;\n        break;\n      default:\n        mask = 0;\n        break;\n    }\n\n    const octet = (this._bitBuffer >> (this._bitBufferLen - numBits)) & mask;\n\n    this._bitBufferLen -= numBits;\n\n    return octet;\n  }\n\n  /**\n   * Read the next pixel from the input stream.\n   */\n  private readPixel(input: InputBuffer, pixel: number[]): void {\n    switch (this._info!.colorType) {\n      case PngDecoder.GRAYSCALE:\n        pixel[0] = this.readBits(input, this._info!.bits!);\n        return;\n      case PngDecoder.RGB:\n        pixel[0] = this.readBits(input, this._info!.bits!);\n        pixel[1] = this.readBits(input, this._info!.bits!);\n        pixel[2] = this.readBits(input, this._info!.bits!);\n        return;\n      case PngDecoder.INDEXED:\n        pixel[0] = this.readBits(input, this._info!.bits!);\n        return;\n      case PngDecoder.GRAYSCALE_ALPHA:\n        pixel[0] = this.readBits(input, this._info!.bits!);\n        pixel[1] = this.readBits(input, this._info!.bits!);\n        return;\n      case PngDecoder.RGBA:\n        pixel[0] = this.readBits(input, this._info!.bits!);\n        pixel[1] = this.readBits(input, this._info!.bits!);\n        pixel[2] = this.readBits(input, this._info!.bits!);\n        pixel[3] = this.readBits(input, this._info!.bits!);\n        return;\n    }\n    throw new NotImplementedError(\n      `Invalid color type: ${this._info!.colorType}.`\n    );\n  }\n\n  /**\n   * Get the color with the list of components.\n   */\n  private getColor(raw: number[]): number {\n    switch (this._info!.colorType) {\n      case PngDecoder.GRAYSCALE: {\n        let g = 0;\n        switch (this._info!.bits) {\n          case 1:\n            g = PngDecoder.convert1to8(raw[0]);\n            break;\n          case 2:\n            g = PngDecoder.convert2to8(raw[0]);\n            break;\n          case 4:\n            g = PngDecoder.convert4to8(raw[0]);\n            break;\n          case 8:\n            g = raw[0];\n            break;\n          case 16:\n            g = PngDecoder.convert16to8(raw[0]);\n            break;\n        }\n\n        g = this._info!.colorLut![g];\n\n        if (this._info!.transparency !== undefined) {\n          const a =\n            ((this._info!.transparency[0] & 0xff) << 24) |\n            (this._info!.transparency[1] & 0xff);\n          if (raw[0] === a) {\n            return ColorUtils.getColor(g, g, g, 0);\n          }\n        }\n\n        return ColorUtils.getColor(g, g, g);\n      }\n      case PngDecoder.RGB: {\n        let r = 0;\n        let g = 0;\n        let b = 0;\n        switch (this._info!.bits) {\n          case 1:\n            r = PngDecoder.convert1to8(raw[0]);\n            g = PngDecoder.convert1to8(raw[1]);\n            b = PngDecoder.convert1to8(raw[2]);\n            break;\n          case 2:\n            r = PngDecoder.convert2to8(raw[0]);\n            g = PngDecoder.convert2to8(raw[1]);\n            b = PngDecoder.convert2to8(raw[2]);\n            break;\n          case 4:\n            r = PngDecoder.convert4to8(raw[0]);\n            g = PngDecoder.convert4to8(raw[1]);\n            b = PngDecoder.convert4to8(raw[2]);\n            break;\n          case 8:\n            r = raw[0];\n            g = raw[1];\n            b = raw[2];\n            break;\n          case 16:\n            r = PngDecoder.convert16to8(raw[0]);\n            g = PngDecoder.convert16to8(raw[1]);\n            b = PngDecoder.convert16to8(raw[2]);\n            break;\n        }\n\n        r = this._info!.colorLut![r]!;\n        g = this._info!.colorLut![g]!;\n        b = this._info!.colorLut![b]!;\n\n        if (this._info!.transparency !== undefined) {\n          const tr =\n            ((this._info!.transparency[0] & 0xff) << 8) |\n            (this._info!.transparency[1] & 0xff);\n          const tg =\n            ((this._info!.transparency[2] & 0xff) << 8) |\n            (this._info!.transparency[3] & 0xff);\n          const tb =\n            ((this._info!.transparency[4] & 0xff) << 8) |\n            (this._info!.transparency[5] & 0xff);\n          if (raw[0] === tr && raw[1] === tg && raw[2] === tb) {\n            return ColorUtils.getColor(r, g, b, 0);\n          }\n        }\n\n        return ColorUtils.getColor(r, g, b);\n      }\n      case PngDecoder.INDEXED: {\n        const p = raw[0] * 3;\n\n        const a =\n          this._info!.transparency !== undefined &&\n          raw[0] < this._info!.transparency.length\n            ? this._info!.transparency[raw[0]]\n            : 255;\n\n        if (p >= this._info!.palette!.length) {\n          return ColorUtils.getColor(255, 255, 255, a);\n        }\n\n        const r = this._info!.palette![p]!;\n        const g = this._info!.palette![p + 1]!;\n        const b = this._info!.palette![p + 2]!;\n\n        return ColorUtils.getColor(r, g, b, a);\n      }\n      case PngDecoder.GRAYSCALE_ALPHA: {\n        let g = 0;\n        let a = 0;\n        switch (this._info!.bits) {\n          case 1:\n            g = PngDecoder.convert1to8(raw[0]);\n            a = PngDecoder.convert1to8(raw[1]);\n            break;\n          case 2:\n            g = PngDecoder.convert2to8(raw[0]);\n            a = PngDecoder.convert2to8(raw[1]);\n            break;\n          case 4:\n            g = PngDecoder.convert4to8(raw[0]);\n            a = PngDecoder.convert4to8(raw[1]);\n            break;\n          case 8:\n            g = raw[0];\n            a = raw[1];\n            break;\n          case 16:\n            g = PngDecoder.convert16to8(raw[0]);\n            a = PngDecoder.convert16to8(raw[1]);\n            break;\n        }\n\n        g = this._info!.colorLut![g]!;\n\n        return ColorUtils.getColor(g, g, g, a);\n      }\n      case PngDecoder.RGBA: {\n        let r = 0;\n        let g = 0;\n        let b = 0;\n        let a = 0;\n        switch (this._info!.bits) {\n          case 1:\n            r = PngDecoder.convert1to8(raw[0]);\n            g = PngDecoder.convert1to8(raw[1]);\n            b = PngDecoder.convert1to8(raw[2]);\n            a = PngDecoder.convert1to8(raw[3]);\n            break;\n          case 2:\n            r = PngDecoder.convert2to8(raw[0]);\n            g = PngDecoder.convert2to8(raw[1]);\n            b = PngDecoder.convert2to8(raw[2]);\n            a = PngDecoder.convert2to8(raw[3]);\n            break;\n          case 4:\n            r = PngDecoder.convert4to8(raw[0]);\n            g = PngDecoder.convert4to8(raw[1]);\n            b = PngDecoder.convert4to8(raw[2]);\n            a = PngDecoder.convert4to8(raw[3]);\n            break;\n          case 8:\n            r = raw[0];\n            g = raw[1];\n            b = raw[2];\n            a = raw[3];\n            break;\n          case 16:\n            r = PngDecoder.convert16to8(raw[0]);\n            g = PngDecoder.convert16to8(raw[1]);\n            b = PngDecoder.convert16to8(raw[2]);\n            a = PngDecoder.convert16to8(raw[3]);\n            break;\n        }\n\n        r = this._info!.colorLut![r]!;\n        g = this._info!.colorLut![g]!;\n        b = this._info!.colorLut![b]!;\n\n        return ColorUtils.getColor(r, g, b, a);\n      }\n    }\n\n    throw new ImageError(`Invalid color type: ${this._info!.colorType}.`);\n  }\n\n  /**\n   * Is the given file a valid PNG image?\n   */\n  public isValidFile(bytes: Uint8Array): boolean {\n    const input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n    const pngHeader = input.readBytes(8);\n    const PNG_HEADER = [137, 80, 78, 71, 13, 10, 26, 10];\n    for (let i = 0; i < 8; ++i) {\n      if (pngHeader.getByte(i) !== PNG_HEADER[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Start decoding the data as an animation sequence, but don't actually\n   * process the frames until they are requested with decodeFrame.\n   */\n  public startDecode(bytes: Uint8Array): DecodeInfo | undefined {\n    this._input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n    const pngHeader = this._input.readBytes(8);\n    const expectedHeader = [137, 80, 78, 71, 13, 10, 26, 10];\n    for (let i = 0; i < 8; ++i) {\n      if (pngHeader.getByte(i) !== expectedHeader[i]) {\n        return undefined;\n      }\n    }\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const inputPos = this._input.position;\n      let chunkSize = this._input.readUint32();\n      const chunkType = this._input.readString(4);\n      switch (chunkType) {\n        case 'tEXt': {\n          if (this._info === undefined) {\n            this._info = new PngInfo();\n          }\n          const txtData = this._input.readBytes(chunkSize).toUint8Array();\n          for (let i = 0, l = txtData.length; i < l; ++i) {\n            if (txtData[i] === 0) {\n              const key = TextCodec.latin1Decoder.decode(\n                ListUtils.copyUint8(txtData, 0, i)\n              );\n              const text = TextCodec.latin1Decoder.decode(\n                ListUtils.copyUint8(txtData, i + 1)\n              );\n              this._info.textData.set(key, text);\n              break;\n            }\n          }\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'IHDR': {\n          const hdr = InputBuffer.from(this._input.readBytes(chunkSize));\n          const hdrBytes: Uint8Array = hdr.toUint8Array();\n\n          const width = hdr.readUint32();\n          const height = hdr.readUint32();\n          const bits = hdr.readByte();\n          const colorType = hdr.readByte();\n          const compressionMethod = hdr.readByte();\n          const filterMethod = hdr.readByte();\n          const interlaceMethod = hdr.readByte();\n\n          this._info = new PngInfo({\n            width: width,\n            height: height,\n            bits: bits,\n            colorType: colorType,\n            compressionMethod: compressionMethod,\n            filterMethod: filterMethod,\n            interlaceMethod: interlaceMethod,\n          });\n\n          // Validate some of the info in the header to make sure we support\n          // the proposed image data.\n          if (\n            ![\n              PngDecoder.GRAYSCALE,\n              PngDecoder.RGB,\n              PngDecoder.INDEXED,\n              PngDecoder.GRAYSCALE_ALPHA,\n              PngDecoder.RGBA,\n            ].includes(this._info.colorType!)\n          ) {\n            return undefined;\n          }\n\n          if (this._info.filterMethod !== 0) {\n            return undefined;\n          }\n\n          switch (this._info.colorType) {\n            case PngDecoder.GRAYSCALE:\n              if (![1, 2, 4, 8, 16].includes(this._info.bits!)) {\n                return undefined;\n              }\n              break;\n            case PngDecoder.RGB:\n              if (![8, 16].includes(this._info.bits!)) {\n                return undefined;\n              }\n              break;\n            case PngDecoder.INDEXED:\n              if (![1, 2, 4, 8].includes(this._info.bits!)) {\n                return undefined;\n              }\n              break;\n            case PngDecoder.GRAYSCALE_ALPHA:\n              if (![8, 16].includes(this._info.bits!)) {\n                return undefined;\n              }\n              break;\n            case PngDecoder.RGBA:\n              if (![8, 16].includes(this._info.bits!)) {\n                return undefined;\n              }\n              break;\n          }\n\n          const crc = this._input.readUint32();\n          const computedCrc = PngDecoder.crc(chunkType, hdrBytes);\n          if (crc !== computedCrc) {\n            throw new ImageError(`Invalid ${chunkType} checksum`);\n          }\n          break;\n        }\n        case 'PLTE': {\n          this._info!.palette = this._input.readBytes(chunkSize).toUint8Array();\n          const crc = this._input.readUint32();\n          const computedCrc = PngDecoder.crc(chunkType, this._info!.palette);\n          if (crc !== computedCrc) {\n            throw new ImageError(`Invalid ${chunkType} checksum`);\n          }\n          break;\n        }\n        case 'tRNS': {\n          this._info!.transparency = this._input\n            .readBytes(chunkSize)\n            .toUint8Array();\n          const crc = this._input.readUint32();\n          const computedCrc = PngDecoder.crc(\n            chunkType,\n            this._info!.transparency\n          );\n          if (crc !== computedCrc) {\n            throw new ImageError(`Invalid ${chunkType} checksum`);\n          }\n          break;\n        }\n        case 'IEND': {\n          // End of the image\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'gAMA': {\n          if (chunkSize !== 4) {\n            throw new ImageError('Invalid gAMA chunk');\n          }\n          const gammaInt = this._input.readUint32();\n          // CRC\n          this._input.skip(4);\n          // A gamma of 1.0 doesn't have any affect, so pretend we didn't get\n          // a gamma in that case.\n          if (gammaInt !== 100000) {\n            this._info!.gamma = gammaInt / 100000.0;\n          }\n          break;\n        }\n        case 'IDAT': {\n          this._info!.idat.push(inputPos);\n          this._input.skip(chunkSize);\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'acTL': {\n          // Animation control chunk\n          this._info!.numFrames = this._input.readUint32();\n          this._info!.repeat = this._input.readUint32();\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'fcTL': {\n          // Frame control chunk\n          const sequenceNumber = this._input.readUint32();\n          const width = this._input.readUint32();\n          const height = this._input.readUint32();\n          const xOffset = this._input.readUint32();\n          const yOffset = this._input.readUint32();\n          const delayNum = this._input.readUint16();\n          const delayDen = this._input.readUint16();\n          const dispose = this._input.readByte();\n          const blend = this._input.readByte();\n          // CRC\n          this._input.skip(4);\n\n          const frame: PngFrame = new PngFrame({\n            sequenceNumber: sequenceNumber,\n            width: width,\n            height: height,\n            xOffset: xOffset,\n            yOffset: yOffset,\n            delayNum: delayNum,\n            delayDen: delayDen,\n            dispose: dispose,\n            blend: blend,\n          });\n          this._info!.frames.push(frame);\n          break;\n        }\n        case 'fdAT': {\n          // @ts-ignore\n          const sequenceNumber = this._input.readUint32();\n          const frame = this._info!.frames[this._info!.frames.length - 1];\n          frame.fdat.push(inputPos);\n          this._input.skip(chunkSize - 4);\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'bKGD': {\n          if (this._info!.colorType === 3) {\n            const paletteIndex = this._input.readByte();\n            chunkSize--;\n            const p3 = paletteIndex * 3;\n            const r = this._info!.palette![p3]!;\n            const g = this._info!.palette![p3 + 1]!;\n            const b = this._info!.palette![p3 + 2]!;\n            this._info!.backgroundColor = Color.fromRgb(r, g, b);\n          } else if (\n            this._info!.colorType === 0 ||\n            this._info!.colorType === 4\n          ) {\n            /* Const gray: number = */\n            this._input.readUint16();\n            chunkSize -= 2;\n          } else if (\n            this._info!.colorType === 2 ||\n            this._info!.colorType === 6\n          ) {\n            /* Const r: number = */\n            this._input.readUint16();\n            /* Const g: number = */\n            this._input.readUint16();\n            /* Const b: number = */\n            this._input.readUint16();\n            chunkSize -= 24;\n          }\n          if (chunkSize > 0) {\n            this._input.skip(chunkSize);\n          }\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'iCCP': {\n          this._info!.iCCPName = this._input.readString();\n          // 0: deflate\n          this._info!.iCCPCompression = this._input.readByte();\n          chunkSize -= this._info!.iCCPName.length + 2;\n          const profile = this._input.readBytes(chunkSize);\n          this._info!.iCCPData = profile.toUint8Array();\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        default: {\n          this._input.skip(chunkSize);\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n      }\n\n      if (chunkType === 'IEND') {\n        break;\n      }\n\n      if (this._input.isEOS) {\n        return undefined;\n      }\n    }\n\n    return this._info;\n  }\n\n  /**\n   * Decode the frame (assuming [startDecode] has already been called).\n   */\n  public decodeFrame(frame: number): MemoryImage | undefined {\n    if (this._input === undefined || this._info === undefined) {\n      return undefined;\n    }\n\n    let imageData: Uint8Array | undefined = undefined;\n    let width: number | undefined = this._info.width;\n    let height: number | undefined = this._info.height;\n\n    if (!this._info.isAnimated || frame === 0) {\n      let totalSize = 0;\n      const dataBlocks: Uint8Array[] = new Array<Uint8Array>();\n      for (let i = 0, len = this._info.idat.length; i < len; ++i) {\n        this._input.offset = this._info.idat[i];\n        const chunkSize = this._input.readUint32();\n        const chunkType = this._input.readString(4);\n        const data = this._input.readBytes(chunkSize).toUint8Array();\n        totalSize += data.length;\n        dataBlocks.push(data);\n        const crc = this._input.readUint32();\n        const computedCrc = PngDecoder.crc(chunkType, data);\n        if (crc !== computedCrc) {\n          throw new ImageError(`Invalid ${chunkType} checksum`);\n        }\n      }\n      imageData = new Uint8Array(totalSize);\n      let offset = 0;\n      for (const data of dataBlocks) {\n        imageData.set(data, offset);\n        offset += data.length;\n      }\n    } else {\n      if (frame < 0 || frame >= this._info.frames.length) {\n        throw new ImageError(`Invalid Frame Number: ${frame}`);\n      }\n\n      const f = this._info.frames[frame];\n      width = f.width;\n      height = f.height;\n      let totalSize = 0;\n      const dataBlocks: Uint8Array[] = new Array<Uint8Array>();\n      for (let i = 0; i < f.fdat.length; ++i) {\n        this._input.offset = f.fdat[i];\n        const chunkSize = this._input.readUint32();\n        // fDat chunk header\n        this._input.readString(4);\n        // Sequence number\n        this._input.skip(4);\n        const data = this._input.readBytes(chunkSize - 4).toUint8Array();\n        totalSize += data.length;\n        dataBlocks.push(data);\n      }\n\n      imageData = new Uint8Array(totalSize);\n      let offset = 0;\n      for (const data of dataBlocks) {\n        imageData.set(data, offset);\n        offset += data.length;\n      }\n    }\n\n    const rgbChannelSet: RgbChannelSet =\n      this._info.colorType === PngDecoder.GRAYSCALE_ALPHA ||\n      this._info.colorType === PngDecoder.RGBA ||\n      this._info.transparency !== undefined\n        ? RgbChannelSet.rgba\n        : RgbChannelSet.rgb;\n\n    const image = new MemoryImage({\n      width: width!,\n      height: height!,\n      rgbChannelSet: rgbChannelSet,\n    });\n\n    let uncompressed: Uint8Array | undefined = undefined;\n    try {\n      uncompressed = inflate(imageData);\n    } catch (error) {\n      console.error(error);\n      return undefined;\n    }\n\n    // Input is the decompressed data.\n    const input = new InputBuffer({\n      buffer: uncompressed,\n      bigEndian: true,\n    });\n    this.resetBits();\n\n    // Set up a LUT to transform colors for gamma correction.\n    if (this._info.colorLut === undefined) {\n      this._info.colorLut = [];\n      for (let i = 0; i < 256; i++) {\n        const c = i;\n        // if (this._info.gamma != null) {\n        //     c = Math.trunc(Math.pow((c / 255.0), this._info.gamma) * 255.0);\n        // }\n        this._info.colorLut.push(c);\n      }\n\n      // Apply the LUT to the palette, if necessary.\n      if (this._info.palette !== undefined && this._info.gamma !== undefined) {\n        for (let i = 0; i < this._info.palette.length; ++i) {\n          this._info.palette[i] = this._info.colorLut[this._info.palette[i]];\n        }\n      }\n    }\n\n    const origW = this._info.width;\n    const origH = this._info.height;\n    this._info.width = width!;\n    this._info.height = height!;\n\n    const w = width!;\n    const h = height!;\n    this._progressY = 0;\n    if (this._info.interlaceMethod !== 0) {\n      this.processPass(input, image, 0, 0, 8, 8, (w + 7) >> 3, (h + 7) >> 3);\n      this.processPass(input, image, 4, 0, 8, 8, (w + 3) >> 3, (h + 7) >> 3);\n      this.processPass(input, image, 0, 4, 4, 8, (w + 3) >> 2, (h + 3) >> 3);\n      this.processPass(input, image, 2, 0, 4, 4, (w + 1) >> 2, (h + 3) >> 2);\n      this.processPass(input, image, 0, 2, 2, 4, (w + 1) >> 1, (h + 1) >> 2);\n      this.processPass(input, image, 1, 0, 2, 2, w >> 1, (h + 1) >> 1);\n      this.processPass(input, image, 0, 1, 1, 2, w, h >> 1);\n    } else {\n      this.process(input, image);\n    }\n\n    this._info.width = origW;\n    this._info.height = origH;\n\n    if (this._info.iCCPData !== undefined) {\n      image.iccProfile = new ICCProfileData(\n        this._info.iCCPName,\n        ICCPCompressionMode.deflate,\n        this._info.iCCPData\n      );\n    }\n\n    if (this._info.textData.size > 0) {\n      image.addTextData(this._info.textData);\n    }\n\n    return image;\n  }\n\n  public decodeHdrFrame(frame: number): HdrImage | undefined {\n    const img = this.decodeFrame(frame);\n    if (img === undefined) {\n      return undefined;\n    }\n    return HdrImage.fromImage(img);\n  }\n\n  public decodeAnimation(bytes: Uint8Array): FrameAnimation | undefined {\n    if (this.startDecode(bytes) === undefined) {\n      return undefined;\n    }\n\n    const animation = new FrameAnimation({\n      width: this._info!.width,\n      height: this._info!.height,\n    });\n\n    if (!this._info!.isAnimated) {\n      const image = this.decodeFrame(0)!;\n      animation.addFrame(image);\n      return animation;\n    }\n\n    let lastImage: MemoryImage | undefined = undefined;\n    for (let i = 0; i < this._info!.numFrames; ++i) {\n      const frame = this._info!.frames[i];\n      const image = this.decodeFrame(i);\n      if (image === undefined) {\n        continue;\n      }\n\n      if (lastImage === undefined) {\n        lastImage = image;\n        // Convert to MS\n        lastImage.duration = Math.trunc(frame.delay * 1000);\n        animation.addFrame(lastImage);\n        continue;\n      }\n\n      if (\n        image.width === lastImage.width &&\n        image.height === lastImage.height &&\n        frame.xOffset === 0 &&\n        frame.yOffset === 0 &&\n        frame.blend === PngFrame.APNG_BLEND_OP_SOURCE\n      ) {\n        lastImage = image;\n        // Convert to MS\n        lastImage.duration = Math.trunc(frame.delay * 1000);\n        animation.addFrame(lastImage);\n        continue;\n      }\n\n      const dispose = frame.dispose;\n      if (dispose === PngFrame.APNG_DISPOSE_OP_BACKGROUND) {\n        lastImage = new MemoryImage({\n          width: lastImage.width,\n          height: lastImage.height,\n        });\n        lastImage.fill(this._info!.backgroundColor);\n      } else if (dispose === PngFrame.APNG_DISPOSE_OP_PREVIOUS) {\n        lastImage = MemoryImage.from(lastImage);\n      } else {\n        lastImage = MemoryImage.from(lastImage);\n      }\n\n      // Convert to MS\n      lastImage.duration = Math.trunc(frame.delay * 1000);\n\n      CopyIntoTransform.copyInto({\n        dst: lastImage,\n        src: image,\n        dstX: frame.xOffset,\n        dstY: frame.yOffset,\n        blend: frame.blend === PngFrame.APNG_BLEND_OP_OVER,\n      });\n\n      animation.addFrame(lastImage);\n    }\n\n    return animation;\n  }\n\n  public decodeImage(bytes: Uint8Array, frame = 0): MemoryImage | undefined {\n    if (this.startDecode(bytes) === undefined) {\n      return undefined;\n    }\n    return this.decodeFrame(frame);\n  }\n\n  public decodeHdrImage(bytes: Uint8Array, frame = 0): HdrImage | undefined {\n    const img = this.decodeImage(bytes, frame);\n    if (img === undefined) {\n      return undefined;\n    }\n    return HdrImage.fromImage(img);\n  }\n}\n", "/** @format */\n\nimport { FrameAnimation } from '../common/frame-animation';\nimport { ListUtils } from '../common/list-utils';\nimport { MemoryImage } from '../common/memory-image';\nimport { NotImplementedError } from '../error/not-implemented-error';\nimport { HdrImage } from '../hdr/hdr-image';\nimport { BitmapFileHeader } from './bmp/bitmap-file-header';\nimport { DecodeInfo } from './decode-info';\nimport { Decoder } from './decoder';\nimport { DibDecoder } from './dib-decoder';\nimport { IcoBmpInfo } from './ico/ico-bmp-info';\nimport { IcoInfo } from './ico/ico-info';\nimport { PngDecoder } from './png-decoder';\nimport { InputBuffer } from './util/input-buffer';\nimport { OutputBuffer } from './util/output-buffer';\n\nexport class IcoDecoder implements Decoder {\n  _input?: InputBuffer;\n  _icoInfo?: IcoInfo;\n\n  get numFrames(): number {\n    return this._icoInfo !== undefined ? this._icoInfo.numFrames : 0;\n  }\n\n  public isValidFile(bytes: Uint8Array): boolean {\n    this._input = new InputBuffer({\n      buffer: bytes,\n    });\n    this._icoInfo = IcoInfo.read(this._input);\n    return this._icoInfo !== undefined;\n  }\n\n  public startDecode(bytes: Uint8Array): DecodeInfo | undefined {\n    this._input = new InputBuffer({\n      buffer: bytes,\n    });\n    this._icoInfo = IcoInfo.read(this._input);\n    return this._icoInfo;\n  }\n\n  public decodeFrame(frame: number): MemoryImage | undefined {\n    if (\n      this._input === undefined ||\n      this._icoInfo === undefined ||\n      frame >= this._icoInfo.numFrames\n    ) {\n      return undefined;\n    }\n    const imageInfo = this._icoInfo.images![frame];\n    const imageBuffer = ListUtils.copyUint8(\n      this._input.buffer,\n      this._input.start + imageInfo.bytesOffset,\n      this._input.start + imageInfo.bytesOffset + imageInfo.bytesSize\n    );\n\n    const png = new PngDecoder();\n    if (png.isValidFile(imageBuffer)) {\n      return png.decodeImage(imageBuffer);\n    }\n    // Should be bmp.\n    const dummyBmpHeader = new OutputBuffer({\n      size: 14,\n    });\n    dummyBmpHeader.writeUint16(BitmapFileHeader.BMP_HEADER_FILETYPE);\n    dummyBmpHeader.writeUint32(imageInfo.bytesSize);\n    dummyBmpHeader.writeUint32(0);\n    dummyBmpHeader.writeUint32(0);\n    const bmpInfo = new IcoBmpInfo(\n      new InputBuffer({\n        buffer: imageBuffer,\n      }),\n      new BitmapFileHeader(\n        new InputBuffer({\n          buffer: dummyBmpHeader.getBytes(),\n        })\n      )\n    );\n    if (bmpInfo.headerSize !== 40 && bmpInfo.planes !== 1) {\n      // Invalid header.\n      return undefined;\n    }\n    let offset = 0;\n    if (bmpInfo.totalColors === 0 && bmpInfo.bpp <= 8) {\n      // 14 + ...\n      offset = 40 + 4 * (1 << bmpInfo.bpp);\n    } else {\n      // 14 + ...\n      offset = 40 + 4 * bmpInfo.totalColors;\n    }\n    bmpInfo.fileHeader.offset = offset;\n    dummyBmpHeader.length -= 4;\n    dummyBmpHeader.writeUint32(offset);\n    const inp = new InputBuffer({\n      buffer: imageBuffer,\n    });\n    const bmp = new DibDecoder(inp, bmpInfo);\n    const image = bmp.decodeFrame(0);\n    if (image === undefined) {\n      return undefined;\n    }\n    if (bmpInfo.bpp >= 32) {\n      return image;\n    }\n    const padding = 32 - (bmpInfo.width % 32);\n    const rowLength = Math.floor(\n      (padding === 32 ? bmpInfo.width : bmpInfo.width + padding) / 8\n    );\n    // AND bitmask\n    for (let y = 0; y < bmpInfo.height; y++) {\n      const line = bmpInfo.readBottomUp ? y : image.height - 1 - y;\n      const row = inp.readBytes(rowLength);\n      for (let x = 0; x < bmpInfo.width; ) {\n        const b = row.readByte();\n        for (let j = 7; j > -1 && x < bmpInfo.width; j--) {\n          if ((b & (1 << j)) !== 0) {\n            // Just set the pixel to completely transparent.\n            image.setPixelRgba(x, line, 0, 0, 0, 0);\n          }\n          x++;\n        }\n      }\n    }\n    return image;\n  }\n\n  public decodeHdrFrame(frame: number): HdrImage | undefined {\n    const img = this.decodeFrame(frame);\n    if (img === undefined) {\n      return undefined;\n    }\n    return HdrImage.fromImage(img);\n  }\n\n  public decodeAnimation(_: Uint8Array): FrameAnimation | undefined {\n    throw new NotImplementedError();\n  }\n\n  public decodeImage(bytes: Uint8Array, frame = 0): MemoryImage | undefined {\n    const info = this.startDecode(bytes);\n    if (info === undefined) {\n      return undefined;\n    }\n    return this.decodeFrame(frame);\n  }\n\n  public decodeHdrImage(bytes: Uint8Array, frame = 0): HdrImage | undefined {\n    const img = this.decodeImage(bytes, frame);\n    if (img === undefined) {\n      return undefined;\n    }\n    return HdrImage.fromImage(img);\n  }\n\n  /**\n   * Decodes the largest frame.\n   */\n  public decodeImageLargest(bytes: Uint8Array): MemoryImage | undefined {\n    const info = this.startDecode(bytes);\n    if (info === undefined) {\n      return undefined;\n    }\n    let largestFrame = 0;\n    let largestSize = 0;\n    for (let i = 0; i < this._icoInfo!.images!.length; i++) {\n      const image = this._icoInfo!.images![i];\n      const size = image.width * image.height;\n      if (size > largestSize) {\n        largestSize = size;\n        largestFrame = i;\n      }\n    }\n    return this.decodeFrame(largestFrame);\n  }\n}\n", "/** @format */\n\nimport { deflate } from 'uzip';\nimport { BlendMode } from '../common/blend-mode';\nimport { ColorUtils } from '../common/color-utils';\nimport { Crc32 } from '../common/crc32';\nimport { DisposeMode } from '../common/dispose-mode';\nimport { FrameAnimation } from '../common/frame-animation';\nimport { ICCProfileData } from '../common/icc_profile_data';\nimport { MemoryImage } from '../common/memory-image';\nimport { RgbChannelSet } from '../common/rgb-channel-set';\nimport { TextCodec } from '../common/text-codec';\nimport { CompressionLevel } from '../common/typings';\nimport { Encoder } from './encoder';\nimport { OutputBuffer } from './util/output-buffer';\n\nexport interface PngEncoderInitOptions {\n  filter?: number;\n  level?: CompressionLevel;\n}\n\n/**\n * Encode an image to the PNG format.\n */\nexport class PngEncoder implements Encoder {\n  private static readonly FILTER_NONE = 0;\n\n  private static readonly FILTER_SUB = 1;\n\n  private static readonly FILTER_UP = 2;\n\n  private static readonly FILTER_AVERAGE = 3;\n\n  private static readonly FILTER_PAETH = 4;\n\n  private static readonly FILTER_AGRESSIVE = 5;\n\n  private rgbChannelSet?: RgbChannelSet;\n\n  private filter: number;\n\n  private level: number;\n\n  private repeat = 0;\n\n  private xOffset = 0;\n\n  private yOffset = 0;\n\n  private delay?: number;\n\n  private disposeMethod: DisposeMode = DisposeMode.none;\n\n  private blendMethod: BlendMode = BlendMode.source;\n\n  private width = 0;\n\n  private height = 0;\n\n  private frames = 0;\n\n  private sequenceNumber = 0;\n\n  private isAnimated = false;\n\n  private output?: OutputBuffer;\n\n  /**\n   * Does this encoder support animation?\n   */\n  private _supportsAnimation = true;\n  get supportsAnimation() {\n    return this._supportsAnimation;\n  }\n\n  constructor(options?: PngEncoderInitOptions) {\n    this.filter = options?.filter ?? PngEncoder.FILTER_PAETH;\n    this.level = options?.level ?? 6;\n  }\n\n  /**\n   * Return the CRC of the bytes\n   */\n  private static crc(type: string, bytes: Uint8Array): number {\n    const typeCodeUnits = TextCodec.getCodePoints(type);\n    const crc = Crc32.getChecksum({\n      buffer: typeCodeUnits,\n    });\n    return Crc32.getChecksum({\n      buffer: bytes,\n      baseCrc: crc,\n    });\n  }\n\n  private static writeChunk(\n    out: OutputBuffer,\n    type: string,\n    chunk: Uint8Array\n  ): void {\n    out.writeUint32(chunk.length);\n    const typeCodeUnits = TextCodec.getCodePoints(type);\n    out.writeBytes(typeCodeUnits);\n    out.writeBytes(chunk);\n    const crc = PngEncoder.crc(type, chunk);\n    out.writeUint32(crc);\n  }\n\n  private static filterSub(\n    image: MemoryImage,\n    oi: number,\n    row: number,\n    out: Uint8Array\n  ): number {\n    let oindex = oi;\n\n    out[oindex++] = PngEncoder.FILTER_SUB;\n\n    out[oindex++] = ColorUtils.getRed(image.getPixel(0, row));\n    out[oindex++] = ColorUtils.getGreen(image.getPixel(0, row));\n    out[oindex++] = ColorUtils.getBlue(image.getPixel(0, row));\n    if (image.rgbChannelSet === RgbChannelSet.rgba) {\n      out[oindex++] = ColorUtils.getAlpha(image.getPixel(0, row));\n    }\n\n    for (let x = 1; x < image.width; ++x) {\n      const ar = ColorUtils.getRed(image.getPixel(x - 1, row));\n      const ag = ColorUtils.getGreen(image.getPixel(x - 1, row));\n      const ab = ColorUtils.getBlue(image.getPixel(x - 1, row));\n\n      const r = ColorUtils.getRed(image.getPixel(x, row));\n      const g = ColorUtils.getGreen(image.getPixel(x, row));\n      const b = ColorUtils.getBlue(image.getPixel(x, row));\n\n      out[oindex++] = (r - ar) & 0xff;\n      out[oindex++] = (g - ag) & 0xff;\n      out[oindex++] = (b - ab) & 0xff;\n      if (image.rgbChannelSet === RgbChannelSet.rgba) {\n        const aa = ColorUtils.getAlpha(image.getPixel(x - 1, row));\n        const a = ColorUtils.getAlpha(image.getPixel(x, row));\n        out[oindex++] = (a - aa) & 0xff;\n      }\n    }\n\n    return oindex;\n  }\n\n  private static filterUp(\n    image: MemoryImage,\n    oi: number,\n    row: number,\n    out: Uint8Array\n  ): number {\n    let oindex = oi;\n\n    out[oindex++] = PngEncoder.FILTER_UP;\n\n    for (let x = 0; x < image.width; ++x) {\n      const br = row === 0 ? 0 : ColorUtils.getRed(image.getPixel(x, row - 1));\n      const bg =\n        row === 0 ? 0 : ColorUtils.getGreen(image.getPixel(x, row - 1));\n      const bb = row === 0 ? 0 : ColorUtils.getBlue(image.getPixel(x, row - 1));\n\n      const xr = ColorUtils.getRed(image.getPixel(x, row));\n      const xg = ColorUtils.getGreen(image.getPixel(x, row));\n      const xb = ColorUtils.getBlue(image.getPixel(x, row));\n\n      out[oindex++] = (xr - br) & 0xff;\n      out[oindex++] = (xg - bg) & 0xff;\n      out[oindex++] = (xb - bb) & 0xff;\n      if (image.rgbChannelSet === RgbChannelSet.rgba) {\n        const ba =\n          row === 0 ? 0 : ColorUtils.getAlpha(image.getPixel(x, row - 1));\n        const xa = ColorUtils.getAlpha(image.getPixel(x, row));\n        out[oindex++] = (xa - ba) & 0xff;\n      }\n    }\n\n    return oindex;\n  }\n\n  private static filterAverage(\n    image: MemoryImage,\n    oi: number,\n    row: number,\n    out: Uint8Array\n  ): number {\n    let oindex = oi;\n\n    out[oindex++] = PngEncoder.FILTER_AVERAGE;\n\n    for (let x = 0; x < image.width; ++x) {\n      const ar = x === 0 ? 0 : ColorUtils.getRed(image.getPixel(x - 1, row));\n      const ag = x === 0 ? 0 : ColorUtils.getGreen(image.getPixel(x - 1, row));\n      const ab = x === 0 ? 0 : ColorUtils.getBlue(image.getPixel(x - 1, row));\n\n      const br = row === 0 ? 0 : ColorUtils.getRed(image.getPixel(x, row - 1));\n      const bg =\n        row === 0 ? 0 : ColorUtils.getGreen(image.getPixel(x, row - 1));\n      const bb = row === 0 ? 0 : ColorUtils.getBlue(image.getPixel(x, row - 1));\n\n      const xr = ColorUtils.getRed(image.getPixel(x, row));\n      const xg = ColorUtils.getGreen(image.getPixel(x, row));\n      const xb = ColorUtils.getBlue(image.getPixel(x, row));\n\n      out[oindex++] = (xr - ((ar + br) >> 1)) & 0xff;\n      out[oindex++] = (xg - ((ag + bg) >> 1)) & 0xff;\n      out[oindex++] = (xb - ((ab + bb) >> 1)) & 0xff;\n      if (image.rgbChannelSet === RgbChannelSet.rgba) {\n        const aa =\n          x === 0 ? 0 : ColorUtils.getAlpha(image.getPixel(x - 1, row));\n        const ba =\n          row === 0 ? 0 : ColorUtils.getAlpha(image.getPixel(x, row - 1));\n        const xa = ColorUtils.getAlpha(image.getPixel(x, row));\n        out[oindex++] = (xa - ((aa + ba) >> 1)) & 0xff;\n      }\n    }\n\n    return oindex;\n  }\n\n  private static paethPredictor(a: number, b: number, c: number): number {\n    const p = a + b - c;\n    const pa = p > a ? p - a : a - p;\n    const pb = p > b ? p - b : b - p;\n    const pc = p > c ? p - c : c - p;\n    if (pa <= pb && pa <= pc) {\n      return a;\n    } else if (pb <= pc) {\n      return b;\n    }\n    return c;\n  }\n\n  private static filterPaeth(\n    image: MemoryImage,\n    oi: number,\n    row: number,\n    out: Uint8Array\n  ): number {\n    let oindex = oi;\n\n    out[oindex++] = PngEncoder.FILTER_PAETH;\n    for (let x = 0; x < image.width; ++x) {\n      const ar = x === 0 ? 0 : ColorUtils.getRed(image.getPixel(x - 1, row));\n      const ag = x === 0 ? 0 : ColorUtils.getGreen(image.getPixel(x - 1, row));\n      const ab = x === 0 ? 0 : ColorUtils.getBlue(image.getPixel(x - 1, row));\n\n      const br = row === 0 ? 0 : ColorUtils.getRed(image.getPixel(x, row - 1));\n      const bg =\n        row === 0 ? 0 : ColorUtils.getGreen(image.getPixel(x, row - 1));\n      const bb = row === 0 ? 0 : ColorUtils.getBlue(image.getPixel(x, row - 1));\n\n      const cr =\n        row === 0 || x === 0\n          ? 0\n          : ColorUtils.getRed(image.getPixel(x - 1, row - 1));\n      const cg =\n        row === 0 || x === 0\n          ? 0\n          : ColorUtils.getGreen(image.getPixel(x - 1, row - 1));\n      const cb =\n        row === 0 || x === 0\n          ? 0\n          : ColorUtils.getBlue(image.getPixel(x - 1, row - 1));\n\n      const xr = ColorUtils.getRed(image.getPixel(x, row));\n      const xg = ColorUtils.getGreen(image.getPixel(x, row));\n      const xb = ColorUtils.getBlue(image.getPixel(x, row));\n\n      const pr = PngEncoder.paethPredictor(ar, br, cr);\n      const pg = PngEncoder.paethPredictor(ag, bg, cg);\n      const pb = PngEncoder.paethPredictor(ab, bb, cb);\n\n      out[oindex++] = (xr - pr) & 0xff;\n      out[oindex++] = (xg - pg) & 0xff;\n      out[oindex++] = (xb - pb) & 0xff;\n      if (image.rgbChannelSet === RgbChannelSet.rgba) {\n        const aa =\n          x === 0 ? 0 : ColorUtils.getAlpha(image.getPixel(x - 1, row));\n        const ba =\n          row === 0 ? 0 : ColorUtils.getAlpha(image.getPixel(x, row - 1));\n        const ca =\n          row === 0 || x === 0\n            ? 0\n            : ColorUtils.getAlpha(image.getPixel(x - 1, row - 1));\n        const xa = ColorUtils.getAlpha(image.getPixel(x, row));\n        const pa = PngEncoder.paethPredictor(aa, ba, ca);\n        out[oindex++] = (xa - pa) & 0xff;\n      }\n    }\n\n    return oindex;\n  }\n\n  private static filterNone(\n    image: MemoryImage,\n    oi: number,\n    row: number,\n    out: Uint8Array\n  ): number {\n    let oindex = oi;\n    out[oindex++] = PngEncoder.FILTER_NONE;\n    for (let x = 0; x < image.width; ++x) {\n      const c = image.getPixel(x, row);\n      out[oindex++] = ColorUtils.getRed(c);\n      out[oindex++] = ColorUtils.getGreen(c);\n      out[oindex++] = ColorUtils.getBlue(c);\n      if (image.rgbChannelSet === RgbChannelSet.rgba) {\n        out[oindex++] = ColorUtils.getAlpha(image.getPixel(x, row));\n      }\n    }\n    return oindex;\n  }\n\n  private writeHeader(width: number, height: number): void {\n    // PNG file signature\n    this.output!.writeBytes(\n      new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a])\n    );\n\n    // IHDR chunk\n    const chunk = new OutputBuffer({\n      bigEndian: true,\n    });\n    chunk.writeUint32(width);\n    chunk.writeUint32(height);\n    chunk.writeByte(8);\n    chunk.writeByte(this.rgbChannelSet === RgbChannelSet.rgb ? 2 : 6);\n    // Compression method\n    chunk.writeByte(0);\n    // Filter method\n    chunk.writeByte(0);\n    // Interlace method\n    chunk.writeByte(0);\n    PngEncoder.writeChunk(this.output!, 'IHDR', chunk.getBytes());\n  }\n\n  private writeICCPChunk(_?: OutputBuffer, iccp?: ICCProfileData): void {\n    if (iccp === undefined) {\n      return;\n    }\n\n    const chunk = new OutputBuffer({\n      bigEndian: true,\n    });\n\n    // Name\n    const nameCodeUnits = TextCodec.getCodePoints(iccp.name);\n    chunk.writeBytes(nameCodeUnits);\n    chunk.writeByte(0);\n\n    // Compression\n    // 0 - deflate\n    chunk.writeByte(0);\n\n    // profile data\n    chunk.writeBytes(iccp.compressed());\n\n    PngEncoder.writeChunk(this.output!, 'iCCP', chunk.getBytes());\n  }\n\n  private writeAnimationControlChunk(): void {\n    const chunk = new OutputBuffer({\n      bigEndian: true,\n    });\n    // Number of frames\n    chunk.writeUint32(this.frames);\n    // Loop count\n    chunk.writeUint32(this.repeat);\n    PngEncoder.writeChunk(this.output!, 'acTL', chunk.getBytes());\n  }\n\n  private applyFilter(image: MemoryImage, out: Uint8Array): void {\n    let oi = 0;\n    for (let y = 0; y < image.height; ++y) {\n      switch (this.filter) {\n        case PngEncoder.FILTER_SUB:\n          oi = PngEncoder.filterSub(image, oi, y, out);\n          break;\n        case PngEncoder.FILTER_UP:\n          oi = PngEncoder.filterUp(image, oi, y, out);\n          break;\n        case PngEncoder.FILTER_AVERAGE:\n          oi = PngEncoder.filterAverage(image, oi, y, out);\n          break;\n        case PngEncoder.FILTER_PAETH:\n          oi = PngEncoder.filterPaeth(image, oi, y, out);\n          break;\n        case PngEncoder.FILTER_AGRESSIVE:\n          // TODO Apply all five filters and select the filter that produces\n          // the smallest sum of absolute values per row.\n          oi = PngEncoder.filterPaeth(image, oi, y, out);\n          break;\n        default:\n          oi = PngEncoder.filterNone(image, oi, y, out);\n          break;\n      }\n    }\n  }\n\n  private writeFrameControlChunk(): void {\n    const chunk = new OutputBuffer({\n      bigEndian: true,\n    });\n    chunk.writeUint32(this.sequenceNumber);\n    chunk.writeUint32(this.width);\n    chunk.writeUint32(this.height);\n    chunk.writeUint32(this.xOffset);\n    chunk.writeUint32(this.yOffset);\n    chunk.writeUint16(this.delay!);\n    // Delay denominator\n    chunk.writeUint16(1000);\n    chunk.writeByte(this.disposeMethod);\n    chunk.writeByte(this.blendMethod);\n    PngEncoder.writeChunk(this.output!, 'fcTL', chunk.getBytes());\n  }\n\n  private writeTextChunk(keyword: string, text: string): void {\n    const chunk = new OutputBuffer({\n      bigEndian: true,\n    });\n    const keywordBytes = TextCodec.getCodePoints(keyword);\n    const textBytes = TextCodec.getCodePoints(text);\n    chunk.writeBytes(keywordBytes);\n    chunk.writeByte(0);\n    chunk.writeBytes(textBytes);\n    PngEncoder.writeChunk(this.output!, 'tEXt', chunk.getBytes());\n  }\n\n  public addFrame(image: MemoryImage): void {\n    this.xOffset = image.xOffset;\n    this.yOffset = image.xOffset;\n    this.delay = image.duration;\n    this.disposeMethod = image.disposeMethod;\n    this.blendMethod = image.blendMethod;\n\n    if (this.output === undefined) {\n      this.output = new OutputBuffer({\n        bigEndian: true,\n      });\n\n      this.rgbChannelSet = image.rgbChannelSet;\n      this.width = image.width;\n      this.height = image.height;\n\n      this.writeHeader(this.width, this.height);\n\n      this.writeICCPChunk(this.output, image.iccProfile);\n\n      if (this.isAnimated) {\n        this.writeAnimationControlChunk();\n      }\n    }\n\n    // Include room for the filter bytes (1 byte per row).\n    const filteredImage = new Uint8Array(\n      image.width * image.height * image.numberOfChannels + image.height\n    );\n\n    this.applyFilter(image, filteredImage);\n\n    const compressed = deflate(filteredImage, {\n      level: this.level,\n    });\n\n    if (image.textData !== undefined) {\n      for (const [key, value] of image.textData) {\n        this.writeTextChunk(key, value);\n      }\n    }\n\n    if (this.isAnimated) {\n      this.writeFrameControlChunk();\n      this.sequenceNumber++;\n    }\n\n    if (this.sequenceNumber <= 1) {\n      PngEncoder.writeChunk(this.output!, 'IDAT', compressed);\n    } else {\n      // FdAT chunk\n      const fdat = new OutputBuffer({\n        bigEndian: true,\n      });\n      fdat.writeUint32(this.sequenceNumber);\n      fdat.writeBytes(compressed);\n      PngEncoder.writeChunk(this.output!, 'fdAT', fdat.getBytes());\n\n      this.sequenceNumber++;\n    }\n  }\n\n  public finish(): Uint8Array | undefined {\n    let bytes: Uint8Array | undefined = undefined;\n    if (this.output === undefined) {\n      return bytes;\n    }\n\n    PngEncoder.writeChunk(this.output, 'IEND', new Uint8Array());\n\n    this.sequenceNumber = 0;\n\n    bytes = this.output.getBytes();\n    this.output = undefined;\n    return bytes;\n  }\n\n  /**\n   * Encode a single frame image.\n   */\n  encodeImage(image: MemoryImage): Uint8Array {\n    this.isAnimated = false;\n    this.addFrame(image);\n    return this.finish()!;\n  }\n\n  /**\n   * Encode an animation.\n   */\n  public encodeAnimation(animation: FrameAnimation): Uint8Array | undefined {\n    this.isAnimated = true;\n    this.frames = animation.frames.length;\n    this.repeat = animation.loopCount;\n\n    for (const f of animation) {\n      this.addFrame(f);\n    }\n    return this.finish();\n  }\n}\n", "/** @format */\n\nimport { FrameAnimation } from '../common/frame-animation';\nimport { MemoryImage } from '../common/memory-image';\nimport { ImageError } from '../error/image-error';\nimport { Encoder } from './encoder';\nimport { PngEncoder } from './png-encoder';\nimport { OutputBuffer } from './util/output-buffer';\n\nexport abstract class WinEncoder implements Encoder {\n  protected _type = 0;\n  public get type(): number {\n    return this._type;\n  }\n\n  private _supportsAnimation = false;\n  get supportsAnimation(): boolean {\n    return this._supportsAnimation;\n  }\n\n  protected colorPlanesOrXHotSpot(_index: number): number {\n    return 0;\n  }\n\n  protected bitsPerPixelOrYHotSpot(_index: number): number {\n    return 0;\n  }\n\n  public encodeImages(images: MemoryImage[]): Uint8Array {\n    const count = images.length;\n\n    const out = new OutputBuffer();\n\n    // Header\n    // Reserved\n    out.writeUint16(0);\n    // Type: ICO => 1; CUR => 2\n    out.writeUint16(this.type);\n    out.writeUint16(count);\n\n    // File header with image directory byte size\n    let offset = 6 + count * 16;\n\n    const imageDatas: Uint8Array[] = [];\n\n    let i = 0;\n    for (const img of images) {\n      if (img.width > 256 || img.height > 256) {\n        throw new ImageError('ICO and CUR support only sizes until 256');\n      }\n\n      // Image width in pixels\n      out.writeByte(img.width);\n      // Image height in pixels\n      out.writeByte(img.height);\n      // Color count, should be 0 if more than 256 colors\n      out.writeByte(0);\n      // Reserved\n      out.writeByte(0);\n      out.writeUint16(this.colorPlanesOrXHotSpot(i));\n      out.writeUint16(this.bitsPerPixelOrYHotSpot(i));\n\n      // Use png instead of bmp encoded data, it's supported since Windows Vista\n      const data = new PngEncoder().encodeImage(img);\n\n      // Size of the image's data in bytes\n      out.writeUint32(data.length);\n\n      // Offset of data from the beginning of the file\n      out.writeUint32(offset);\n\n      // add the size of bytes to get the new begin of the next image\n      offset += data.length;\n      i++;\n      imageDatas.push(data);\n    }\n\n    for (const imageData of imageDatas) {\n      out.writeBytes(imageData);\n    }\n\n    return out.getBytes();\n  }\n\n  public encodeImage(image: MemoryImage): Uint8Array {\n    return this.encodeImages([image]);\n  }\n\n  public encodeAnimation(_: FrameAnimation): Uint8Array | undefined {\n    return undefined;\n  }\n}\n", "/** @format */\n\nimport { WinEncoder } from './win-encoder';\n\nexport class IcoEncoder extends WinEncoder {\n  protected _type = 1;\n\n  protected colorPlanesOrXHotSpot(_index: number): number {\n    return 0;\n  }\n\n  protected bitsPerPixelOrYHotSpot(_index: number): number {\n    return 32;\n  }\n}\n", "/** @format */\n\nexport class ComponentData {\n  private _hSamples: number;\n  public get hSamples(): number {\n    return this._hSamples;\n  }\n\n  private _maxHSamples: number;\n  public get maxHSamples(): number {\n    return this._maxHSamples;\n  }\n\n  private _vSamples: number;\n  public get vSamples(): number {\n    return this._vSamples;\n  }\n\n  private _maxVSamples: number;\n  public get maxVSamples(): number {\n    return this._maxVSamples;\n  }\n\n  private _lines: Array<Uint8Array>;\n  public get lines(): Array<Uint8Array> {\n    return this._lines;\n  }\n\n  private _hScaleShift: number;\n  public get hScaleShift(): number {\n    return this._hScaleShift;\n  }\n\n  private _vScaleShift: number;\n  public get vScaleShift(): number {\n    return this._vScaleShift;\n  }\n\n  constructor(\n    hSamples: number,\n    maxHSamples: number,\n    vSamples: number,\n    maxVSamples: number,\n    lines: Array<Uint8Array>\n  ) {\n    this._hSamples = hSamples;\n    this._maxHSamples = maxHSamples;\n    this._vSamples = vSamples;\n    this._maxVSamples = maxVSamples;\n    this._lines = lines;\n    this._hScaleShift = this._hSamples === 1 && this._maxHSamples === 2 ? 1 : 0;\n    this._vScaleShift = this._vSamples === 1 && this._maxVSamples === 2 ? 1 : 0;\n  }\n}\n", "/** @format */\n\nexport abstract class Jpeg {\n  public static readonly dctZigZag = [\n    0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36,\n    29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61,\n    54, 47, 55, 62, 63,\n    // Extra entries for safety in decoder\n    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,\n  ];\n\n  // The basic DCT block is 8x8 samples\n  public static readonly DCTSIZE = 8;\n  // DCTSIZE squared; # of elements in a block\n  public static readonly DCTSIZE2 = 64;\n  // Quantization tables are numbered 0..3\n  public static readonly NUM_QUANT_TBLS = 4;\n  // Huffman tables are numbered 0..3\n  public static readonly NUM_HUFF_TBLS = 4;\n  // Arith-coding tables are numbered 0..15\n  public static readonly NUM_ARITH_TBLS = 16;\n  // JPEG limit on # of components in one scan\n  public static readonly MAX_COMPS_IN_SCAN = 4;\n  // JPEG limit on sampling factors\n  public static readonly MAX_SAMP_FACTOR = 4;\n\n  public static readonly M_SOF0 = 0xc0;\n  public static readonly M_SOF1 = 0xc1;\n  public static readonly M_SOF2 = 0xc2;\n  public static readonly M_SOF3 = 0xc3;\n\n  public static readonly M_SOF5 = 0xc5;\n  public static readonly M_SOF6 = 0xc6;\n  public static readonly M_SOF7 = 0xc7;\n\n  public static readonly M_JPG = 0xc8;\n  public static readonly M_SOF9 = 0xc9;\n  public static readonly M_SOF10 = 0xca;\n  public static readonly M_SOF11 = 0xcb;\n\n  public static readonly M_SOF13 = 0xcd;\n  public static readonly M_SOF14 = 0xce;\n  public static readonly M_SOF15 = 0xcf;\n\n  public static readonly M_DHT = 0xc4;\n\n  public static readonly M_DAC = 0xcc;\n\n  public static readonly M_RST0 = 0xd0;\n  public static readonly M_RST1 = 0xd1;\n  public static readonly M_RST2 = 0xd2;\n  public static readonly M_RST3 = 0xd3;\n  public static readonly M_RST4 = 0xd4;\n  public static readonly M_RST5 = 0xd5;\n  public static readonly M_RST6 = 0xd6;\n  public static readonly M_RST7 = 0xd7;\n\n  public static readonly M_SOI = 0xd8;\n  public static readonly M_EOI = 0xd9;\n  public static readonly M_SOS = 0xda;\n  public static readonly M_DQT = 0xdb;\n  public static readonly M_DNL = 0xdc;\n  public static readonly M_DRI = 0xdd;\n  public static readonly M_DHP = 0xde;\n  public static readonly M_EXP = 0xdf;\n\n  // JFIF, JFXX, CIFF, AVI1, Ocad\n  public static readonly M_APP0 = 0xe0;\n  // EXIF, ExtendedXMP, XMP, QVCI, FLIR\n  public static readonly M_APP1 = 0xe1;\n  // ICC_Profile, FPXR, MPF, PreviewImage\n  public static readonly M_APP2 = 0xe2;\n  // Meta, Stim, PreviewImage\n  public static readonly M_APP3 = 0xe3;\n  // Scalado, FPXR, PreviewImage\n  public static readonly M_APP4 = 0xe4;\n  // RMETA, PreviewImage\n  public static readonly M_APP5 = 0xe5;\n  // EPPIM, NITF, HP_TDHD, GoPro\n  public static readonly M_APP6 = 0xe6;\n  // Pentax, Qualcomm\n  public static readonly M_APP7 = 0xe7;\n  // SPIFF\n  public static readonly M_APP8 = 0xe8;\n  // MediaJukebox\n  public static readonly M_APP9 = 0xe9;\n  // Comment\n  public static readonly M_APP10 = 0xea;\n  // Jpeg-HDR\n  public static readonly M_APP11 = 0xeb;\n  // PictureInfo, Ducky\n  public static readonly M_APP12 = 0xec;\n  // Photoshop, Adobe_CM\n  public static readonly M_APP13 = 0xed;\n  // ADOBE\n  public static readonly M_APP14 = 0xee;\n  // GraphicConverter\n  public static readonly M_APP15 = 0xef;\n\n  public static readonly M_JPG0 = 0xf0;\n  public static readonly M_JPG13 = 0xfd;\n  public static readonly M_COM = 0xfe;\n\n  public static readonly M_TEM = 0x01;\n\n  public static readonly M_ERROR = 0x100;\n}\n", "/** @format */\n\nexport class JpegAdobe {\n  private _version: number;\n  public get version(): number {\n    return this._version;\n  }\n\n  private _flags0: number;\n  public get flags0(): number {\n    return this._flags0;\n  }\n\n  private _flags1: number;\n  public get flags1(): number {\n    return this._flags1;\n  }\n\n  private _transformCode: number;\n  public get transformCode(): number {\n    return this._transformCode;\n  }\n\n  constructor(\n    version: number,\n    flags0: number,\n    flags1: number,\n    transformCode: number\n  ) {\n    this._version = version;\n    this._flags0 = flags0;\n    this._flags1 = flags1;\n    this._transformCode = transformCode;\n  }\n}\n", "/** @format */\n\nexport class JpegComponent {\n  private readonly _quantizationTableList: Array<Int16Array | undefined>;\n\n  private readonly _quantizationIndex: number;\n\n  private readonly _hSamples: number;\n  public get hSamples(): number {\n    return this._hSamples;\n  }\n\n  private readonly _vSamples: number;\n  public get vSamples(): number {\n    return this._vSamples;\n  }\n\n  private _blocks: Array<Array<Int32Array>> = new Array<Array<Int32Array>>();\n  public get blocks(): Array<Array<Int32Array>> {\n    return this._blocks;\n  }\n\n  private _blocksPerLine = 0;\n  public get blocksPerLine(): number {\n    return this._blocksPerLine;\n  }\n\n  private _blocksPerColumn = 0;\n  public get blocksPerColumn(): number {\n    return this._blocksPerColumn;\n  }\n\n  private _huffmanTableDC: [] = [];\n  public set huffmanTableDC(v: []) {\n    this._huffmanTableDC = v;\n  }\n  public get huffmanTableDC(): [] {\n    return this._huffmanTableDC;\n  }\n\n  private _huffmanTableAC: [] = [];\n  public set huffmanTableAC(v: []) {\n    this._huffmanTableAC = v;\n  }\n  public get huffmanTableAC(): [] {\n    return this._huffmanTableAC;\n  }\n\n  private _pred = 0;\n  public set pred(v: number) {\n    this._pred = v;\n  }\n  public get pred(): number {\n    return this._pred;\n  }\n\n  public get quantizationTable(): Int16Array | undefined {\n    return this._quantizationTableList[this._quantizationIndex];\n  }\n\n  constructor(\n    hSamples: number,\n    vSamples: number,\n    quantizationTableList: Array<Int16Array | undefined>,\n    quantizationIndex: number\n  ) {\n    this._hSamples = hSamples;\n    this._vSamples = vSamples;\n    this._quantizationTableList = quantizationTableList;\n    this._quantizationIndex = quantizationIndex;\n  }\n\n  public setBlocks(\n    blocks: Array<Array<Int32Array>>,\n    blocksPerLine: number,\n    blocksPerColumn: number\n  ) {\n    this._blocks = blocks;\n    this._blocksPerLine = blocksPerLine;\n    this._blocksPerColumn = blocksPerColumn;\n  }\n}\n", "/** @format */\n\nimport { JpegComponent } from './jpeg-component';\n\nexport class JpegFrame {\n  private readonly _components: Map<number, JpegComponent>;\n  public get components(): Map<number, JpegComponent> {\n    return this._components;\n  }\n\n  private readonly _componentsOrder: Array<number>;\n  public get componentsOrder(): Array<number> {\n    return this._componentsOrder;\n  }\n\n  private _extended: boolean;\n  public get extended(): boolean {\n    return this._extended;\n  }\n\n  private _progressive: boolean;\n  public get progressive(): boolean {\n    return this._progressive;\n  }\n\n  private _precision: number;\n  public get precision(): number {\n    return this._precision;\n  }\n\n  private _scanLines: number;\n  public get scanLines(): number {\n    return this._scanLines;\n  }\n\n  private _samplesPerLine: number;\n  public get samplesPerLine(): number {\n    return this._samplesPerLine;\n  }\n\n  private _maxHSamples = 0;\n  public get maxHSamples(): number {\n    return this._maxHSamples;\n  }\n\n  private _maxVSamples = 0;\n  public get maxVSamples(): number {\n    return this._maxVSamples;\n  }\n\n  private _mcusPerLine = 0;\n  public get mcusPerLine(): number {\n    return this._mcusPerLine;\n  }\n\n  private _mcusPerColumn = 0;\n  public get mcusPerColumn(): number {\n    return this._mcusPerColumn;\n  }\n\n  constructor(\n    components: Map<number, JpegComponent>,\n    componentsOrder: Array<number>,\n    extended: boolean,\n    progressive: boolean,\n    precision: number,\n    scanLines: number,\n    samplesPerLine: number\n  ) {\n    this._components = components;\n    this._componentsOrder = componentsOrder;\n    this._extended = extended;\n    this._progressive = progressive;\n    this._precision = precision;\n    this._scanLines = scanLines;\n    this._samplesPerLine = samplesPerLine;\n  }\n\n  private static getEmptyBlocks(\n    blocksPerLineForMcu: number,\n    blocksPerColumnForMcu: number\n  ) {\n    const blocks = new Array<Array<Int32Array>>();\n    for (let ic = 0; ic < blocksPerColumnForMcu; ic++) {\n      const line = new Array<Int32Array>(blocksPerLineForMcu);\n      for (let ir = 0; ir < blocksPerLineForMcu; ir++) {\n        line[ir] = new Int32Array(64);\n      }\n      blocks[ic] = line;\n    }\n    return blocks;\n  }\n\n  public prepare(): void {\n    for (const [_, component] of this._components) {\n      this._maxHSamples = Math.max(this._maxHSamples, component.hSamples);\n      this._maxVSamples = Math.max(this._maxVSamples, component.vSamples);\n    }\n\n    this._mcusPerLine = Math.ceil(this._samplesPerLine / 8 / this._maxHSamples);\n    this._mcusPerColumn = Math.ceil(this._scanLines / 8 / this._maxVSamples);\n\n    for (const [_, component] of this._components) {\n      const blocksPerLine = Math.ceil(\n        (Math.ceil(this._samplesPerLine / 8) * component.hSamples) /\n          this._maxHSamples\n      );\n      const blocksPerColumn = Math.ceil(\n        (Math.ceil(this._scanLines / 8) * component.vSamples) / this.maxVSamples\n      );\n      const blocksPerLineForMcu = this._mcusPerLine * component.hSamples;\n      const blocksPerColumnForMcu = this._mcusPerColumn * component.vSamples;\n      const blocks = JpegFrame.getEmptyBlocks(\n        blocksPerLineForMcu,\n        blocksPerColumnForMcu\n      );\n      component.setBlocks(blocks, blocksPerLine, blocksPerColumn);\n    }\n  }\n}\n", "/** @format */\n\nexport class JpegHuffman {\n  private readonly _children: Array<unknown> = new Array<unknown>();\n  public get children(): Array<unknown> {\n    return this._children;\n  }\n\n  private _index = 0;\n  public get index(): number {\n    return this._index;\n  }\n\n  public incrementIndex() {\n    this._index++;\n  }\n}\n", "/** @format */\n\nimport { DecodeInfo } from '../decode-info';\n\nexport class JpegInfo implements DecodeInfo {\n  private _width = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  private _height = 0;\n  public get height(): number {\n    return this._height;\n  }\n\n  private _backgroundColor = 0xffffffff;\n  public get backgroundColor(): number {\n    return this._backgroundColor;\n  }\n\n  private _numFrames = 1;\n  public get numFrames(): number {\n    return this._numFrames;\n  }\n\n  public setSize(width: number, height: number) {\n    this._width = width;\n    this._height = height;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../util/input-buffer';\n\nexport class JpegJfif {\n  private _thumbWidth: number;\n  public get thumbWidth(): number {\n    return this._thumbWidth;\n  }\n\n  private _thumbHeight: number;\n  public get thumbHeight(): number {\n    return this._thumbHeight;\n  }\n\n  private _majorVersion: number;\n  public get majorVersion(): number {\n    return this._majorVersion;\n  }\n\n  private _minorVersion: number;\n  public get minorVersion(): number {\n    return this._minorVersion;\n  }\n\n  private _densityUnits: number;\n  public get densityUnits(): number {\n    return this._densityUnits;\n  }\n\n  private _xDensity: number;\n  public get xDensity(): number {\n    return this._xDensity;\n  }\n\n  private _yDensity: number;\n  public get yDensity(): number {\n    return this._yDensity;\n  }\n\n  private _thumbData: InputBuffer;\n  public get thumbData(): InputBuffer {\n    return this._thumbData;\n  }\n\n  constructor(\n    thumbWidth: number,\n    thumbHeight: number,\n    majorVersion: number,\n    minorVersion: number,\n    densityUnits: number,\n    xDensity: number,\n    yDensity: number,\n    thumbData: InputBuffer\n  ) {\n    this._thumbWidth = thumbWidth;\n    this._thumbHeight = thumbHeight;\n    this._majorVersion = majorVersion;\n    this._minorVersion = minorVersion;\n    this._densityUnits = densityUnits;\n    this._xDensity = xDensity;\n    this._yDensity = yDensity;\n    this._thumbData = thumbData;\n  }\n}\n", "/** @format */\n\nimport { BitOperators } from '../../common/bit-operators';\nimport { ColorUtils } from '../../common/color-utils';\nimport { ExifData } from '../../common/exif_data';\nimport { MemoryImage } from '../../common/memory-image';\nimport { RgbChannelSet } from '../../common/rgb-channel-set';\nimport { ImageError } from '../../error/image-error';\nimport { ComponentData } from './component-data';\nimport { JpegData } from './jpeg-data';\n\nexport abstract class JpegQuantize {\n  private static dctClip: Uint8Array | undefined;\n\n  private static clamp8(i: number) {\n    if (i < 0) {\n      return 0;\n    }\n    if (i > 255) {\n      return 255;\n    }\n    return i;\n  }\n\n  // These functions contain bit-shift operations that fail with HTML builds.\n  // A conditional import is used to use a modified version for HTML builds\n  // to work around this javascript bug, while keeping the native version fast.\n\n  // Quantize the coefficients and apply IDCT.\n  //\n  // A port of poppler's IDCT method which in turn is taken from:\n  // Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n  // \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\n  // IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989, 988-991.\n  public static quantizeAndInverse(\n    quantizationTable: Int16Array,\n    coefBlock: Int32Array,\n    dataOut: Uint8Array,\n    dataIn: Int32Array\n  ): void {\n    const p = dataIn;\n\n    const dctClipOffset = 256;\n    const dctClipLength = 768;\n    if (JpegQuantize.dctClip === undefined) {\n      JpegQuantize.dctClip = new Uint8Array(dctClipLength);\n      for (let i = -256; i < 0; ++i) {\n        JpegQuantize.dctClip[dctClipOffset + i] = 0;\n      }\n      for (let i = 0; i < 256; ++i) {\n        JpegQuantize.dctClip[dctClipOffset + i] = i;\n      }\n      for (let i = 256; i < 512; ++i) {\n        JpegQuantize.dctClip[dctClipOffset + i] = 255;\n      }\n    }\n\n    // IDCT constants (20.12 fixed point format)\n\n    // cos(pi/16)*4096\n    const COS_1 = 4017;\n    // sin(pi/16)*4096\n    const SIN_1 = 799;\n    // cos(3*pi/16)*4096\n    const COS_3 = 3406;\n    // sin(3*pi/16)*4096\n    const SIN_3 = 2276;\n    // cos(6*pi/16)*4096\n    const COS_6 = 1567;\n    // sin(6*pi/16)*4096\n    const SIN_6 = 3784;\n    // sqrt(2)*4096\n    const SQRT_2 = 5793;\n    // sqrt(2)/2\n    const SQRT_1D2 = 2896;\n\n    // De-quantize\n    for (let i = 0; i < 64; i++) {\n      p[i] = coefBlock[i] * quantizationTable[i];\n    }\n\n    // Inverse DCT on rows\n    let row = 0;\n    for (let i = 0; i < 8; ++i, row += 8) {\n      // Check for all-zero AC coefficients\n      if (\n        p[1 + row] === 0 &&\n        p[2 + row] === 0 &&\n        p[3 + row] === 0 &&\n        p[4 + row] === 0 &&\n        p[5 + row] === 0 &&\n        p[6 + row] === 0 &&\n        p[7 + row] === 0\n      ) {\n        const t = BitOperators.shiftR(SQRT_2 * p[0 + row] + 512, 10);\n        p[row + 0] = t;\n        p[row + 1] = t;\n        p[row + 2] = t;\n        p[row + 3] = t;\n        p[row + 4] = t;\n        p[row + 5] = t;\n        p[row + 6] = t;\n        p[row + 7] = t;\n        continue;\n      }\n\n      // Stage 4\n      let v0 = BitOperators.shiftR(SQRT_2 * p[0 + row] + 128, 8);\n      let v1 = BitOperators.shiftR(SQRT_2 * p[4 + row] + 128, 8);\n      let v2 = p[2 + row];\n      let v3 = p[6 + row];\n      let v4 = BitOperators.shiftR(\n        SQRT_1D2 * (p[1 + row] - p[7 + row]) + 128,\n        8\n      );\n      let v7 = BitOperators.shiftR(\n        SQRT_1D2 * (p[1 + row] + p[7 + row]) + 128,\n        8\n      );\n      let v5 = BitOperators.shiftL(p[3 + row], 4);\n      let v6 = BitOperators.shiftL(p[5 + row], 4);\n\n      // Stage 3\n      let t = BitOperators.shiftR(v0 - v1 + 1, 1);\n      v0 = BitOperators.shiftR(v0 + v1 + 1, 1);\n      v1 = t;\n      t = BitOperators.shiftR(v2 * SIN_6 + v3 * COS_6 + 128, 8);\n      v2 = BitOperators.shiftR(v2 * COS_6 - v3 * SIN_6 + 128, 8);\n      v3 = t;\n      t = BitOperators.shiftR(v4 - v6 + 1, 1);\n      v4 = BitOperators.shiftR(v4 + v6 + 1, 1);\n      v6 = t;\n      t = BitOperators.shiftR(v7 + v5 + 1, 1);\n      v5 = BitOperators.shiftR(v7 - v5 + 1, 1);\n      v7 = t;\n\n      // Stage 2\n      t = BitOperators.shiftR(v0 - v3 + 1, 1);\n      v0 = BitOperators.shiftR(v0 + v3 + 1, 1);\n      v3 = t;\n      t = BitOperators.shiftR(v1 - v2 + 1, 1);\n      v1 = BitOperators.shiftR(v1 + v2 + 1, 1);\n      v2 = t;\n      t = BitOperators.shiftR(v4 * SIN_3 + v7 * COS_3 + 2048, 12);\n      v4 = BitOperators.shiftR(v4 * COS_3 - v7 * SIN_3 + 2048, 12);\n      v7 = t;\n      t = BitOperators.shiftR(v5 * SIN_1 + v6 * COS_1 + 2048, 12);\n      v5 = BitOperators.shiftR(v5 * COS_1 - v6 * SIN_1 + 2048, 12);\n      v6 = t;\n\n      // Stage 1\n      p[0 + row] = v0 + v7;\n      p[7 + row] = v0 - v7;\n      p[1 + row] = v1 + v6;\n      p[6 + row] = v1 - v6;\n      p[2 + row] = v2 + v5;\n      p[5 + row] = v2 - v5;\n      p[3 + row] = v3 + v4;\n      p[4 + row] = v3 - v4;\n    }\n\n    // Inverse DCT on columns\n    for (let i = 0; i < 8; ++i) {\n      const col = i;\n\n      // Check for all-zero AC coefficients\n      if (\n        p[1 * 8 + col] === 0 &&\n        p[2 * 8 + col] === 0 &&\n        p[3 * 8 + col] === 0 &&\n        p[4 * 8 + col] === 0 &&\n        p[5 * 8 + col] === 0 &&\n        p[6 * 8 + col] === 0 &&\n        p[7 * 8 + col] === 0\n      ) {\n        const t = BitOperators.shiftR(SQRT_2 * dataIn[i] + 8192, 14);\n        p[0 * 8 + col] = t;\n        p[1 * 8 + col] = t;\n        p[2 * 8 + col] = t;\n        p[3 * 8 + col] = t;\n        p[4 * 8 + col] = t;\n        p[5 * 8 + col] = t;\n        p[6 * 8 + col] = t;\n        p[7 * 8 + col] = t;\n        continue;\n      }\n\n      // Stage 4\n      let v0 = BitOperators.shiftR(SQRT_2 * p[0 * 8 + col] + 2048, 12);\n      let v1 = BitOperators.shiftR(SQRT_2 * p[4 * 8 + col] + 2048, 12);\n      let v2 = p[2 * 8 + col];\n      let v3 = p[6 * 8 + col];\n      let v4 = BitOperators.shiftR(\n        SQRT_1D2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048,\n        12\n      );\n      let v7 = BitOperators.shiftR(\n        SQRT_1D2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048,\n        12\n      );\n      let v5 = p[3 * 8 + col];\n      let v6 = p[5 * 8 + col];\n\n      // Stage 3\n      let t = BitOperators.shiftR(v0 - v1 + 1, 1);\n      v0 = BitOperators.shiftR(v0 + v1 + 1, 1);\n      v1 = t;\n      t = BitOperators.shiftR(v2 * SIN_6 + v3 * COS_6 + 2048, 12);\n      v2 = BitOperators.shiftR(v2 * COS_6 - v3 * SIN_6 + 2048, 12);\n      v3 = t;\n      t = BitOperators.shiftR(v4 - v6 + 1, 1);\n      v4 = BitOperators.shiftR(v4 + v6 + 1, 1);\n      v6 = t;\n      t = BitOperators.shiftR(v7 + v5 + 1, 1);\n      v5 = BitOperators.shiftR(v7 - v5 + 1, 1);\n      v7 = t;\n\n      // Stage 2\n      t = BitOperators.shiftR(v0 - v3 + 1, 1);\n      v0 = BitOperators.shiftR(v0 + v3 + 1, 1);\n      v3 = t;\n      t = BitOperators.shiftR(v1 - v2 + 1, 1);\n      v1 = BitOperators.shiftR(v1 + v2 + 1, 1);\n      v2 = t;\n      t = BitOperators.shiftR(v4 * SIN_3 + v7 * COS_3 + 2048, 12);\n      v4 = BitOperators.shiftR(v4 * COS_3 - v7 * SIN_3 + 2048, 12);\n      v7 = t;\n      t = BitOperators.shiftR(v5 * SIN_1 + v6 * COS_1 + 2048, 12);\n      v5 = BitOperators.shiftR(v5 * COS_1 - v6 * SIN_1 + 2048, 12);\n      v6 = t;\n\n      // Stage 1\n      p[0 * 8 + col] = v0 + v7;\n      p[7 * 8 + col] = v0 - v7;\n      p[1 * 8 + col] = v1 + v6;\n      p[6 * 8 + col] = v1 - v6;\n      p[2 * 8 + col] = v2 + v5;\n      p[5 * 8 + col] = v2 - v5;\n      p[3 * 8 + col] = v3 + v4;\n      p[4 * 8 + col] = v3 - v4;\n    }\n\n    // Convert to 8-bit integers\n    for (let i = 0; i < 64; ++i) {\n      dataOut[i] =\n        JpegQuantize.dctClip[\n          dctClipOffset + 128 + BitOperators.shiftR(p[i] + 8, 4)\n        ];\n    }\n  }\n\n  public static getImageFromJpeg(jpeg: JpegData): MemoryImage {\n    const orientation = jpeg.exifData.orientation ?? 0;\n    const flipWidthHeight = orientation >= 5 && orientation <= 8;\n    const width = flipWidthHeight ? jpeg.height : jpeg.width;\n    const height = flipWidthHeight ? jpeg.width : jpeg.height;\n\n    const image = new MemoryImage({\n      width: width,\n      height: height,\n      rgbChannelSet: RgbChannelSet.rgb,\n    });\n\n    // Copy exif data, except for ORIENTATION which we're baking.\n    for (const [key, value] of jpeg.exifData.data) {\n      if (key !== ExifData.ORIENTATION) {\n        image.exifData.data.set(key, value);\n      }\n    }\n\n    let component1: ComponentData | undefined = undefined;\n    let component2: ComponentData | undefined = undefined;\n    let component3: ComponentData | undefined = undefined;\n    let component4: ComponentData | undefined = undefined;\n    let component1Line: Uint8Array | undefined = undefined;\n    let component2Line: Uint8Array | undefined = undefined;\n    let component3Line: Uint8Array | undefined = undefined;\n    let component4Line: Uint8Array | undefined = undefined;\n    let offset = 0;\n    let Y = 0;\n    let Cb = 0;\n    let Cr = 0;\n    let K = 0;\n    let C = 0;\n    let M = 0;\n    let Ye = 0;\n    let R = 0;\n    let G = 0;\n    let B = 0;\n    let colorTransform = false;\n\n    const h1 = jpeg.height - 1;\n    const w1 = jpeg.width - 1;\n\n    switch (jpeg.components.length) {\n      case 1: {\n        const component1 = jpeg.components[0];\n        const lines = component1.lines;\n        const hShift1 = component1.hScaleShift;\n        const vShift1 = component1.vScaleShift;\n        for (let y = 0; y < jpeg.height; y++) {\n          const y1 = y >> vShift1;\n          const component1Line = lines[y1];\n          for (let x = 0; x < jpeg.width; x++) {\n            const x1 = x >> hShift1;\n            const Y = component1Line[x1];\n            const c = ColorUtils.getColor(Y, Y, Y);\n            if (orientation === 2) {\n              image.setPixel(w1 - x, y, c);\n            } else if (orientation === 3) {\n              image.setPixel(w1 - x, h1 - y, c);\n            } else if (orientation === 4) {\n              image.setPixel(x, h1 - y, c);\n            } else if (orientation === 5) {\n              image.setPixel(y, x, c);\n            } else if (orientation === 6) {\n              image.setPixel(h1 - y, x, c);\n            } else if (orientation === 7) {\n              image.setPixel(h1 - y, w1 - x, c);\n            } else if (orientation === 8) {\n              image.setPixel(y, w1 - x, c);\n            } else {\n              image.setPixelByIndex(offset++, c);\n            }\n          }\n        }\n        break;\n      }\n      // case 2:\n      //     {\n      //         // PDF might compress two component data in custom color-space\n      //         component1 = jpeg.components[0];\n      //         component2 = jpeg.components[1];\n      //         let hShift1: number = component1.hScaleShift;\n      //         let vShift1: number = component1.vScaleShift;\n      //         let hShift2: number = component2.hScaleShift;\n      //         let vShift2: number = component2.vScaleShift;\n\n      //         for (let y = 0; y < height; y++) {\n      //             let y1 = y >> vShift1;\n      //             let y2 = y >> vShift2;\n      //             component1Line = component1.lines[y1];\n      //             component2Line = component2.lines[y2];\n\n      //             for (let x = 0; x < width; x++) {\n      //                 let x1 = x >> hShift1;\n      //                 let x2 = x >> hShift2;\n\n      //                 Y = component1Line![x1];\n      //                 // data[offset++] = Y;\n\n      //                 Y = component2Line![x2];\n      //                 // data[offset++] = Y;\n      //             }\n      //         }\n      //         break;\n      //     }\n      case 3: {\n        // The default transform for three components is true\n        colorTransform = true;\n\n        component1 = jpeg.components[0];\n        component2 = jpeg.components[1];\n        component3 = jpeg.components[2];\n\n        const lines1 = component1.lines;\n        const lines2 = component2.lines;\n        const lines3 = component3.lines;\n\n        const hShift1 = component1.hScaleShift;\n        const vShift1 = component1.vScaleShift;\n        const hShift2 = component2.hScaleShift;\n        const vShift2 = component2.vScaleShift;\n        const hShift3 = component3.hScaleShift;\n        const vShift3 = component3.vScaleShift;\n\n        for (let y = 0; y < jpeg.height; y++) {\n          const y1 = y >> vShift1;\n          const y2 = y >> vShift2;\n          const y3 = y >> vShift3;\n\n          component1Line = lines1[y1];\n          component2Line = lines2[y2];\n          component3Line = lines3[y3];\n\n          for (let x = 0; x < jpeg.width; x++) {\n            const x1 = x >> hShift1;\n            const x2 = x >> hShift2;\n            const x3 = x >> hShift3;\n\n            Y = component1Line[x1] << 8;\n            Cb = component2Line[x2] - 128;\n            Cr = component3Line[x3] - 128;\n\n            R = Y + 359 * Cr + 128;\n            G = Y - 88 * Cb - 183 * Cr + 128;\n            B = Y + 454 * Cb + 128;\n\n            R = this.clamp8(BitOperators.shiftR(R, 8));\n            G = this.clamp8(BitOperators.shiftR(G, 8));\n            B = this.clamp8(BitOperators.shiftR(B, 8));\n            const c = ColorUtils.getColor(R, G, B);\n            if (orientation === 2) {\n              image.setPixel(w1 - x, y, c);\n            } else if (orientation === 3) {\n              image.setPixel(w1 - x, h1 - y, c);\n            } else if (orientation === 4) {\n              image.setPixel(x, h1 - y, c);\n            } else if (orientation === 5) {\n              image.setPixel(y, x, c);\n            } else if (orientation === 6) {\n              image.setPixel(h1 - y, x, c);\n            } else if (orientation === 7) {\n              image.setPixel(h1 - y, w1 - x, c);\n            } else if (orientation === 8) {\n              image.setPixel(y, w1 - x, c);\n            } else {\n              image.setPixelByIndex(offset++, c);\n            }\n          }\n        }\n        break;\n      }\n      case 4: {\n        if (jpeg.adobe === undefined) {\n          throw new ImageError('Unsupported color mode (4 components)');\n        }\n        // The default transform for four components is false\n        colorTransform = false;\n        // The adobe transform marker overrides any previous setting\n        if (jpeg.adobe.transformCode !== 0) {\n          colorTransform = true;\n        }\n\n        component1 = jpeg.components[0];\n        component2 = jpeg.components[1];\n        component3 = jpeg.components[2];\n        component4 = jpeg.components[3];\n\n        const lines1 = component1.lines;\n        const lines2 = component2.lines;\n        const lines3 = component3.lines;\n        const lines4 = component4.lines;\n\n        const hShift1 = component1.hScaleShift;\n        const vShift1 = component1.vScaleShift;\n        const hShift2 = component2.hScaleShift;\n        const vShift2 = component2.vScaleShift;\n        const hShift3 = component3.hScaleShift;\n        const vShift3 = component3.vScaleShift;\n        const hShift4 = component4.hScaleShift;\n        const vShift4 = component4.vScaleShift;\n\n        for (let y = 0; y < jpeg.height; y++) {\n          const y1 = y >> vShift1;\n          const y2 = y >> vShift2;\n          const y3 = y >> vShift3;\n          const y4 = y >> vShift4;\n          component1Line = lines1[y1];\n          component2Line = lines2[y2];\n          component3Line = lines3[y3];\n          component4Line = lines4[y4];\n          for (let x = 0; x < jpeg.width; x++) {\n            const x1 = x >> hShift1;\n            const x2 = x >> hShift2;\n            const x3 = x >> hShift3;\n            const x4 = x >> hShift4;\n            if (!colorTransform) {\n              C = component1Line[x1];\n              M = component2Line[x2];\n              Ye = component3Line[x3];\n              K = component4Line[x4];\n            } else {\n              Y = component1Line[x1];\n              Cb = component2Line[x2];\n              Cr = component3Line[x3];\n              K = component4Line[x4];\n\n              C = 255 - this.clamp8(Math.trunc(Y + 1.402 * (Cr - 128)));\n              M =\n                255 -\n                this.clamp8(\n                  Math.trunc(\n                    Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128)\n                  )\n                );\n              Ye = 255 - this.clamp8(Math.trunc(Y + 1.772 * (Cb - 128)));\n            }\n            R = BitOperators.shiftR(C * K, 8);\n            G = BitOperators.shiftR(M * K, 8);\n            B = BitOperators.shiftR(Ye * K, 8);\n            const c = ColorUtils.getColor(R, G, B);\n            if (orientation === 2) {\n              image.setPixel(w1 - x, y, c);\n            } else if (orientation === 3) {\n              image.setPixel(w1 - x, h1 - y, c);\n            } else if (orientation === 4) {\n              image.setPixel(x, h1 - y, c);\n            } else if (orientation === 5) {\n              image.setPixel(y, x, c);\n            } else if (orientation === 6) {\n              image.setPixel(h1 - y, x, c);\n            } else if (orientation === 7) {\n              image.setPixel(h1 - y, w1 - x, c);\n            } else if (orientation === 8) {\n              image.setPixel(y, w1 - x, c);\n            } else {\n              image.setPixelByIndex(offset++, c);\n            }\n          }\n        }\n        break;\n      }\n      default:\n        throw new ImageError('Unsupported color mode');\n    }\n    return image;\n  }\n}\n", "/**\n * /* eslint-disable @typescript-eslint/no-non-null-assertion\n *\n * @format\n */\n\n/** @format */\n\nimport { ImageError } from '../../error/image-error';\nimport { InputBuffer } from '../util/input-buffer';\nimport { Jpeg } from './jpeg';\nimport { JpegComponent } from './jpeg-component';\nimport { JpegFrame } from './jpeg-frame';\n\ntype DecodeFunction = (component: JpegComponent, block: Int32Array) => void;\n\nexport class JpegScan {\n  private _input: InputBuffer;\n  public get input(): InputBuffer {\n    return this._input;\n  }\n\n  private _frame: JpegFrame;\n  public get frame(): JpegFrame {\n    return this._frame;\n  }\n\n  private _precision: number;\n  public get precision(): number {\n    return this._precision;\n  }\n\n  private _samplesPerLine: number;\n  public get samplesPerLine(): number {\n    return this._samplesPerLine;\n  }\n\n  private _scanLines: number;\n  public get scanLines(): number {\n    return this._scanLines;\n  }\n\n  private _mcusPerLine: number;\n  public get mcusPerLine(): number {\n    return this._mcusPerLine;\n  }\n\n  private _progressive: boolean;\n  public get progressive(): boolean {\n    return this._progressive;\n  }\n\n  private _maxH: number;\n  public get maxH(): number {\n    return this._maxH;\n  }\n\n  private _maxV: number;\n  public get maxV(): number {\n    return this._maxV;\n  }\n\n  private _components: Array<JpegComponent>;\n  public get components(): Array<JpegComponent> {\n    return this._components;\n  }\n\n  private _resetInterval?: number;\n  public get resetInterval(): number | undefined {\n    return this._resetInterval;\n  }\n\n  private _spectralStart: number;\n  public get spectralStart(): number {\n    return this._spectralStart;\n  }\n\n  private _spectralEnd: number;\n  public get spectralEnd(): number {\n    return this._spectralEnd;\n  }\n\n  private _successivePrev: number;\n  public get successivePrev(): number {\n    return this._successivePrev;\n  }\n\n  private _successive: number;\n  public get successive(): number {\n    return this._successive;\n  }\n\n  private _bitsData = 0;\n  public get bitsData(): number {\n    return this._bitsData;\n  }\n\n  private _bitsCount = 0;\n  public get bitsCount(): number {\n    return this._bitsCount;\n  }\n\n  private _eobrun = 0;\n  public get eobrun(): number {\n    return this._eobrun;\n  }\n\n  private _successiveACState = 0;\n  public get successiveACState(): number {\n    return this._successiveACState;\n  }\n\n  private _successiveACNextValue = 0;\n  public get successiveACNextValue(): number {\n    return this._successiveACNextValue;\n  }\n\n  constructor(\n    input: InputBuffer,\n    frame: JpegFrame,\n    components: Array<JpegComponent>,\n    spectralStart: number,\n    spectralEnd: number,\n    successivePrev: number,\n    successive: number,\n    resetInterval?: number\n  ) {\n    this._input = input;\n    this._frame = frame;\n    this._precision = frame.precision;\n    this._samplesPerLine = frame.samplesPerLine;\n    this._scanLines = frame.scanLines;\n    this._mcusPerLine = frame.mcusPerLine;\n    this._progressive = frame.progressive;\n    this._maxH = frame.maxHSamples;\n    this._maxV = frame.maxVSamples;\n    this._components = components;\n    this._resetInterval = resetInterval;\n    this._spectralStart = spectralStart;\n    this._spectralEnd = spectralEnd;\n    this._successivePrev = successivePrev;\n    this._successive = successive;\n  }\n\n  private readBit(): number | undefined {\n    if (this.bitsCount > 0) {\n      this._bitsCount--;\n      return (this._bitsData >> this._bitsCount) & 1;\n    }\n\n    if (this._input.isEOS) {\n      return undefined;\n    }\n\n    this._bitsData = this._input.readByte();\n    if (this._bitsData === 0xff) {\n      const nextByte = this.input.readByte();\n      if (nextByte !== 0) {\n        throw new ImageError(\n          `unexpected marker: ${((this._bitsData << 8) | nextByte).toString(\n            16\n          )}`\n        );\n      }\n    }\n\n    this._bitsCount = 7;\n    return (this._bitsData >> 7) & 1;\n  }\n\n  private decodeHuffman(tree: []): number | undefined {\n    let node = tree;\n    let bit: number | undefined = undefined;\n    while ((bit = this.readBit()) !== undefined) {\n      node = node[bit];\n      if (typeof node === 'number') {\n        return Math.trunc(node);\n      }\n    }\n    return undefined;\n  }\n\n  private receive(length: number): number | undefined {\n    let n = 0;\n    let len = length;\n    while (len > 0) {\n      const bit = this.readBit();\n      if (bit === undefined) {\n        return undefined;\n      }\n      n = (n << 1) | bit;\n      len--;\n    }\n    return n;\n  }\n\n  private receiveAndExtend(length: number | undefined): number {\n    if (length === 1) {\n      return this.readBit() === 1 ? 1 : -1;\n    }\n    const n = this.receive(length!)!;\n    if (n >= 1 << ((length ?? 0) - 1)) {\n      return n;\n    }\n    return n + (-1 << (length ?? 0)) + 1;\n  }\n\n  private decodeBaseline(component: JpegComponent, zz: Int32Array): void {\n    const t = this.decodeHuffman(component.huffmanTableDC);\n    const diff = t === 0 ? 0 : this.receiveAndExtend(t);\n    component.pred += diff;\n    zz[0] = component.pred;\n\n    let k = 1;\n    while (k < 64) {\n      const rs = this.decodeHuffman(component.huffmanTableAC)!;\n      let s = rs & 15;\n      const r = rs >> 4;\n      if (s === 0) {\n        if (r < 15) {\n          break;\n        }\n        k += 16;\n        continue;\n      }\n\n      k += r;\n\n      s = this.receiveAndExtend(s);\n\n      const z = Jpeg.dctZigZag[k];\n      zz[z] = s;\n      k++;\n    }\n  }\n\n  private decodeDCFirst(component: JpegComponent, zz: Int32Array): void {\n    const t = this.decodeHuffman(component.huffmanTableDC);\n    const diff = t === 0 ? 0 : this.receiveAndExtend(t) << this._successive;\n    component.pred += diff;\n    zz[0] = component.pred;\n  }\n\n  private decodeDCSuccessive(_: JpegComponent, zz: Int32Array): void {\n    zz[0] |= this.readBit()! << this._successive;\n  }\n\n  private decodeACFirst(component: JpegComponent, zz: Int32Array): void {\n    if (this._eobrun > 0) {\n      this._eobrun--;\n      return;\n    }\n    let k = this._spectralStart;\n    const e = this._spectralEnd;\n    while (k <= e) {\n      const rs = this.decodeHuffman(component.huffmanTableAC)!;\n      const s = rs & 15;\n      const r = rs >> 4;\n      if (s === 0) {\n        if (r < 15) {\n          this._eobrun = this.receive(r)! + (1 << r) - 1;\n          break;\n        }\n        k += 16;\n        continue;\n      }\n      k += r;\n      const z = Jpeg.dctZigZag[k];\n      zz[z] = this.receiveAndExtend(s) * (1 << this._successive);\n      k++;\n    }\n  }\n\n  private decodeACSuccessive(component: JpegComponent, zz: Int32Array): void {\n    let k = this._spectralStart;\n    const e = this._spectralEnd;\n    let s = 0;\n    let r = 0;\n    while (k <= e) {\n      const z = Jpeg.dctZigZag[k];\n      switch (this._successiveACState) {\n        case 0: {\n          // Initial state\n          const rs = this.decodeHuffman(component.huffmanTableAC);\n          if (rs === undefined) {\n            throw new ImageError('Invalid progressive encoding');\n          }\n          s = rs & 15;\n          r = rs >> 4;\n          if (s === 0) {\n            if (r < 15) {\n              this._eobrun = this.receive(r)! + (1 << r);\n              this._successiveACState = 4;\n            } else {\n              r = 16;\n              this._successiveACState = 1;\n            }\n          } else {\n            if (s !== 1) {\n              throw new ImageError('invalid ACn encoding');\n            }\n            this._successiveACNextValue = this.receiveAndExtend(s);\n            this._successiveACState = r !== 0 ? 2 : 3;\n          }\n          continue;\n        }\n        case 1:\n        case 2: {\n          // Skipping r zero items\n          if (zz[z] !== 0) {\n            zz[z] += this.readBit()! << this._successive;\n          } else {\n            r--;\n            if (r === 0) {\n              this._successiveACState = this._successiveACState === 2 ? 3 : 0;\n            }\n          }\n          break;\n        }\n        case 3: {\n          // Set value for a zero item\n          if (zz[z] !== 0) {\n            zz[z] += this.readBit()! << this._successive;\n          } else {\n            zz[z] = this._successiveACNextValue << this._successive;\n            this._successiveACState = 0;\n          }\n          break;\n        }\n        case 4: {\n          // Eob\n          if (zz[z] !== 0) {\n            zz[z] += this.readBit()! << this._successive;\n          }\n          break;\n        }\n      }\n      k++;\n    }\n    if (this._successiveACState === 4) {\n      this._eobrun--;\n      if (this._eobrun === 0) {\n        this._successiveACState = 0;\n      }\n    }\n  }\n\n  private decodeMcu(\n    component: JpegComponent,\n    decodeFn: DecodeFunction,\n    mcu: number,\n    row: number,\n    col: number\n  ): void {\n    const mcuRow = Math.floor(mcu / this._mcusPerLine);\n    const mcuCol = mcu % this._mcusPerLine;\n    const blockRow = mcuRow * component.vSamples + row;\n    const blockCol = mcuCol * component.hSamples + col;\n    if (blockRow >= component.blocks.length) {\n      return;\n    }\n    const numCols = component.blocks[blockRow].length;\n    if (blockCol >= numCols) {\n      return;\n    }\n    decodeFn.call(this, component, component.blocks[blockRow][blockCol]);\n  }\n\n  private decodeBlock(\n    component: JpegComponent,\n    decodeFn: DecodeFunction,\n    mcu: number\n  ): void {\n    const blockRow = Math.floor(mcu / component.blocksPerLine);\n    const blockCol = mcu % component.blocksPerLine;\n    decodeFn.call(this, component, component.blocks[blockRow][blockCol]);\n  }\n\n  public decode(): void {\n    const componentsLength = this._components.length;\n    let component: JpegComponent | undefined = undefined;\n    let decodeFn: DecodeFunction | undefined = undefined;\n    if (this._progressive) {\n      if (this._spectralStart === 0) {\n        decodeFn =\n          this._successivePrev === 0\n            ? this.decodeDCFirst\n            : this.decodeDCSuccessive;\n      } else {\n        decodeFn =\n          this._successivePrev === 0\n            ? this.decodeACFirst\n            : this.decodeACSuccessive;\n      }\n    } else {\n      decodeFn = this.decodeBaseline;\n    }\n\n    let mcu = 0;\n\n    let mcuExpected: number | undefined = undefined;\n    if (componentsLength === 1) {\n      mcuExpected =\n        this._components[0].blocksPerLine * this._components[0].blocksPerColumn;\n    } else {\n      mcuExpected = this._mcusPerLine * this._frame.mcusPerColumn;\n    }\n\n    if (this._resetInterval === undefined || this._resetInterval === 0) {\n      this._resetInterval = mcuExpected;\n    }\n\n    let h: number | undefined = undefined;\n    let v: number | undefined = undefined;\n    while (mcu < mcuExpected) {\n      // Reset interval stuff\n      for (let i = 0; i < componentsLength; i++) {\n        this._components[i].pred = 0;\n      }\n      this._eobrun = 0;\n\n      if (componentsLength === 1) {\n        component = this._components[0];\n        for (let n = 0; n < this._resetInterval; n++) {\n          this.decodeBlock(component, decodeFn, mcu);\n          mcu++;\n        }\n      } else {\n        for (let n = 0; n < this._resetInterval; n++) {\n          for (let i = 0; i < componentsLength; i++) {\n            component = this.components[i];\n            h = component.hSamples;\n            v = component.vSamples;\n            for (let j = 0; j < v; j++) {\n              for (let k = 0; k < h; k++) {\n                this.decodeMcu(component, decodeFn, mcu, j, k);\n              }\n            }\n          }\n          mcu++;\n        }\n      }\n\n      // Find marker\n      this._bitsCount = 0;\n      const m1 = this._input.getByte(0);\n      const m2 = this._input.getByte(1);\n      if (m1 === 0xff) {\n        if (m2 >= Jpeg.M_RST0 && m2 <= Jpeg.M_RST7) {\n          this._input.skip(2);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n}\n", "/**\n * /* eslint-disable @typescript-eslint/no-non-null-assertion\n *\n * @format\n */\n\n/* eslint-disable no-continue */\n/* eslint-disable no-fallthrough */\n/** @format */\n\nimport { ExifData } from '../../common/exif_data';\nimport { ListUtils } from '../../common/list-utils';\nimport { MemoryImage } from '../../common/memory-image';\nimport { ImageError } from '../../error/image-error';\nimport { InputBuffer } from '../util/input-buffer';\nimport { ComponentData } from './component-data';\nimport { Jpeg } from './jpeg';\nimport { JpegAdobe } from './jpeg-adobe';\nimport { JpegComponent } from './jpeg-component';\nimport { JpegFrame } from './jpeg-frame';\nimport { JpegHuffman } from './jpeg-huffman';\nimport { JpegInfo } from './jpeg-info';\nimport { JpegJfif } from './jpeg-jfif';\nimport { JpegQuantize } from './jpeg-quantize';\nimport { JpegScan } from './jpeg-scan';\n\nexport class JpegData {\n  static readonly CRR = [\n    -179, -178, -177, -175, -174, -172, -171, -170, -168, -167, -165, -164,\n    -163, -161, -160, -158, -157, -156, -154, -153, -151, -150, -149, -147,\n    -146, -144, -143, -142, -140, -139, -137, -136, -135, -133, -132, -130,\n    -129, -128, -126, -125, -123, -122, -121, -119, -118, -116, -115, -114,\n    -112, -111, -109, -108, -107, -105, -104, -102, -101, -100, -98, -97, -95,\n    -94, -93, -91, -90, -88, -87, -86, -84, -83, -81, -80, -79, -77, -76, -74,\n    -73, -72, -70, -69, -67, -66, -64, -63, -62, -60, -59, -57, -56, -55, -53,\n    -52, -50, -49, -48, -46, -45, -43, -42, -41, -39, -38, -36, -35, -34, -32,\n    -31, -29, -28, -27, -25, -24, -22, -21, -20, -18, -17, -15, -14, -13, -11,\n    -10, -8, -7, -6, -4, -3, -1, 0, 1, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 17,\n    18, 20, 21, 22, 24, 25, 27, 28, 29, 31, 32, 34, 35, 36, 38, 39, 41, 42, 43,\n    45, 46, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 62, 63, 64, 66, 67, 69, 70,\n    72, 73, 74, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 97,\n    98, 100, 101, 102, 104, 105, 107, 108, 109, 111, 112, 114, 115, 116, 118,\n    119, 121, 122, 123, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137, 139,\n    140, 142, 143, 144, 146, 147, 149, 150, 151, 153, 154, 156, 157, 158, 160,\n    161, 163, 164, 165, 167, 168, 170, 171, 172, 174, 175, 177, 178,\n  ];\n\n  static readonly CRG = [\n    5990656, 5943854, 5897052, 5850250, 5803448, 5756646, 5709844, 5663042,\n    5616240, 5569438, 5522636, 5475834, 5429032, 5382230, 5335428, 5288626,\n    5241824, 5195022, 5148220, 5101418, 5054616, 5007814, 4961012, 4914210,\n    4867408, 4820606, 4773804, 4727002, 4680200, 4633398, 4586596, 4539794,\n    4492992, 4446190, 4399388, 4352586, 4305784, 4258982, 4212180, 4165378,\n    4118576, 4071774, 4024972, 3978170, 3931368, 3884566, 3837764, 3790962,\n    3744160, 3697358, 3650556, 3603754, 3556952, 3510150, 3463348, 3416546,\n    3369744, 3322942, 3276140, 3229338, 3182536, 3135734, 3088932, 3042130,\n    2995328, 2948526, 2901724, 2854922, 2808120, 2761318, 2714516, 2667714,\n    2620912, 2574110, 2527308, 2480506, 2433704, 2386902, 2340100, 2293298,\n    2246496, 2199694, 2152892, 2106090, 2059288, 2012486, 1965684, 1918882,\n    1872080, 1825278, 1778476, 1731674, 1684872, 1638070, 1591268, 1544466,\n    1497664, 1450862, 1404060, 1357258, 1310456, 1263654, 1216852, 1170050,\n    1123248, 1076446, 1029644, 982842, 936040, 889238, 842436, 795634, 748832,\n    702030, 655228, 608426, 561624, 514822, 468020, 421218, 374416, 327614,\n    280812, 234010, 187208, 140406, 93604, 46802, 0, -46802, -93604, -140406,\n    -187208, -234010, -280812, -327614, -374416, -421218, -468020, -514822,\n    -561624, -608426, -655228, -702030, -748832, -795634, -842436, -889238,\n    -936040, -982842, -1029644, -1076446, -1123248, -1170050, -1216852,\n    -1263654, -1310456, -1357258, -1404060, -1450862, -1497664, -1544466,\n    -1591268, -1638070, -1684872, -1731674, -1778476, -1825278, -1872080,\n    -1918882, -1965684, -2012486, -2059288, -2106090, -2152892, -2199694,\n    -2246496, -2293298, -2340100, -2386902, -2433704, -2480506, -2527308,\n    -2574110, -2620912, -2667714, -2714516, -2761318, -2808120, -2854922,\n    -2901724, -2948526, -2995328, -3042130, -3088932, -3135734, -3182536,\n    -3229338, -3276140, -3322942, -3369744, -3416546, -3463348, -3510150,\n    -3556952, -3603754, -3650556, -3697358, -3744160, -3790962, -3837764,\n    -3884566, -3931368, -3978170, -4024972, -4071774, -4118576, -4165378,\n    -4212180, -4258982, -4305784, -4352586, -4399388, -4446190, -4492992,\n    -4539794, -4586596, -4633398, -4680200, -4727002, -4773804, -4820606,\n    -4867408, -4914210, -4961012, -5007814, -5054616, -5101418, -5148220,\n    -5195022, -5241824, -5288626, -5335428, -5382230, -5429032, -5475834,\n    -5522636, -5569438, -5616240, -5663042, -5709844, -5756646, -5803448,\n    -5850250, -5897052, -5943854,\n  ];\n\n  static readonly CBG = [\n    2919680, 2897126, 2874572, 2852018, 2829464, 2806910, 2784356, 2761802,\n    2739248, 2716694, 2694140, 2671586, 2649032, 2626478, 2603924, 2581370,\n    2558816, 2536262, 2513708, 2491154, 2468600, 2446046, 2423492, 2400938,\n    2378384, 2355830, 2333276, 2310722, 2288168, 2265614, 2243060, 2220506,\n    2197952, 2175398, 2152844, 2130290, 2107736, 2085182, 2062628, 2040074,\n    2017520, 1994966, 1972412, 1949858, 1927304, 1904750, 1882196, 1859642,\n    1837088, 1814534, 1791980, 1769426, 1746872, 1724318, 1701764, 1679210,\n    1656656, 1634102, 1611548, 1588994, 1566440, 1543886, 1521332, 1498778,\n    1476224, 1453670, 1431116, 1408562, 1386008, 1363454, 1340900, 1318346,\n    1295792, 1273238, 1250684, 1228130, 1205576, 1183022, 1160468, 1137914,\n    1115360, 1092806, 1070252, 1047698, 1025144, 1002590, 980036, 957482,\n    934928, 912374, 889820, 867266, 844712, 822158, 799604, 777050, 754496,\n    731942, 709388, 686834, 664280, 641726, 619172, 596618, 574064, 551510,\n    528956, 506402, 483848, 461294, 438740, 416186, 393632, 371078, 348524,\n    325970, 303416, 280862, 258308, 235754, 213200, 190646, 168092, 145538,\n    122984, 100430, 77876, 55322, 32768, 10214, -12340, -34894, -57448, -80002,\n    -102556, -125110, -147664, -170218, -192772, -215326, -237880, -260434,\n    -282988, -305542, -328096, -350650, -373204, -395758, -418312, -440866,\n    -463420, -485974, -508528, -531082, -553636, -576190, -598744, -621298,\n    -643852, -666406, -688960, -711514, -734068, -756622, -779176, -801730,\n    -824284, -846838, -869392, -891946, -914500, -937054, -959608, -982162,\n    -1004716, -1027270, -1049824, -1072378, -1094932, -1117486, -1140040,\n    -1162594, -1185148, -1207702, -1230256, -1252810, -1275364, -1297918,\n    -1320472, -1343026, -1365580, -1388134, -1410688, -1433242, -1455796,\n    -1478350, -1500904, -1523458, -1546012, -1568566, -1591120, -1613674,\n    -1636228, -1658782, -1681336, -1703890, -1726444, -1748998, -1771552,\n    -1794106, -1816660, -1839214, -1861768, -1884322, -1906876, -1929430,\n    -1951984, -1974538, -1997092, -2019646, -2042200, -2064754, -2087308,\n    -2109862, -2132416, -2154970, -2177524, -2200078, -2222632, -2245186,\n    -2267740, -2290294, -2312848, -2335402, -2357956, -2380510, -2403064,\n    -2425618, -2448172, -2470726, -2493280, -2515834, -2538388, -2560942,\n    -2583496, -2606050, -2628604, -2651158, -2673712, -2696266, -2718820,\n    -2741374, -2763928, -2786482, -2809036, -2831590,\n  ];\n\n  static readonly CBB = [\n    -227, -225, -223, -222, -220, -218, -216, -214, -213, -211, -209, -207,\n    -206, -204, -202, -200, -198, -197, -195, -193, -191, -190, -188, -186,\n    -184, -183, -181, -179, -177, -175, -174, -172, -170, -168, -167, -165,\n    -163, -161, -159, -158, -156, -154, -152, -151, -149, -147, -145, -144,\n    -142, -140, -138, -136, -135, -133, -131, -129, -128, -126, -124, -122,\n    -120, -119, -117, -115, -113, -112, -110, -108, -106, -105, -103, -101, -99,\n    -97, -96, -94, -92, -90, -89, -87, -85, -83, -82, -80, -78, -76, -74, -73,\n    -71, -69, -67, -66, -64, -62, -60, -58, -57, -55, -53, -51, -50, -48, -46,\n    -44, -43, -41, -39, -37, -35, -34, -32, -30, -28, -27, -25, -23, -21, -19,\n    -18, -16, -14, -12, -11, -9, -7, -5, -4, -2, 0, 2, 4, 5, 7, 9, 11, 12, 14,\n    16, 18, 19, 21, 23, 25, 27, 28, 30, 32, 34, 35, 37, 39, 41, 43, 44, 46, 48,\n    50, 51, 53, 55, 57, 58, 60, 62, 64, 66, 67, 69, 71, 73, 74, 76, 78, 80, 82,\n    83, 85, 87, 89, 90, 92, 94, 96, 97, 99, 101, 103, 105, 106, 108, 110, 112,\n    113, 115, 117, 119, 120, 122, 124, 126, 128, 129, 131, 133, 135, 136, 138,\n    140, 142, 144, 145, 147, 149, 151, 152, 154, 156, 158, 159, 161, 163, 165,\n    167, 168, 170, 172, 174, 175, 177, 179, 181, 183, 184, 186, 188, 190, 191,\n    193, 195, 197, 198, 200, 202, 204, 206, 207, 209, 211, 213, 214, 216, 218,\n    220, 222, 223, 225,\n  ];\n\n  private _input!: InputBuffer;\n  public get input(): InputBuffer {\n    return this._input;\n  }\n\n  private _jfif!: JpegJfif;\n  public get jfif(): JpegJfif {\n    return this._jfif;\n  }\n\n  private _adobe!: JpegAdobe;\n  public get adobe(): JpegAdobe {\n    return this._adobe;\n  }\n\n  private _frame?: JpegFrame;\n  public get frame(): JpegFrame | undefined {\n    return this._frame;\n  }\n\n  private _resetInterval!: number;\n  public get resetInterval(): number {\n    return this._resetInterval;\n  }\n\n  private _comment?: string;\n  public get comment(): string | undefined {\n    return this._comment;\n  }\n\n  private readonly _exifData: ExifData = new ExifData();\n  public get exifData(): ExifData {\n    return this._exifData;\n  }\n\n  private readonly _quantizationTables = new Array<Int16Array | undefined>(\n    Jpeg.NUM_QUANT_TBLS\n  );\n  public get quantizationTables(): Array<Int16Array | undefined> {\n    return this._quantizationTables;\n  }\n\n  private readonly _frames = new Array<JpegFrame | undefined>();\n  public get frames(): Array<JpegFrame | undefined> {\n    return this._frames;\n  }\n\n  private readonly _huffmanTablesAC = new Array<[] | undefined>();\n  public get huffmanTablesAC(): Array<[] | undefined> {\n    return this._huffmanTablesAC;\n  }\n\n  private readonly _huffmanTablesDC = new Array<[] | undefined>();\n  public get huffmanTablesDC(): Array<[] | undefined> {\n    return this._huffmanTablesDC;\n  }\n\n  private readonly _components = new Array<ComponentData>();\n  public get components(): Array<ComponentData> {\n    return this._components;\n  }\n\n  public get width(): number {\n    return this._frame!.samplesPerLine;\n  }\n\n  public get height(): number {\n    return this._frame!.scanLines;\n  }\n\n  private readMarkers(): void {\n    let marker = this.nextMarker();\n    if (marker !== Jpeg.M_SOI) {\n      // SOI (Start of Image)\n      throw new ImageError('Start Of Image marker not found.');\n    }\n\n    marker = this.nextMarker();\n    while (marker !== Jpeg.M_EOI && !this._input.isEOS) {\n      const block = this.readBlock();\n      switch (marker) {\n        case Jpeg.M_APP0:\n        case Jpeg.M_APP1:\n        case Jpeg.M_APP2:\n        case Jpeg.M_APP3:\n        case Jpeg.M_APP4:\n        case Jpeg.M_APP5:\n        case Jpeg.M_APP6:\n        case Jpeg.M_APP7:\n        case Jpeg.M_APP8:\n        case Jpeg.M_APP9:\n        case Jpeg.M_APP10:\n        case Jpeg.M_APP11:\n        case Jpeg.M_APP12:\n        case Jpeg.M_APP13:\n        case Jpeg.M_APP14:\n        case Jpeg.M_APP15:\n        case Jpeg.M_COM:\n          this.readAppData(marker, block);\n          break;\n\n        // DQT (Define Quantization Tables)\n        case Jpeg.M_DQT:\n          this.readDQT(block);\n          break;\n\n        // SOF0 (Start of Frame, Baseline DCT)\n        case Jpeg.M_SOF0:\n        // SOF1 (Start of Frame, Extended DCT)\n        case Jpeg.M_SOF1:\n        // SOF2 (Start of Frame, Progressive DCT)\n        case Jpeg.M_SOF2:\n          this.readFrame(marker, block);\n          break;\n\n        case Jpeg.M_SOF3:\n        case Jpeg.M_SOF5:\n        case Jpeg.M_SOF6:\n        case Jpeg.M_SOF7:\n        case Jpeg.M_JPG:\n        case Jpeg.M_SOF9:\n        case Jpeg.M_SOF10:\n        case Jpeg.M_SOF11:\n        case Jpeg.M_SOF13:\n        case Jpeg.M_SOF14:\n        case Jpeg.M_SOF15:\n          throw new ImageError(`Unhandled frame type ${marker.toString(16)}`);\n\n        // DHT (Define Huffman Tables)\n        case Jpeg.M_DHT:\n          this.readDHT(block);\n          break;\n\n        // DRI (Define Restart Interval)\n        case Jpeg.M_DRI:\n          this.readDRI(block);\n          break;\n\n        // SOS (Start of Scan)\n        case Jpeg.M_SOS:\n          this.readSOS(block);\n          break;\n\n        // Fill bytes\n        case 0xff:\n          if (this._input.getByte(0) !== 0xff) {\n            this._input.skip(-1);\n          }\n          break;\n\n        default:\n          if (\n            this._input.getByte(-3) === 0xff &&\n            this._input.getByte(-2) >= 0xc0 &&\n            this._input.getByte(-2) <= 0xfe\n          ) {\n            // Could be incorrect encoding -- last 0xFF byte of the previous\n            // block was eaten by the encoder\n            this._input.skip(-3);\n            break;\n          }\n\n          if (marker !== 0) {\n            throw new ImageError(`Unknown JPEG marker ${marker.toString(16)}`);\n          }\n          break;\n      }\n\n      marker = this.nextMarker();\n    }\n  }\n\n  private skipBlock(): void {\n    const length = this._input.readUint16();\n    if (length < 2) {\n      throw new ImageError('Invalid Block');\n    }\n    this._input.skip(length - 2);\n  }\n\n  public validate(bytes: Uint8Array): boolean {\n    this._input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n\n    // Some other formats have embedded jpeg, or jpeg-like data.\n    // Only validate if the image starts with the StartOfImage tag.\n    const soiCheck = this._input.peekBytes(2);\n    if (soiCheck.getByte(0) !== 0xff || soiCheck.getByte(1) !== 0xd8) {\n      return false;\n    }\n\n    let marker = this.nextMarker();\n    if (marker !== Jpeg.M_SOI) {\n      return false;\n    }\n\n    let hasSOF = false;\n    let hasSOS = false;\n\n    marker = this.nextMarker();\n    while (marker !== Jpeg.M_EOI && !this._input.isEOS) {\n      // EOI (End of image)\n      const sectionByteSize = this._input.readUint16();\n      if (sectionByteSize < 2) {\n        // Jpeg section consists of more than 2 bytes at least\n        // return success only when SOF and SOS have already found (as a jpeg without EOF.)\n        break;\n      }\n\n      this._input.skip(sectionByteSize - 2);\n\n      switch (marker) {\n        // SOF0 (Start of Frame, Baseline DCT)\n        case Jpeg.M_SOF0:\n        // SOF1 (Start of Frame, Extended DCT)\n        case Jpeg.M_SOF1:\n        // SOF2 (Start of Frame, Progressive DCT)\n        case Jpeg.M_SOF2:\n          hasSOF = true;\n          break;\n        // SOS (Start of Scan)\n        case Jpeg.M_SOS:\n          hasSOS = true;\n          break;\n        default:\n      }\n\n      marker = this.nextMarker();\n    }\n\n    return hasSOF && hasSOS;\n  }\n\n  public readInfo(bytes: Uint8Array): JpegInfo | undefined {\n    this._input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n\n    let marker = this.nextMarker();\n    if (marker !== Jpeg.M_SOI) {\n      return undefined;\n    }\n\n    const info = new JpegInfo();\n\n    let hasSOF = false;\n    let hasSOS = false;\n\n    marker = this.nextMarker();\n    while (marker !== Jpeg.M_EOI && !this._input.isEOS) {\n      // EOI (End of image)\n      switch (marker) {\n        // SOF0 (Start of Frame, Baseline DCT)\n        case Jpeg.M_SOF0:\n        // SOF1 (Start of Frame, Extended DCT)\n        case Jpeg.M_SOF1:\n        // SOF2 (Start of Frame, Progressive DCT)\n        case Jpeg.M_SOF2:\n          hasSOF = true;\n          this.readFrame(marker, this.readBlock());\n          break;\n        // SOS (Start of Scan)\n        case Jpeg.M_SOS:\n          hasSOS = true;\n          this.skipBlock();\n          break;\n        default:\n          this.skipBlock();\n          break;\n      }\n\n      marker = this.nextMarker();\n    }\n\n    if (this._frame !== undefined) {\n      info.setSize(this._frame.samplesPerLine, this._frame.scanLines);\n      this._frame = undefined;\n    }\n\n    this.frames.length = 0;\n\n    return hasSOF && hasSOS ? info : undefined;\n  }\n\n  public read(bytes: Uint8Array): void {\n    this._input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n\n    this.readMarkers();\n\n    if (this._frames.length !== 1) {\n      throw new ImageError('Only single frame JPEGs supported');\n    }\n\n    if (this._frame !== undefined) {\n      for (let i = 0; i < this._frame.componentsOrder.length; ++i) {\n        const component = this._frame.components.get(\n          this._frame.componentsOrder[i]\n        );\n        if (component !== undefined) {\n          this.components.push(\n            new ComponentData(\n              component.hSamples,\n              this._frame.maxHSamples,\n              component.vSamples,\n              this._frame.maxVSamples,\n              JpegData.buildComponentData(component)\n            )\n          );\n        }\n      }\n    }\n  }\n\n  getImage(): MemoryImage {\n    return JpegQuantize.getImageFromJpeg(this);\n  }\n\n  private static readExifValue(\n    block: InputBuffer,\n    format: number,\n    offset: number\n  ): string | number {\n    const FMT_BYTE = 1;\n    const FMT_ASCII = 2;\n    const FMT_USHORT = 3;\n    const FMT_ULONG = 4;\n    const FMT_URATIONAL = 5;\n    const FMT_SBYTE = 6;\n    const FMT_UNDEFINED = 7;\n    const FMT_SSHORT = 8;\n    const FMT_SLONG = 9;\n    const FMT_SRATIONAL = 10;\n    const FMT_SINGLE = 11;\n    const FMT_DOUBLE = 12;\n\n    const initialBlockLength = block.length;\n    try {\n      switch (format) {\n        case FMT_SBYTE:\n          return block.readInt8();\n        case FMT_BYTE:\n        case FMT_UNDEFINED:\n          return block.readByte();\n        case FMT_ASCII:\n          return block.readString(1);\n        case FMT_USHORT:\n          return block.readUint16();\n        case FMT_ULONG:\n          return block.readUint32();\n        case FMT_URATIONAL:\n        case FMT_SRATIONAL: {\n          const buffer = block.peekBytes(8, offset);\n          const num = buffer.readInt32();\n          const den = buffer.readInt32();\n          if (den === 0) {\n            return 0.0;\n          }\n          return num / den;\n        }\n        case FMT_SSHORT:\n          return block.readInt16();\n        case FMT_SLONG:\n          return block.readInt32();\n        // Not sure if this is correct (never seen float used in Exif format)\n        case FMT_SINGLE:\n          return block.readFloat32();\n        case FMT_DOUBLE:\n          return block.peekBytes(8, offset).readFloat64();\n        default:\n          return 0;\n      }\n    } finally {\n      const bytesRead = initialBlockLength - block.length;\n      if (bytesRead < 4) {\n        block.skip(4 - bytesRead);\n      }\n    }\n  }\n\n  private static buildHuffmanTable(\n    codeLengths: Uint8Array,\n    values: Uint8Array\n  ): Array<unknown> {\n    let k = 0;\n    const code = new Array<JpegHuffman>();\n    let length = 16;\n\n    while (length > 0 && codeLengths[length - 1] === 0) {\n      length--;\n    }\n\n    code.push(new JpegHuffman());\n\n    let p: JpegHuffman = code[0];\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < codeLengths[i]; j++) {\n        p = code.pop()!;\n        if (p.children.length <= p.index) {\n          p.children.length = p.index + 1;\n        }\n        p.children[p.index] = values[k];\n        while (p.index > 0) {\n          p = code.pop()!;\n        }\n        p.incrementIndex();\n        code.push(p);\n        while (code.length <= i) {\n          const q = new JpegHuffman();\n          code.push(q);\n          if (p.children.length <= p.index) {\n            p.children.length = p.index + 1;\n          }\n          p.children[p.index] = q.children;\n          p = q;\n        }\n        k++;\n      }\n\n      if (i + 1 < length) {\n        // P here points to last code\n        const q = new JpegHuffman();\n        code.push(q);\n        if (p.children.length <= p.index) {\n          p.children.length = p.index + 1;\n        }\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n\n    return code[0].children;\n  }\n\n  private static buildComponentData(\n    component: JpegComponent\n  ): Array<Uint8Array> {\n    const blocksPerLine = component.blocksPerLine;\n    const blocksPerColumn = component.blocksPerColumn;\n    const samplesPerLine = blocksPerLine << 3;\n    const R = new Int32Array(64);\n    const r = new Uint8Array(64);\n    const lines = new Array<Uint8Array>(blocksPerColumn * 8);\n\n    let l = 0;\n    for (let blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      const scanLine = blockRow << 3;\n      for (let i = 0; i < 8; i++) {\n        lines[l++] = new Uint8Array(samplesPerLine);\n      }\n\n      for (let blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        JpegQuantize.quantizeAndInverse(\n          component.quantizationTable!,\n          component.blocks[blockRow][blockCol],\n          r,\n          R\n        );\n\n        let offset = 0;\n        const sample = blockCol << 3;\n        for (let j = 0; j < 8; j++) {\n          const line = lines[scanLine + j];\n          for (let i = 0; i < 8; i++) {\n            line[sample + i] = r[offset++];\n          }\n        }\n      }\n    }\n\n    return lines;\n  }\n\n  public static toFix(val: number): number {\n    const FIXED_POINT = 20;\n    const ONE = 1 << FIXED_POINT;\n    return Math.trunc(val * ONE) & 0xffffffff;\n  }\n\n  private readBlock(): InputBuffer {\n    const length = this._input.readUint16();\n    if (length < 2) {\n      throw new ImageError('Invalid Block');\n    }\n    return this._input.readBytes(length - 2);\n  }\n\n  private nextMarker(): number {\n    let c = 0;\n    if (this._input.isEOS) {\n      return c;\n    }\n\n    do {\n      do {\n        c = this._input.readByte();\n      } while (c !== 0xff && !this._input.isEOS);\n\n      if (this._input.isEOS) {\n        return c;\n      }\n\n      do {\n        c = this._input.readByte();\n      } while (c === 0xff && !this._input.isEOS);\n    } while (c === 0 && !this._input.isEOS);\n\n    return c;\n  }\n\n  private readExifDir(block: InputBuffer, nesting = 0): void {\n    if (nesting > 4) {\n      // Maximum Exif directory nesting exceeded (corrupt Exif header)\n      return;\n    }\n\n    const numDirEntries = block.readUint16();\n\n    // const TAG_ORIENTATION = 0x0112;\n    // const TAG_INTEROP_OFFSET = 0xA005;\n    // const TAG_EXIF_OFFSET = 0x8769;\n    const maxFormats = 12;\n    const bytesPerFormat = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8];\n\n    for (let di = 0; di < numDirEntries; ++di) {\n      const tag = block.readUint16();\n      const format = block.readUint16();\n      const components = block.readUint32();\n\n      if (format - 1 >= maxFormats) {\n        continue;\n      }\n\n      // Too many components\n      if (components > 0x10000) {\n        continue;\n      }\n\n      const byteCount = bytesPerFormat[format];\n\n      let offset = 0;\n\n      // If its bigger than 4 bytes, the dir entry contains an offset.\n      if (byteCount > 4) {\n        offset = block.readUint32();\n        if (offset + byteCount > block.length) {\n          // Bogus pointer offset and / or bytecount value\n          continue;\n        }\n      }\n\n      this._exifData.data.set(\n        tag,\n        JpegData.readExifValue(block, format, offset)\n      );\n    }\n  }\n\n  private readExifData(block: InputBuffer): void {\n    const rawData = ListUtils.copyUint8(block.toUint8Array());\n    this._exifData.addRowData(rawData);\n\n    const EXIF_TAG = 0x45786966;\n    if (block.readUint32() !== EXIF_TAG) {\n      return;\n    }\n    if (block.readUint16() !== 0) {\n      return;\n    }\n\n    const saveEndian = block.bigEndian;\n\n    // Exif Directory\n    const alignment = block.readString(2);\n    if (alignment === 'II') {\n      // Exif is in Intel order\n      block.bigEndian = false;\n    } else if (alignment === 'MM') {\n      // Exif section in Motorola order\n      block.bigEndian = true;\n    } else {\n      return;\n    }\n\n    block.skip(2);\n\n    const offset = block.readUint32();\n    if (offset < 8 || offset > 16) {\n      if (offset > block.length - 16) {\n        // Invalid offset for first Exif IFD value ;\n        block.bigEndian = saveEndian;\n        return;\n      }\n    }\n\n    if (offset > 8) {\n      block.skip(offset - 8);\n    }\n\n    this.readExifDir(block);\n\n    block.bigEndian = saveEndian;\n  }\n\n  private readAppData(marker: number, block: InputBuffer): void {\n    const appData = block;\n\n    if (marker === Jpeg.M_APP0) {\n      // 'JFIF\\0'\n      if (\n        appData.getByte(0) === 0x4a &&\n        appData.getByte(1) === 0x46 &&\n        appData.getByte(2) === 0x49 &&\n        appData.getByte(3) === 0x46 &&\n        appData.getByte(4) === 0\n      ) {\n        const majorVersion = appData.getByte(5);\n        const minorVersion = appData.getByte(6);\n        const densityUnits = appData.getByte(7);\n        const xDensity = (appData.getByte(8) << 8) | appData.getByte(9);\n        const yDensity = (appData.getByte(10) << 8) | appData.getByte(11);\n        const thumbWidth = appData.getByte(12);\n        const thumbHeight = appData.getByte(13);\n\n        const thumbSize = 3 * thumbWidth * thumbHeight;\n        const thumbData = appData.subarray(14 + thumbSize, undefined, 14);\n\n        this._jfif = new JpegJfif(\n          thumbWidth,\n          thumbHeight,\n          majorVersion,\n          minorVersion,\n          densityUnits,\n          xDensity,\n          yDensity,\n          thumbData\n        );\n      }\n    } else if (marker === Jpeg.M_APP1) {\n      // 'EXIF\\0'\n      this.readExifData(appData);\n    } else if (marker === Jpeg.M_APP14) {\n      // 'Adobe\\0'\n      if (\n        appData.getByte(0) === 0x41 &&\n        appData.getByte(1) === 0x64 &&\n        appData.getByte(2) === 0x6f &&\n        appData.getByte(3) === 0x62 &&\n        appData.getByte(4) === 0x65 &&\n        appData.getByte(5) === 0\n      ) {\n        const version = appData.getByte(6);\n        const flags0 = (appData.getByte(7) << 8) | appData.getByte(8);\n        const flags1 = (appData.getByte(9) << 8) | appData.getByte(10);\n        const transformCode = appData.getByte(11);\n        this._adobe = new JpegAdobe(version, flags0, flags1, transformCode);\n      }\n    } else if (marker === Jpeg.M_COM) {\n      // Comment\n      try {\n        this._comment = appData.readStringUtf8();\n      } catch (_) {\n        // ReadString without 0x00 terminator causes exception. Technically\n        // bad data, but no reason to abort the rest of the image decoding.\n      }\n    }\n  }\n\n  private readDQT(block: InputBuffer): void {\n    while (!block.isEOS) {\n      let n = block.readByte();\n      const prec = n >> 4;\n      n &= 0x0f;\n\n      if (n >= Jpeg.NUM_QUANT_TBLS) {\n        throw new ImageError('Invalid number of quantization tables');\n      }\n\n      if (this._quantizationTables[n] === undefined) {\n        this._quantizationTables[n] = new Int16Array(64);\n      }\n\n      const tableData = this._quantizationTables[n];\n      if (tableData !== undefined) {\n        for (let i = 0; i < Jpeg.DCTSIZE2; i++) {\n          const tmp: number =\n            prec !== 0 ? block.readUint16() : block.readByte();\n          tableData[Jpeg.dctZigZag[i]] = tmp;\n        }\n      }\n    }\n\n    if (!block.isEOS) {\n      throw new ImageError('Bad length for DQT block');\n    }\n  }\n\n  private readFrame(marker: number, block: InputBuffer): void {\n    if (this._frame !== undefined) {\n      throw new ImageError('Duplicate JPG frame data found.');\n    }\n\n    const extended = marker === Jpeg.M_SOF1;\n    const progressive = marker === Jpeg.M_SOF2;\n    const precision = block.readByte();\n    const scanLines = block.readUint16();\n    const samplesPerLine = block.readUint16();\n\n    const numComponents = block.readByte();\n    const components = new Map<number, JpegComponent>();\n    const componentsOrder = new Array<number>();\n    for (let i = 0; i < numComponents; i++) {\n      const componentId = block.readByte();\n      const x = block.readByte();\n      const h = (x >> 4) & 15;\n      const v = x & 15;\n      const qId = block.readByte();\n      componentsOrder.push(componentId);\n      const component = new JpegComponent(h, v, this._quantizationTables, qId);\n      components.set(componentId, component);\n    }\n\n    this._frame = new JpegFrame(\n      components,\n      componentsOrder,\n      extended,\n      progressive,\n      precision,\n      scanLines,\n      samplesPerLine\n    );\n\n    this._frame.prepare();\n\n    this.frames.push(this._frame);\n  }\n\n  private readDHT(block: InputBuffer): void {\n    while (!block.isEOS) {\n      let index = block.readByte();\n\n      const bits = new Uint8Array(16);\n      let count = 0;\n      for (let j = 0; j < 16; j++) {\n        bits[j] = block.readByte();\n        count += bits[j];\n      }\n\n      const huffmanValues = new Uint8Array(count);\n      for (let j = 0; j < count; j++) {\n        huffmanValues[j] = block.readByte();\n      }\n\n      let ht: Array<unknown> = [];\n      if ((index & 0x10) !== 0) {\n        // AC table definition\n        index -= 0x10;\n        ht = this._huffmanTablesAC;\n      } else {\n        // DC table definition\n        ht = this._huffmanTablesDC;\n      }\n\n      if (ht.length <= index) {\n        ht.length = index + 1;\n      }\n\n      ht[index] = JpegData.buildHuffmanTable(bits, huffmanValues);\n    }\n  }\n\n  private readDRI(block: InputBuffer): void {\n    this._resetInterval = block.readUint16();\n  }\n\n  private readSOS(block: InputBuffer): void {\n    const n = block.readByte();\n    if (n < 1 || n > Jpeg.MAX_COMPS_IN_SCAN) {\n      throw new ImageError('Invalid SOS block');\n    }\n\n    const components = new Array<JpegComponent>();\n    for (let i = 0; i < n; i++) {\n      const id = block.readByte();\n      const c = block.readByte();\n\n      if (!this._frame!.components.has(id)) {\n        throw new ImageError('Invalid Component in SOS block');\n      }\n      const component = this._frame!.components.get(id);\n      if (component !== undefined) {\n        const dcTableNumber = (c >> 4) & 15;\n        const acTableNumber = c & 15;\n        if (dcTableNumber < this._huffmanTablesDC.length) {\n          component.huffmanTableDC = this._huffmanTablesDC[dcTableNumber]!;\n        }\n        if (acTableNumber < this._huffmanTablesAC.length) {\n          component.huffmanTableAC = this._huffmanTablesAC[acTableNumber]!;\n        }\n        components.push(component);\n      }\n    }\n\n    const spectralStart = block.readByte();\n    const spectralEnd = block.readByte();\n    const successiveApproximation = block.readByte();\n\n    const Ah = (successiveApproximation >> 4) & 15;\n    const Al = successiveApproximation & 15;\n\n    const scan = new JpegScan(\n      this._input,\n      this._frame!,\n      components,\n      spectralStart,\n      spectralEnd,\n      Ah,\n      Al,\n      this._resetInterval\n    );\n    scan.decode();\n  }\n}\n", "/** @format */\n\nimport { FrameAnimation } from '../common/frame-animation';\nimport { MemoryImage } from '../common/memory-image';\nimport { ImageError } from '../error/image-error';\nimport { HdrImage } from '../hdr/hdr-image';\nimport { DecodeInfo } from './decode-info';\nimport { Decoder } from './decoder';\nimport { JpegData } from './jpeg/jpeg-data';\nimport { JpegInfo } from './jpeg/jpeg-info';\nimport { InputBuffer } from './util/input-buffer';\n\n/**\n * Decode a jpeg encoded image.\n */\nexport class JpegDecoder implements Decoder {\n  private info?: JpegInfo;\n\n  private input?: InputBuffer;\n\n  public get numFrames(): number {\n    return this.info !== undefined ? this.info.numFrames : 0;\n  }\n\n  /**\n   * Is the given file a valid JPEG image?\n   */\n  public isValidFile(bytes: Uint8Array): boolean {\n    return new JpegData().validate(bytes);\n  }\n\n  public startDecode(bytes: Uint8Array): DecodeInfo | undefined {\n    this.input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n    this.info = new JpegData().readInfo(bytes);\n    return this.info;\n  }\n\n  public decodeFrame(_: number): MemoryImage | undefined {\n    if (this.input === undefined) {\n      return undefined;\n    }\n    const jpeg = new JpegData();\n    jpeg.read(this.input.buffer);\n    if (jpeg.frames.length !== 1) {\n      throw new ImageError('only single frame JPEGs supported');\n    }\n\n    return jpeg.getImage();\n  }\n\n  public decodeHdrFrame(frame: number): HdrImage | undefined {\n    const img = this.decodeFrame(frame);\n    if (img === undefined) {\n      return undefined;\n    }\n    return HdrImage.fromImage(img);\n  }\n\n  public decodeAnimation(bytes: Uint8Array): FrameAnimation | undefined {\n    const image = this.decodeImage(bytes);\n    if (image === undefined) {\n      return undefined;\n    }\n\n    const animation = new FrameAnimation({\n      width: image.width,\n      height: image.height,\n    });\n    animation.addFrame(image);\n\n    return animation;\n  }\n\n  public decodeImage(bytes: Uint8Array, _?: number): MemoryImage | undefined {\n    const jpeg = new JpegData();\n    jpeg.read(bytes);\n\n    if (jpeg.frames.length !== 1) {\n      throw new ImageError('only single frame JPEGs supported');\n    }\n\n    return jpeg.getImage();\n  }\n\n  public decodeHdrImage(bytes: Uint8Array, frame = 0): HdrImage | undefined {\n    const img = this.decodeImage(bytes, frame);\n    if (img === undefined) {\n      return undefined;\n    }\n    return HdrImage.fromImage(img);\n  }\n}\n", "/** @format */\n\nimport { Clamp } from '../common/clamp';\nimport { ExifData } from '../common/exif_data';\nimport { FrameAnimation } from '../common/frame-animation';\nimport { MemoryImage } from '../common/memory-image';\nimport { Encoder } from './encoder';\nimport { Jpeg } from './jpeg/jpeg';\nimport { OutputBuffer } from './util/output-buffer';\n\n/**\n * Encode an image to the JPEG format.\n */\nexport class JpegEncoder implements Encoder {\n  private static readonly ZIGZAG: number[] = [\n    0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25,\n    30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54,\n    20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48,\n    49, 57, 58, 62, 63,\n  ];\n\n  private static readonly STD_DC_LUMINANCE_NR_CODES: number[] = [\n    0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,\n  ];\n\n  private static readonly STD_DC_LUMINANCE_VALUES: number[] = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n  ];\n\n  private static readonly STD_AC_LUMINANCE_NR_CODES: number[] = [\n    0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d,\n  ];\n\n  private static readonly STD_AC_LUMINANCE_VALUES: number[] = [\n    0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06,\n    0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,\n    0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72,\n    0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,\n    0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45,\n    0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,\n    0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75,\n    0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,\n    0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,\n    0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,\n    0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9,\n    0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,\n    0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4,\n    0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,\n  ];\n\n  private static readonly STD_DC_CHROMINANCE_NR_CODES: number[] = [\n    0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n  ];\n\n  private static readonly STD_DC_CHROMINANCE_VALUES: number[] = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n  ];\n\n  private static readonly STD_AC_CHROMINANCE_NR_CODES: number[] = [\n    0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77,\n  ];\n\n  private static readonly STD_AC_CHROMINANCE_VALUES: number[] = [\n    0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41,\n    0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,\n    0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1,\n    0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,\n    0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44,\n    0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,\n    0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74,\n    0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n    0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a,\n    0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,\n    0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,\n    0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,\n    0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4,\n    0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,\n  ];\n\n  private readonly tableY = new Uint8Array(64);\n  private readonly tableUV = new Uint8Array(64);\n  private readonly ftableY = new Float32Array(64);\n  private readonly ftableUV = new Float32Array(64);\n\n  private readonly bitcode = new Array<Array<number> | undefined>(65535).fill(\n    undefined\n  );\n  private readonly category = new Array<number | undefined>(65535).fill(\n    undefined\n  );\n  private readonly outputfDCTQuant = new Array<number | undefined>(64).fill(\n    undefined\n  );\n  private readonly DU = new Array<number | undefined>(64).fill(undefined);\n\n  private readonly YDU: Float32Array = new Float32Array(64);\n  private readonly UDU: Float32Array = new Float32Array(64);\n  private readonly VDU: Float32Array = new Float32Array(64);\n  private readonly tableRGBYUV: Int32Array = new Int32Array(2048);\n\n  private htYDC: Array<Array<number> | undefined> | undefined;\n  private htUVDC: Array<Array<number> | undefined> | undefined;\n  private htYAC!: Array<Array<number> | undefined>;\n  private htUVAC!: Array<Array<number> | undefined>;\n\n  private currentQuality?: number;\n\n  private byteNew = 0;\n  private bytePos = 7;\n\n  private _supportsAnimation = false;\n  public get supportsAnimation(): boolean {\n    return this._supportsAnimation;\n  }\n\n  constructor(quality = 100) {\n    this.initHuffmanTable();\n    this.initCategoryNumber();\n    this.initRGBYUVTable();\n    this.setQuality(quality);\n  }\n\n  private static computeHuffmanTable(\n    nrcodes: number[],\n    stdTable: number[]\n  ): Array<Array<number> | undefined> {\n    let codevalue = 0;\n    let posInTable = 0;\n    const HT = new Array<Array<number> | undefined>();\n    for (let k = 1; k <= 16; k++) {\n      for (let j = 1; j <= nrcodes[k]; j++) {\n        const index = stdTable[posInTable];\n        if (HT.length <= index) {\n          HT.length = index + 1;\n        }\n        HT[index] = [codevalue, k];\n        posInTable++;\n        codevalue++;\n      }\n      codevalue *= 2;\n    }\n    return HT;\n  }\n\n  private static writeMarker(fp: OutputBuffer, marker: number): void {\n    fp.writeByte(0xff);\n    fp.writeByte(marker & 0xff);\n  }\n\n  private static writeAPP0(out: OutputBuffer): void {\n    JpegEncoder.writeMarker(out, Jpeg.M_APP0);\n    // Length\n    out.writeUint16(16);\n    // J\n    out.writeByte(0x4a);\n    // F\n    out.writeByte(0x46);\n    // I\n    out.writeByte(0x49);\n    // F\n    out.writeByte(0x46);\n    // '\\0'\n    out.writeByte(0);\n    // versionhi\n    out.writeByte(1);\n    // versionlo\n    out.writeByte(1);\n    // xyunits\n    out.writeByte(0);\n    // xdensity\n    out.writeUint16(1);\n    // ydensity\n    out.writeUint16(1);\n    // thumbnwidth\n    out.writeByte(0);\n    // thumbnheight\n    out.writeByte(0);\n  }\n\n  private static writeAPP1(out: OutputBuffer, exif: ExifData): void {\n    if (exif.rawData === undefined) {\n      return;\n    }\n\n    for (const rawData of exif.rawData) {\n      JpegEncoder.writeMarker(out, Jpeg.M_APP1);\n      out.writeUint16(rawData.length + 2);\n      out.writeBytes(rawData);\n    }\n  }\n\n  private static writeSOF0(\n    out: OutputBuffer,\n    width: number,\n    height: number\n  ): void {\n    JpegEncoder.writeMarker(out, Jpeg.M_SOF0);\n    // Length, truecolor YUV JPG\n    out.writeUint16(17);\n    // Precision\n    out.writeByte(8);\n    out.writeUint16(height);\n    out.writeUint16(width);\n    // nrofcomponents\n    out.writeByte(3);\n    // IdY\n    out.writeByte(1);\n    // HVY\n    out.writeByte(0x11);\n    // QTY\n    out.writeByte(0);\n    // IdU\n    out.writeByte(2);\n    // HVU\n    out.writeByte(0x11);\n    // QTU\n    out.writeByte(1);\n    // IdV\n    out.writeByte(3);\n    // HVV\n    out.writeByte(0x11);\n    // QTV\n    out.writeByte(1);\n  }\n\n  private static writeSOS(out: OutputBuffer): void {\n    JpegEncoder.writeMarker(out, Jpeg.M_SOS);\n    // Length\n    out.writeUint16(12);\n    // Nrofcomponents\n    out.writeByte(3);\n    // IdY\n    out.writeByte(1);\n    // HTY\n    out.writeByte(0);\n    // IdU\n    out.writeByte(2);\n    // HTU\n    out.writeByte(0x11);\n    // IdV\n    out.writeByte(3);\n    // HTV\n    out.writeByte(0x11);\n    // Ss\n    out.writeByte(0);\n    // Se\n    out.writeByte(0x3f);\n    // Bf\n    out.writeByte(0);\n  }\n\n  private static writeDHT(out: OutputBuffer): void {\n    JpegEncoder.writeMarker(out, Jpeg.M_DHT);\n    // Length\n    out.writeUint16(0x01a2);\n\n    // HTYDCinfo\n    out.writeByte(0);\n    for (let i = 0; i < 16; i++) {\n      out.writeByte(JpegEncoder.STD_DC_LUMINANCE_NR_CODES[i + 1]);\n    }\n    for (let j = 0; j <= 11; j++) {\n      out.writeByte(JpegEncoder.STD_DC_LUMINANCE_VALUES[j]);\n    }\n\n    // HTYACinfo\n    out.writeByte(0x10);\n    for (let k = 0; k < 16; k++) {\n      out.writeByte(JpegEncoder.STD_AC_LUMINANCE_NR_CODES[k + 1]);\n    }\n    for (let l = 0; l <= 161; l++) {\n      out.writeByte(JpegEncoder.STD_AC_LUMINANCE_VALUES[l]);\n    }\n\n    // HTUDCinfo\n    out.writeByte(1);\n    for (let m = 0; m < 16; m++) {\n      out.writeByte(JpegEncoder.STD_DC_CHROMINANCE_NR_CODES[m + 1]);\n    }\n    for (let n = 0; n <= 11; n++) {\n      out.writeByte(JpegEncoder.STD_DC_CHROMINANCE_VALUES[n]);\n    }\n\n    // HTUACinfo\n    out.writeByte(0x11);\n    for (let o = 0; o < 16; o++) {\n      out.writeByte(JpegEncoder.STD_AC_CHROMINANCE_NR_CODES[o + 1]);\n    }\n    for (let p = 0; p <= 161; p++) {\n      out.writeByte(JpegEncoder.STD_AC_CHROMINANCE_VALUES[p]);\n    }\n  }\n\n  private initHuffmanTable(): void {\n    this.htYDC = JpegEncoder.computeHuffmanTable(\n      JpegEncoder.STD_DC_LUMINANCE_NR_CODES,\n      JpegEncoder.STD_DC_LUMINANCE_VALUES\n    );\n    this.htUVDC = JpegEncoder.computeHuffmanTable(\n      JpegEncoder.STD_DC_CHROMINANCE_NR_CODES,\n      JpegEncoder.STD_DC_CHROMINANCE_VALUES\n    );\n    this.htYAC = JpegEncoder.computeHuffmanTable(\n      JpegEncoder.STD_AC_LUMINANCE_NR_CODES,\n      JpegEncoder.STD_AC_LUMINANCE_VALUES\n    );\n    this.htUVAC = JpegEncoder.computeHuffmanTable(\n      JpegEncoder.STD_AC_CHROMINANCE_NR_CODES,\n      JpegEncoder.STD_AC_CHROMINANCE_VALUES\n    );\n  }\n\n  private initCategoryNumber(): void {\n    let nrlower = 1;\n    let nrupper = 2;\n    for (let cat = 1; cat <= 15; cat++) {\n      // Positive numbers\n      for (let nr = nrlower; nr < nrupper; nr++) {\n        this.category[32767 + nr] = cat;\n        this.bitcode[32767 + nr] = [nr, cat];\n      }\n      // Negative numbers\n      for (let nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++) {\n        this.category[32767 + nrneg] = cat;\n        this.bitcode[32767 + nrneg] = [nrupper - 1 + nrneg, cat];\n      }\n      nrlower <<= 1;\n      nrupper <<= 1;\n    }\n  }\n\n  private initRGBYUVTable(): void {\n    for (let i = 0; i < 256; i++) {\n      this.tableRGBYUV[i] = 19595 * i;\n      this.tableRGBYUV[i + 256] = 38470 * i;\n      this.tableRGBYUV[i + 512] = 7471 * i + 0x8000;\n      this.tableRGBYUV[i + 768] = -11059 * i;\n      this.tableRGBYUV[i + 1024] = -21709 * i;\n      this.tableRGBYUV[i + 1280] = 32768 * i + 0x807fff;\n      this.tableRGBYUV[i + 1536] = -27439 * i;\n      this.tableRGBYUV[i + 1792] = -5329 * i;\n    }\n  }\n\n  private setQuality(quality: number): void {\n    const q = Clamp.clampInt(quality, 1, 100);\n\n    if (this.currentQuality === q) {\n      // Don't re-calc if unchanged\n      return;\n    }\n\n    let sf = 0;\n    if (q < 50) {\n      sf = Math.floor(5000 / q);\n    } else {\n      sf = Math.floor(200 - q * 2);\n    }\n\n    this.initQuantTables(sf);\n    this.currentQuality = q;\n  }\n\n  private initQuantTables(sf: number): void {\n    const YQT: number[] = [\n      16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13,\n      16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56,\n      68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103,\n      121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99,\n    ];\n\n    for (let i = 0; i < 64; i++) {\n      let t = Math.floor((YQT[i] * sf + 50) / 100);\n      if (t < 1) {\n        t = 1;\n      } else if (t > 255) {\n        t = 255;\n      }\n      this.tableY[JpegEncoder.ZIGZAG[i]] = t;\n    }\n\n    const UVQT: number[] = [\n      17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26,\n      56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\n      99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\n      99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\n    ];\n\n    for (let j = 0; j < 64; j++) {\n      let u = Math.floor((UVQT[j] * sf + 50) / 100);\n      if (u < 1) {\n        u = 1;\n      } else if (u > 255) {\n        u = 255;\n      }\n      this.tableUV[JpegEncoder.ZIGZAG[j]] = u;\n    }\n\n    const aasf: number[] = [\n      1.0, 1.387039845, 1.306562965, 1.175875602, 1.0, 0.785694958, 0.5411961,\n      0.275899379,\n    ];\n\n    let k = 0;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        this.ftableY[k] =\n          1.0 /\n          (this.tableY[JpegEncoder.ZIGZAG[k]] * aasf[row] * aasf[col] * 8.0);\n        this.ftableUV[k] =\n          1.0 /\n          (this.tableUV[JpegEncoder.ZIGZAG[k]] * aasf[row] * aasf[col] * 8.0);\n        k++;\n      }\n    }\n  }\n\n  // DCT & quantization core\n  private fDCTQuant(\n    data: Float32Array,\n    fdtbl: Float32Array\n  ): Array<number | undefined> {\n    // Pass 1: process rows.\n    let dataOff = 0;\n    const I8 = 8;\n    const I64 = 64;\n    for (let i = 0; i < I8; ++i) {\n      const d0 = data[dataOff];\n      const d1 = data[dataOff + 1];\n      const d2 = data[dataOff + 2];\n      const d3 = data[dataOff + 3];\n      const d4 = data[dataOff + 4];\n      const d5 = data[dataOff + 5];\n      const d6 = data[dataOff + 6];\n      const d7 = data[dataOff + 7];\n\n      const tmp0 = d0 + d7;\n      const tmp7 = d0 - d7;\n      const tmp1 = d1 + d6;\n      const tmp6 = d1 - d6;\n      const tmp2 = d2 + d5;\n      const tmp5 = d2 - d5;\n      const tmp3 = d3 + d4;\n      const tmp4 = d3 - d4;\n\n      // Even part\n      // Phase 2\n      let tmp10 = tmp0 + tmp3;\n      const tmp13 = tmp0 - tmp3;\n      let tmp11 = tmp1 + tmp2;\n      let tmp12 = tmp1 - tmp2;\n\n      // Phase 3\n      data[dataOff] = tmp10 + tmp11;\n      data[dataOff + 4] = tmp10 - tmp11;\n\n      // C4\n      const z1 = (tmp12 + tmp13) * 0.707106781;\n      // Phase 5\n      data[dataOff + 2] = tmp13 + z1;\n      data[dataOff + 6] = tmp13 - z1;\n\n      // Odd part\n      // Phase 2\n      tmp10 = tmp4 + tmp5;\n      tmp11 = tmp5 + tmp6;\n      tmp12 = tmp6 + tmp7;\n\n      // The rotator is modified from fig 4-8 to avoid extra negations.\n      // c6\n      const z5 = (tmp10 - tmp12) * 0.382683433;\n      // c2 - c6\n      const z2 = 0.5411961 * tmp10 + z5;\n      // c2 + c6\n      const z4 = 1.306562965 * tmp12 + z5;\n      // c4\n      const z3 = tmp11 * 0.707106781;\n\n      // Phase 5\n      const z11 = tmp7 + z3;\n      const z13 = tmp7 - z3;\n\n      // Phase 6\n      data[dataOff + 5] = z13 + z2;\n      data[dataOff + 3] = z13 - z2;\n      data[dataOff + 1] = z11 + z4;\n      data[dataOff + 7] = z11 - z4;\n\n      // Advance pointer to next row\n      dataOff += 8;\n    }\n\n    // Pass 2: process columns.\n    dataOff = 0;\n    for (let i = 0; i < I8; ++i) {\n      const d0 = data[dataOff];\n      const d1 = data[dataOff + 8];\n      const d2 = data[dataOff + 16];\n      const d3 = data[dataOff + 24];\n      const d4 = data[dataOff + 32];\n      const d5 = data[dataOff + 40];\n      const d6 = data[dataOff + 48];\n      const d7 = data[dataOff + 56];\n\n      const tmp0p2 = d0 + d7;\n      const tmp7p2 = d0 - d7;\n      const tmp1p2 = d1 + d6;\n      const tmp6p2 = d1 - d6;\n      const tmp2p2 = d2 + d5;\n      const tmp5p2 = d2 - d5;\n      const tmp3p2 = d3 + d4;\n      const tmp4p2 = d3 - d4;\n\n      // Even part\n      // Phase 2\n      let tmp10p2 = tmp0p2 + tmp3p2;\n      const tmp13p2 = tmp0p2 - tmp3p2;\n      let tmp11p2 = tmp1p2 + tmp2p2;\n      let tmp12p2 = tmp1p2 - tmp2p2;\n\n      // Phase 3\n      data[dataOff] = tmp10p2 + tmp11p2;\n      data[dataOff + 32] = tmp10p2 - tmp11p2;\n\n      // c4\n      const z1p2 = (tmp12p2 + tmp13p2) * 0.707106781;\n      // Phase 5\n      data[dataOff + 16] = tmp13p2 + z1p2;\n      data[dataOff + 48] = tmp13p2 - z1p2;\n\n      // Odd part\n      // Phase 2\n      tmp10p2 = tmp4p2 + tmp5p2;\n      tmp11p2 = tmp5p2 + tmp6p2;\n      tmp12p2 = tmp6p2 + tmp7p2;\n\n      // The rotator is modified from fig 4-8 to avoid extra negations.\n      // c6\n      const z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;\n      // c2 - c6\n      const z2p2 = 0.5411961 * tmp10p2 + z5p2;\n      // c2 + c6\n      const z4p2 = 1.306562965 * tmp12p2 + z5p2;\n      // c4\n      const z3p2 = tmp11p2 * 0.707106781;\n      // Phase 5\n      const z11p2 = tmp7p2 + z3p2;\n      const z13p2 = tmp7p2 - z3p2;\n\n      // Phase 6\n      data[dataOff + 40] = z13p2 + z2p2;\n      data[dataOff + 24] = z13p2 - z2p2;\n      data[dataOff + 8] = z11p2 + z4p2;\n      data[dataOff + 56] = z11p2 - z4p2;\n\n      // Advance pointer to next column\n      dataOff++;\n    }\n\n    // Quantize/descale the coefficients\n    for (let i = 0; i < I64; ++i) {\n      // Apply the quantization and scaling factor & Round to nearest integer\n      const fDCTQuant = data[i] * fdtbl[i];\n      this.outputfDCTQuant[i] =\n        fDCTQuant > 0.0\n          ? Math.trunc(fDCTQuant + 0.5)\n          : Math.trunc(fDCTQuant - 0.5);\n    }\n\n    return this.outputfDCTQuant;\n  }\n\n  private writeDQT(out: OutputBuffer): void {\n    JpegEncoder.writeMarker(out, Jpeg.M_DQT);\n    // Length\n    out.writeUint16(132);\n    out.writeByte(0);\n    for (let i = 0; i < 64; i++) {\n      out.writeByte(this.tableY[i]);\n    }\n    out.writeByte(1);\n    for (let j = 0; j < 64; j++) {\n      out.writeByte(this.tableUV[j]);\n    }\n  }\n\n  private writeBits(out: OutputBuffer, bits: number[]): void {\n    const value = bits[0];\n    let posval = bits[1] - 1;\n    while (posval >= 0) {\n      if ((value & (1 << posval)) !== 0) {\n        this.byteNew |= 1 << this.bytePos;\n      }\n      posval--;\n      this.bytePos--;\n      if (this.bytePos < 0) {\n        if (this.byteNew === 0xff) {\n          out.writeByte(0xff);\n          out.writeByte(0);\n        } else {\n          out.writeByte(this.byteNew);\n        }\n        this.bytePos = 7;\n        this.byteNew = 0;\n      }\n    }\n  }\n\n  private resetBits(): void {\n    this.byteNew = 0;\n    this.bytePos = 7;\n  }\n\n  private processDU(\n    out: OutputBuffer,\n    CDU: Float32Array,\n    fdtbl: Float32Array,\n    DC: number,\n    HTAC: Array<Array<number> | undefined>,\n    HTDC?: Array<Array<number> | undefined>\n  ): number | undefined {\n    const EOB = HTAC[0x00];\n    const M16zeroes = HTAC[0xf0];\n    const I16 = 16;\n    const I63 = 63;\n    const I64 = 64;\n    const DU_DCT = this.fDCTQuant(CDU, fdtbl);\n    let dc = DC;\n    let pos = 0;\n\n    // ZigZag reorder\n    for (let j = 0; j < I64; ++j) {\n      this.DU[JpegEncoder.ZIGZAG[j]] = DU_DCT[j];\n    }\n\n    const Diff = this.DU[0]! - dc;\n    dc = this.DU[0]!;\n    // Encode DC\n    if (Diff === 0) {\n      // Diff might be 0\n      this.writeBits(out, HTDC![0]!);\n    } else {\n      pos = 32767 + Diff;\n      this.writeBits(out, HTDC![this.category[pos]!]!);\n      this.writeBits(out, this.bitcode[pos]!);\n    }\n\n    // Encode ACs\n    let end0pos = 63;\n    // eslint-disable-next-line no-empty\n    for (; end0pos > 0 && this.DU[end0pos] === 0; end0pos--) {}\n    //End0pos = first element in reverse order !=0\n    if (end0pos === 0) {\n      this.writeBits(out, EOB!);\n      return dc;\n    }\n\n    let i = 1;\n    while (i <= end0pos) {\n      const startpos = i;\n      // eslint-disable-next-line no-empty\n      for (; this.DU[i] === 0 && i <= end0pos; ++i) {}\n\n      let nrzeroes = i - startpos;\n      if (nrzeroes >= I16) {\n        const lng = nrzeroes >> 4;\n        for (let nrmarker = 1; nrmarker <= lng; ++nrmarker) {\n          this.writeBits(out, M16zeroes!);\n        }\n        nrzeroes &= 0xf;\n      }\n      pos = 32767 + this.DU[i]!;\n      this.writeBits(out, HTAC[(nrzeroes << 4) + this.category[pos]!]!);\n      this.writeBits(out, this.bitcode[pos]!);\n      i++;\n    }\n\n    if (end0pos !== I63) {\n      this.writeBits(out, EOB!);\n    }\n\n    return dc;\n  }\n\n  public encodeImage(image: MemoryImage): Uint8Array {\n    const fp = new OutputBuffer({\n      bigEndian: true,\n    });\n\n    // Add JPEG headers\n    JpegEncoder.writeMarker(fp, Jpeg.M_SOI);\n    JpegEncoder.writeAPP0(fp);\n    JpegEncoder.writeAPP1(fp, image.exifData);\n    this.writeDQT(fp);\n    JpegEncoder.writeSOF0(fp, image.width, image.height);\n    JpegEncoder.writeDHT(fp);\n    JpegEncoder.writeSOS(fp);\n\n    // Encode 8x8 macroblocks\n    let DCY: number | undefined = 0;\n    let DCU: number | undefined = 0;\n    let DCV: number | undefined = 0;\n\n    this.resetBits();\n\n    const width = image.width;\n    const height = image.height;\n\n    const imageData = image.getBytes();\n    const quadWidth = width * 4;\n    // Let tripleWidth: number = width * 3;\n    // let first: Boolean = true;\n\n    let y = 0;\n    while (y < height) {\n      let x = 0;\n      while (x < quadWidth) {\n        const start = quadWidth * y + x;\n        for (let pos = 0; pos < 64; pos++) {\n          // / 8\n          const row = pos >> 3;\n          // % 8\n          const col = (pos & 7) * 4;\n          let p = start + row * quadWidth + col;\n\n          if (y + row >= height) {\n            // Padding bottom\n            p -= quadWidth * (y + 1 + row - height);\n          }\n\n          if (x + col >= quadWidth) {\n            // Padding right\n            p -= x + col - quadWidth + 4;\n          }\n\n          const r = imageData[p++];\n          const g = imageData[p++];\n          const b = imageData[p++];\n\n          // Calculate YUV values\n          this.YDU[pos] =\n            ((this.tableRGBYUV[r] +\n              this.tableRGBYUV[g + 256] +\n              this.tableRGBYUV[b + 512]) >>\n              16) -\n            128.0;\n\n          this.UDU[pos] =\n            ((this.tableRGBYUV[r + 768] +\n              this.tableRGBYUV[g + 1024] +\n              this.tableRGBYUV[b + 1280]) >>\n              16) -\n            128.0;\n\n          this.VDU[pos] =\n            ((this.tableRGBYUV[r + 1280] +\n              this.tableRGBYUV[g + 1536] +\n              this.tableRGBYUV[b + 1792]) >>\n              16) -\n            128.0;\n        }\n\n        DCY = this.processDU(\n          fp,\n          this.YDU,\n          this.ftableY,\n          DCY!,\n          this.htYAC,\n          this.htYDC\n        );\n        DCU = this.processDU(\n          fp,\n          this.UDU,\n          this.ftableUV,\n          DCU!,\n          this.htUVAC,\n          this.htUVDC\n        );\n        DCV = this.processDU(\n          fp,\n          this.VDU,\n          this.ftableUV,\n          DCV!,\n          this.htUVAC,\n          this.htUVDC\n        );\n\n        x += 32;\n      }\n\n      y += 8;\n    }\n\n    // Do the bit alignment of the EOI marker\n    if (this.bytePos >= 0) {\n      const fillBits = [(1 << (this.bytePos + 1)) - 1, this.bytePos + 1];\n      this.writeBits(fp, fillBits);\n    }\n\n    JpegEncoder.writeMarker(fp, Jpeg.M_EOI);\n\n    return fp.getBytes();\n  }\n\n  public encodeAnimation(_: FrameAnimation): Uint8Array | undefined {\n    return undefined;\n  }\n}\n", "/** @format */\n\nexport interface Quantizer {\n  /**\n   * Find the index of the closest color to [c] in the [colorMap].\n   */\n  getQuantizedColor(c: number): number;\n}\n", "/** @format */\n\nimport { FrameAnimation } from './common/frame-animation';\nimport { MemoryImage } from './common/memory-image';\nimport { CompressionLevel, TypedArray } from './common/typings';\nimport { BmpDecoder } from './formats/bmp-decoder';\nimport { BmpEncoder } from './formats/bmp-encoder';\nimport { Decoder } from './formats/decoder';\nimport { GifDecoder } from './formats/gif-decoder';\nimport { GifEncoder } from './formats/gif-encoder';\nimport { IcoDecoder } from './formats/ico-decoder';\nimport { IcoEncoder } from './formats/ico-encoder';\nimport { JpegDecoder } from './formats/jpeg-decoder';\nimport { JpegEncoder } from './formats/jpeg-encoder';\nimport { PngDecoder } from './formats/png-decoder';\nimport { PngEncoder } from './formats/png-encoder';\n\n// Export types from 'common' directory\nexport { BitOperators } from './common/bit-operators';\nexport { BlendMode } from './common/blend-mode';\nexport { Clamp } from './common/clamp';\nexport { ColorChannel } from './common/color-channel';\nexport { ColorModel } from './common/color-model';\nexport { ColorUtils } from './common/color-utils';\nexport { Color } from './common/color';\nexport { Crc32 } from './common/crc32';\nexport { DisposeMode } from './common/dispose-mode';\nexport { ExifData } from './common/exif_data';\nexport { FrameAnimation } from './common/frame-animation';\nexport { FrameType } from './common/frame-type';\nexport { ICCProfileData } from './common/icc_profile_data';\nexport { ICCPCompressionMode } from './common/iccp-compression-mode';\nexport { ListUtils } from './common/list-utils';\nexport { MemoryImage } from './common/memory-image';\nexport { RgbChannelSet } from './common/rgb-channel-set';\nexport { TextCodec } from './common/text-codec';\nexport { CompressionLevel, TypedArray } from './common/typings';\n\n// Export types from 'draw' directory\nexport { drawPixel } from './draw/draw-pixel';\n\n// Export types from 'formats' directory\nexport { BmpDecoder } from './formats/bmp-decoder';\nexport { BmpEncoder } from './formats/bmp-encoder';\nexport { DecodeInfo } from './formats/decode-info';\nexport { Decoder } from './formats/decoder';\nexport { Encoder } from './formats/encoder';\nexport { GifDecoder } from './formats/gif-decoder';\nexport { GifEncoder } from './formats/gif-encoder';\nexport { IcoDecoder } from './formats/ico-decoder';\nexport { IcoEncoder } from './formats/ico-encoder';\nexport { JpegDecoder } from './formats/jpeg-decoder';\nexport { JpegEncoder } from './formats/jpeg-encoder';\nexport { PngDecoder } from './formats/png-decoder';\nexport { PngEncoder } from './formats/png-encoder';\n\n/**\n * Find a [Decoder] that is able to decode the given image [data].\n * Use this is you don't know the type of image it is. Since this will\n * validate the image against all known decoders, it is potentially very slow.\n */\nexport function findDecoderForData(data: TypedArray): Decoder | undefined {\n  // The letious decoders will be creating a Uint8List for their InputStream\n  // if the data isn't already that type, so do it once here to avoid having to\n  // do it multiple times.\n  const bytes = data instanceof Uint8Array ? data : new Uint8Array(data);\n\n  const jpg = new JpegDecoder();\n  if (jpg.isValidFile(bytes)) {\n    return jpg;\n  }\n\n  const png = new PngDecoder();\n  if (png.isValidFile(bytes)) {\n    return png;\n  }\n\n  const gif = new GifDecoder();\n  if (gif.isValidFile(bytes)) {\n    return gif;\n  }\n\n  const bmp = new BmpDecoder();\n  if (bmp.isValidFile(bytes)) {\n    return bmp;\n  }\n\n  const ico = new IcoDecoder();\n  if (ico.isValidFile(bytes)) {\n    return ico;\n  }\n\n  return undefined;\n}\n\n/**\n * Decode the given image file bytes by first identifying the format of the\n * file and using that decoder to decode the file into a single frame [Image].\n */\nexport function decodeImage(data: TypedArray): MemoryImage | undefined {\n  const decoder = findDecoderForData(data);\n  if (decoder === undefined) {\n    return undefined;\n  }\n  const dataUint8 = new Uint8Array(data);\n  return decoder.decodeImage(dataUint8);\n}\n\n/**\n * Decode the given image file bytes by first identifying the format of the\n * file and using that decoder to decode the file into an [Animation]\n * containing one or more [Image] frames.\n */\nexport function decodeAnimation(data: TypedArray): FrameAnimation | undefined {\n  const decoder = findDecoderForData(data);\n  if (decoder === undefined) {\n    return undefined;\n  }\n  const dataUint8 = new Uint8Array(data);\n  return decoder.decodeAnimation(dataUint8);\n}\n\n/**\n * Return the [Decoder] that can decode image with the given [name],\n * by looking at the file extension. See also [findDecoderForData] to\n * determine the decoder to use given the bytes of the file.\n */\nexport function getDecoderForNamedImage(name: string): Decoder | undefined {\n  const n = name.toLowerCase();\n  if (n.endsWith('.jpg') || n.endsWith('.jpeg')) {\n    return new JpegDecoder();\n  }\n  if (n.endsWith('.png')) {\n    return new PngDecoder();\n  }\n  if (n.endsWith('.gif')) {\n    return new GifDecoder();\n  }\n  if (n.endsWith('.bmp')) {\n    return new BmpDecoder();\n  }\n  if (n.endsWith('.ico')) {\n    return new IcoDecoder();\n  }\n  return undefined;\n}\n\n/**\n * Identify the format of the image using the file extension of the given\n * [name], and decode the given file [bytes] to an [FrameAnimation] with one or more\n * [MemoryImage] frames. See also [decodeAnimation].\n */\nexport function decodeNamedAnimation(\n  data: TypedArray,\n  name: string\n): FrameAnimation | undefined {\n  const decoder = getDecoderForNamedImage(name);\n  if (decoder === undefined) {\n    return undefined;\n  }\n  const dataUint8 = new Uint8Array(data);\n  return decoder.decodeAnimation(dataUint8);\n}\n\n/**\n * Identify the format of the image using the file extension of the given\n * [name], and decode the given file [bytes] to a single frame [Image]. See\n * also [decodeImage].\n */\nexport function decodeNamedImage(\n  data: TypedArray,\n  name: string\n): MemoryImage | undefined {\n  const decoder = getDecoderForNamedImage(name);\n  if (decoder === undefined) {\n    return undefined;\n  }\n  const dataUint8 = new Uint8Array(data);\n  return decoder.decodeImage(dataUint8);\n}\n\n/**\n * Identify the format of the image and encode it with the appropriate\n * [Encoder].\n */\nexport function encodeNamedImage(\n  image: MemoryImage,\n  name: string\n): Uint8Array | undefined {\n  const n = name.toLowerCase();\n  if (n.endsWith('.jpg') || n.endsWith('.jpeg')) {\n    return encodeJpg(image);\n  }\n  if (n.endsWith('.png')) {\n    return encodePng(image);\n  }\n  if (n.endsWith('.gif')) {\n    return encodeGif(image);\n  }\n  if (n.endsWith('.ico')) {\n    return encodeIco(image);\n  }\n  if (n.endsWith('.bmp')) {\n    return encodeBmp(image);\n  }\n  return undefined;\n}\n\n/**\n * Decode a JPG formatted image.\n */\nexport function decodeJpg(data: TypedArray): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(data);\n  return new JpegDecoder().decodeImage(dataUint8);\n}\n\n/**\n * Renamed to [decodeJpg], left for backward compatibility.\n */\nexport function readJpg(data: TypedArray): MemoryImage | undefined {\n  return decodeJpg(data);\n}\n\n/**\n * Encode an image to the JPEG format.\n */\nexport function encodeJpg(image: MemoryImage, quality = 100): Uint8Array {\n  return new JpegEncoder(quality).encodeImage(image);\n}\n\n/**\n * Renamed to [encodeJpg], left for backward compatibility.\n */\nexport function writeJpg(image: MemoryImage, quality = 100): Uint8Array {\n  return encodeJpg(image, quality);\n}\n\n/**\n * Decode a PNG formatted image.\n */\nexport function decodePng(data: TypedArray): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(data);\n  return new PngDecoder().decodeImage(dataUint8);\n}\n\n/**\n * Decode a PNG formatted animation.\n */\nexport function decodePngAnimation(\n  data: TypedArray\n): FrameAnimation | undefined {\n  const dataUint8 = new Uint8Array(data);\n  return new PngDecoder().decodeAnimation(dataUint8);\n}\n\n/**\n * Renamed to [decodePng], left for backward compatibility.\n */\nexport function readPng(data: TypedArray): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(data);\n  return decodePng(dataUint8);\n}\n\n/**\n * Encode an image to the PNG format.\n */\nexport function encodePng(\n  image: MemoryImage,\n  level: CompressionLevel = 6\n): Uint8Array {\n  return new PngEncoder({\n    level: level,\n  }).encodeImage(image);\n}\n\n/**\n * Encode an animation to the PNG format.\n */\nexport function encodePngAnimation(\n  animation: FrameAnimation,\n  level: CompressionLevel = 6\n): Uint8Array | undefined {\n  return new PngEncoder({\n    level: level,\n  }).encodeAnimation(animation);\n}\n\n/**\n * Renamed to [encodePng], left for backward compatibility.\n */\nexport function writePng(\n  image: MemoryImage,\n  level: CompressionLevel = 6\n): Uint8Array {\n  return encodePng(image, level);\n}\n\n/**\n * Decode a GIF formatted image (first frame for animations).\n */\nexport function decodeGif(data: TypedArray): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(data);\n  return new GifDecoder().decodeImage(dataUint8);\n}\n\n/**\n * Decode an animated GIF file. If the GIF isn't animated, the animation\n * will contain a single frame with the GIF's image.\n */\nexport function decodeGifAnimation(\n  data: TypedArray\n): FrameAnimation | undefined {\n  const dataUint8 = new Uint8Array(data);\n  return new GifDecoder().decodeAnimation(dataUint8);\n}\n\n/**\n * Encode an image to the GIF format.\n *\n * The [samplingFactor] specifies the sampling factor for\n * NeuQuant image quantization. It is responsible for reducing\n * the amount of unique colors in your images to 256.\n * According to https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/,\n * a sampling factor of 10 gives you a reasonable trade-off between\n * image quality and quantization speed.\n * If you know that you have less than 256 colors in your frames\n * anyway, you should supply a very large [samplingFactor] for maximum performance.\n */\nexport function encodeGif(image: MemoryImage, samplingFactor = 10): Uint8Array {\n  return new GifEncoder({\n    samplingFactor: samplingFactor,\n  }).encodeImage(image);\n}\n\n/**\n * Encode an animation to the GIF format.\n *\n * The [samplingFactor] specifies the sampling factor for\n * NeuQuant image quantization. It is responsible for reducing\n * the amount of unique colors in your images to 256.\n * According to https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/,\n * a sampling factor of 10 gives you a reasonable trade-off between\n * image quality and quantization speed.\n * If you know that you have less than 256 colors in your frames\n * anyway, you should supply a very large [samplingFactor] for maximum performance.\n *\n * Here, `30` is used a default value for the [samplingFactor] as\n * encoding animations is usually a process that takes longer than\n * encoding a single image (see [encodeGif]).\n */\nexport function encodeGifAnimation(\n  animation: FrameAnimation,\n  samplingFactor = 30\n): Uint8Array | undefined {\n  return new GifEncoder({\n    samplingFactor: samplingFactor,\n  }).encodeAnimation(animation);\n}\n\n/**\n * Decode a BMP formatted image.\n */\nexport function decodeBmp(data: TypedArray): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(data);\n  return new BmpDecoder().decodeImage(dataUint8);\n}\n\n/**\n * Encode an image to the BMP format.\n */\nexport function encodeBmp(image: MemoryImage): Uint8Array {\n  return new BmpEncoder().encodeImage(image);\n}\n\n/**\n * Encode an image to the ICO format.\n */\nexport function encodeIco(image: MemoryImage): Uint8Array {\n  return new IcoEncoder().encodeImage(image);\n}\n\n/**\n * Encode a list of images to the ICO format.\n */\nexport function encodeIcoImages(images: MemoryImage[]): Uint8Array {\n  return new IcoEncoder().encodeImages(images);\n}\n\n/**\n * Decode an ICO image.\n */\nexport function decodeIco(data: TypedArray): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(data);\n  return new IcoDecoder().decodeImage(dataUint8);\n}\n", "/** @format */\n\nimport { MemoryImage } from '../common/memory-image';\nimport { RgbChannelSet } from '../common/rgb-channel-set';\nimport { Interpolation } from '../formats/util/interpolation';\n\nexport abstract class CopyRotateTransform {\n  /**\n   * Returns a copy of the [src] image, rotated by [angle] degrees.\n   */\n  public static copyRotate(\n    src: MemoryImage,\n    angle: number,\n    interpolation: Interpolation = Interpolation.nearest\n  ): MemoryImage {\n    const nangle: number = angle % 360.0;\n\n    // Optimized version for orthogonal angles.\n    if (nangle % 90 === 0) {\n      const wm1 = src.width - 1;\n      const hm1 = src.height - 1;\n\n      const iangle = Math.floor(nangle / 90.0);\n      switch (iangle) {\n        case 1: {\n          // 90 deg.\n          const dst = new MemoryImage({\n            width: src.height,\n            height: src.width,\n            rgbChannelSet: src.rgbChannelSet,\n            exifData: src.exifData,\n            iccProfile: src.iccProfile,\n          });\n          for (let y = 0; y < dst.height; ++y) {\n            for (let x = 0; x < dst.width; ++x) {\n              dst.setPixel(x, y, src.getPixel(y, hm1 - x));\n            }\n          }\n          return dst;\n        }\n        case 2: {\n          // 180 deg.\n          const dst = new MemoryImage({\n            width: src.width,\n            height: src.height,\n            rgbChannelSet: src.rgbChannelSet,\n            exifData: src.exifData,\n            iccProfile: src.iccProfile,\n          });\n          for (let y = 0; y < dst.height; ++y) {\n            for (let x = 0; x < dst.width; ++x) {\n              dst.setPixel(x, y, src.getPixel(wm1 - x, hm1 - y));\n            }\n          }\n          return dst;\n        }\n        case 3: {\n          // 270 deg.\n          const dst = new MemoryImage({\n            width: src.height,\n            height: src.width,\n            rgbChannelSet: src.rgbChannelSet,\n            exifData: src.exifData,\n            iccProfile: src.iccProfile,\n          });\n          for (let y = 0; y < dst.height; ++y) {\n            for (let x = 0; x < dst.width; ++x) {\n              dst.setPixel(x, y, src.getPixel(wm1 - y, x));\n            }\n          }\n          return dst;\n        }\n        default: {\n          // 0 deg.\n          return MemoryImage.from(src);\n        }\n      }\n    }\n\n    // Generic angle.\n    const rad = (nangle * Math.PI) / 180.0;\n    const ca = Math.cos(rad);\n    const sa = Math.sin(rad);\n    const ux = Math.abs(src.width * ca);\n    const uy = Math.abs(src.width * sa);\n    const vx = Math.abs(src.height * sa);\n    const vy = Math.abs(src.height * ca);\n    const w2 = 0.5 * src.width;\n    const h2 = 0.5 * src.height;\n    const dw2 = 0.5 * (ux + vx);\n    const dh2 = 0.5 * (uy + vy);\n\n    const dst = new MemoryImage({\n      width: Math.trunc(ux + vx),\n      height: Math.trunc(uy + vy),\n      rgbChannelSet: RgbChannelSet.rgba,\n      exifData: src.exifData,\n      iccProfile: src.iccProfile,\n    });\n\n    for (let y = 0; y < dst.height; ++y) {\n      for (let x = 0; x < dst.width; ++x) {\n        const c = src.getPixelInterpolate(\n          w2 + (x - dw2) * ca + (y - dh2) * sa,\n          h2 - (x - dw2) * sa + (y - dh2) * ca,\n          interpolation\n        );\n        dst.setPixel(x, y, c);\n      }\n    }\n\n    return dst;\n  }\n}\n", "/** @format */\n\nexport enum FlipDirection {\n  /**\n   * Flip the image horizontally.\n   */\n  horizontal,\n\n  /**\n   * Flip the image vertically.\n   */\n  vertical,\n\n  /**\n   * Flip the image both horizontally and vertically.\n   */\n  both,\n}\n", "/** @format */\n\nimport { MemoryImage } from '../common/memory-image';\nimport { FlipDirection } from './flip-direction';\n\nexport abstract class FlipTransform {\n  /**\n   * Flips the [src] image using the given [mode], which can be one of:\n   * [Flip.horizontal], [Flip.vertical], or [Flip.both].\n   */\n  public static flip(src: MemoryImage, direction: FlipDirection): MemoryImage {\n    switch (direction) {\n      case FlipDirection.horizontal:\n        FlipTransform.flipHorizontal(src);\n        break;\n      case FlipDirection.vertical:\n        FlipTransform.flipVertical(src);\n        break;\n      case FlipDirection.both:\n        FlipTransform.flipVertical(src);\n        FlipTransform.flipHorizontal(src);\n        break;\n    }\n    return src;\n  }\n\n  /**\n   * Flip the [src] image vertically.\n   */\n  public static flipVertical(src: MemoryImage): MemoryImage {\n    const w = src.width;\n    const h = src.height;\n    const h2 = Math.floor(h / 2);\n    for (let y = 0; y < h2; ++y) {\n      const y1 = y * w;\n      const y2 = (h - 1 - y) * w;\n      for (let x = 0; x < w; ++x) {\n        const t = src.getPixelByIndex(y2 + x);\n        src.setPixelByIndex(y2 + x, src.getPixelByIndex(y1 + x));\n        src.setPixelByIndex(y1 + x, t);\n      }\n    }\n    return src;\n  }\n\n  /**\n   * Flip the src image horizontally.\n   */\n  public static flipHorizontal(src: MemoryImage): MemoryImage {\n    const w = src.width;\n    const h = src.height;\n    const w2 = Math.floor(src.width / 2);\n    for (let y = 0; y < h; ++y) {\n      const y1 = y * w;\n      for (let x = 0; x < w2; ++x) {\n        const x2 = w - 1 - x;\n        const t = src.getPixelByIndex(y1 + x2);\n        src.setPixelByIndex(y1 + x2, src.getPixelByIndex(y1 + x));\n        src.setPixelByIndex(y1 + x, t);\n      }\n    }\n    return src;\n  }\n}\n", "/** @format */\n\nimport { ExifData } from '../common/exif_data';\nimport { MemoryImage } from '../common/memory-image';\nimport { CopyRotateTransform } from './copy-rotate';\nimport { FlipTransform } from './flip';\nimport { FlipDirection } from './flip-direction';\n\nexport abstract class BakeOrientationTransform {\n  /**\n   * If [image] has an orientation value in its exif data, this will rotate the\n   * image so that it physically matches its orientation. This can be used to\n   * bake the orientation of the image for image formats that don't support exif\n   * data.\n   */\n  public static bakeOrientation(image: MemoryImage): MemoryImage {\n    const bakedImage = MemoryImage.from(image);\n    if (!image.exifData.hasOrientation || image.exifData.orientation === 1) {\n      return bakedImage;\n    }\n\n    // Remove exif data for orientation\n    bakedImage.exifData.data.delete(ExifData.ORIENTATION);\n\n    switch (image.exifData.orientation) {\n      case 2:\n        return FlipTransform.flipHorizontal(bakedImage);\n      case 3:\n        return FlipTransform.flip(bakedImage, FlipDirection.both);\n      case 4: {\n        const rotated = CopyRotateTransform.copyRotate(bakedImage, 180);\n        return FlipTransform.flipHorizontal(rotated);\n      }\n      case 5: {\n        const rotated = CopyRotateTransform.copyRotate(bakedImage, 90);\n        return FlipTransform.flipHorizontal(rotated);\n      }\n      case 6:\n        return CopyRotateTransform.copyRotate(bakedImage, 90);\n      case 7: {\n        const rotated = CopyRotateTransform.copyRotate(bakedImage, -90);\n        return FlipTransform.flipHorizontal(rotated);\n      }\n      case 8:\n        return CopyRotateTransform.copyRotate(bakedImage, -90);\n    }\n    return bakedImage;\n  }\n}\n", "/** @format */\n\nimport { ColorUtils } from '../common/color-utils';\nimport { MemoryImage } from '../common/memory-image';\nimport { ImageError } from '../error/image-error';\nimport { Interpolation } from '../formats/util/interpolation';\nimport { BakeOrientationTransform } from './bake-orientation';\n\nexport interface CopyResizeOptionsUsingWidth {\n  image: MemoryImage;\n  width: number;\n  height?: number;\n  interpolation?: Interpolation;\n}\n\nexport interface CopyResizeOptionsUsingHeight {\n  image: MemoryImage;\n  height: number;\n  width?: number;\n  interpolation?: Interpolation;\n}\n\nexport abstract class CopyResizeTransform {\n  /**\n   * Returns a resized copy of the [src] image.\n   * If [height] isn't specified, then it will be determined by the aspect\n   * ratio of [src] and [width].\n   * If [width] isn't specified, then it will be determined by the aspect ratio\n   * of [src] and [height].\n   */\n  public static copyResize(\n    options: CopyResizeOptionsUsingWidth | CopyResizeOptionsUsingHeight\n  ): MemoryImage {\n    options.interpolation ??= Interpolation.nearest;\n    options.width ??= 0;\n    options.height ??= 0;\n\n    if (options.width === 0 && options.height === 0) {\n      throw new ImageError('CopyResize: wrong size');\n    }\n\n    const src = BakeOrientationTransform.bakeOrientation(options.image);\n\n    if (options.height === 0) {\n      options.height = Math.trunc(options.width * (src.height / src.width));\n    }\n\n    if (options.width === 0) {\n      options.width = Math.trunc(options.height * (src.width / src.height));\n    }\n\n    if (options.width === src.width && options.height === src.height) {\n      return src.clone();\n    }\n\n    const dst = new MemoryImage({\n      width: options.width,\n      height: options.height,\n      rgbChannelSet: src.rgbChannelSet,\n      exifData: src.exifData,\n      iccProfile: src.iccProfile,\n    });\n\n    const dy = src.height / options.height;\n    const dx = src.width / options.width;\n\n    if (options.interpolation === Interpolation.average) {\n      const sData = src.getBytes();\n      const sw4 = src.width * 4;\n\n      for (let y = 0; y < options.height; ++y) {\n        const y1 = Math.trunc(y * dy);\n        let y2 = Math.trunc((y + 1) * dy);\n        if (y2 === y1) {\n          y2++;\n        }\n\n        for (let x = 0; x < options.width; ++x) {\n          const x1 = Math.trunc(x * dx);\n          let x2 = Math.trunc((x + 1) * dx);\n          if (x2 === x1) {\n            x2++;\n          }\n\n          let r = 0;\n          let g = 0;\n          let b = 0;\n          let a = 0;\n          let np = 0;\n          for (let sy = y1; sy < y2; ++sy) {\n            let si = sy * sw4 + x1 * 4;\n            for (let sx = x1; sx < x2; ++sx, ++np) {\n              r += sData[si++];\n              g += sData[si++];\n              b += sData[si++];\n              a += sData[si++];\n            }\n          }\n          dst.setPixel(\n            x,\n            y,\n            ColorUtils.getColor(\n              Math.floor(r / np),\n              Math.floor(g / np),\n              Math.floor(b / np),\n              Math.floor(a / np)\n            )\n          );\n        }\n      }\n    } else if (options.interpolation === Interpolation.nearest) {\n      const scaleX = new Int32Array(options.width);\n      for (let x = 0; x < options.width; ++x) {\n        scaleX[x] = Math.trunc(x * dx);\n      }\n      for (let y = 0; y < options.height; ++y) {\n        const y2 = Math.trunc(y * dy);\n        for (let x = 0; x < options.width; ++x) {\n          dst.setPixel(x, y, src.getPixel(scaleX[x], y2));\n        }\n      }\n    } else {\n      // Copy the pixels from this image to the new image.\n      for (let y = 0; y < options.height; ++y) {\n        const y2 = y * dy;\n        for (let x = 0; x < options.width; ++x) {\n          const x2 = x * dx;\n          dst.setPixel(\n            x,\n            y,\n            src.getPixelInterpolate(x2, y2, options.interpolation)\n          );\n        }\n      }\n    }\n\n    return dst;\n  }\n}\n", "\r\n\r\nvar UZIP = {};\r\nif(typeof module == \"object\") module.exports = UZIP;\r\n\r\n\r\nUZIP[\"parse\"] = function(buf, onlyNames)\t// ArrayBuffer\r\n{\r\n\tvar rUs = UZIP.bin.readUshort, rUi = UZIP.bin.readUint, o = 0, out = {};\r\n\tvar data = new Uint8Array(buf);\r\n\tvar eocd = data.length-4;\r\n\t\r\n\twhile(rUi(data, eocd)!=0x06054b50) eocd--;\r\n\t\r\n\tvar o = eocd;\r\n\to+=4;\t// sign  = 0x06054b50\r\n\to+=4;  // disks = 0;\r\n\tvar cnu = rUs(data, o);  o+=2;\r\n\tvar cnt = rUs(data, o);  o+=2;\r\n\t\t\t\r\n\tvar csize = rUi(data, o);  o+=4;\r\n\tvar coffs = rUi(data, o);  o+=4;\r\n\t\r\n\to = coffs;\r\n\tfor(var i=0; i<cnu; i++)\r\n\t{\r\n\t\tvar sign = rUi(data, o);  o+=4;\r\n\t\to += 4;  // versions;\r\n\t\to += 4;  // flag + compr\r\n\t\to += 4;  // time\r\n\t\t\r\n\t\tvar crc32 = rUi(data, o);  o+=4;\r\n\t\tvar csize = rUi(data, o);  o+=4;\r\n\t\tvar usize = rUi(data, o);  o+=4;\r\n\t\t\r\n\t\tvar nl = rUs(data, o), el = rUs(data, o+2), cl = rUs(data, o+4);  o += 6;  // name, extra, comment\r\n\t\to += 8;  // disk, attribs\r\n\t\t\r\n\t\tvar roff = rUi(data, o);  o+=4;\r\n\t\to += nl + el + cl;\r\n\t\t\r\n\t\tUZIP._readLocal(data, roff, out, csize, usize, onlyNames);\r\n\t}\r\n\t//console.log(out);\r\n\treturn out;\r\n}\r\n\r\nUZIP._readLocal = function(data, o, out, csize, usize, onlyNames)\r\n{\r\n\tvar rUs = UZIP.bin.readUshort, rUi = UZIP.bin.readUint;\r\n\tvar sign  = rUi(data, o);  o+=4;\r\n\tvar ver   = rUs(data, o);  o+=2;\r\n\tvar gpflg = rUs(data, o);  o+=2;\r\n\t//if((gpflg&8)!=0) throw \"unknown sizes\";\r\n\tvar cmpr  = rUs(data, o);  o+=2;\r\n\t\r\n\tvar time  = rUi(data, o);  o+=4;\r\n\t\r\n\tvar crc32 = rUi(data, o);  o+=4;\r\n\t//var csize = rUi(data, o);  o+=4;\r\n\t//var usize = rUi(data, o);  o+=4;\r\n\to+=8;\r\n\t\t\r\n\tvar nlen  = rUs(data, o);  o+=2;\r\n\tvar elen  = rUs(data, o);  o+=2;\r\n\t\t\r\n\tvar name =  UZIP.bin.readUTF8(data, o, nlen);  o+=nlen;  //console.log(name);\r\n\to += elen;\r\n\t\t\t\r\n\t//console.log(sign.toString(16), ver, gpflg, cmpr, crc32.toString(16), \"csize, usize\", csize, usize, nlen, elen, name, o);\r\n\tif(onlyNames) {  out[name]={size:usize, csize:csize};  return;  }   \r\n\tvar file = new Uint8Array(data.buffer, o);\r\n\tif(false) {}\r\n\telse if(cmpr==0) out[name] = new Uint8Array(file.buffer.slice(o, o+csize));\r\n\telse if(cmpr==8) {\r\n\t\tvar buf = new Uint8Array(usize);  UZIP.inflateRaw(file, buf);\r\n\t\t/*var nbuf = pako[\"inflateRaw\"](file);\r\n\t\tif(usize>8514000) {\r\n\t\t\t//console.log(PUtils.readASCII(buf , 8514500, 500));\r\n\t\t\t//console.log(PUtils.readASCII(nbuf, 8514500, 500));\r\n\t\t}\r\n\t\tfor(var i=0; i<buf.length; i++) if(buf[i]!=nbuf[i]) {  console.log(buf.length, nbuf.length, usize, i);  throw \"e\";  }\r\n\t\t*/\r\n\t\tout[name] = buf;\r\n\t}\r\n\telse throw \"unknown compression method: \"+cmpr;\r\n}\r\n\r\nUZIP.inflateRaw = function(file, buf) {  return UZIP.F.inflate(file, buf);  }\r\nUZIP.inflate    = function(file, buf) { \r\n\tvar CMF = file[0], FLG = file[1];\r\n\tvar CM = (CMF&15), CINFO = (CMF>>>4);\r\n\t//console.log(CM, CINFO,CMF,FLG);\r\n\treturn UZIP.inflateRaw(new Uint8Array(file.buffer, file.byteOffset+2, file.length-6), buf);  \r\n}\r\nUZIP.deflate    = function(data, opts/*, buf, off*/) {\r\n\tif(opts==null) opts={level:6};\r\n\tvar off=0, buf=new Uint8Array(50+Math.floor(data.length*1.1));\r\n\tbuf[off]=120;  buf[off+1]=156;  off+=2;\r\n\toff = UZIP.F.deflateRaw(data, buf, off, opts.level);\r\n\tvar crc = UZIP.adler(data, 0, data.length);\r\n\tbuf[off+0]=((crc>>>24)&255); \r\n\tbuf[off+1]=((crc>>>16)&255); \r\n\tbuf[off+2]=((crc>>> 8)&255); \r\n\tbuf[off+3]=((crc>>> 0)&255); \t\r\n\treturn new Uint8Array(buf.buffer, 0, off+4);\r\n}\r\nUZIP.deflateRaw = function(data, opts) {\r\n\tif(opts==null) opts={level:6};\r\n\tvar buf=new Uint8Array(50+Math.floor(data.length*1.1));\r\n\tvar off = UZIP.F.deflateRaw(data, buf, off, opts.level);\r\n\treturn new Uint8Array(buf.buffer, 0, off);\r\n}\r\n\r\n\r\nUZIP.encode = function(obj, noCmpr) {\r\n\tif(noCmpr==null) noCmpr=false;\r\n\tvar tot = 0, wUi = UZIP.bin.writeUint, wUs = UZIP.bin.writeUshort;\r\n\tvar zpd = {};\r\n\tfor(var p in obj) {  var cpr = !UZIP._noNeed(p) && !noCmpr, buf = obj[p], crc = UZIP.crc.crc(buf,0,buf.length); \r\n\t\tzpd[p] = {  cpr:cpr, usize:buf.length, crc:crc, file: (cpr ? UZIP.deflateRaw(buf) : buf)  };  }\r\n\t\r\n\tfor(var p in zpd) tot += zpd[p].file.length + 30 + 46 + 2*UZIP.bin.sizeUTF8(p);\r\n\ttot +=  22;\r\n\t\r\n\tvar data = new Uint8Array(tot), o = 0;\r\n\tvar fof = []\r\n\t\r\n\tfor(var p in zpd) {\r\n\t\tvar file = zpd[p];  fof.push(o);\r\n\t\to = UZIP._writeHeader(data, o, p, file, 0);\r\n\t}\r\n\tvar i=0, ioff = o;\r\n\tfor(var p in zpd) {\r\n\t\tvar file = zpd[p];  fof.push(o);\r\n\t\to = UZIP._writeHeader(data, o, p, file, 1, fof[i++]);\t\t\r\n\t}\r\n\tvar csize = o-ioff;\r\n\t\r\n\twUi(data, o, 0x06054b50);  o+=4;\r\n\to += 4;  // disks\r\n\twUs(data, o, i);  o += 2;\r\n\twUs(data, o, i);  o += 2;\t// number of c d records\r\n\twUi(data, o, csize);  o += 4;\r\n\twUi(data, o, ioff );  o += 4;\r\n\to += 2;\r\n\treturn data.buffer;\r\n}\r\n// no need to compress .PNG, .ZIP, .JPEG ....\r\nUZIP._noNeed = function(fn) {  var ext = fn.split(\".\").pop().toLowerCase();  return \"png,jpg,jpeg,zip\".indexOf(ext)!=-1;  }\r\n\r\nUZIP._writeHeader = function(data, o, p, obj, t, roff)\r\n{\r\n\tvar wUi = UZIP.bin.writeUint, wUs = UZIP.bin.writeUshort;\r\n\tvar file = obj.file;\r\n\t\r\n\twUi(data, o, t==0 ? 0x04034b50 : 0x02014b50);  o+=4; // sign\r\n\tif(t==1) o+=2;  // ver made by\r\n\twUs(data, o, 20);  o+=2;\t// ver\r\n\twUs(data, o,  0);  o+=2;    // gflip\r\n\twUs(data, o,  obj.cpr?8:0);  o+=2;\t// cmpr\r\n\t\t\r\n\twUi(data, o,  0);  o+=4;\t// time\t\t\r\n\twUi(data, o, obj.crc);  o+=4;\t// crc32\r\n\twUi(data, o, file.length);  o+=4;\t// csize\r\n\twUi(data, o, obj.usize);  o+=4;\t// usize\r\n\t\t\r\n\twUs(data, o, UZIP.bin.sizeUTF8(p));  o+=2;\t// nlen\r\n\twUs(data, o, 0);  o+=2;\t// elen\r\n\t\r\n\tif(t==1) {\r\n\t\to += 2;  // comment length\r\n\t\to += 2;  // disk number\r\n\t\to += 6;  // attributes\r\n\t\twUi(data, o, roff);  o+=4;\t// usize\r\n\t}\r\n\tvar nlen = UZIP.bin.writeUTF8(data, o, p);  o+= nlen;\t\r\n\tif(t==0) {  data.set(file, o);  o += file.length;  }\r\n\treturn o;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nUZIP.crc = {\r\n\ttable : ( function() {\r\n\t   var tab = new Uint32Array(256);\r\n\t   for (var n=0; n<256; n++) {\r\n\t\t\tvar c = n;\r\n\t\t\tfor (var k=0; k<8; k++) {\r\n\t\t\t\tif (c & 1)  c = 0xedb88320 ^ (c >>> 1);\r\n\t\t\t\telse        c = c >>> 1;\r\n\t\t\t}\r\n\t\t\ttab[n] = c;  }    \r\n\t\treturn tab;  })(),\r\n\tupdate : function(c, buf, off, len) {\r\n\t\tfor (var i=0; i<len; i++)  c = UZIP.crc.table[(c ^ buf[off+i]) & 0xff] ^ (c >>> 8);\r\n\t\treturn c;\r\n\t},\r\n\tcrc : function(b,o,l)  {  return UZIP.crc.update(0xffffffff,b,o,l) ^ 0xffffffff;  }\r\n}\r\nUZIP.adler = function(data,o,len) {\r\n\tvar a = 1, b = 0;\r\n\tvar off = o, end=o+len;\r\n\twhile(off<end) {\r\n\t\tvar eend = Math.min(off+5552, end);\r\n\t\twhile(off<eend) {\r\n\t\t\ta += data[off++];\r\n\t\t\tb += a;\r\n\t\t}\r\n\t\ta=a%65521;\r\n\t\tb=b%65521;\r\n\t}\r\n    return (b << 16) | a;\r\n}\r\n\r\nUZIP.bin = {\r\n\treadUshort : function(buff,p)  {  return (buff[p]) | (buff[p+1]<<8);  },\r\n\twriteUshort: function(buff,p,n){  buff[p] = (n)&255;  buff[p+1] = (n>>8)&255;  },\r\n\treadUint   : function(buff,p)  {  return (buff[p+3]*(256*256*256)) + ((buff[p+2]<<16) | (buff[p+1]<< 8) | buff[p]);  },\r\n\twriteUint  : function(buff,p,n){  buff[p]=n&255;  buff[p+1]=(n>>8)&255;  buff[p+2]=(n>>16)&255;  buff[p+3]=(n>>24)&255;  },\r\n\treadASCII  : function(buff,p,l){  var s = \"\";  for(var i=0; i<l; i++) s += String.fromCharCode(buff[p+i]);  return s;    },\r\n\twriteASCII : function(data,p,s){  for(var i=0; i<s.length; i++) data[p+i] = s.charCodeAt(i);  },\r\n\tpad : function(n) { return n.length < 2 ? \"0\" + n : n; },\r\n\treadUTF8 : function(buff, p, l) {\r\n\t\tvar s = \"\", ns;\r\n\t\tfor(var i=0; i<l; i++) s += \"%\" + UZIP.bin.pad(buff[p+i].toString(16));\r\n\t\ttry {  ns = decodeURIComponent(s); }\r\n\t\tcatch(e) {  return UZIP.bin.readASCII(buff, p, l);  }\r\n\t\treturn  ns;\r\n\t},\r\n\twriteUTF8 : function(buff, p, str) {\r\n\t\tvar strl = str.length, i=0;\r\n\t\tfor(var ci=0; ci<strl; ci++)\r\n\t\t{\r\n\t\t\tvar code = str.charCodeAt(ci);\r\n\t\t\tif     ((code&(0xffffffff-(1<< 7)+1))==0) {  buff[p+i] = (     code     );  i++;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<11)+1))==0) {  buff[p+i] = (192|(code>> 6));  buff[p+i+1] = (128|((code>> 0)&63));  i+=2;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<16)+1))==0) {  buff[p+i] = (224|(code>>12));  buff[p+i+1] = (128|((code>> 6)&63));  buff[p+i+2] = (128|((code>>0)&63));  i+=3;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<21)+1))==0) {  buff[p+i] = (240|(code>>18));  buff[p+i+1] = (128|((code>>12)&63));  buff[p+i+2] = (128|((code>>6)&63));  buff[p+i+3] = (128|((code>>0)&63)); i+=4;  }\r\n\t\t\telse throw \"e\";\r\n\t\t}\r\n\t\treturn i;\r\n\t},\r\n\tsizeUTF8 : function(str) {\r\n\t\tvar strl = str.length, i=0;\r\n\t\tfor(var ci=0; ci<strl; ci++)\r\n\t\t{\r\n\t\t\tvar code = str.charCodeAt(ci);\r\n\t\t\tif     ((code&(0xffffffff-(1<< 7)+1))==0) {  i++ ;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<11)+1))==0) {  i+=2;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<16)+1))==0) {  i+=3;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<21)+1))==0) {  i+=4;  }\r\n\t\t\telse throw \"e\";\r\n\t\t}\r\n\t\treturn i;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nUZIP.F = {};\r\n\r\nUZIP.F.deflateRaw = function(data, out, opos, lvl) {\t\r\n\tvar opts = [\r\n\t/*\r\n\t\t ush good_length; /* reduce lazy search above this match length \r\n\t\t ush max_lazy;    /* do not perform lazy search above this match length \r\n         ush nice_length; /* quit search above this match length \r\n\t*/\r\n\t/*      good lazy nice chain */\r\n\t/* 0 */ [ 0,   0,   0,    0,0],  /* store only */\r\n\t/* 1 */ [ 4,   4,   8,    4,0], /* max speed, no lazy matches */\r\n\t/* 2 */ [ 4,   5,  16,    8,0],\r\n\t/* 3 */ [ 4,   6,  16,   16,0],\r\n\r\n\t/* 4 */ [ 4,  10,  16,   32,0],  /* lazy matches */\r\n\t/* 5 */ [ 8,  16,  32,   32,0],\r\n\t/* 6 */ [ 8,  16, 128,  128,0],\r\n\t/* 7 */ [ 8,  32, 128,  256,0],\r\n\t/* 8 */ [32, 128, 258, 1024,1],\r\n\t/* 9 */ [32, 258, 258, 4096,1]]; /* max compression */\r\n\t\r\n\tvar opt = opts[lvl];\r\n\t\r\n\t\r\n\tvar U = UZIP.F.U, goodIndex = UZIP.F._goodIndex, hash = UZIP.F._hash, putsE = UZIP.F._putsE;\r\n\tvar i = 0, pos = opos<<3, cvrd = 0, dlen = data.length;\r\n\t\r\n\tif(lvl==0) {\r\n\t\twhile(i<dlen) {   var len = Math.min(0xffff, dlen-i);\r\n\t\t\tputsE(out, pos, (i+len==dlen ? 1 : 0));  pos = UZIP.F._copyExact(data, i, len, out, pos+8);  i += len;  }\r\n\t\treturn pos>>>3;\r\n\t}\r\n\r\n\tvar lits = U.lits, strt=U.strt, prev=U.prev, li=0, lc=0, bs=0, ebits=0, c=0, nc=0;  // last_item, literal_count, block_start\r\n\tif(dlen>2) {  nc=UZIP.F._hash(data,0);  strt[nc]=0;  }\r\n\tvar nmch=0,nmci=0;\r\n\t\r\n\tfor(i=0; i<dlen; i++)  {\r\n\t\tc = nc;\r\n\t\t//*\r\n\t\tif(i+1<dlen-2) {\r\n\t\t\tnc = UZIP.F._hash(data, i+1);\r\n\t\t\tvar ii = ((i+1)&0x7fff);\r\n\t\t\tprev[ii]=strt[nc];\r\n\t\t\tstrt[nc]=ii;\r\n\t\t} //*/\r\n\t\tif(cvrd<=i) {\r\n\t\t\tif((li>14000 || lc>26697) && (dlen-i)>100) {\r\n\t\t\t\tif(cvrd<i) {  lits[li]=i-cvrd;  li+=2;  cvrd=i;  }\r\n\t\t\t\tpos = UZIP.F._writeBlock(((i==dlen-1) || (cvrd==dlen))?1:0, lits, li, ebits, data,bs,i-bs, out, pos);  li=lc=ebits=0;  bs=i;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar mch = 0;\r\n\t\t\t//if(nmci==i) mch= nmch;  else \r\n\t\t\tif(i<dlen-2) mch = UZIP.F._bestMatch(data, i, prev, c, Math.min(opt[2],dlen-i), opt[3]);\r\n\t\t\t/*\r\n\t\t\tif(mch!=0 && opt[4]==1 && (mch>>>16)<opt[1] && i+1<dlen-2) {\r\n\t\t\t\tnmch = UZIP.F._bestMatch(data, i+1, prev, nc, opt[2], opt[3]);  nmci=i+1;\r\n\t\t\t\t//var mch2 = UZIP.F._bestMatch(data, i+2, prev, nnc);  //nmci=i+1;\r\n\t\t\t\tif((nmch>>>16)>(mch>>>16)) mch=0;\r\n\t\t\t}//*/\r\n\t\t\tvar len = mch>>>16, dst = mch&0xffff;  //if(i-dst<0) throw \"e\";\r\n\t\t\tif(mch!=0) { \r\n\t\t\t\tvar len = mch>>>16, dst = mch&0xffff;  //if(i-dst<0) throw \"e\";\r\n\t\t\t\tvar lgi = goodIndex(len, U.of0);  U.lhst[257+lgi]++; \r\n\t\t\t\tvar dgi = goodIndex(dst, U.df0);  U.dhst[    dgi]++;  ebits += U.exb[lgi] + U.dxb[dgi]; \r\n\t\t\t\tlits[li] = (len<<23)|(i-cvrd);  lits[li+1] = (dst<<16)|(lgi<<8)|dgi;  li+=2;\r\n\t\t\t\tcvrd = i + len;  \r\n\t\t\t}\r\n\t\t\telse {\tU.lhst[data[i]]++;  }\r\n\t\t\tlc++;\r\n\t\t}\r\n\t}\r\n\tif(bs!=i || data.length==0) {\r\n\t\tif(cvrd<i) {  lits[li]=i-cvrd;  li+=2;  cvrd=i;  }\r\n\t\tpos = UZIP.F._writeBlock(1, lits, li, ebits, data,bs,i-bs, out, pos);  li=0;  lc=0;  li=lc=ebits=0;  bs=i;\r\n\t}\r\n\twhile((pos&7)!=0) pos++;\r\n\treturn pos>>>3;\r\n}\r\nUZIP.F._bestMatch = function(data, i, prev, c, nice, chain) {\r\n\tvar ci = (i&0x7fff), pi=prev[ci];  \r\n\t//console.log(\"----\", i);\r\n\tvar dif = ((ci-pi + (1<<15)) & 0x7fff);  if(pi==ci || c!=UZIP.F._hash(data,i-dif)) return 0;\r\n\tvar tl=0, td=0;  // top length, top distance\r\n\tvar dlim = Math.min(0x7fff, i);\r\n\twhile(dif<=dlim && --chain!=0 && pi!=ci /*&& c==UZIP.F._hash(data,i-dif)*/) {\r\n\t\tif(tl==0 || (data[i+tl]==data[i+tl-dif])) {\r\n\t\t\tvar cl = UZIP.F._howLong(data, i, dif);\r\n\t\t\tif(cl>tl) {  \r\n\t\t\t\ttl=cl;  td=dif;  if(tl>=nice) break;    //* \r\n\t\t\t\tif(dif+2<cl) cl = dif+2;\r\n\t\t\t\tvar maxd = 0; // pi does not point to the start of the word\r\n\t\t\t\tfor(var j=0; j<cl-2; j++) {\r\n\t\t\t\t\tvar ei =  (i-dif+j+ (1<<15)) & 0x7fff;\r\n\t\t\t\t\tvar li = prev[ei];\r\n\t\t\t\t\tvar curd = (ei-li + (1<<15)) & 0x7fff;\r\n\t\t\t\t\tif(curd>maxd) {  maxd=curd;  pi = ei; }\r\n\t\t\t\t}  //*/\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tci=pi;  pi = prev[ci];\r\n\t\tdif += ((ci-pi + (1<<15)) & 0x7fff);\r\n\t}\r\n\treturn (tl<<16)|td;\r\n}\r\nUZIP.F._howLong = function(data, i, dif) {\r\n\tif(data[i]!=data[i-dif] || data[i+1]!=data[i+1-dif] || data[i+2]!=data[i+2-dif]) return 0;\r\n\tvar oi=i, l = Math.min(data.length, i+258);  i+=3;\r\n\t//while(i+4<l && data[i]==data[i-dif] && data[i+1]==data[i+1-dif] && data[i+2]==data[i+2-dif] && data[i+3]==data[i+3-dif]) i+=4;\r\n\twhile(i<l && data[i]==data[i-dif]) i++;\r\n\treturn i-oi;\r\n}\r\nUZIP.F._hash = function(data, i) {\r\n\treturn (((data[i]<<8) | data[i+1])+(data[i+2]<<4))&0xffff;\r\n\t//var hash_shift = 0, hash_mask = 255;\r\n\t//var h = data[i+1] % 251;\r\n\t//h = (((h << 8) + data[i+2]) % 251);\r\n\t//h = (((h << 8) + data[i+2]) % 251);\r\n\t//h = ((h<<hash_shift) ^ (c) ) & hash_mask;\r\n\t//return h | (data[i]<<8);\r\n\t//return (data[i] | (data[i+1]<<8));\r\n}\r\n//UZIP.___toth = 0;\r\nUZIP.saved = 0;\r\nUZIP.F._writeBlock = function(BFINAL, lits, li, ebits, data,o0,l0, out, pos) {\r\n\tvar U = UZIP.F.U, putsF = UZIP.F._putsF, putsE = UZIP.F._putsE;\r\n\t\r\n\t//*\r\n\tvar T, ML, MD, MH, numl, numd, numh, lset, dset;  U.lhst[256]++;\r\n\tT = UZIP.F.getTrees(); ML=T[0]; MD=T[1]; MH=T[2]; numl=T[3]; numd=T[4]; numh=T[5]; lset=T[6]; dset=T[7];\r\n\t\r\n\tvar cstSize = (((pos+3)&7)==0 ? 0 : 8-((pos+3)&7)) + 32 + (l0<<3);\r\n\tvar fxdSize = ebits + UZIP.F.contSize(U.fltree, U.lhst) + UZIP.F.contSize(U.fdtree, U.dhst);\r\n\tvar dynSize = ebits + UZIP.F.contSize(U.ltree , U.lhst) + UZIP.F.contSize(U.dtree , U.dhst);\r\n\tdynSize    += 14 + 3*numh + UZIP.F.contSize(U.itree, U.ihst) + (U.ihst[16]*2 + U.ihst[17]*3 + U.ihst[18]*7);\r\n\t\r\n\tfor(var j=0; j<286; j++) U.lhst[j]=0;   for(var j=0; j<30; j++) U.dhst[j]=0;   for(var j=0; j<19; j++) U.ihst[j]=0;\r\n\t//*/\r\n\tvar BTYPE = (cstSize<fxdSize && cstSize<dynSize) ? 0 : ( fxdSize<dynSize ? 1 : 2 );\r\n\tputsF(out, pos, BFINAL);  putsF(out, pos+1, BTYPE);  pos+=3;\r\n\t\r\n\tvar opos = pos;\r\n\tif(BTYPE==0) {\r\n\t\twhile((pos&7)!=0) pos++;\r\n\t\tpos = UZIP.F._copyExact(data, o0, l0, out, pos);\r\n\t}\r\n\telse {\r\n\t\tvar ltree, dtree;\r\n\t\tif(BTYPE==1) {  ltree=U.fltree;  dtree=U.fdtree;  }\r\n\t\tif(BTYPE==2) {\t\r\n\t\t\tUZIP.F.makeCodes(U.ltree, ML);  UZIP.F.revCodes(U.ltree, ML);\r\n\t\t\tUZIP.F.makeCodes(U.dtree, MD);  UZIP.F.revCodes(U.dtree, MD);\r\n\t\t\tUZIP.F.makeCodes(U.itree, MH);  UZIP.F.revCodes(U.itree, MH);\r\n\t\t\t\r\n\t\t\tltree = U.ltree;  dtree = U.dtree;\r\n\t\t\t\r\n\t\t\tputsE(out, pos,numl-257);  pos+=5;  // 286\r\n\t\t\tputsE(out, pos,numd-  1);  pos+=5;  // 30\r\n\t\t\tputsE(out, pos,numh-  4);  pos+=4;  // 19\r\n\t\t\t\r\n\t\t\tfor(var i=0; i<numh; i++) putsE(out, pos+i*3, U.itree[(U.ordr[i]<<1)+1]);   pos+=3* numh;\r\n\t\t\tpos = UZIP.F._codeTiny(lset, U.itree, out, pos);\r\n\t\t\tpos = UZIP.F._codeTiny(dset, U.itree, out, pos);\r\n\t\t}\r\n\t\t\r\n\t\tvar off=o0;\r\n\t\tfor(var si=0; si<li; si+=2) {\r\n\t\t\tvar qb=lits[si], len=(qb>>>23), end = off+(qb&((1<<23)-1));\r\n\t\t\twhile(off<end) pos = UZIP.F._writeLit(data[off++], ltree, out, pos);\r\n\t\t\t\r\n\t\t\tif(len!=0) {\r\n\t\t\t\tvar qc = lits[si+1], dst=(qc>>16), lgi=(qc>>8)&255, dgi=(qc&255);\r\n\t\t\t\tpos = UZIP.F._writeLit(257+lgi, ltree, out, pos);\r\n\t\t\t\tputsE(out, pos, len-U.of0[lgi]);  pos+=U.exb[lgi];\r\n\t\t\t\t\r\n\t\t\t\tpos = UZIP.F._writeLit(dgi, dtree, out, pos);\r\n\t\t\t\tputsF(out, pos, dst-U.df0[dgi]);  pos+=U.dxb[dgi];  off+=len;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpos = UZIP.F._writeLit(256, ltree, out, pos);\r\n\t}\r\n\t//console.log(pos-opos, fxdSize, dynSize, cstSize);\r\n\treturn pos;\r\n}\r\nUZIP.F._copyExact = function(data,off,len,out,pos) {\r\n\tvar p8 = (pos>>>3);\r\n\tout[p8]=(len);  out[p8+1]=(len>>>8);  out[p8+2]=255-out[p8];  out[p8+3]=255-out[p8+1];  p8+=4;\r\n\tout.set(new Uint8Array(data.buffer, off, len), p8);\r\n\t//for(var i=0; i<len; i++) out[p8+i]=data[off+i];\r\n\treturn pos + ((len+4)<<3);\r\n}\r\n/*\r\n\tInteresting facts:\r\n\t- decompressed block can have bytes, which do not occur in a Huffman tree (copied from the previous block by reference)\r\n*/\r\n\r\nUZIP.F.getTrees = function() {\r\n\tvar U = UZIP.F.U;\r\n\tvar ML = UZIP.F._hufTree(U.lhst, U.ltree, 15);\r\n\tvar MD = UZIP.F._hufTree(U.dhst, U.dtree, 15);\r\n\tvar lset = [], numl = UZIP.F._lenCodes(U.ltree, lset);\r\n\tvar dset = [], numd = UZIP.F._lenCodes(U.dtree, dset);\r\n\tfor(var i=0; i<lset.length; i+=2) U.ihst[lset[i]]++;\r\n\tfor(var i=0; i<dset.length; i+=2) U.ihst[dset[i]]++;\r\n\tvar MH = UZIP.F._hufTree(U.ihst, U.itree,  7);\r\n\tvar numh = 19;  while(numh>4 && U.itree[(U.ordr[numh-1]<<1)+1]==0) numh--;\r\n\treturn [ML, MD, MH, numl, numd, numh, lset, dset];\r\n}\r\nUZIP.F.getSecond= function(a) {  var b=[];  for(var i=0; i<a.length; i+=2) b.push  (a[i+1]);  return b;  }\r\nUZIP.F.nonZero  = function(a) {  var b= \"\";  for(var i=0; i<a.length; i+=2) if(a[i+1]!=0)b+=(i>>1)+\",\";  return b;  }\r\nUZIP.F.contSize = function(tree, hst) {  var s=0;  for(var i=0; i<hst.length; i++) s+= hst[i]*tree[(i<<1)+1];  return s;  }\r\nUZIP.F._codeTiny = function(set, tree, out, pos) {\r\n\tfor(var i=0; i<set.length; i+=2) {\r\n\t\tvar l = set[i], rst = set[i+1];  //console.log(l, pos, tree[(l<<1)+1]);\r\n\t\tpos = UZIP.F._writeLit(l, tree, out, pos);\r\n\t\tvar rsl = l==16 ? 2 : (l==17 ? 3 : 7);\r\n\t\tif(l>15) {  UZIP.F._putsE(out, pos, rst, rsl);  pos+=rsl;  }\r\n\t}\r\n\treturn pos;\r\n}\r\nUZIP.F._lenCodes = function(tree, set) {\r\n\tvar len=tree.length;  while(len!=2 && tree[len-1]==0) len-=2;  // when no distances, keep one code with length 0\r\n\tfor(var i=0; i<len; i+=2) {\r\n\t\tvar l = tree[i+1], nxt = (i+3<len ? tree[i+3]:-1),  nnxt = (i+5<len ? tree[i+5]:-1),  prv = (i==0 ? -1 : tree[i-1]);\r\n\t\tif(l==0 && nxt==l && nnxt==l) {\r\n\t\t\tvar lz = i+5;\r\n\t\t\twhile(lz+2<len && tree[lz+2]==l) lz+=2;\r\n\t\t\tvar zc = Math.min((lz+1-i)>>>1, 138);\r\n\t\t\tif(zc<11) set.push(17, zc-3);\r\n\t\t\telse set.push(18, zc-11);\r\n\t\t\ti += zc*2-2;\r\n\t\t}\r\n\t\telse if(l==prv && nxt==l && nnxt==l) {\r\n\t\t\tvar lz = i+5;\r\n\t\t\twhile(lz+2<len && tree[lz+2]==l) lz+=2;\r\n\t\t\tvar zc = Math.min((lz+1-i)>>>1, 6);\r\n\t\t\tset.push(16, zc-3);\r\n\t\t\ti += zc*2-2;\r\n\t\t}\r\n\t\telse set.push(l, 0);\r\n\t}\r\n\treturn len>>>1;\r\n}\r\nUZIP.F._hufTree   = function(hst, tree, MAXL) {\r\n\tvar list=[], hl = hst.length, tl=tree.length, i=0;\r\n\tfor(i=0; i<tl; i+=2) {  tree[i]=0;  tree[i+1]=0;  }\t\r\n\tfor(i=0; i<hl; i++) if(hst[i]!=0) list.push({lit:i, f:hst[i]});\r\n\tvar end = list.length, l2=list.slice(0);\r\n\tif(end==0) return 0;  // empty histogram (usually for dist)\r\n\tif(end==1) {  var lit=list[0].lit, l2=lit==0?1:0;  tree[(lit<<1)+1]=1;  tree[(l2<<1)+1]=1;  return 1;  }\r\n\tlist.sort(function(a,b){return a.f-b.f;});\r\n\tvar a=list[0], b=list[1], i0=0, i1=1, i2=2;  list[0]={lit:-1,f:a.f+b.f,l:a,r:b,d:0};\r\n\twhile(i1!=end-1) {\r\n\t\tif(i0!=i1 && (i2==end || list[i0].f<list[i2].f)) {  a=list[i0++];  }  else {  a=list[i2++];  }\r\n\t\tif(i0!=i1 && (i2==end || list[i0].f<list[i2].f)) {  b=list[i0++];  }  else {  b=list[i2++];  }\r\n\t\tlist[i1++]={lit:-1,f:a.f+b.f, l:a,r:b};\r\n\t}\r\n\tvar maxl = UZIP.F.setDepth(list[i1-1], 0);\r\n\tif(maxl>MAXL) {  UZIP.F.restrictDepth(l2, MAXL, maxl);  maxl = MAXL;  }\r\n\tfor(i=0; i<end; i++) tree[(l2[i].lit<<1)+1]=l2[i].d;\r\n\treturn maxl;\r\n}\r\n\r\nUZIP.F.setDepth  = function(t, d) {\r\n\tif(t.lit!=-1) {  t.d=d;  return d;  }\r\n\treturn Math.max( UZIP.F.setDepth(t.l, d+1),  UZIP.F.setDepth(t.r, d+1) );\r\n}\r\n\r\nUZIP.F.restrictDepth = function(dps, MD, maxl) {\r\n\tvar i=0, bCost=1<<(maxl-MD), dbt=0;\r\n\tdps.sort(function(a,b){return b.d==a.d ? a.f-b.f : b.d-a.d;});\r\n\t\r\n\tfor(i=0; i<dps.length; i++) if(dps[i].d>MD) {  var od=dps[i].d;  dps[i].d=MD;  dbt+=bCost-(1<<(maxl-od));  }  else break;\r\n\tdbt = dbt>>>(maxl-MD);\r\n\twhile(dbt>0) {  var od=dps[i].d;  if(od<MD) {  dps[i].d++;  dbt-=(1<<(MD-od-1));  }  else  i++;  }\r\n\tfor(; i>=0; i--) if(dps[i].d==MD && dbt<0) {  dps[i].d--;  dbt++;  }  if(dbt!=0) console.log(\"debt left\");\r\n}\r\n\r\nUZIP.F._goodIndex = function(v, arr) {\r\n\tvar i=0;  if(arr[i|16]<=v) i|=16;  if(arr[i|8]<=v) i|=8;  if(arr[i|4]<=v) i|=4;  if(arr[i|2]<=v) i|=2;  if(arr[i|1]<=v) i|=1;  return i;\r\n}\r\nUZIP.F._writeLit = function(ch, ltree, out, pos) {\r\n\tUZIP.F._putsF(out, pos, ltree[ch<<1]);\r\n\treturn pos+ltree[(ch<<1)+1];\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nUZIP.F.inflate = function(data, buf) {\r\n\tvar u8=Uint8Array;\r\n\tif(data[0]==3 && data[1]==0) return (buf ? buf : new u8(0));\r\n\tvar F=UZIP.F, bitsF = F._bitsF, bitsE = F._bitsE, decodeTiny = F._decodeTiny, makeCodes = F.makeCodes, codes2map=F.codes2map, get17 = F._get17;\r\n\tvar U = F.U;\r\n\t\r\n\tvar noBuf = (buf==null);\r\n\tif(noBuf) buf = new u8((data.length>>>2)<<3);\r\n\t\r\n\tvar BFINAL=0, BTYPE=0, HLIT=0, HDIST=0, HCLEN=0, ML=0, MD=0; \t\r\n\tvar off = 0, pos = 0;\r\n\tvar lmap, dmap;\r\n\t\r\n\twhile(BFINAL==0) {\t\t\r\n\t\tBFINAL = bitsF(data, pos  , 1);\r\n\t\tBTYPE  = bitsF(data, pos+1, 2);  pos+=3;\r\n\t\t//console.log(BFINAL, BTYPE);\r\n\t\t\r\n\t\tif(BTYPE==0) {\r\n\t\t\tif((pos&7)!=0) pos+=8-(pos&7);\r\n\t\t\tvar p8 = (pos>>>3)+4, len = data[p8-4]|(data[p8-3]<<8);  //console.log(len);//bitsF(data, pos, 16), \r\n\t\t\tif(noBuf) buf=UZIP.F._check(buf, off+len);\r\n\t\t\tbuf.set(new u8(data.buffer, data.byteOffset+p8, len), off);\r\n\t\t\t//for(var i=0; i<len; i++) buf[off+i] = data[p8+i];\r\n\t\t\t//for(var i=0; i<len; i++) if(buf[off+i] != data[p8+i]) throw \"e\";\r\n\t\t\tpos = ((p8+len)<<3);  off+=len;  continue;\r\n\t\t}\r\n\t\tif(noBuf) buf=UZIP.F._check(buf, off+(1<<17));  // really not enough in many cases (but PNG and ZIP provide buffer in advance)\r\n\t\tif(BTYPE==1) {  lmap = U.flmap;  dmap = U.fdmap;  ML = (1<<9)-1;  MD = (1<<5)-1;   }\r\n\t\tif(BTYPE==2) {\r\n\t\t\tHLIT  = bitsE(data, pos   , 5)+257;  \r\n\t\t\tHDIST = bitsE(data, pos+ 5, 5)+  1;  \r\n\t\t\tHCLEN = bitsE(data, pos+10, 4)+  4;  pos+=14;\r\n\t\t\t\r\n\t\t\tvar ppos = pos;\r\n\t\t\tfor(var i=0; i<38; i+=2) {  U.itree[i]=0;  U.itree[i+1]=0;  }\r\n\t\t\tvar tl = 1;\r\n\t\t\tfor(var i=0; i<HCLEN; i++) {  var l=bitsE(data, pos+i*3, 3);  U.itree[(U.ordr[i]<<1)+1] = l;  if(l>tl)tl=l;  }     pos+=3*HCLEN;  //console.log(itree);\r\n\t\t\tmakeCodes(U.itree, tl);\r\n\t\t\tcodes2map(U.itree, tl, U.imap);\r\n\t\t\t\r\n\t\t\tlmap = U.lmap;  dmap = U.dmap;\r\n\t\t\t\r\n\t\t\tpos = decodeTiny(U.imap, (1<<tl)-1, HLIT+HDIST, data, pos, U.ttree);\r\n\t\t\tvar mx0 = F._copyOut(U.ttree,    0, HLIT , U.ltree);  ML = (1<<mx0)-1;\r\n\t\t\tvar mx1 = F._copyOut(U.ttree, HLIT, HDIST, U.dtree);  MD = (1<<mx1)-1;\r\n\t\t\t\r\n\t\t\t//var ml = decodeTiny(U.imap, (1<<tl)-1, HLIT , data, pos, U.ltree); ML = (1<<(ml>>>24))-1;  pos+=(ml&0xffffff);\r\n\t\t\tmakeCodes(U.ltree, mx0);\r\n\t\t\tcodes2map(U.ltree, mx0, lmap);\r\n\t\t\t\r\n\t\t\t//var md = decodeTiny(U.imap, (1<<tl)-1, HDIST, data, pos, U.dtree); MD = (1<<(md>>>24))-1;  pos+=(md&0xffffff);\r\n\t\t\tmakeCodes(U.dtree, mx1);\r\n\t\t\tcodes2map(U.dtree, mx1, dmap);\r\n\t\t}\r\n\t\t//var ooff=off, opos=pos;\r\n\t\twhile(true) {\r\n\t\t\tvar code = lmap[get17(data, pos) & ML];  pos += code&15;\r\n\t\t\tvar lit = code>>>4;  //U.lhst[lit]++;  \r\n\t\t\tif((lit>>>8)==0) {  buf[off++] = lit;  }\r\n\t\t\telse if(lit==256) {  break;  }\r\n\t\t\telse {\r\n\t\t\t\tvar end = off+lit-254;\r\n\t\t\t\tif(lit>264) { var ebs = U.ldef[lit-257];  end = off + (ebs>>>3) + bitsE(data, pos, ebs&7);  pos += ebs&7;  }\r\n\t\t\t\t//UZIP.F.dst[end-off]++;\r\n\t\t\t\t\r\n\t\t\t\tvar dcode = dmap[get17(data, pos) & MD];  pos += dcode&15;\r\n\t\t\t\tvar dlit = dcode>>>4;\r\n\t\t\t\tvar dbs = U.ddef[dlit], dst = (dbs>>>4) + bitsF(data, pos, dbs&15);  pos += dbs&15;\r\n\t\t\t\t\r\n\t\t\t\t//var o0 = off-dst, stp = Math.min(end-off, dst);\r\n\t\t\t\t//if(stp>20) while(off<end) {  buf.copyWithin(off, o0, o0+stp);  off+=stp;  }  else\r\n\t\t\t\t//if(end-dst<=off) buf.copyWithin(off, off-dst, end-dst);  else\r\n\t\t\t\t//if(dst==1) buf.fill(buf[off-1], off, end);  else\r\n\t\t\t\tif(noBuf) buf=UZIP.F._check(buf, off+(1<<17));\r\n\t\t\t\twhile(off<end) {  buf[off]=buf[off++-dst];    buf[off]=buf[off++-dst];  buf[off]=buf[off++-dst];  buf[off]=buf[off++-dst];  }   \r\n\t\t\t\toff=end;\r\n\t\t\t\t//while(off!=end) {  buf[off]=buf[off++-dst];  }\r\n\t\t\t}\r\n\t\t}\r\n\t\t//console.log(off-ooff, (pos-opos)>>>3);\r\n\t}\r\n\t//console.log(UZIP.F.dst);\r\n\t//console.log(tlen, dlen, off-tlen+tcnt);\r\n\treturn buf.length==off ? buf : buf.slice(0,off);\r\n}\r\nUZIP.F._check=function(buf, len) {\r\n\tvar bl=buf.length;  if(len<=bl) return buf;\r\n\tvar nbuf = new Uint8Array(Math.max(bl<<1,len));  nbuf.set(buf,0);\r\n\t//for(var i=0; i<bl; i+=4) {  nbuf[i]=buf[i];  nbuf[i+1]=buf[i+1];  nbuf[i+2]=buf[i+2];  nbuf[i+3]=buf[i+3];  }\r\n\treturn nbuf;\r\n}\r\n\r\nUZIP.F._decodeTiny = function(lmap, LL, len, data, pos, tree) {\r\n\tvar bitsE = UZIP.F._bitsE, get17 = UZIP.F._get17;\r\n\tvar i = 0;\r\n\twhile(i<len) {\r\n\t\tvar code = lmap[get17(data, pos)&LL];  pos+=code&15;\r\n\t\tvar lit = code>>>4; \r\n\t\tif(lit<=15) {  tree[i]=lit;  i++;  }\r\n\t\telse {\r\n\t\t\tvar ll = 0, n = 0;\r\n\t\t\tif(lit==16) {\r\n\t\t\t\tn = (3  + bitsE(data, pos, 2));  pos += 2;  ll = tree[i-1];\r\n\t\t\t}\r\n\t\t\telse if(lit==17) {\r\n\t\t\t\tn = (3  + bitsE(data, pos, 3));  pos += 3;\r\n\t\t\t}\r\n\t\t\telse if(lit==18) {\r\n\t\t\t\tn = (11 + bitsE(data, pos, 7));  pos += 7;\r\n\t\t\t}\r\n\t\t\tvar ni = i+n;\r\n\t\t\twhile(i<ni) {  tree[i]=ll;  i++; }\r\n\t\t}\r\n\t}\r\n\treturn pos;\r\n}\r\nUZIP.F._copyOut = function(src, off, len, tree) {\r\n\tvar mx=0, i=0, tl=tree.length>>>1;\r\n\twhile(i<len) {  var v=src[i+off];  tree[(i<<1)]=0;  tree[(i<<1)+1]=v;  if(v>mx)mx=v;  i++;  }\r\n\twhile(i<tl ) {  tree[(i<<1)]=0;  tree[(i<<1)+1]=0;  i++;  }\r\n\treturn mx;\r\n}\r\n\r\nUZIP.F.makeCodes = function(tree, MAX_BITS) {  // code, length\r\n\tvar U = UZIP.F.U;\r\n\tvar max_code = tree.length;\r\n\tvar code, bits, n, i, len;\r\n\t\r\n\tvar bl_count = U.bl_count;  for(var i=0; i<=MAX_BITS; i++) bl_count[i]=0;\r\n\tfor(i=1; i<max_code; i+=2) bl_count[tree[i]]++;\r\n\t\r\n\tvar next_code = U.next_code;\t// smallest code for each length\r\n\t\r\n\tcode = 0;\r\n\tbl_count[0] = 0;\r\n\tfor (bits = 1; bits <= MAX_BITS; bits++) {\r\n\t\tcode = (code + bl_count[bits-1]) << 1;\r\n\t\tnext_code[bits] = code;\r\n\t}\r\n\t\r\n\tfor (n = 0; n < max_code; n+=2) {\r\n\t\tlen = tree[n+1];\r\n\t\tif (len != 0) {\r\n\t\t\ttree[n] = next_code[len];\r\n\t\t\tnext_code[len]++;\r\n\t\t}\r\n\t}\r\n}\r\nUZIP.F.codes2map = function(tree, MAX_BITS, map) {\r\n\tvar max_code = tree.length;\r\n\tvar U=UZIP.F.U, r15 = U.rev15;\r\n\tfor(var i=0; i<max_code; i+=2) if(tree[i+1]!=0)  {\r\n\t\tvar lit = i>>1;\r\n\t\tvar cl = tree[i+1], val = (lit<<4)|cl; // :  (0x8000 | (U.of0[lit-257]<<7) | (U.exb[lit-257]<<4) | cl);\r\n\t\tvar rest = (MAX_BITS-cl), i0 = tree[i]<<rest, i1 = i0 + (1<<rest);\r\n\t\t//tree[i]=r15[i0]>>>(15-MAX_BITS);\r\n\t\twhile(i0!=i1) {\r\n\t\t\tvar p0 = r15[i0]>>>(15-MAX_BITS);\r\n\t\t\tmap[p0]=val;  i0++;\r\n\t\t}\r\n\t}\r\n}\r\nUZIP.F.revCodes = function(tree, MAX_BITS) {\r\n\tvar r15 = UZIP.F.U.rev15, imb = 15-MAX_BITS;\r\n\tfor(var i=0; i<tree.length; i+=2) {  var i0 = (tree[i]<<(MAX_BITS-tree[i+1]));  tree[i] = r15[i0]>>>imb;  }\r\n}\r\n\r\n// used only in deflate\r\nUZIP.F._putsE= function(dt, pos, val   ) {  val = val<<(pos&7);  var o=(pos>>>3);  dt[o]|=val;  dt[o+1]|=(val>>>8);                        }\r\nUZIP.F._putsF= function(dt, pos, val   ) {  val = val<<(pos&7);  var o=(pos>>>3);  dt[o]|=val;  dt[o+1]|=(val>>>8);  dt[o+2]|=(val>>>16);  }\r\n\r\nUZIP.F._bitsE= function(dt, pos, length) {  return ((dt[pos>>>3] | (dt[(pos>>>3)+1]<<8)                        )>>>(pos&7))&((1<<length)-1);  }\r\nUZIP.F._bitsF= function(dt, pos, length) {  return ((dt[pos>>>3] | (dt[(pos>>>3)+1]<<8) | (dt[(pos>>>3)+2]<<16))>>>(pos&7))&((1<<length)-1);  }\r\n/*\r\nUZIP.F._get9 = function(dt, pos) {\r\n\treturn ((dt[pos>>>3] | (dt[(pos>>>3)+1]<<8))>>>(pos&7))&511;\r\n} */\r\nUZIP.F._get17= function(dt, pos) {\t// return at least 17 meaningful bytes\r\n\treturn (dt[pos>>>3] | (dt[(pos>>>3)+1]<<8) | (dt[(pos>>>3)+2]<<16) )>>>(pos&7);\r\n}\r\nUZIP.F._get25= function(dt, pos) {\t// return at least 17 meaningful bytes\r\n\treturn (dt[pos>>>3] | (dt[(pos>>>3)+1]<<8) | (dt[(pos>>>3)+2]<<16) | (dt[(pos>>>3)+3]<<24) )>>>(pos&7);\r\n}\r\nUZIP.F.U = function(){\r\n\tvar u16=Uint16Array, u32=Uint32Array;\r\n\treturn {\r\n\t\tnext_code : new u16(16),\r\n\t\tbl_count  : new u16(16),\r\n\t\tordr : [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ],\r\n\t\tof0  : [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,999,999,999],\r\n\t\texb  : [0,0,0,0,0,0,0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,  4,  5,  5,  5,  5,  0,  0,  0,  0],\r\n\t\tldef : new u16(32),\r\n\t\tdf0  : [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577, 65535, 65535],\r\n\t\tdxb  : [0,0,0,0,1,1,2, 2, 3, 3, 4, 4, 5, 5,  6,  6,  7,  7,  8,  8,   9,   9,  10,  10,  11,  11,  12,   12,   13,   13,     0,     0],\r\n\t\tddef : new u32(32),\r\n\t\tflmap: new u16(  512),  fltree: [],\r\n\t\tfdmap: new u16(   32),  fdtree: [],\r\n\t\tlmap : new u16(32768),  ltree : [],  ttree:[],\r\n\t\tdmap : new u16(32768),  dtree : [],\r\n\t\timap : new u16(  512),  itree : [],\r\n\t\t//rev9 : new u16(  512)\r\n\t\trev15: new u16(1<<15),\r\n\t\tlhst : new u32(286), dhst : new u32( 30), ihst : new u32(19),\r\n\t\tlits : new u32(15000),\r\n\t\tstrt : new u16(1<<16),\r\n\t\tprev : new u16(1<<15)\r\n\t};  \r\n} ();\r\n\r\n(function(){\t\r\n\tvar U = UZIP.F.U;\r\n\tvar len = 1<<15;\r\n\tfor(var i=0; i<len; i++) {\r\n\t\tvar x = i;\r\n\t\tx = (((x & 0xaaaaaaaa) >>> 1) | ((x & 0x55555555) << 1));\r\n\t\tx = (((x & 0xcccccccc) >>> 2) | ((x & 0x33333333) << 2));\r\n\t\tx = (((x & 0xf0f0f0f0) >>> 4) | ((x & 0x0f0f0f0f) << 4));\r\n\t\tx = (((x & 0xff00ff00) >>> 8) | ((x & 0x00ff00ff) << 8));\r\n\t\tU.rev15[i] = (((x >>> 16) | (x << 16)))>>>17;\r\n\t}\r\n\t\r\n\tfunction pushV(tgt, n, sv) {  while(n--!=0) tgt.push(0,sv);  }\r\n\t\r\n\tfor(var i=0; i<32; i++) {  U.ldef[i]=(U.of0[i]<<3)|U.exb[i];  U.ddef[i]=(U.df0[i]<<4)|U.dxb[i];  }\r\n\t\r\n\tpushV(U.fltree, 144, 8);  pushV(U.fltree, 255-143, 9);  pushV(U.fltree, 279-255, 7);  pushV(U.fltree,287-279,8);\r\n\t/*\r\n\tvar i = 0;\r\n\tfor(; i<=143; i++) U.fltree.push(0,8);\r\n\tfor(; i<=255; i++) U.fltree.push(0,9);\r\n\tfor(; i<=279; i++) U.fltree.push(0,7);\r\n\tfor(; i<=287; i++) U.fltree.push(0,8);\r\n\t*/\r\n\tUZIP.F.makeCodes(U.fltree, 9);\r\n\tUZIP.F.codes2map(U.fltree, 9, U.flmap);\r\n\tUZIP.F.revCodes (U.fltree, 9)\r\n\t\r\n\tpushV(U.fdtree,32,5);\r\n\t//for(i=0;i<32; i++) U.fdtree.push(0,5);\r\n\tUZIP.F.makeCodes(U.fdtree, 5);\r\n\tUZIP.F.codes2map(U.fdtree, 5, U.fdmap);\r\n\tUZIP.F.revCodes (U.fdtree, 5)\r\n\t\r\n\tpushV(U.itree,19,0);  pushV(U.ltree,286,0);  pushV(U.dtree,30,0);  pushV(U.ttree,320,0);\r\n\t/*\r\n\tfor(var i=0; i< 19; i++) U.itree.push(0,0);\r\n\tfor(var i=0; i<286; i++) U.ltree.push(0,0);\r\n\tfor(var i=0; i< 30; i++) U.dtree.push(0,0);\r\n\tfor(var i=0; i<320; i++) U.ttree.push(0,0);\r\n\t*/\r\n})()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "/** @format */\n\nimport { deflate, inflate } from 'uzip';\nimport { ICCPCompressionMode } from './iccp-compression-mode';\nimport { ListUtils } from './list-utils';\n\n/**\n * ICC Profile data stored with an image.\n */\nexport class ICCProfileData {\n  private _name: string;\n  public get name(): string {\n    return this._name;\n  }\n\n  private _compression: ICCPCompressionMode;\n  public get compression(): ICCPCompressionMode {\n    return this._compression;\n  }\n\n  private _data: Uint8Array;\n  public get data(): Uint8Array {\n    return this._data;\n  }\n\n  constructor(\n    name: string,\n    compression: ICCPCompressionMode,\n    data: Uint8Array\n  ) {\n    this._name = name;\n    this._compression = compression;\n    this._data = data;\n  }\n\n  public static from(other: ICCProfileData) {\n    return new ICCProfileData(\n      other._name,\n      other._compression,\n      ListUtils.copyUint8(other._data)\n    );\n  }\n\n  /**\n   * Returns the compressed data of the ICC Profile, compressing the stored data as necessary.\n   */\n  public compressed(): Uint8Array {\n    if (this._compression === ICCPCompressionMode.deflate) {\n      return this._data;\n    }\n    this._data = deflate(this._data);\n    this._compression = ICCPCompressionMode.deflate;\n    return this._data;\n  }\n\n  /**\n   * Returns the uncompressed data of the ICC Profile, decompressing the stored data as necessary.\n   */\n  public decompressed(): Uint8Array {\n    if (this._compression === ICCPCompressionMode.deflate) {\n      return this._data;\n    }\n    this._data = inflate(this._data);\n    this._compression = ICCPCompressionMode.none;\n    return this._data;\n  }\n}\n", ""],
  "mappings": "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AC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,OAC9D,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OACpE,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC/D,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC5D,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC5D,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC5D,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC5D,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC5D,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC5D,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC5D,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC5D,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC5D,SAAU,SAAU,SAAU,SAAU,S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",
  "names": ["_BitOperators", "BitOperators", "init_bit_operators", "__esmMin", "bits", "value", "v", "n", "d", "bitCount", "result", "init_blend_mode", "__esmMin", "Clamp", "init_clamp", "__esmMin", "number", "low", "high", "x", "a", "b", "init_color_channel", "__esmMin", "init_color_model", "__esmMin", "ImageError", "init_image_error", "__esmMin", "ColorUtils", "init_color_utils", "__esmMin", "init_color_channel", "init_clamp", "init_bit_operators", "init_image_error", "dst", "src", "fraction", "srcAlpha", "a", "sr", "sg", "sb", "sa", "dr", "dg", "db", "da", "color", "channel", "r", "g", "b", "Clamp", "BitOperators", "value", "hue", "saturation", "lightness", "gray", "hue2rgb", "p", "q", "t", "ti", "brightness", "h", "f", "ImageError", "ri", "gi", "bi", "mx", "mn", "l", "d", "s", "y", "x", "z", "xi", "yi", "zi", "c", "m", "k", "ci", "mi", "ki", "y3", "x3", "z3", "R", "G", "B", "Color", "init_color", "__esmMin", "init_color_utils", "red", "green", "blue", "ColorUtils", "alpha", "hue", "saturation", "lightness", "rgb", "value", "x", "y", "z", "L", "a", "b", "c1", "c2", "compareAlpha", "d1", "d2", "d3", "dA", "_Crc32", "Crc32", "init_crc32", "__esmMin", "table", "c", "n", "k", "options", "_a", "_b", "_c", "len", "pos", "end", "result", "i", "init_dispose_mode", "__esmMin", "ListUtils", "init_list_utils", "__esmMin", "init_image_error", "from", "begin", "end", "ImageError", "to", "start", "skipCount", "viewFrom", "_ExifData", "ExifData", "init_exif_data", "__esmMin", "init_list_utils", "options", "_a", "other", "data", "rawData", "ListUtils", "init_frame_type", "__esmMin", "FrameAnimation", "init_frame_animation", "__esmMin", "init_frame_type", "options", "_a", "_b", "_c", "index", "image", "init_iccp_compression_mode", "__esmMin", "init_interpolation", "__esmMin", "init_rgb_channel_set", "__esmMin", "MemoryImage", "init_memory_image", "__esmMin", "init_exif_data", "init_interpolation", "init_list_utils", "init_color_utils", "init_rgb_channel_set", "init_dispose_mode", "init_blend_mode", "init_color_model", "init_image_error", "options", "_a", "_b", "ExifData", "v", "width", "height", "bytes", "colorModel", "ListUtils", "input", "data", "rgba", "i", "len", "j", "opt", "__spreadProps", "__spreadValues", "other", "result", "ColorUtils", "ImageError", "color", "h", "w", "y", "x", "c1", "r1", "g1", "b1", "a1", "c2", "r2", "g2", "b2", "a2", "index", "fx", "fy", "interpolation", "nx", "ny", "dx", "dy", "linear", "icc", "inc", "icn", "inn", "px", "ax", "py", "ay", "cubic", "ipp", "icp", "inp", "iap", "ip0", "ip1", "ip2", "ip3", "ipc", "iac", "Ic0", "Ic1", "Ic2", "Ic3", "ipn", "ian", "in0", "in1", "in2", "in3", "ipa", "ica", "ina", "iaa", "ia0", "ia1", "ia2", "ia3", "c0", "c3", "g", "b", "a", "asDouble", "t", "averageGray", "key", "value", "TextCodec", "init_text_codec", "__esmMin", "init_image_error", "str", "array", "i", "codePoint", "ImageError", "init_typings", "__esmMin", "drawPixel", "image", "x", "y", "color", "opacity", "index", "dst", "ColorUtils", "init_draw_pixel", "__esmMin", "init_color_utils", "NotImplementedError", "init_not_implemented_error", "__esmMin", "_Half", "Half", "init_half", "__esmMin", "init_bit_operators", "bits", "i", "s", "e", "m", "t", "a", "b", "y", "n", "f", "xi", "BitOperators", "other", "d", "iMax", "_HdrSlice", "HdrSlice", "init_hdr_slice", "__esmMin", "init_list_utils", "init_not_implemented_error", "init_half", "v", "options", "_a", "size", "type", "bitsPerSample", "NotImplementedError", "other", "ListUtils", "x", "y", "pi", "Half", "_HdrImage", "HdrImage", "init_hdr_image", "__esmMin", "init_rgb_channel_set", "init_hdr_slice", "width", "height", "channels", "type", "bitsPerSample", "image", "channelList", "i", "HdrSlice", "other", "value", "rgb", "y", "si", "x", "c", "ch", "slice", "rgba", "w", "h", "di", "InputBuffer", "init_input_buffer", "__esmMin", "init_bit_operators", "init_text_codec", "init_image_error", "v", "options", "_a", "_b", "other", "offset", "length", "offsetFromOther", "result", "index", "value", "start", "count", "position", "pos", "i", "end", "BitOperators", "bytes", "codes", "c", "ImageError", "array", "TextCodec", "b1", "b2", "b3", "b4", "d", "b5", "b6", "b7", "b8", "correctedOffset", "correctedLength", "_BitmapFileHeader", "BitmapFileHeader", "init_bitmap_file_header", "__esmMin", "init_image_error", "init_input_buffer", "v", "b", "ImageError", "InputBuffer", "init_bitmap_compression_mode", "__esmMin", "init_bmp_info", "__esmMin", "init_bit_operators", "init_color_utils", "init_image_error", "init_not_implemented_error", "init_bitmap_compression_mode", "init_bitmap_file_header", "init_bmp_decoder", "__esmMin", "init_frame_animation", "init_memory_image", "init_hdr_image", "init_bitmap_file_header", "init_bmp_info", "init_input_buffer", "_OutputBuffer", "OutputBuffer", "init_output_buffer", "__esmMin", "init_list_utils", "v", "options", "_a", "_b", "required", "blockSize", "newBuffer", "ListUtils", "value", "bytes", "length", "correctedLength", "start", "end", "correctedStart", "correctedEnd", "init_bmp_encoder", "__esmMin", "init_color_utils", "init_rgb_channel_set", "init_bitmap_file_header", "init_output_buffer", "init_decode_info", "__esmMin", "init_decoder", "__esmMin", "init_dib_decoder", "__esmMin", "init_bmp_decoder", "init_encoder", "__esmMin", "CopyIntoTransform", "init_copy_into", "__esmMin", "init_draw_pixel", "options", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "wdt", "hight", "y", "x", "drawPixel", "GifColorMap", "init_gif_color_map", "__esmMin", "init_color_utils", "v", "options", "_a", "_b", "n", "i", "other", "index", "value", "ci", "a", "ColorUtils", "r", "g", "b", "color", "GifImageDesc", "init_gif_image_desc", "__esmMin", "init_gif_color_map", "input", "b", "bitsPerPixel", "GifColorMap", "v", "GifInfo", "init_gif_info", "__esmMin", "options", "_a", "_b", "_c", "_d", "_e", "_f", "_GifDecoder", "GifDecoder", "init_gif_decoder", "__esmMin", "init_frame_animation", "init_list_utils", "init_memory_image", "init_image_error", "init_hdr_image", "init_copy_into", "init_gif_color_map", "init_gif_image_desc", "init_gif_info", "init_input_buffer", "bytes", "prefix", "code", "clearCode", "c", "i", "image", "y", "colorMap", "line", "x", "width", "tag", "height", "b", "colorResolution", "bitsPerPixel", "backgroundColor", "globalColorMap", "GifColorMap", "r", "g", "isGif89", "GifInfo", "gifImage", "GifImageDesc", "input", "blockSize", "b1", "b2", "duration", "transparent", "disposalMethod", "transparentFlag", "MemoryImage", "row", "j", "lineLen", "currentPrefix", "prefixChar", "nextByte", "from", "ListUtils", "InputBuffer", "extCode", "error", "strError", "ImageError", "frame", "img", "HdrImage", "animation", "FrameAnimation", "lastImage", "CopyIntoTransform", "init_dither_kernel", "__esmMin", "_DitherPixel", "DitherPixel", "init_dither_pixel", "__esmMin", "init_dither_kernel", "image", "quantizer", "kernel", "serpentine", "ds", "height", "width", "data", "indexedPixels", "colorMap", "direction", "index", "y", "x0", "x1", "x", "idx", "r1", "g1", "b1", "r2", "g2", "b2", "er", "eg", "eb", "i0", "i1", "i", "y1", "d", "_NeuralQuantizer", "NeuralQuantizer", "init_neural_quantizer", "__esmMin", "init_color_utils", "image", "numberOfColors", "samplingFactor", "f", "i", "p", "rad", "alpha", "b", "g", "bestd", "bestBiasDist", "bestpos", "bestbiaspos", "dist", "a", "biasDist", "r", "_", "lo", "hi", "j", "k", "m", "biasRadius", "alphaDec", "lengthCount", "samplePixels", "delta", "step", "pos", "red", "ColorUtils", "green", "blue", "q", "x", "previousColor", "startPos", "smallpos", "smallval", "best", "index", "c", "map", "len", "_GifEncoder", "GifEncoder", "init_gif_encoder", "__esmMin", "init_text_codec", "init_dither_kernel", "init_dither_pixel", "init_neural_quantizer", "init_output_buffer", "options", "_a", "_b", "_c", "_d", "_e", "image", "width", "height", "colorMap", "numColors", "i", "initCodeSize", "hTab", "codeTab", "remaining", "curPixel", "_nextPixel", "ent", "hshift", "fcode", "hSizeReg", "outerLoop", "c", "disp", "code", "appCodeUnits", "TextCodec", "transparency", "dispose", "idCodeUnits", "bytes", "duration", "OutputBuffer", "NeuralQuantizer", "DitherPixel", "animation", "f", "init_ico_bmp_info", "__esmMin", "init_bmp_info", "init_ico_info_image", "__esmMin", "init_ico_info", "__esmMin", "init_ico_info_image", "PngFrame", "init_png_frame", "__esmMin", "options", "PngInfo", "init_png_info", "__esmMin", "options", "_a", "_b", "v", "import_uzip", "_PngDecoder", "PngDecoder", "init_png_decoder", "__esmMin", "init_color", "init_color_utils", "init_crc32", "init_frame_animation", "init_iccp_compression_mode", "init_icc_profile_data", "init_list_utils", "init_memory_image", "init_rgb_channel_set", "init_text_codec", "init_image_error", "init_not_implemented_error", "init_hdr_image", "init_copy_into", "init_png_frame", "init_png_info", "init_input_buffer", "filterType", "bpp", "row", "prevRow", "rowBytes", "x", "b", "c", "p", "pa", "pb", "pc", "paeth", "ImageError", "type", "bytes", "typeCodeUnits", "TextCodec", "crc", "Crc32", "input", "image", "xOffset", "yOffset", "xStep", "yStep", "passWidth", "passHeight", "channels", "pixelDepth", "line", "inData", "pixel", "srcY", "dstY", "ri", "rowInput", "InputBuffer", "blockHeight", "blockWidth", "srcX", "dstX", "i", "j", "w", "h", "y", "pi", "numBits", "octet", "mask", "NotImplementedError", "raw", "g", "a", "ColorUtils", "r", "tr", "tg", "tb", "pngHeader", "PNG_HEADER", "expectedHeader", "inputPos", "chunkSize", "chunkType", "PngInfo", "txtData", "l", "key", "ListUtils", "text", "hdr", "hdrBytes", "width", "height", "bits", "colorType", "compressionMethod", "filterMethod", "interlaceMethod", "computedCrc", "gammaInt", "sequenceNumber", "delayNum", "delayDen", "dispose", "blend", "frame", "PngFrame", "paletteIndex", "p3", "Color", "profile", "imageData", "totalSize", "dataBlocks", "len", "data", "offset", "f", "rgbChannelSet", "MemoryImage", "uncompressed", "error", "origW", "origH", "ICCProfileData", "img", "HdrImage", "animation", "FrameAnimation", "lastImage", "CopyIntoTransform", "init_ico_decoder", "__esmMin", "init_list_utils", "init_not_implemented_error", "init_hdr_image", "init_bitmap_file_header", "init_dib_decoder", "init_ico_bmp_info", "init_ico_info", "init_png_decoder", "init_input_buffer", "init_output_buffer", "import_uzip", "_PngEncoder", "PngEncoder", "init_png_encoder", "__esmMin", "init_blend_mode", "init_color_utils", "init_crc32", "init_dispose_mode", "init_rgb_channel_set", "init_text_codec", "init_output_buffer", "options", "_a", "_b", "type", "bytes", "typeCodeUnits", "TextCodec", "crc", "Crc32", "out", "chunk", "image", "oi", "row", "oindex", "ColorUtils", "x", "ar", "ag", "ab", "r", "g", "b", "aa", "a", "br", "bg", "bb", "xr", "xg", "xb", "ba", "xa", "c", "p", "pa", "pb", "pc", "cr", "cg", "cb", "pr", "pg", "ca", "width", "height", "OutputBuffer", "_", "iccp", "nameCodeUnits", "y", "keyword", "text", "keywordBytes", "textBytes", "filteredImage", "compressed", "key", "value", "fdat", "animation", "f", "init_win_encoder", "__esmMin", "init_image_error", "init_png_encoder", "init_output_buffer", "init_ico_encoder", "__esmMin", "init_win_encoder", "ComponentData", "init_component_data", "__esmMin", "hSamples", "maxHSamples", "vSamples", "maxVSamples", "lines", "Jpeg", "init_jpeg", "__esmMin", "JpegAdobe", "init_jpeg_adobe", "__esmMin", "version", "flags0", "flags1", "transformCode", "JpegComponent", "init_jpeg_component", "__esmMin", "hSamples", "vSamples", "quantizationTableList", "quantizationIndex", "v", "blocks", "blocksPerLine", "blocksPerColumn", "JpegFrame", "init_jpeg_frame", "__esmMin", "components", "componentsOrder", "extended", "progressive", "precision", "scanLines", "samplesPerLine", "blocksPerLineForMcu", "blocksPerColumnForMcu", "blocks", "ic", "line", "ir", "_", "component", "blocksPerLine", "blocksPerColumn", "JpegHuffman", "init_jpeg_huffman", "__esmMin", "JpegInfo", "init_jpeg_info", "__esmMin", "width", "height", "JpegJfif", "init_jpeg_jfif", "__esmMin", "thumbWidth", "thumbHeight", "majorVersion", "minorVersion", "densityUnits", "xDensity", "yDensity", "thumbData", "JpegQuantize", "init_jpeg_quantize", "__esmMin", "init_bit_operators", "init_color_utils", "init_exif_data", "init_memory_image", "init_rgb_channel_set", "init_image_error", "i", "quantizationTable", "coefBlock", "dataOut", "dataIn", "p", "dctClipOffset", "dctClipLength", "COS_1", "SIN_1", "COS_3", "SIN_3", "COS_6", "SIN_6", "SQRT_2", "SQRT_1D2", "row", "t", "BitOperators", "v0", "v1", "v2", "v3", "v4", "v7", "v5", "v6", "col", "jpeg", "_a", "orientation", "flipWidthHeight", "width", "height", "image", "MemoryImage", "key", "value", "ExifData", "component1", "component2", "component3", "component4", "component1Line", "component2Line", "component3Line", "component4Line", "offset", "Y", "Cb", "Cr", "K", "C", "M", "Ye", "R", "G", "B", "colorTransform", "h1", "w1", "lines", "hShift1", "vShift1", "y", "y1", "x", "x1", "c", "ColorUtils", "lines1", "lines2", "lines3", "hShift2", "vShift2", "hShift3", "vShift3", "y2", "y3", "x2", "x3", "ImageError", "lines4", "hShift4", "vShift4", "y4", "x4", "JpegScan", "init_jpeg_scan", "__esmMin", "init_image_error", "init_jpeg", "input", "frame", "components", "spectralStart", "spectralEnd", "successivePrev", "successive", "resetInterval", "nextByte", "ImageError", "tree", "node", "bit", "length", "n", "len", "component", "zz", "t", "diff", "k", "rs", "s", "r", "z", "Jpeg", "_", "e", "decodeFn", "mcu", "row", "col", "mcuRow", "mcuCol", "blockRow", "blockCol", "numCols", "componentsLength", "mcuExpected", "h", "v", "i", "j", "m1", "m2", "_JpegData", "JpegData", "init_jpeg_data", "__esmMin", "init_exif_data", "init_list_utils", "init_image_error", "init_input_buffer", "init_component_data", "init_jpeg", "init_jpeg_adobe", "init_jpeg_component", "init_jpeg_frame", "init_jpeg_huffman", "init_jpeg_info", "init_jpeg_jfif", "init_jpeg_quantize", "init_jpeg_scan", "ExifData", "Jpeg", "marker", "ImageError", "block", "length", "bytes", "InputBuffer", "soiCheck", "hasSOF", "hasSOS", "sectionByteSize", "info", "JpegInfo", "i", "component", "ComponentData", "JpegQuantize", "format", "offset", "initialBlockLength", "buffer", "num", "den", "bytesRead", "codeLengths", "values", "k", "code", "JpegHuffman", "p", "j", "q", "blocksPerLine", "blocksPerColumn", "samplesPerLine", "R", "r", "lines", "l", "blockRow", "scanLine", "blockCol", "sample", "line", "val", "c", "nesting", "numDirEntries", "maxFormats", "bytesPerFormat", "di", "tag", "components", "byteCount", "rawData", "ListUtils", "EXIF_TAG", "saveEndian", "alignment", "appData", "majorVersion", "minorVersion", "densityUnits", "xDensity", "yDensity", "thumbWidth", "thumbHeight", "thumbSize", "thumbData", "JpegJfif", "version", "flags0", "flags1", "transformCode", "JpegAdobe", "_", "n", "prec", "tableData", "tmp", "extended", "progressive", "precision", "scanLines", "numComponents", "componentsOrder", "componentId", "x", "h", "qId", "JpegComponent", "JpegFrame", "index", "bits", "count", "huffmanValues", "ht", "id", "dcTableNumber", "acTableNumber", "spectralStart", "spectralEnd", "successiveApproximation", "Ah", "Al", "JpegScan", "init_jpeg_decoder", "__esmMin", "init_frame_animation", "init_image_error", "init_hdr_image", "init_jpeg_data", "init_input_buffer", "_JpegEncoder", "JpegEncoder", "init_jpeg_encoder", "__esmMin", "init_clamp", "init_jpeg", "init_output_buffer", "quality", "nrcodes", "stdTable", "codevalue", "posInTable", "HT", "k", "j", "index", "fp", "marker", "out", "Jpeg", "exif", "rawData", "width", "height", "i", "l", "m", "n", "o", "p", "nrlower", "nrupper", "cat", "nr", "nrneg", "q", "Clamp", "sf", "YQT", "t", "UVQT", "u", "aasf", "row", "col", "data", "fdtbl", "dataOff", "I8", "I64", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "tmp0", "tmp7", "tmp1", "tmp6", "tmp2", "tmp5", "tmp3", "tmp4", "tmp10", "tmp13", "tmp11", "tmp12", "z1", "z5", "z2", "z4", "z3", "z11", "z13", "tmp0p2", "tmp7p2", "tmp1p2", "tmp6p2", "tmp2p2", "tmp5p2", "tmp3p2", "tmp4p2", "tmp10p2", "tmp13p2", "tmp11p2", "tmp12p2", "z1p2", "z5p2", "z2p2", "z4p2", "z3p2", "z11p2", "z13p2", "fDCTQuant", "bits", "value", "posval", "CDU", "DC", "HTAC", "HTDC", "EOB", "M16zeroes", "I16", "I63", "DU_DCT", "dc", "pos", "Diff", "end0pos", "startpos", "nrzeroes", "lng", "nrmarker", "image", "OutputBuffer", "DCY", "DCU", "DCV", "imageData", "quadWidth", "y", "x", "start", "r", "g", "b", "fillBits", "_", "init_quantizer", "__esmMin", "init_src", "__esmMin", "init_bmp_decoder", "init_bmp_encoder", "init_gif_decoder", "init_gif_encoder", "init_ico_decoder", "init_ico_encoder", "init_jpeg_decoder", "init_jpeg_encoder", "init_png_decoder", "init_png_encoder", "init_bit_operators", "init_blend_mode", "init_clamp", "init_color_channel", "init_color_model", "init_color_utils", "init_color", "init_crc32", "init_dispose_mode", "init_exif_data", "init_frame_animation", "init_frame_type", "init_icc_profile_data", "init_iccp_compression_mode", "init_list_utils", "init_memory_image", "init_rgb_channel_set", "init_text_codec", "init_draw_pixel", "init_copy_rotate", "__esmMin", "init_memory_image", "init_rgb_channel_set", "init_interpolation", "init_flip_direction", "__esmMin", "init_flip", "__esmMin", "init_flip_direction", "init_bake_orientation", "__esmMin", "init_exif_data", "init_memory_image", "init_copy_rotate", "init_flip", "init_flip_direction", "init_copy_resize", "__esmMin", "init_color_utils", "init_memory_image", "init_image_error", "init_interpolation", "init_bake_orientation", "require_UZIP", "__commonJSMin", "exports", "module", "init_bit_operators", "init_blend_mode", "init_clamp", "init_color_channel", "init_color_model", "init_color_utils", "init_color", "init_crc32", "init_dispose_mode", "init_exif_data", "init_frame_animation", "init_frame_type", "init_icc_profile_data", "init_iccp_compression_mode", "init_list_utils", "init_memory_image", "init_rgb_channel_set", "init_text_codec", "init_typings", "init_draw_pixel", "init_image_error", "init_not_implemented_error", "init_bmp_decoder", "init_bmp_encoder", "init_bitmap_compression_mode", "init_bitmap_file_header", "init_bmp_info", "init_decode_info", "init_decoder", "init_dib_decoder", "init_encoder", "init_gif_decoder", "init_gif_encoder", "init_gif_color_map", "init_gif_image_desc", "init_gif_info", "init_ico_decoder", "init_ico_encoder", "init_ico_bmp_info", "init_ico_info_image", "init_ico_info", "init_jpeg_decoder", "init_jpeg_encoder", "init_component_data", "init_jpeg_adobe", "init_jpeg_component", "init_jpeg_data", "init_jpeg_frame", "init_jpeg_huffman", "init_jpeg_info", "init_jpeg_jfif", "init_jpeg_quantize", "init_jpeg_scan", "init_jpeg", "init_png_decoder", "init_png_encoder", "init_png_frame", "init_png_info", "init_dither_kernel", "init_dither_pixel", "init_input_buffer", "init_interpolation", "init_neural_quantizer", "init_output_buffer", "init_quantizer", "init_win_encoder", "init_half", "init_hdr_image", "init_hdr_slice", "init_src", "init_bake_orientation", "init_copy_into", "init_copy_resize", "init_copy_rotate", "init_flip_direction", "init_flip", "UZIP", "buf", "onlyNames", "rUs", "rUi", "o", "out", "data", "eocd", "cnu", "cnt", "csize", "coffs", "i", "sign", "crc32", "usize", "nl", "el", "cl", "roff", "ver", "gpflg", "cmpr", "time", "nlen", "elen", "name", "file", "CMF", "FLG", "CM", "CINFO", "opts", "off", "crc", "obj", "noCmpr", "tot", "wUi", "wUs", "zpd", "p", "cpr", "fof", "ioff", "fn", "ext", "t", "tab", "n", "c", "k", "len", "b", "l", "a", "end", "eend", "buff", "s", "ns", "str", "strl", "ci", "code", "opos", "lvl", "opt", "U", "goodIndex", "hash", "putsE", "pos", "cvrd", "dlen", "lits", "strt", "prev", "li", "lc", "bs", "ebits", "nc", "nmch", "nmci", "ii", "mch", "dst", "lgi", "dgi", "nice", "chain", "pi", "dif", "tl", "td", "dlim", "maxd", "j", "ei", "curd", "oi", "BFINAL", "o0", "l0", "putsF", "T", "ML", "MD", "MH", "numl", "numd", "numh", "lset", "dset", "cstSize", "fxdSize", "dynSize", "BTYPE", "ltree", "dtree", "si", "qb", "qc", "p8", "tree", "hst", "set", "rst", "rsl", "nxt", "nnxt", "prv", "lz", "zc", "MAXL", "list", "hl", "l2", "lit", "i0", "i1", "i2", "maxl", "d", "dps", "bCost", "dbt", "od", "v", "arr", "ch", "u8", "F", "bitsF", "bitsE", "decodeTiny", "makeCodes", "codes2map", "get17", "noBuf", "HLIT", "HDIST", "HCLEN", "lmap", "dmap", "ppos", "mx0", "mx1", "ebs", "dcode", "dlit", "dbs", "bl", "nbuf", "LL", "ll", "ni", "src", "mx", "MAX_BITS", "max_code", "bits", "bl_count", "next_code", "map", "r15", "val", "rest", "p0", "imb", "dt", "length", "u16", "u32", "x", "pushV", "tgt", "sv", "import_uzip", "ICCProfileData", "init_icc_profile_data", "__esmMin", "init_iccp_compression_mode", "init_list_utils", "name", "compression", "data", "other", "ListUtils", "init_bit_operators", "init_blend_mode", "init_clamp", "init_color_channel", "init_color_model", "init_color_utils", "init_color", "init_crc32", "init_dispose_mode", "init_exif_data", "init_frame_animation", "init_frame_type", "init_icc_profile_data", "init_iccp_compression_mode", "init_list_utils", "init_memory_image", "init_rgb_channel_set", "init_text_codec", "init_typings", "init_draw_pixel", "init_image_error", "init_not_implemented_error", "init_bmp_decoder", "init_bmp_encoder", "init_bitmap_compression_mode", "init_bitmap_file_header", "init_bmp_info", "init_decode_info", "init_decoder", "init_dib_decoder", "init_encoder", "init_gif_decoder", "init_gif_encoder", "init_gif_color_map", "init_gif_image_desc", "init_gif_info", "init_ico_decoder", "init_ico_encoder", "init_ico_bmp_info", "init_ico_info_image", "init_ico_info", "init_jpeg_decoder", "init_jpeg_encoder", "init_component_data", "init_jpeg_adobe", "init_jpeg_component", "init_jpeg_data", "init_jpeg_frame", "init_jpeg_huffman", "init_jpeg_info", "init_jpeg_jfif", "init_jpeg_quantize", "init_jpeg_scan", "init_jpeg", "init_png_decoder", "init_png_encoder", "init_png_frame", "init_png_info", "init_dither_kernel", "init_dither_pixel", "init_input_buffer", "init_interpolation", "init_neural_quantizer", "init_output_buffer", "init_quantizer", "init_win_encoder", "init_half", "init_hdr_image", "init_hdr_slice", "init_src", "init_bake_orientation", "init_copy_into", "init_copy_resize", "init_copy_rotate", "init_flip_direction", "init_flip"]
}
