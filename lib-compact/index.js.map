{
  "version": 3,
  "sources": ["../src/color/channel-order.ts", "../src/color/channel.ts", "../src/error/lib-error.ts", "../src/common/math-utils.ts", "../src/common/rational.ts", "../src/common/array-utils.ts", "../src/common/bit-utils.ts", "../src/common/float16.ts", "../src/color/format.ts", "../src/color/color-float32.ts", "../src/color/color-float64.ts", "../src/color/color-int16.ts", "../src/color/color-int32.ts", "../src/color/color-int8.ts", "../src/color/color-uint1.ts", "../src/color/color-uint16.ts", "../src/color/color-uint2.ts", "../src/color/color-uint32.ts", "../src/color/color-uint4.ts", "../src/color/color-uint8.ts", "../src/color/color-utils.ts", "../src/color/color-float16.ts", "../src/color/color-rgb8.ts", "../src/color/color-rgba8.ts", "../src/color/color.ts", "../src/common/crc32.ts", "../src/common/string-utils.ts", "../src/common/input-buffer.ts", "../src/common/interpolation.ts", "../src/common/line.ts", "../src/common/output-buffer.ts", "../src/common/point.ts", "../src/common/random-utils.ts", "../src/common/rectangle.ts", "../src/common/typings.ts", "../src/draw/blend-mode.ts", "../src/draw/circle-quadrant.ts", "../src/image/image-utils.ts", "../src/draw/draw.ts", "../src/exif/exif-entry.ts", "../src/exif/ifd-value-type.ts", "../src/exif/exif-tag.ts", "../src/exif/ifd-value/ifd-value.ts", "../src/exif/ifd-value/ifd-ascii-value.ts", "../src/exif/ifd-value/ifd-short-value.ts", "../src/exif/ifd-value/ifd-rational-value.ts", "../src/exif/ifd-value/ifd-byte-value.ts", "../src/exif/ifd-value/ifd-long-value.ts", "../src/exif/ifd-value/ifd-sbyte-value.ts", "../src/exif/ifd-value/ifd-undefined-value.ts", "../src/exif/ifd-value/ifd-sshort-value.ts", "../src/exif/ifd-value/ifd-slong-value.ts", "../src/exif/ifd-value/ifd-srational-value.ts", "../src/exif/ifd-value/ifd-single-value.ts", "../src/exif/ifd-value/ifd-double-value.ts", "../src/exif/ifd-directory.ts", "../src/exif/ifd-container.ts", "../src/exif/exif-data.ts", "../src/filter/dither-kernel.ts", "../src/image/frame-type.ts", "../src/image/pixel-float16.ts", "../src/image/pixel-range-iterator.ts", "../src/image/image-data-float16.ts", "../src/image/pixel-float32.ts", "../src/image/image-data-float32.ts", "../src/image/pixel-float64.ts", "../src/image/image-data-float64.ts", "../src/image/pixel-int16.ts", "../src/image/image-data-int16.ts", "../src/image/pixel-int32.ts", "../src/image/image-data-int32.ts", "../src/image/pixel-int8.ts", "../src/image/image-data-int8.ts", "../src/image/pixel-uint1.ts", "../src/image/image-data-uint1.ts", "../src/image/pixel-uint16.ts", "../src/image/image-data-uint16.ts", "../src/image/pixel-uint2.ts", "../src/image/image-data-uint2.ts", "../src/image/pixel-uint32.ts", "../src/image/image-data-uint32.ts", "../src/image/pixel-uint4.ts", "../src/image/image-data-uint4.ts", "../src/image/pixel-uint8.ts", "../src/image/image-data-uint8.ts", "../src/image/palette-float16.ts", "../src/image/palette-float32.ts", "../src/image/palette-float64.ts", "../src/image/palette-int16.ts", "../src/image/palette-int32.ts", "../src/image/palette-int8.ts", "../src/image/palette-uint16.ts", "../src/image/palette-uint32.ts", "../src/image/palette-uint8.ts", "../src/image/pixel-undefined.ts", "../src/image/pixel.ts", "../src/image/image.ts", "../src/image/neural-quantizer.ts", "../src/image/heap-node.ts", "../src/image/octree-node.ts", "../src/image/octree-quantizer.ts", "../src/filter/noise-type.ts", "../src/filter/pixelate-mode.ts", "../src/filter/quantize-method.ts", "../src/filter/separable-kernel.ts", "../src/filter/filter.ts", "../src/formats/bmp/bmp-file-header.ts", "../src/formats/bmp/bmp-compression-mode.ts", "../src/formats/bmp/bmp-info.ts", "../src/formats/bmp-decoder.ts", "../src/formats/bmp-encoder.ts", "../src/formats/decode-info.ts", "../src/formats/decoder.ts", "../src/formats/dib-decoder.ts", "../src/formats/encoder.ts", "../src/formats/gif/gif-color-map.ts", "../src/formats/gif/gif-image-desc.ts", "../src/formats/gif/gif-info.ts", "../src/formats/gif-decoder.ts", "../src/image/quantizer-type.ts", "../src/formats/gif-encoder.ts", "../src/formats/ico/ico-bmp-info.ts", "../src/formats/ico/ico-info-image.ts", "../src/formats/ico/ico-type.ts", "../src/formats/ico/ico-info.ts", "../src/formats/png/png-filter-type.ts", "../src/formats/png/png-color-type.ts", "../src/formats/png-encoder.ts", "../src/formats/win-encoder.ts", "../src/formats/ico-encoder.ts", "../src/formats/jpeg/jpeg-component-data.ts", "../src/formats/jpeg/jpeg-adobe.ts", "../src/formats/jpeg/jpeg-component.ts", "../src/formats/jpeg/jpeg-frame.ts", "../src/formats/jpeg/jpeg-huffman.ts", "../src/formats/jpeg/jpeg-info.ts", "../src/formats/jpeg/jpeg-jfif.ts", "../src/formats/jpeg/jpeg-quantize.ts", "../src/formats/jpeg/huffman-node.ts", "../src/formats/jpeg/huffman-parent.ts", "../src/formats/jpeg/huffman-value.ts", "../src/formats/jpeg/jpeg-marker.ts", "../src/formats/jpeg/jpeg-scan.ts", "../src/formats/jpeg/jpeg-data.ts", "../src/formats/jpeg-decoder.ts", "../src/formats/jpeg-encoder.ts", "../src/formats/jpeg/jpeg-utils.ts", "../src/formats/png/png-blend-mode.ts", "../src/formats/png/png-dispose-mode.ts", "../src/formats/png/png-frame.ts", "../src/formats/png/png-info.ts", "../src/formats/tga/tga-image-type.ts", "../src/formats/tga/tga-info.ts", "../src/formats/tga-decoder.ts", "../src/formats/tga-encoder.ts", "../src/formats/tiff/tiff-bit-reader.ts", "../src/formats/tiff/tiff-compression.ts", "../src/formats/tiff/tiff-entry.ts", "../src/formats/tiff/tiff-fax-decoder.ts", "../src/formats/tiff/tiff-format.ts", "../src/formats/tiff/tiff-image-type.ts", "../src/formats/tiff/tiff-lzw-decoder.ts", "../src/formats/tiff/tiff-photometric-type.ts", "../src/formats/tiff/tiff-image.ts", "../src/formats/tiff/tiff-info.ts", "../src/formats/tiff-decoder.ts", "../src/formats/tiff-encoder.ts", "../src/image/icc-profile-compression.ts", "../src/image/icc-profile.ts", "../src/image/image-data.ts", "../src/image/palette.ts", "../src/image/quantizer.ts", "../src/transform/flip-direction.ts", "../src/transform/trim-side.ts", "../src/transform/trim-mode.ts", "../src/transform/transform.ts", "../src/index.ts", "../node_modules/uzip/UZIP.js", "../src/formats/png-decoder.ts", "../src/formats/ico-decoder.ts", "<stdin>"],
  "sourcesContent": ["/** @format */\n\nexport enum ChannelOrder {\n  rgba,\n  bgra,\n  abgr,\n  argb,\n  rgb,\n  bgr,\n  grayAlpha,\n  red,\n}\n\n/**\n * The number of channels for each ChannelOrder.\n */\nexport const ChannelOrderLength = new Map<ChannelOrder, number>([\n  [ChannelOrder.rgba, 4],\n  [ChannelOrder.bgra, 4],\n  [ChannelOrder.abgr, 4],\n  [ChannelOrder.argb, 4],\n  [ChannelOrder.rgb, 3],\n  [ChannelOrder.bgr, 3],\n  [ChannelOrder.grayAlpha, 2],\n  [ChannelOrder.red, 1],\n]);\n", "/** @format */\n\n/**\n * A channel of a color\n */\nexport enum Channel {\n  /**\n   * Red channel\n   */\n  red,\n  /**\n   * Green channel\n   */\n  green,\n  /**\n   * Blue channel\n   */\n  blue,\n  /**\n   * Alpha channel\n   */\n  alpha,\n  /**\n   * Luminance is not an actual channel, it is the brightness value of the color.\n   */\n  luminance,\n}\n", "/** @format */\n\n/**\n * An Error thrown when there was a problem in the library.\n */\nexport class LibError extends Error {\n  public toString(): string {\n    return `${this.constructor.name} (${this.message})`;\n  }\n}\n", "/** @format */\n\nexport abstract class MathUtils {\n  public static fract(x: number): number {\n    return x - Math.floor(x);\n  }\n\n  public static smoothStep(edge0: number, edge1: number, x: number): number {\n    const t0 = (x - edge0) / (edge1 - edge0);\n    const t = MathUtils.clamp(t0, 0, 1);\n    return t * t * (3 - 2 * t);\n  }\n\n  public static mix(x: number, y: number, a: number): number {\n    return x * (1 - a) + y * a;\n  }\n\n  public static sign(x: number): number {\n    return x < 0 ? -1 : x > 0 ? 1 : 0;\n  }\n\n  public static step(edge: number, x: number): number {\n    return x < edge ? 0 : 1;\n  }\n\n  public static length3(x: number, y: number, z: number): number {\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Returns the greatest common divisor of **x** and **y**.\n   */\n  public static gcd(x: number, y: number) {\n    let _x = Math.abs(x);\n    let _y = Math.abs(y);\n    while (_y) {\n      const t = _y;\n      _y = _x % _y;\n      _x = t;\n    }\n    return _x;\n  }\n\n  /**\n   * Clamp **num** to [**low**, **high**]\n   */\n  public static clamp(num: number, low: number, high: number) {\n    return Math.max(low, Math.min(num, high));\n  }\n\n  /**\n   * Clamp **num** to [**low**, **high**] and truncate\n   */\n  public static clampInt(num: number, low: number, high: number): number {\n    return Math.trunc(MathUtils.clamp(num, low, high));\n  }\n\n  /**\n   * Clamp **num** to [0, 255] and truncate\n   */\n  public static clampInt255(num: number): number {\n    return Math.trunc(MathUtils.clamp(num, 0, 255));\n  }\n}\n", "/** @format */\n\nimport { MathUtils } from './math-utils';\nimport { StringUtils } from './string-utils';\n\nexport class Rational {\n  private _numerator: number;\n  public get numerator(): number {\n    return this._numerator;\n  }\n\n  private _denominator: number;\n  public get denominator(): number {\n    return this._denominator;\n  }\n\n  public get toInt(): number {\n    return this.denominator !== 0\n      ? Math.trunc(this.numerator / this.denominator)\n      : 0;\n  }\n\n  public get toDouble(): number {\n    return this.denominator !== 0 ? this.numerator / this.denominator : 0;\n  }\n\n  constructor(numerator: number, denominator: number) {\n    this._numerator = numerator;\n    this._denominator = denominator;\n  }\n\n  public simplify(): void {\n    const d = MathUtils.gcd(this.numerator, this.denominator);\n    if (d !== 0) {\n      this._numerator = Math.trunc(this.numerator / d);\n      this._denominator = Math.trunc(this.denominator / d);\n    }\n  }\n\n  public equals(other: Rational) {\n    return (\n      this._numerator === other._numerator &&\n      this._denominator === other._denominator\n    );\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this._numerator}/${this._denominator})`;\n  }\n}\n", "/** @format */\n\nimport { LibError } from '../error/lib-error';\nimport { Rational } from './rational';\nimport { TypedArray } from './typings';\n\nexport abstract class ArrayUtils {\n  public static copyInt8(\n    from: Int8Array,\n    begin?: number,\n    end?: number\n  ): Int8Array {\n    return Int8Array.from(from.subarray(begin, end));\n  }\n\n  public static copyUint8(\n    from: Uint8Array,\n    begin?: number,\n    end?: number\n  ): Uint8Array {\n    return Uint8Array.from(from.subarray(begin, end));\n  }\n\n  public static copyInt16(\n    from: Int16Array,\n    begin?: number,\n    end?: number\n  ): Int16Array {\n    return Int16Array.from(from.subarray(begin, end));\n  }\n\n  public static copyUint16(\n    from: Uint16Array,\n    begin?: number,\n    end?: number\n  ): Uint16Array {\n    return Uint16Array.from(from.subarray(begin, end));\n  }\n\n  public static copyInt32(\n    from: Int32Array,\n    begin?: number,\n    end?: number\n  ): Int32Array {\n    return Int32Array.from(from.subarray(begin, end));\n  }\n\n  public static copyUint32(\n    from: Uint32Array,\n    begin?: number,\n    end?: number\n  ): Uint32Array {\n    return Uint32Array.from(from.subarray(begin, end));\n  }\n\n  public static copyFloat32(\n    from: Float32Array,\n    begin?: number,\n    end?: number\n  ): Float32Array {\n    return Float32Array.from(from.subarray(begin, end));\n  }\n\n  public static copyFloat64(\n    from: Float64Array,\n    begin?: number,\n    end?: number\n  ): Float64Array {\n    return Float64Array.from(from.subarray(begin, end));\n  }\n\n  public static copy(\n    from: TypedArray,\n    begin?: number,\n    end?: number\n  ): TypedArray {\n    if (from instanceof Int8Array) {\n      return ArrayUtils.copyInt8(from, begin, end);\n    } else if (from instanceof Uint8Array) {\n      return ArrayUtils.copyUint8(from, begin, end);\n    } else if (from instanceof Int16Array) {\n      return ArrayUtils.copyInt16(from, begin, end);\n    } else if (from instanceof Uint16Array) {\n      return ArrayUtils.copyUint16(from, begin, end);\n    } else if (from instanceof Int32Array) {\n      return ArrayUtils.copyInt32(from, begin, end);\n    } else if (from instanceof Uint32Array) {\n      return ArrayUtils.copyUint32(from, begin, end);\n    } else if (from instanceof Float32Array) {\n      return ArrayUtils.copyFloat32(from, begin, end);\n    } else if (from instanceof Float64Array) {\n      return ArrayUtils.copyFloat64(from, begin, end);\n    }\n    throw new LibError('Unknown array type');\n  }\n\n  public static copyRange<T extends TypedArray>(\n    from: T,\n    fromStart: number,\n    fromEnd: number,\n    to: T,\n    toStart: number\n  ): void {\n    const viewFrom = from.subarray(fromStart, fromEnd);\n    to.set(viewFrom, toStart);\n  }\n\n  public static fill<T>(length: number, value: T): T[] {\n    const a = new Array<T>(length);\n    return a.fill(value);\n  }\n\n  public static generate<T>(length: number, func: (index: number) => T): T[] {\n    const a = new Array<T>(length);\n    for (let i = 0; i < length; ++i) {\n      a[i] = func(i);\n    }\n    return a;\n  }\n\n  public static equals(\n    a1: TypedArray | unknown[],\n    a2: TypedArray | unknown[]\n  ): boolean {\n    if (a1 === a2) return true;\n    if (a1.length !== a2.length) return false;\n    for (let i = 0, l = a1.length; i < l; i++) {\n      if (\n        ArrayUtils.isNumArrayOrTypedArray(a1[i]) &&\n        ArrayUtils.isNumArrayOrTypedArray(a2[i])\n      ) {\n        if (\n          !ArrayUtils.equals(\n            a1[i] as TypedArray | unknown[],\n            a2[i] as TypedArray | unknown[]\n          )\n        )\n          return false;\n      } else if (a1[i] !== a2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static equalsRationalArray(a1: Rational[], a2: Rational[]): boolean {\n    if (a1 === a2) return true;\n    if (a1.length !== a2.length) return false;\n    for (let i = 0, l = a1.length; i < l; i++) {\n      if (!a1[i].equals(a2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static getNumEnumValues<T extends object>(t: T): number[] {\n    return Object.values(t).filter((v) => typeof v === 'number');\n  }\n\n  public static isNumArrayOrTypedArray(obj: unknown) {\n    return Boolean(\n      obj &&\n        typeof obj === 'object' &&\n        ((Array.isArray(obj) &&\n          (obj as Array<unknown>).every((v) => typeof v === 'number')) ||\n          (ArrayBuffer.isView(obj) && !(obj instanceof DataView)))\n    );\n  }\n\n  public static isArrayOfRational(obj: unknown) {\n    return Boolean(\n      obj &&\n        typeof obj === 'object' &&\n        Array.isArray(obj) &&\n        (obj as Array<unknown>).every((v) => v instanceof Rational)\n    );\n  }\n}\n", "/** @format */\n\nexport abstract class BitUtils {\n  private static readonly _uint8 = new Uint8Array(1);\n  private static readonly _uint8ToInt8 = new Int8Array(BitUtils._uint8.buffer);\n\n  private static readonly _int8 = new Int8Array(1);\n  private static readonly _int8ToUint8 = new Uint8Array(BitUtils._int8.buffer);\n\n  private static readonly _uint16 = new Uint16Array(1);\n  private static readonly _uint16ToInt16 = new Int16Array(\n    BitUtils._uint16.buffer\n  );\n\n  private static readonly _int16 = new Int16Array(1);\n  private static readonly _int16ToUint16 = new Uint16Array(\n    BitUtils._int16.buffer\n  );\n\n  private static readonly _uint32 = new Uint32Array(1);\n  private static readonly _uint32ToInt32 = new Int32Array(\n    BitUtils._uint32.buffer\n  );\n  private static readonly _uint32ToFloat32 = new Float32Array(\n    BitUtils._uint32.buffer\n  );\n\n  private static readonly _int32 = new Int32Array(1);\n  private static readonly _int32ToUint32 = new Uint32Array(\n    BitUtils._int32.buffer\n  );\n\n  private static readonly _float32 = new Float32Array(1);\n  private static readonly _float32ToUint32 = new Uint32Array(\n    BitUtils._float32.buffer\n  );\n\n  private static readonly _uint64 = new BigUint64Array(1);\n  private static readonly _uint64ToFloat64 = new Float64Array(\n    BitUtils._uint64.buffer\n  );\n\n  private static readonly _reverseByteTable = [\n    0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0,\n    0x30, 0xb0, 0x70, 0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,\n    0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04, 0x84, 0x44, 0xc4,\n    0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,\n    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc,\n    0x3c, 0xbc, 0x7c, 0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,\n    0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a, 0x8a, 0x4a, 0xca,\n    0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,\n    0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6,\n    0x36, 0xb6, 0x76, 0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,\n    0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe, 0x01, 0x81, 0x41, 0xc1,\n    0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,\n    0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9,\n    0x39, 0xb9, 0x79, 0xf9, 0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,\n    0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5, 0x0d, 0x8d, 0x4d, 0xcd,\n    0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,\n    0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3,\n    0x33, 0xb3, 0x73, 0xf3, 0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,\n    0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb, 0x07, 0x87, 0x47, 0xc7,\n    0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,\n    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf,\n    0x3f, 0xbf, 0x7f, 0xff,\n  ];\n\n  /**\n   * Count the consecutive zero bits (trailing) on the right in parallel\n   * https://graphics.stanford.edu/~seander/bithacks.html#ZerosOnRightParallel\n   */\n  public static countTrailingZeroBits(v: number): number {\n    let c = 32;\n    const _v = v & -v;\n    if (_v !== 0) c--;\n    if ((_v & 0x0000ffff) !== 0) c -= 16;\n    if ((_v & 0x00ff00ff) !== 0) c -= 8;\n    if ((_v & 0x0f0f0f0f) !== 0) c -= 4;\n    if ((_v & 0x33333333) !== 0) c -= 2;\n    if ((_v & 0x55555555) !== 0) c -= 1;\n    return c;\n  }\n\n  public static reverseByte(x: number): number {\n    return this._reverseByteTable[x];\n  }\n\n  public static signed(bits: number, value: number) {\n    return value & (1 << (bits - 1)) ? value - (1 << bits) : value;\n  }\n\n  public static shiftR(v: number, n: number): number {\n    return BitUtils.signed(32, v >> n);\n  }\n\n  public static shiftL(v: number, n: number): number {\n    return BitUtils.signed(32, v << n);\n  }\n\n  /**\n   * Binary conversion of a uint8 to an int8. This is equivalent in C to\n   * typecasting an unsigned char to a char.\n   */\n  public static uint8ToInt8(d: number): number {\n    this._uint8[0] = d;\n    return this._uint8ToInt8[0];\n  }\n\n  /**\n   * Binary conversion of an int8 to a uint8.\n   */\n  public static int8ToUint8(d: number): number {\n    this._int8[0] = d;\n    return this._int8ToUint8[0];\n  }\n\n  /**\n   *  Binary conversion of a uint16 to an int16. This is equivalent in C to\n   * typecasting an unsigned short to a short.\n   */\n  public static uint16ToInt16(d: number): number {\n    this._uint16[0] = d;\n    return this._uint16ToInt16[0];\n  }\n\n  /**\n   * Binary conversion of an int16 to a uint16. This is equivalent in C to\n   *  typecasting a short to an unsigned short.\n   */\n  public static int16ToUint16(d: number): number {\n    this._int16[0] = d;\n    return this._int16ToUint16[0];\n  }\n\n  /**\n   * Binary conversion of a uint32 to an int32. This is equivalent in C to\n   *  typecasting an unsigned int to signed int.\n   */\n  public static uint32ToInt32(d: number): number {\n    this._uint32[0] = d;\n    return this._uint32ToInt32[0];\n  }\n\n  /**\n   * Binary conversion of a uint32 to an float32. This is equivalent in C to\n   * typecasting an unsigned int to float.\n   */\n  public static uint32ToFloat32(d: number): number {\n    this._uint32[0] = d;\n    return this._uint32ToFloat32[0];\n  }\n\n  /**\n   * Binary conversion of a uint64 to an float64. This is equivalent in C to\n   * typecasting an unsigned long long to double.\n   */\n  public static uint64ToFloat64(d: bigint): number {\n    this._uint64[0] = d;\n    return this._uint64ToFloat64[0];\n  }\n\n  /**\n   * Binary conversion of an int32 to a uint32. This is equivalent in C to\n   * typecasting an int to an unsigned int.\n   */\n  public static int32ToUint32(d: number): number {\n    this._int32[0] = d;\n    return this._int32ToUint32[0];\n  }\n\n  /**\n   * Binary conversion of a float32 to an uint32. This is equivalent in C to\n   * typecasting a float to unsigned int.\n   */\n  public static float32ToUint32(d: number): number {\n    this._float32[0] = d;\n    return this._float32ToUint32[0];\n  }\n\n  public static debugBits32(value?: number): string {\n    if (value === undefined) {\n      return 'undefined';\n    }\n    const bitCount = 32;\n    let result = '';\n    for (let i = bitCount; i > -1; i--) {\n      result += (value & (1 << i)) === 0 ? '0' : '1';\n    }\n    return result;\n  }\n}\n", "/** @format */\n\nimport { BitUtils } from './bit-utils';\n\n/**\n * A 16-bit floating-point number, used by high-dynamic-range image formats\n * as a more efficient storage for floating-point values that don't require\n * full 32-bit precision. A list of Half floats can be stored in a\n * Uint16Array, and converted to a double using the **float16ToDouble** static\n * method.\n *\n * This class is derived from the OpenEXR library.\n */\nexport class Float16 {\n  private static _toFloatFloat32Data?: Float32Array;\n  private static _eLut: Uint16Array;\n\n  private static get _toFloatFloat32(): Float32Array {\n    return this._toFloatFloat32Data !== undefined\n      ? this._toFloatFloat32Data\n      : this.initialize();\n  }\n\n  public bits: number;\n\n  constructor(f?: number) {\n    this.bits = f !== undefined ? Float16.doubleToFloat16(f) : 0;\n  }\n\n  private static convert(i: number): number {\n    // Our floating point number, f, is represented by the bit\n    // pattern in integer i. Disassemble that bit pattern into\n    // the sign, s, the exponent, e, and the significand, m.\n    // Shift s into the position where it will go in in the\n    // resulting half number.\n    // Adjust e, accounting for the different exponent bias\n    // of float and half (127 versus 15).\n    const s = (i >> 16) & 0x00008000;\n    let e = ((i >> 23) & 0x000000ff) - (127 - 15);\n    let m = i & 0x007fffff;\n\n    // Now reassemble s, e and m into a half:\n    if (e <= 0) {\n      if (e < -10) {\n        // E is less than -10. The absolute value of f is\n        // less than HALF_MIN (f may be a small normalized\n        // float, a denormalized float or a zero).\n        //\n        // We convert f to a half zero with the same sign as f.\n        return s;\n      }\n\n      // E is between -10 and 0. F is a normalized float\n      // whose magnitude is less than HALF_NRM_MIN.\n      //\n      // We convert f to a denormalized half.\n\n      // Add an explicit leading 1 to the significand.\n\n      m |= 0x00800000;\n\n      // Round to m to the nearest (10+e)-bit value (with e between\n      // -10 and 0); in case of a tie, round to the nearest even value.\n      //\n      // Rounding may cause the significand to overflow and make\n      // our number normalized. Because of the way a half's bits\n      // are laid out, we don't have to treat this case separately;\n      // the code below will handle it correctly.\n\n      const t = 14 - e;\n      const a = (1 << (t - 1)) - 1;\n      const b = (m >> t) & 1;\n\n      m = (m + a + b) >> t;\n\n      // Assemble the half from s, e (zero) and m.\n      return s | m;\n    } else if (e === 0xff - (127 - 15)) {\n      if (m === 0) {\n        // F is an infinity; convert f to a half\n        // infinity with the same sign as f.\n        return s | 0x7c00;\n      } else {\n        // F is a NAN; we produce a half NAN that preserves\n        // the sign bit and the 10 leftmost bits of the\n        // significand of f, with one exception: If the 10\n        // leftmost bits are all zero, the NAN would turn\n        // into an infinity, so we have to set at least one\n        // bit in the significand.\n\n        m >>= 13;\n        return s | 0x7c00 | m | (m === 0 ? 1 : 0);\n      }\n    } else {\n      // E is greater than zero. F is a normalized float.\n      // We try to convert f to a normalized half.\n\n      // Round to m to the nearest 10-bit value. In case of\n      // a tie, round to the nearest even value.\n      m = m + 0x00000fff + ((m >> 13) & 1);\n\n      if ((m & 0x00800000) !== 0) {\n        // overflow in significand\n        m = 0;\n        // adjust exponent\n        e += 1;\n      }\n\n      // Handle exponent overflow\n\n      if (e > 30) {\n        // if this returns, the half becomes an\n        // infinity with the same sign as f\n        return s | 0x7c00;\n      }\n\n      // Assemble the half from s, e and m.\n      return s | (e << 10) | (m >> 13);\n    }\n  }\n\n  private static initialize(): Float32Array {\n    if (this._toFloatFloat32Data !== undefined) {\n      return this._toFloatFloat32Data;\n    }\n\n    const floatUint32Data = new Uint32Array(1 << 16);\n    this._toFloatFloat32Data = new Float32Array(floatUint32Data.buffer);\n    this._eLut = new Uint16Array(1 << 9);\n\n    // Init eLut\n    for (let i = 0; i < 0x100; i++) {\n      const e = (i & 0x0ff) - (127 - 15);\n\n      if (e <= 0 || e >= 30) {\n        // Special case\n        this._eLut[i] = 0;\n        this._eLut[i | 0x100] = 0;\n      } else {\n        // Common case - normalized half, no exponent overflow possible\n        this._eLut[i] = e << 10;\n        this._eLut[i | 0x100] = (e << 10) | 0x8000;\n      }\n    }\n\n    // Init toFloat\n    const iMax = 1 << 16;\n    for (let i = 0; i < iMax; i++) {\n      floatUint32Data[i] = this.halfToFloat(i);\n    }\n\n    return this._toFloatFloat32Data;\n  }\n\n  private static halfToFloat(y: number): number {\n    const s = (y >> 15) & 0x00000001;\n    let e = (y >> 10) & 0x0000001f;\n    let m = y & 0x000003ff;\n\n    if (e === 0) {\n      if (m === 0) {\n        // Plus or minus zero\n        return s << 31;\n      } else {\n        // Denormalized number -- re-normalize it\n        while ((m & 0x00000400) === 0) {\n          m <<= 1;\n          e -= 1;\n        }\n\n        e += 1;\n        m &= ~0x00000400;\n      }\n    } else if (e === 31) {\n      if (m === 0) {\n        // Positive or negative infinity\n        return (s << 31) | 0x7f800000;\n      } else {\n        // Nan -- preserve sign and significand bits\n        return (s << 31) | 0x7f800000 | (m << 13);\n      }\n    }\n\n    // Normalized number\n    e += 127 - 15;\n    m <<= 13;\n\n    // Assemble s, e and m.\n    return (s << 31) | (e << 23) | m;\n  }\n\n  public static from(other: Float16): Float16 {\n    const float16 = new Float16();\n    float16.bits = other.bits;\n    return float16;\n  }\n\n  public static fromBits(bits: number): Float16 {\n    const float16 = new Float16();\n    float16.bits = bits;\n    return float16;\n  }\n\n  public static float16ToDouble(bits: number): number {\n    return this._toFloatFloat32[bits];\n  }\n\n  public static doubleToFloat16(n: number): number {\n    const f = n;\n    const xI = BitUtils.float32ToUint32(f);\n    if (f === 0) {\n      // Common special case - zero.\n      // Preserve the zero's sign bit.\n      return xI >> 16;\n    }\n\n    if (this._toFloatFloat32Data === undefined) {\n      this.initialize();\n    }\n\n    // We extract the combined sign and exponent, e, from our\n    // floating-point number, f. Then we convert e to the sign\n    // and exponent of the half number via a table lookup.\n    //\n    // For the most common case, where a normalized half is produced,\n    // the table lookup returns a non-zero value; in this case, all\n    // we have to do is round f's significand to 10 bits and combine\n    // the result with e.\n    //\n    // For all other cases (overflow, zeroes, denormalized numbers\n    // resulting from underflow, infinities and NANs), the table\n    // lookup returns zero, and we call a longer, non-inline function\n    // to do the float-to-half conversion.\n    let e = (xI >> 23) & 0x000001ff;\n\n    e = this._eLut[e];\n\n    if (e !== 0) {\n      // Simple case - round the significand, m, to 10\n      // bits and combine it with the sign and exponent.\n      const m = xI & 0x007fffff;\n      return e + ((m + 0x00000fff + ((m >> 13) & 1)) >> 13);\n    }\n\n    // Difficult case - call a function.\n    return this.convert(xI);\n  }\n\n  /**\n   * Returns +Infinity.\n   */\n  public static posInf(): Float16 {\n    return Float16.fromBits(0x7c00);\n  }\n\n  /**\n   * Returns -Infinity.\n   */\n  public static negInf(): Float16 {\n    return Float16.fromBits(0xfc00);\n  }\n\n  /**\n   * Returns a NaN with the bit pattern 0111111111111111.\n   */\n  public static qNan(): Float16 {\n    return Float16.fromBits(0x7fff);\n  }\n\n  /**\n   * Returns a NaN with the bit pattern 0111110111111111.\n   */\n  public static sNan(): Float16 {\n    return Float16.fromBits(0x7dff);\n  }\n\n  public toDouble(): number {\n    return Float16._toFloatFloat32[this.bits];\n  }\n\n  /**\n   * Unary minus\n   */\n  public minus(): Float16 {\n    return Float16.fromBits(this.bits ^ 0x8000);\n  }\n\n  /**\n   * Addition operator for Half or num left operands.\n   */\n  public add(f: Float16 | number): Float16 {\n    const d =\n      f instanceof Float16 ? f.toDouble() : typeof f === 'number' ? f : 0;\n    return new Float16(this.toDouble() + d);\n  }\n\n  /**\n   * Subtraction operator for Half or num left operands.\n   */\n  public sub(f: Float16 | number): Float16 {\n    const d =\n      f instanceof Float16 ? f.toDouble() : typeof f === 'number' ? f : 0;\n    return new Float16(this.toDouble() - d);\n  }\n\n  /**\n   * Multiplication operator for Half or num left operands.\n   */\n  public mul(f: Float16 | number): Float16 {\n    const d =\n      f instanceof Float16 ? f.toDouble() : typeof f === 'number' ? f : 0;\n    return new Float16(this.toDouble() * d);\n  }\n\n  /**\n   * Division operator for Half or num left operands.\n   */\n  public div(f: Float16 | number): Float16 {\n    const d =\n      f instanceof Float16 ? f.toDouble() : typeof f === 'number' ? f : 0;\n    return new Float16(this.toDouble() / d);\n  }\n\n  /**\n   * Round to n-bit precision (n should be between 0 and 10).\n   * After rounding, the significand's 10-n least significant\n   * bits will be zero.\n   */\n  public round(n: number): Float16 {\n    if (n >= 10) {\n      return Float16.from(this);\n    }\n\n    // Disassemble h into the sign, s,\n    // and the combined exponent and significand, e.\n    const s = this.bits & 0x8000;\n    let e = this.bits & 0x7fff;\n\n    // Round the exponent and significand to the nearest value\n    // where ones occur only in the (10-n) most significant bits.\n    // Note that the exponent adjusts automatically if rounding\n    // up causes the significand to overflow.\n\n    e >>= 9 - n;\n    e += e & 1;\n    e <<= 9 - n;\n\n    // Check for exponent overflow.\n    if (e >= 0x7c00) {\n      // Overflow occurred - truncate instead of rounding.\n      e = this.bits;\n      e >>= 10 - n;\n      e <<= 10 - n;\n    }\n\n    // Put the original sign bit back.\n\n    return Float16.fromBits(s | e);\n  }\n\n  /**\n   * Returns true if h is a normalized number, a denormalized number or zero.\n   */\n  public isFinite(): boolean {\n    const e = (this.bits >> 10) & 0x001f;\n    return e < 31;\n  }\n\n  /**\n   * Returns true if h is a normalized number.\n   */\n  public isNormalized(): boolean {\n    const e = (this.bits >> 10) & 0x001f;\n    return e > 0 && e < 31;\n  }\n\n  /**\n   * Returns true if h is a denormalized number.\n   */\n  public isDenormalized(): boolean {\n    const e = (this.bits >> 10) & 0x001f;\n    const m = this.bits & 0x3ff;\n    return e === 0 && m !== 0;\n  }\n\n  /**\n   * Returns true if h is zero.\n   */\n  public isZero(): boolean {\n    return (this.bits & 0x7fff) === 0;\n  }\n\n  /**\n   * Returns true if h is a NaN.\n   */\n  public isNaN(): boolean {\n    const e = (this.bits >> 10) & 0x001f;\n    const m = this.bits & 0x3ff;\n    return e === 31 && m !== 0;\n  }\n\n  /**\n   * Returns true if h is a positive or a negative infinity.\n   */\n  public isInfinity(): boolean {\n    const e = (this.bits >> 10) & 0x001f;\n    const m = this.bits & 0x3ff;\n    return e === 31 && m === 0;\n  }\n\n  /**\n   * Returns true if the sign bit of h is set (negative).\n   */\n  public isNegative(): boolean {\n    return (this.bits & 0x8000) !== 0;\n  }\n}\n", "/** @format */\n\nimport { MathUtils } from '../common/math-utils';\nimport { LibError } from '../error/lib-error';\n\n/**\n * The format of a color or image.\n */\nexport enum Format {\n  uint1,\n  uint2,\n  uint4,\n  uint8,\n  uint16,\n  uint32,\n  int8,\n  int16,\n  int32,\n  float16,\n  float32,\n  float64,\n}\n\n/**\n * The format type of a color or image.\n */\nexport enum FormatType {\n  uint,\n  int,\n  float,\n}\n\nexport const FormatToFormatType = new Map<Format, FormatType>([\n  [Format.uint1, FormatType.uint],\n  [Format.uint2, FormatType.uint],\n  [Format.uint4, FormatType.uint],\n  [Format.uint8, FormatType.uint],\n  [Format.uint16, FormatType.uint],\n  [Format.uint32, FormatType.uint],\n  [Format.int8, FormatType.int],\n  [Format.int16, FormatType.int],\n  [Format.int32, FormatType.int],\n  [Format.float16, FormatType.float],\n  [Format.float32, FormatType.float],\n  [Format.float64, FormatType.float],\n]);\n\nexport const FormatSize = new Map<Format, number>([\n  [Format.uint1, 1],\n  [Format.uint2, 1],\n  [Format.uint4, 1],\n  [Format.uint8, 1],\n  [Format.uint16, 2],\n  [Format.uint32, 4],\n  [Format.int8, 1],\n  [Format.int16, 2],\n  [Format.int32, 4],\n  [Format.float16, 2],\n  [Format.float32, 4],\n  [Format.float64, 8],\n]);\n\nexport const FormatMaxValue = new Map<Format, number>([\n  [Format.uint1, 0x1],\n  [Format.uint2, 0x3],\n  [Format.uint4, 0xf],\n  [Format.uint8, 0xff],\n  [Format.uint16, 0xffff],\n  [Format.uint32, 0xffffffff],\n  [Format.int8, 0x7f],\n  [Format.int16, 0x7fff],\n  [Format.int32, 0x7fffffff],\n  [Format.float16, 1],\n  [Format.float32, 1],\n  [Format.float64, 1],\n]);\n\n/**\n * Convert a value from the **from** format to the **to** format.\n */\nexport function convertFormatValue(\n  value: number,\n  from: Format,\n  to: Format\n): number {\n  if (from === to) {\n    return value;\n  }\n\n  switch (from) {\n    case Format.uint1:\n      return value === 0 ? 0 : FormatMaxValue.get(to)!;\n    case Format.uint2:\n      switch (to) {\n        case Format.uint1:\n          return value === 0 ? 0 : 1;\n        case Format.uint2:\n          return value;\n        case Format.uint4:\n          return value * 5;\n        case Format.uint8:\n          return value * 75;\n        case Format.uint16:\n          return value * 21845;\n        case Format.uint32:\n          return value * 1431655765;\n        case Format.int8:\n          return value * 42;\n        case Format.int16:\n          return value * 10922;\n        case Format.int32:\n          return value * 715827882;\n        case Format.float16:\n        case Format.float32:\n        case Format.float64:\n          return value / 3;\n      }\n      break;\n    case Format.uint4:\n      switch (to) {\n        case Format.uint1:\n          return value === 0 ? 0 : 1;\n        case Format.uint2:\n          return Math.trunc(value) >> 1;\n        case Format.uint4:\n          return value;\n        case Format.uint8:\n          return value * 17;\n        case Format.uint16:\n          return value * 4369;\n        case Format.uint32:\n          return value * 286331153;\n        case Format.int8:\n          return value * 8;\n        case Format.int16:\n          return value * 2184;\n        case Format.int32:\n          return value * 143165576;\n        case Format.float16:\n        case Format.float32:\n        case Format.float64:\n          return value / 3;\n      }\n      break;\n    case Format.uint8:\n      switch (to) {\n        case Format.uint1:\n          return value === 0 ? 0 : 1;\n        case Format.uint2:\n          return Math.trunc(value) >> 6;\n        case Format.uint4:\n          return Math.trunc(value) >> 4;\n        case Format.uint8:\n          return value;\n        case Format.uint16:\n          return value * 257;\n        case Format.uint32:\n          return value * 16843009;\n        case Format.int8:\n          return Math.trunc(value) >> 1;\n        case Format.int16:\n          return value * 128;\n        case Format.int32:\n          return value * 8421504;\n        case Format.float16:\n        case Format.float32:\n        case Format.float64:\n          return value / 255;\n      }\n      break;\n    case Format.uint16:\n      switch (to) {\n        case Format.uint1:\n          return value === 0 ? 0 : 1;\n        case Format.uint2:\n          return Math.trunc(value) >> 14;\n        case Format.uint4:\n          return Math.trunc(value) >> 12;\n        case Format.uint8:\n          return Math.trunc(value) >> 8;\n        case Format.uint16:\n          return value;\n        case Format.uint32:\n          return Math.trunc(value) << 8;\n        case Format.int8:\n          return Math.trunc(value) >> 9;\n        case Format.int16:\n          return Math.trunc(value) >> 1;\n        case Format.int32:\n          return value * 524296;\n        case Format.float16:\n        case Format.float32:\n        case Format.float64:\n          return value / 0xffff;\n      }\n      break;\n    case Format.uint32:\n      switch (to) {\n        case Format.uint1:\n          return value === 0 ? 0 : 1;\n        case Format.uint2:\n          return Math.trunc(value) >> 30;\n        case Format.uint4:\n          return Math.trunc(value) >> 28;\n        case Format.uint8:\n          return Math.trunc(value) >> 24;\n        case Format.uint16:\n          return Math.trunc(value) >> 16;\n        case Format.uint32:\n          return value;\n        case Format.int8:\n          return Math.trunc(value) >> 25;\n        case Format.int16:\n          return Math.trunc(value) >> 17;\n        case Format.int32:\n          return Math.trunc(value) >> 1;\n        case Format.float16:\n        case Format.float32:\n        case Format.float64:\n          return value / 0xffffffff;\n      }\n      break;\n    case Format.int8:\n      switch (to) {\n        case Format.uint1:\n          return value === 0 ? 0 : 1;\n        case Format.uint2:\n          return value <= 0 ? 0 : Math.trunc(value) >> 5;\n        case Format.uint4:\n          return value <= 0 ? 0 : Math.trunc(value) >> 3;\n        case Format.uint8:\n          return value <= 0 ? 0 : Math.trunc(value) << 1;\n        case Format.uint16:\n          return value <= 0 ? 0 : Math.trunc(value) * 516;\n        case Format.uint32:\n          return value <= 0 ? 0 : Math.trunc(value) * 33818640;\n        case Format.int8:\n          return value;\n        case Format.int16:\n          return value * 258;\n        case Format.int32:\n          return value * 16909320;\n        case Format.float16:\n        case Format.float32:\n        case Format.float64:\n          return value / 127;\n      }\n      break;\n    case Format.int16:\n      switch (to) {\n        case Format.uint1:\n          return value === 0 ? 0 : 1;\n        case Format.uint2:\n          return value <= 0 ? 0 : Math.trunc(value) >> 15;\n        case Format.uint4:\n          return value <= 0 ? 0 : Math.trunc(value) >> 11;\n        case Format.uint8:\n          return value <= 0 ? 0 : Math.trunc(value) >> 7;\n        case Format.uint16:\n          return value <= 0 ? 0 : Math.trunc(value) << 1;\n        case Format.uint32:\n          return value <= 0 ? 0 : Math.trunc(value) * 131076;\n        case Format.int8:\n          return Math.trunc(value) >> 8;\n        case Format.int16:\n          return value;\n        case Format.int32:\n          return Math.trunc(value) * 65538;\n        case Format.float16:\n        case Format.float32:\n        case Format.float64:\n          return value / 0x7fff;\n      }\n      break;\n    case Format.int32:\n      switch (to) {\n        case Format.uint1:\n          return value === 0 ? 0 : 1;\n        case Format.uint2:\n          return value <= 0 ? 0 : Math.trunc(value) >> 29;\n        case Format.uint4:\n          return value <= 0 ? 0 : Math.trunc(value) >> 27;\n        case Format.uint8:\n          return value <= 0 ? 0 : Math.trunc(value) >> 23;\n        case Format.uint16:\n          return value <= 0 ? 0 : Math.trunc(value) >> 16;\n        case Format.uint32:\n          return value <= 0 ? 0 : Math.trunc(value) << 1;\n        case Format.int8:\n          return Math.trunc(value) >> 24;\n        case Format.int16:\n          return Math.trunc(value) >> 16;\n        case Format.int32:\n          return value;\n        case Format.float16:\n        case Format.float32:\n        case Format.float64:\n          return value / 0x7fffffff;\n      }\n      break;\n    case Format.float16:\n    case Format.float32:\n    case Format.float64:\n      switch (to) {\n        case Format.uint1:\n          return value === 0 ? 0 : 1;\n        case Format.uint2:\n          return Math.trunc(MathUtils.clamp(value, 0, 1) * 3);\n        case Format.uint4:\n          return Math.trunc(MathUtils.clamp(value, 0, 1) * 15);\n        case Format.uint8:\n          return Math.trunc(MathUtils.clamp(value, 0, 1) * 255);\n        case Format.uint16:\n          return Math.trunc(MathUtils.clamp(value, 0, 1) * 0xffff);\n        case Format.uint32:\n          return Math.trunc(MathUtils.clamp(value, 0, 1) * 0xffffffff);\n        case Format.int8:\n          return Math.trunc(\n            value < 0\n              ? MathUtils.clamp(value, -1, 1) * 128\n              : MathUtils.clamp(value, -1, 1) * 127\n          );\n        case Format.int16:\n          return Math.trunc(\n            value < 0\n              ? MathUtils.clamp(value, -1, 1) * 32768\n              : MathUtils.clamp(value, -1, 1) * 32767\n          );\n        case Format.int32:\n          return Math.trunc(\n            value < 0\n              ? MathUtils.clamp(value, -1, 1) * 2147483648\n              : MathUtils.clamp(value, -1, 1) * 2147483647\n          );\n        case Format.float16:\n        case Format.float32:\n        case Format.float64:\n          return value;\n      }\n      break;\n  }\n  throw new LibError('Unknown format.');\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 32-bit floating point color.\n */\nexport class ColorFloat32 implements Color {\n  protected data: Float32Array;\n\n  public get format(): Format {\n    return Format.float32;\n  }\n\n  public get length(): number {\n    return this.data.length;\n  }\n\n  public get maxChannelValue(): number {\n    return 1;\n  }\n\n  public get maxIndexValue(): number {\n    return 1;\n  }\n\n  public get isLdrFormat(): boolean {\n    return false;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: Float32Array | number) {\n    if (typeof data === 'number') {\n      this.data = new Float32Array(data);\n    } else {\n      this.data = data.slice();\n    }\n  }\n\n  public static from(other: ColorFloat32) {\n    const c = new ColorFloat32(other.length);\n    c.data = other.data;\n    return c;\n  }\n\n  public static fromArray(color: Float32Array) {\n    return new ColorFloat32(color);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    const data = new Float32Array([r, g, b]);\n    return new ColorFloat32(data);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    const data = new Float32Array([r, g, b, a]);\n    return new ColorFloat32(data);\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.data.length ? this.data[channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    if (index < this.data.length) {\n      this.data[index] = value;\n    }\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this.data[0] = r;\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = g;\n      if (nc > 2) {\n        this.data[2] = b;\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this.data[0] = r;\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = g;\n      if (nc > 2) {\n        this.data[2] = b;\n        if (nc > 3) {\n          this.data[3] = a;\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorFloat32.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 64-bit floating point color.\n */\nexport class ColorFloat64 implements Color {\n  protected data: Float64Array;\n\n  public get format(): Format {\n    return Format.float64;\n  }\n\n  public get length(): number {\n    return this.data.length;\n  }\n\n  public get maxChannelValue(): number {\n    return 1;\n  }\n\n  public get maxIndexValue(): number {\n    return 1;\n  }\n\n  public get isLdrFormat(): boolean {\n    return true;\n  }\n\n  public get isHdrFormat(): boolean {\n    return false;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: Float64Array | number) {\n    if (typeof data === 'number') {\n      this.data = new Float64Array(data);\n    } else {\n      this.data = data.slice();\n    }\n  }\n\n  public static from(other: ColorFloat64) {\n    const c = new ColorFloat64(other.length);\n    c.data = other.data;\n    return c;\n  }\n\n  public static fromArray(color: Float64Array) {\n    return new ColorFloat64(color);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    const data = new Float64Array([r, g, b]);\n    return new ColorFloat64(data);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    const data = new Float64Array([r, g, b, a]);\n    return new ColorFloat64(data);\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.data.length ? this.data[channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    if (index < this.data.length) {\n      this.data[index] = value;\n    }\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this.data[0] = r;\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = g;\n      if (nc > 2) {\n        this.data[2] = b;\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this.data[0] = r;\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = g;\n      if (nc > 2) {\n        this.data[2] = b;\n        if (nc > 3) {\n          this.data[3] = a;\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorFloat64.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 16-bit integer color.\n */\nexport class ColorInt16 implements Color {\n  private _data: Int16Array;\n\n  public get format(): Format {\n    return Format.int16;\n  }\n\n  public get length(): number {\n    return this._data.length;\n  }\n\n  public get maxChannelValue(): number {\n    return 0x7fff;\n  }\n\n  public get maxIndexValue(): number {\n    return 0x7fff;\n  }\n\n  public get isLdrFormat(): boolean {\n    return false;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this._data.length > 0 ? this._data[0] : 0;\n  }\n  public set r(r: number) {\n    if (this._data.length > 0) {\n      this._data[0] = Math.trunc(r);\n    }\n  }\n\n  public get g(): number {\n    return this._data.length > 1 ? this._data[1] : 0;\n  }\n  public set g(g: number) {\n    if (this._data.length > 1) {\n      this._data[1] = Math.trunc(g);\n    }\n  }\n\n  public get b(): number {\n    return this._data.length > 2 ? this._data[2] : 0;\n  }\n  public set b(b: number) {\n    if (this._data.length > 2) {\n      this._data[2] = Math.trunc(b);\n    }\n  }\n\n  public get a(): number {\n    return this._data.length > 3 ? this._data[3] : 0;\n  }\n  public set a(a: number) {\n    if (this._data.length > 3) {\n      this._data[3] = Math.trunc(a);\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: Int16Array | number) {\n    if (typeof data === 'number') {\n      this._data = new Int16Array(data);\n    } else {\n      this._data = data.slice();\n    }\n  }\n\n  public static from(other: ColorInt16) {\n    const c = new ColorInt16(other.length);\n    c._data = other._data;\n    return c;\n  }\n\n  public static fromArray(color: number[]) {\n    const data = new Int16Array(color);\n    return new ColorInt16(data);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    const data = new Int16Array([r, g, b]);\n    return new ColorInt16(data);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    const data = new Int16Array([r, g, b, a]);\n    return new ColorInt16(data);\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this._data.length ? this._data[channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    if (index < this._data.length) {\n      this._data[index] = Math.trunc(value);\n    }\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this._data[0] = Math.trunc(r);\n    const nc = this._data.length;\n    if (nc > 1) {\n      this._data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this._data[2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this._data[0] = Math.trunc(r);\n    const nc = this._data.length;\n    if (nc > 1) {\n      this._data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this._data[2] = Math.trunc(b);\n        if (nc > 3) {\n          this._data[3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorInt16.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 32-bit integer color.\n */\nexport class ColorInt32 implements Color {\n  private _data: Int32Array;\n\n  public get format(): Format {\n    return Format.int32;\n  }\n\n  public get length(): number {\n    return this._data.length;\n  }\n\n  public get maxChannelValue(): number {\n    return 0x7fffffff;\n  }\n\n  public get maxIndexValue(): number {\n    return 0x7fffffff;\n  }\n\n  public get isLdrFormat(): boolean {\n    return false;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this._data.length > 0 ? this._data[0] : 0;\n  }\n  public set r(r: number) {\n    if (this._data.length > 0) {\n      this._data[0] = Math.trunc(r);\n    }\n  }\n\n  public get g(): number {\n    return this._data.length > 1 ? this._data[1] : 0;\n  }\n  public set g(g: number) {\n    if (this._data.length > 1) {\n      this._data[1] = Math.trunc(g);\n    }\n  }\n\n  public get b(): number {\n    return this._data.length > 2 ? this._data[2] : 0;\n  }\n  public set b(b: number) {\n    if (this._data.length > 2) {\n      this._data[2] = Math.trunc(b);\n    }\n  }\n\n  public get a(): number {\n    return this._data.length > 3 ? this._data[3] : 0;\n  }\n  public set a(a: number) {\n    if (this._data.length > 3) {\n      this._data[3] = Math.trunc(a);\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: Int32Array | number) {\n    if (typeof data === 'number') {\n      this._data = new Int32Array(data);\n    } else {\n      this._data = data.slice();\n    }\n  }\n\n  public static from(other: ColorInt32) {\n    const c = new ColorInt32(other.length);\n    c._data = other._data;\n    return c;\n  }\n\n  public static fromArray(color: number[]) {\n    const data = new Int32Array(color);\n    return new ColorInt32(data);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    const data = new Int32Array([r, g, b]);\n    return new ColorInt32(data);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    const data = new Int32Array([r, g, b, a]);\n    return new ColorInt32(data);\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this._data.length ? this._data[channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    if (index < this._data.length) {\n      this._data[index] = Math.trunc(value);\n    }\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this._data[0] = Math.trunc(r);\n    const nc = this._data.length;\n    if (nc > 1) {\n      this._data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this._data[2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this._data[0] = Math.trunc(r);\n    const nc = this._data.length;\n    if (nc > 1) {\n      this._data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this._data[2] = Math.trunc(b);\n        if (nc > 3) {\n          this._data[3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorInt32.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 8-bit integer color.\n */\nexport class ColorInt8 implements Color {\n  private _data: Int8Array;\n\n  public get format(): Format {\n    return Format.int8;\n  }\n\n  public get length(): number {\n    return this._data.length;\n  }\n\n  public get maxChannelValue(): number {\n    return 127;\n  }\n\n  public get maxIndexValue(): number {\n    return 127;\n  }\n\n  public get isLdrFormat(): boolean {\n    return false;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this._data.length > 0 ? this._data[0] : 0;\n  }\n  public set r(r: number) {\n    if (this._data.length > 0) {\n      this._data[0] = Math.trunc(r);\n    }\n  }\n\n  public get g(): number {\n    return this._data.length > 1 ? this._data[1] : 0;\n  }\n  public set g(g: number) {\n    if (this._data.length > 1) {\n      this._data[1] = Math.trunc(g);\n    }\n  }\n\n  public get b(): number {\n    return this._data.length > 2 ? this._data[2] : 0;\n  }\n  public set b(b: number) {\n    if (this._data.length > 2) {\n      this._data[2] = Math.trunc(b);\n    }\n  }\n\n  public get a(): number {\n    return this._data.length > 3 ? this._data[3] : 0;\n  }\n  public set a(a: number) {\n    if (this._data.length > 3) {\n      this._data[3] = Math.trunc(a);\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: Int8Array | number) {\n    if (typeof data === 'number') {\n      this._data = new Int8Array(data);\n    } else {\n      this._data = data.slice();\n    }\n  }\n\n  public static from(other: ColorInt8) {\n    const c = new ColorInt8(other.length);\n    c._data = other._data;\n    return c;\n  }\n\n  public static fromArray(color: number[]) {\n    const data = new Int8Array(color);\n    return new ColorInt8(data);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    const data = new Int8Array([r, g, b]);\n    return new ColorInt8(data);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    const data = new Int8Array([r, g, b, a]);\n    return new ColorInt8(data);\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this._data.length ? this._data[channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    if (index < this._data.length) {\n      this._data[index] = Math.trunc(value);\n    }\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this._data[0] = Math.trunc(r);\n    const nc = this._data.length;\n    if (nc > 1) {\n      this._data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this._data[2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this._data[0] = Math.trunc(r);\n    const nc = this._data.length;\n    if (nc > 1) {\n      this._data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this._data[2] = Math.trunc(b);\n        if (nc > 3) {\n          this._data[3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorInt8.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 1-bit unsigned int color with channel values in the range [0, 1].\n */\nexport class ColorUint1 implements Color {\n  private _data: number;\n\n  public get format(): Format {\n    return Format.uint1;\n  }\n\n  private readonly _length: number;\n  public get length(): number {\n    return this._length;\n  }\n\n  public get maxChannelValue(): number {\n    return 1;\n  }\n\n  public get maxIndexValue(): number {\n    return 1;\n  }\n\n  public get isLdrFormat(): boolean {\n    return true;\n  }\n\n  public get isHdrFormat(): boolean {\n    return false;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: number[] | number) {\n    if (typeof data === 'number') {\n      this._length = data;\n      this._data = 0;\n    } else {\n      this._length = data.length;\n      this._data = 0;\n      this.setRgba(\n        data.length > 0 ? data[0] : 0,\n        data.length > 1 ? data[1] : 0,\n        data.length > 2 ? data[2] : 0,\n        data.length > 3 ? data[3] : 0\n      );\n    }\n  }\n\n  public static from(other: ColorUint1) {\n    const c = new ColorUint1(other._length);\n    c._data = other._data;\n    return c;\n  }\n\n  public static fromArray(color: number[]) {\n    return new ColorUint1(color);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    return new ColorUint1([r, g, b]);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    return new ColorUint1([r, g, b, a]);\n  }\n\n  public getChannel(channel: number | Channel): number {\n    return channel < this.length ? (this._data >> (7 - channel)) & 0x1 : 0;\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    let _index = index;\n    if (_index >= this.length) {\n      return;\n    }\n    _index = 7 - _index;\n    let v = this._data;\n    if (value !== 0) {\n      v |= 1 << _index;\n    } else {\n      v &= ~((1 << _index) & 0xff);\n    }\n    this._data = v;\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorUint1.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 16-bit unsigned int color with channel values in the range [0, 65535].\n */\nexport class ColorUint16 implements Color {\n  protected data: Uint16Array;\n\n  public get format(): Format {\n    return Format.uint16;\n  }\n\n  public get length(): number {\n    return this.data.length;\n  }\n\n  public get maxChannelValue(): number {\n    return 0xffff;\n  }\n\n  public get maxIndexValue(): number {\n    return 0xffff;\n  }\n\n  public get isLdrFormat(): boolean {\n    return false;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: Uint16Array | number) {\n    if (typeof data === 'number') {\n      this.data = new Uint16Array(data);\n    } else {\n      this.data = data.slice();\n    }\n  }\n\n  public static from(other: ColorUint16) {\n    const c = new ColorUint16(other.length);\n    c.data = other.data;\n    return c;\n  }\n\n  public static fromArray(color: Uint16Array) {\n    return new ColorUint16(color);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    const data = new Uint16Array([r, g, b]);\n    return new ColorUint16(data);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    const data = new Uint16Array([r, g, b, a]);\n    return new ColorUint16(data);\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.data.length ? this.data[channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    if (index < this.data.length) {\n      this.data[index] = Math.trunc(value);\n    }\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this.data[0] = Math.trunc(r);\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this.data[2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this.data[0] = Math.trunc(r);\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this.data[2] = Math.trunc(b);\n        if (nc > 3) {\n          this.data[3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorUint16.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 2-bit unsigned int color with channel values in the range [0, 3].\n */\nexport class ColorUint2 implements Color {\n  private _data: number;\n\n  public get format(): Format {\n    return Format.uint2;\n  }\n\n  private readonly _length: number;\n  public get length(): number {\n    return this._length;\n  }\n\n  public get maxChannelValue(): number {\n    return 3;\n  }\n\n  public get maxIndexValue(): number {\n    return 3;\n  }\n\n  public get isLdrFormat(): boolean {\n    return true;\n  }\n\n  public get isHdrFormat(): boolean {\n    return false;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: number[] | number) {\n    if (typeof data === 'number') {\n      this._length = data;\n      this._data = 0;\n    } else {\n      this._length = data.length;\n      this._data = 0;\n      this.setRgba(\n        data.length > 0 ? data[0] : 0,\n        data.length > 1 ? data[1] : 0,\n        data.length > 2 ? data[2] : 0,\n        data.length > 3 ? data[3] : 0\n      );\n    }\n  }\n\n  public static from(other: ColorUint2) {\n    const c = new ColorUint2(other._length);\n    c._data = other._data;\n    return c;\n  }\n\n  public static fromArray(color: number[]) {\n    return new ColorUint2(color);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    return new ColorUint2([r, g, b]);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    return new ColorUint2([r, g, b, a]);\n  }\n\n  public getChannel(channel: number | Channel): number {\n    return channel < this.length\n      ? (this._data >> (6 - (channel << 1))) & 0x3\n      : 0;\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    const _index = index;\n    if (_index >= this.length) {\n      return;\n    }\n\n    const _mask = [\n      ~(0x3 << (6 - (0 << 1))) & 0xff,\n      ~(0x3 << (6 - (1 << 1))) & 0xff,\n      ~(0x3 << (6 - (2 << 1))) & 0xff,\n      ~(0x3 << (6 - (3 << 1))) & 0xff,\n    ];\n\n    const mask = _mask[index];\n    const x = Math.trunc(value) & 0x3;\n    this._data = (this._data & mask) | (x << (6 - (index << 1)));\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorUint2.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 32-bit unsigned int color.\n */\nexport class ColorUint32 implements Color {\n  protected data: Uint32Array;\n\n  public get format(): Format {\n    return Format.uint32;\n  }\n\n  public get length(): number {\n    return this.data.length;\n  }\n\n  public get maxChannelValue(): number {\n    return 0xffffffff;\n  }\n\n  public get maxIndexValue(): number {\n    return 0xffffffff;\n  }\n\n  public get isLdrFormat(): boolean {\n    return false;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: Uint32Array | number) {\n    if (typeof data === 'number') {\n      this.data = new Uint32Array(data);\n    } else {\n      this.data = data.slice();\n    }\n  }\n\n  public static from(other: ColorUint32) {\n    const c = new ColorUint32(other.length);\n    c.data = other.data;\n    return c;\n  }\n\n  public static fromArray(color: Uint32Array) {\n    return new ColorUint32(color);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    const data = new Uint32Array([r, g, b]);\n    return new ColorUint32(data);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    const data = new Uint32Array([r, g, b, a]);\n    return new ColorUint32(data);\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.data.length ? this.data[channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    if (index < this.data.length) {\n      this.data[index] = Math.trunc(value);\n    }\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this.data[0] = Math.trunc(r);\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this.data[2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this.data[0] = Math.trunc(r);\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this.data[2] = Math.trunc(b);\n        if (nc > 3) {\n          this.data[3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorUint32.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { MathUtils } from '../common/math-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 4-bit unsigned int color with channel values in the range [0, 15].\n */\nexport class ColorUint4 implements Color {\n  private _data: Uint8Array;\n\n  public get format(): Format {\n    return Format.uint4;\n  }\n\n  private readonly _length: number;\n  public get length(): number {\n    return this._length;\n  }\n\n  public get maxChannelValue(): number {\n    return 15;\n  }\n\n  public get maxIndexValue(): number {\n    return 15;\n  }\n\n  public get isLdrFormat(): boolean {\n    return true;\n  }\n\n  public get isHdrFormat(): boolean {\n    return false;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: Uint8Array | number) {\n    if (typeof data === 'number') {\n      this._length = data;\n      this._data = new Uint8Array(this.length < 3 ? 1 : 2);\n    } else {\n      this._length = data.length;\n      this._data = new Uint8Array(this._length < 3 ? 1 : 2);\n      this.setRgba(\n        this._length > 0 ? data[0] : 0,\n        this._length > 1 ? data[1] : 0,\n        this._length > 2 ? data[2] : 0,\n        this._length > 3 ? data[3] : 0\n      );\n    }\n  }\n\n  public static from(other: ColorUint4) {\n    const c = new ColorUint4(other._length);\n    c._data = other._data;\n    return c;\n  }\n\n  public static fromArray(color: Uint8Array) {\n    return new ColorUint4(color);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    const c = new ColorUint4(3);\n    c.setRgb(r, g, b);\n    return c;\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    const c = new ColorUint4(4);\n    c.setRgba(r, g, b, a);\n    return c;\n  }\n\n  public getChannel(channel: number | Channel): number {\n    return channel < 0 || channel >= this.length\n      ? 0\n      : channel < 2\n      ? (this._data[0] >> (4 - (channel << 2))) & 0xf\n      : (this._data[1] >> (4 - ((channel & 0x1) << 2))) & 0xf;\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    let _index = index;\n    if (_index >= this.length) {\n      return;\n    }\n    const vi = MathUtils.clamp(Math.trunc(value), 0, 15);\n    let i = 0;\n    if (_index > 1) {\n      _index &= 0x1;\n      i = 1;\n    }\n    if (_index === 0) {\n      this._data[i] = (this._data[i] & 0xf) | (vi << 4);\n    } else if (_index === 1) {\n      this._data[i] = (this._data[i] & 0xf0) | vi;\n    }\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorUint4.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * An 8-bit unsigned int color with channel values in the range [0, 255].\n */\nexport class ColorUint8 implements Color {\n  protected data: Uint8Array;\n\n  public get format(): Format {\n    return Format.uint8;\n  }\n\n  public get length(): number {\n    return this.data.length;\n  }\n\n  public get maxChannelValue(): number {\n    return 255;\n  }\n\n  public get maxIndexValue(): number {\n    return 255;\n  }\n\n  public get isLdrFormat(): boolean {\n    return true;\n  }\n\n  public get isHdrFormat(): boolean {\n    return false;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3, 255);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: Uint8Array | number) {\n    if (typeof data === 'number') {\n      this.data = new Uint8Array(data);\n    } else {\n      this.data = data.slice();\n    }\n  }\n\n  public static from(other: ColorUint8) {\n    const c = new ColorUint8(other.length);\n    c.data = other.data;\n    return c;\n  }\n\n  public static fromArray(color: Uint8Array) {\n    return new ColorUint8(color);\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    const data = new Uint8Array([r, g, b]);\n    return new ColorUint8(data);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    const data = new Uint8Array([r, g, b, a]);\n    return new ColorUint8(data);\n  }\n\n  public getChannel(channel: number | Channel, defValue = 0): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.data.length ? this.data[channel] : defValue;\n    }\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    if (index < this.data.length) {\n      this.data[index] = Math.trunc(value);\n    }\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this.data[0] = Math.trunc(r);\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this.data[2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this.data[0] = Math.trunc(r);\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = Math.trunc(g);\n      if (nc > 2) {\n        this.data[2] = Math.trunc(b);\n        if (nc > 3) {\n          this.data[3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorUint8.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { MathUtils } from '../common/math-utils';\nimport { LibError } from '../error/lib-error';\nimport { Color } from './color';\nimport { ColorFloat16 } from './color-float16';\nimport { ColorFloat32 } from './color-float32';\nimport { ColorFloat64 } from './color-float64';\nimport { ColorInt16 } from './color-int16';\nimport { ColorInt32 } from './color-int32';\nimport { ColorInt8 } from './color-int8';\nimport { ColorUint1 } from './color-uint1';\nimport { ColorUint16 } from './color-uint16';\nimport { ColorUint2 } from './color-uint2';\nimport { ColorUint32 } from './color-uint32';\nimport { ColorUint4 } from './color-uint4';\nimport { ColorUint8 } from './color-uint8';\nimport { convertFormatValue, Format } from './format';\n\nexport interface ConvertColorOptions {\n  from: Color;\n  to?: Color;\n  format?: Format;\n  numChannels?: number;\n  alpha?: number;\n}\n\nexport abstract class ColorUtils {\n  private static convertColorInternal(c: Color, c2: Color, a: number): Color {\n    const numChannels = c2.length;\n    const format = c2.format;\n    const fromFormat = c.palette?.format ?? c.format;\n    const cl = c.length;\n    if (numChannels === 1) {\n      const g = Math.trunc(c.length > 2 ? c.luminance : c.getChannel(0));\n      c2.setChannel(0, convertFormatValue(g, fromFormat, format));\n    } else if (numChannels <= cl) {\n      for (let ci = 0; ci < numChannels; ++ci) {\n        c2.setChannel(\n          ci,\n          convertFormatValue(c.getChannel(ci), fromFormat, format)\n        );\n      }\n    } else {\n      for (let ci = 0; ci < cl; ++ci) {\n        c2.setChannel(\n          ci,\n          convertFormatValue(c.getChannel(ci), fromFormat, format)\n        );\n      }\n      const v = cl === 1 ? c2.getChannel(0) : 0;\n      for (let ci = cl; ci < numChannels; ++ci) {\n        c2.setChannel(ci, ci === 3 ? a : v);\n      }\n    }\n    return c2;\n  }\n\n  public static uint32ToRed(c: number): number {\n    return c & 0xff;\n  }\n\n  public static uint32ToGreen(c: number): number {\n    return (c >> 8) & 0xff;\n  }\n\n  public static uint32ToBlue(c: number): number {\n    return (c >> 16) & 0xff;\n  }\n\n  public static uint32ToAlpha(c: number): number {\n    return (c >> 24) & 0xff;\n  }\n\n  public static rgbaToUint32(\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): number {\n    return (\n      MathUtils.clampInt255(r) |\n      (MathUtils.clampInt255(g) << 8) |\n      (MathUtils.clampInt255(b) << 16) |\n      (MathUtils.clampInt255(a) << 24)\n    );\n  }\n\n  public static convertColor(opt: ConvertColorOptions): Color {\n    const fromFormat = opt.from.palette?.format ?? opt.from.format;\n    const format = opt.to?.format ?? opt.format ?? opt.from.format;\n    const numChannels = opt.to?.length ?? opt.numChannels ?? opt.from.length;\n    const alpha = opt.alpha ?? 0;\n\n    if (format === fromFormat && numChannels === opt.from.length) {\n      if (opt.to === undefined) {\n        return opt.from.clone();\n      }\n      opt.to.set(opt.from);\n      return opt.to;\n    }\n\n    switch (format) {\n      case Format.uint8: {\n        const c2 = opt.to ?? new ColorUint8(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.uint1: {\n        const c2 = opt.to ?? new ColorUint1(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.uint2: {\n        const c2 = opt.to ?? new ColorUint2(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.uint4: {\n        const c2 = opt.to ?? new ColorUint4(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.uint16: {\n        const c2 = opt.to ?? new ColorUint16(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.uint32: {\n        const c2 = opt.to ?? new ColorUint32(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.int8: {\n        const c2 = opt.to ?? new ColorInt8(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.int16: {\n        const c2 = opt.to ?? new ColorInt16(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.int32: {\n        const c2 = opt.to ?? new ColorInt32(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.float16: {\n        const c2 = opt.to ?? new ColorFloat16(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.float32: {\n        const c2 = opt.to ?? new ColorFloat32(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n      case Format.float64: {\n        const c2 = opt.to ?? new ColorFloat64(numChannels);\n        return this.convertColorInternal(opt.from, c2, alpha);\n      }\n    }\n    throw new LibError('Unknown format.');\n  }\n\n  /**\n   * Returns the luminance (grayscale) value of the color.\n   */\n  public static getLuminance(c: Color): number {\n    return 0.299 * c.r + 0.587 * c.g + 0.114 * c.b;\n  }\n\n  /**\n   * Returns the normalized [0, 1] luminance (grayscale) value of the color.\n   */\n  public static getLuminanceNormalized(c: Color): number {\n    return (\n      0.299 * c.rNormalized + 0.587 * c.gNormalized + 0.114 * c.bNormalized\n    );\n  }\n\n  /**\n   * Returns the luminance (grayscale) value of the color.\n   */\n  public static getLuminanceRgb(r: number, g: number, b: number): number {\n    return 0.299 * r + 0.587 * g + 0.114 * b;\n  }\n\n  /**\n   *  Convert an HSL color to RGB, where **hue** is specified in normalized degrees\n   * [0, 1] (where 1 is 360-degrees); **saturation** and **lightness** are in the range [0, 1].\n   * Returns a list [r, g, b] with values in the range [0, 255].\n   */\n  public static hslToRgb(\n    hue: number,\n    saturation: number,\n    lightness: number\n  ): number[] {\n    if (saturation === 0) {\n      const gray = Math.trunc(lightness * 255);\n      return [gray, gray, gray];\n    }\n\n    const hue2rgb = (p: number, q: number, t: number): number => {\n      let _t = t;\n      if (_t < 0) {\n        _t += 1;\n      }\n      if (_t > 1) {\n        _t -= 1;\n      }\n      if (_t < 1 / 6) {\n        return p + (q - p) * 6 * _t;\n      }\n      if (_t < 1 / 2) {\n        return q;\n      }\n      if (_t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - _t) * 6;\n      }\n      return p;\n    };\n\n    const q =\n      lightness < 0.5\n        ? lightness * (1 + saturation)\n        : lightness + saturation - lightness * saturation;\n    const p = 2 * lightness - q;\n\n    const r = hue2rgb(p, q, hue + 1 / 3);\n    const g = hue2rgb(p, q, hue);\n    const b = hue2rgb(p, q, hue - 1 / 3);\n\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n  }\n\n  /**\n   * Convert an HSV color to RGB, where **hue** is specified in normalized degrees\n   * [0, 1] (where 1 is 360-degrees); **saturation** and **brightness** are in the range [0, 1].\n   * Returns a list [r, g, b] with values in the range [0, 255].\n   */\n  public static hsvToRgb(\n    hue: number,\n    saturation: number,\n    brightness: number\n  ): number[] {\n    if (saturation === 0) {\n      const gray = Math.round(brightness * 255);\n      return [gray, gray, gray];\n    }\n\n    const h = (hue - Math.floor(hue)) * 6;\n    const f = h - Math.floor(h);\n    const p = brightness * (1 - saturation);\n    const q = brightness * (1 - saturation * f);\n    const t = brightness * (1 - saturation * (1 - f));\n\n    switch (Math.trunc(h)) {\n      case 0:\n        return [\n          Math.round(brightness * 255),\n          Math.round(t * 255),\n          Math.round(p * 255),\n        ];\n      case 1:\n        return [\n          Math.round(q * 255),\n          Math.round(brightness * 255),\n          Math.round(p * 255),\n        ];\n      case 2:\n        return [\n          Math.round(p * 255),\n          Math.round(brightness * 255),\n          Math.round(t * 255),\n        ];\n      case 3:\n        return [\n          Math.round(p * 255),\n          Math.round(q * 255),\n          Math.round(brightness * 255),\n        ];\n      case 4:\n        return [\n          Math.round(t * 255),\n          Math.round(p * 255),\n          Math.round(brightness * 255),\n        ];\n      case 5:\n        return [\n          Math.round(brightness * 255),\n          Math.round(p * 255),\n          Math.round(q * 255),\n        ];\n      default:\n        throw new LibError('Invalid hue.');\n    }\n  }\n\n  /**\n   * Convert an RGB color to HSL, where **r**, **g** and **b** are in the range [0, 255].\n   * Returns a list [h, s, l] with values in the range [0, 1].\n   */\n  public static rgbToHsl(r: number, g: number, b: number): number[] {\n    const _r = r / 255;\n    const _g = g / 255;\n    const _b = b / 255;\n    const mx = Math.max(_r, Math.max(_g, _b));\n    const mn = Math.min(_r, Math.min(_g, _b));\n    const l = (mx + mn) / 2;\n\n    if (mx === mn) {\n      return [0, 0, l];\n    }\n\n    const d = mx - mn;\n\n    const s = l > 0.5 ? d / (2 - mx - mn) : d / (mx + mn);\n\n    let h = 0;\n    if (mx === _r) {\n      h = (_g - _b) / d + (_g < _b ? 6 : 0);\n    } else if (mx === _g) {\n      h = (_b - _r) / d + 2;\n    } else {\n      h = (_r - _g) / d + 4;\n    }\n\n    h /= 6;\n\n    return [h, s, l];\n  }\n\n  /**\n   * Convert a CIE L\\*a\\*b color to XYZ.\n   */\n  public static labToXyz(l: number, a: number, b: number): number[] {\n    let y = (l + 16) / 116;\n    let x = y + a / 500;\n    let z = y - b / 200;\n    if (Math.pow(x, 3) > 0.008856) {\n      x = Math.pow(x, 3);\n    } else {\n      x = (x - 16 / 116) / 7.787;\n    }\n    if (Math.pow(y, 3) > 0.008856) {\n      y = Math.pow(y, 3);\n    } else {\n      y = (y - 16 / 116) / 7.787;\n    }\n    if (Math.pow(z, 3) > 0.008856) {\n      z = Math.pow(z, 3);\n    } else {\n      z = (z - 16 / 116) / 7.787;\n    }\n\n    return [\n      Math.trunc(x * 95.047),\n      Math.trunc(y * 100),\n      Math.trunc(z * 108.883),\n    ];\n  }\n\n  /**\n   * Convert an XYZ color to RGB.\n   */\n  public static xyzToRgb(x: number, y: number, z: number): number[] {\n    const _x = x / 100;\n    const _y = y / 100;\n    const _z = z / 100;\n    let r = 3.2406 * _x + -1.5372 * _y + -0.4986 * _z;\n    let g = -0.9689 * _x + 1.8758 * _y + 0.0415 * _z;\n    let b = 0.0557 * _x + -0.204 * _y + 1.057 * _z;\n    if (r > 0.0031308) {\n      r = 1.055 * Math.pow(r, 0.4166666667) - 0.055;\n    } else {\n      r *= 12.92;\n    }\n    if (g > 0.0031308) {\n      g = 1.055 * Math.pow(g, 0.4166666667) - 0.055;\n    } else {\n      g *= 12.92;\n    }\n    if (b > 0.0031308) {\n      b = 1.055 * Math.pow(b, 0.4166666667) - 0.055;\n    } else {\n      b *= 12.92;\n    }\n\n    return [\n      MathUtils.clampInt255(r * 255),\n      MathUtils.clampInt255(g * 255),\n      MathUtils.clampInt255(b * 255),\n    ];\n  }\n\n  /**\n   * Convert a CMYK color to RGB, where **c**, **m**, **y**, **k** values are in the range\n   * [0, 255]. Returns a list [r, g, b] with values in the range [0, 255].\n   */\n  public static cmykToRgb(\n    c: number,\n    m: number,\n    y: number,\n    k: number\n  ): number[] {\n    const _c = c / 255;\n    const _m = m / 255;\n    const _y = y / 255;\n    const _k = k / 255;\n    return [\n      Math.round(255 * (1 - _c) * (1 - _k)),\n      Math.round(255 * (1 - _m) * (1 - _k)),\n      Math.round(255 * (1 - _y) * (1 - _k)),\n    ];\n  }\n\n  /**\n   * Convert a CIE L\\*a\\*b color to RGB.\n   */\n  public static labToRgb(l: number, a: number, b: number): number[] {\n    const refX = 95.047;\n    const refY = 100.0;\n    const refZ = 108.883;\n\n    let y = (l + 16) / 116;\n    let x = a / 500 + y;\n    let z = y - b / 200;\n\n    const y3 = Math.pow(y, 3);\n    if (y3 > 0.008856) {\n      y = y3;\n    } else {\n      y = (y - 16 / 116) / 7.787;\n    }\n\n    const x3 = Math.pow(x, 3);\n    if (x3 > 0.008856) {\n      x = x3;\n    } else {\n      x = (x - 16 / 116) / 7.787;\n    }\n\n    const z3 = Math.pow(z, 3);\n    if (z3 > 0.008856) {\n      z = z3;\n    } else {\n      z = (z - 16 / 116) / 7.787;\n    }\n\n    x *= refX;\n    y *= refY;\n    z *= refZ;\n\n    x /= 100;\n    y /= 100;\n    z /= 100;\n\n    // xyz to rgb\n    let R = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    let G = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    let B = x * 0.0557 + y * -0.204 + z * 1.057;\n\n    if (R > 0.0031308) {\n      R = 1.055 * Math.pow(R, 1 / 2.4) - 0.055;\n    } else {\n      R *= 12.92;\n    }\n\n    if (G > 0.0031308) {\n      G = 1.055 * Math.pow(G, 1 / 2.4) - 0.055;\n    } else {\n      G *= 12.92;\n    }\n\n    if (B > 0.0031308) {\n      B = 1.055 * Math.pow(B, 1 / 2.4) - 0.055;\n    } else {\n      B *= 12.92;\n    }\n\n    return [\n      MathUtils.clampInt255(R * 255),\n      MathUtils.clampInt255(G * 255),\n      MathUtils.clampInt255(B * 255),\n    ];\n  }\n\n  /**\n   * Convert a RGB color to XYZ.\n   */\n  public static rgbToXyz(r: number, g: number, b: number): number[] {\n    let _r = r / 255;\n    let _g = g / 255;\n    let _b = b / 255;\n\n    if (_r > 0.04045) {\n      _r = Math.pow((_r + 0.055) / 1.055, 2.4);\n    } else {\n      _r /= 12.92;\n    }\n    if (_g > 0.04045) {\n      _g = Math.pow((_g + 0.055) / 1.055, 2.4);\n    } else {\n      _g /= 12.92;\n    }\n    if (_b > 0.04045) {\n      _b = Math.pow((_b + 0.055) / 1.055, 2.4);\n    } else {\n      _b /= 12.92;\n    }\n\n    _r *= 100;\n    _g *= 100;\n    _b *= 100;\n\n    return [\n      _r * 0.4124 + _g * 0.3576 + _b * 0.1805,\n      _r * 0.2126 + _g * 0.7152 + _b * 0.0722,\n      _r * 0.0193 + _g * 0.1192 + _b * 0.9505,\n    ];\n  }\n\n  /**\n   * Convert a XYZ color to CIE L\\*a\\*b.\n   */\n  public static xyzToLab(x: number, y: number, z: number): number[] {\n    let _x = x / 95.047;\n    let _y = y / 100;\n    let _z = z / 108.883;\n\n    if (_x > 0.008856) {\n      _x = Math.pow(_x, 1 / 3);\n    } else {\n      _x = 7.787 * _x + 16 / 116;\n    }\n    if (_y > 0.008856) {\n      _y = Math.pow(_y, 1 / 3);\n    } else {\n      _y = 7.787 * _y + 16 / 116;\n    }\n    if (_z > 0.008856) {\n      _z = Math.pow(_z, 1 / 3);\n    } else {\n      _z = 7.787 * _z + 16 / 116;\n    }\n\n    return [116 * _y - 16, 500 * (_x - _y), 200 * (_y - _z)];\n  }\n\n  /**\n   * Convert a RGB color to CIE L\\*a\\*b.\n   */\n  public static rgbToLab(r: number, g: number, b: number): number[] {\n    let _r = r / 255;\n    let _g = g / 255;\n    let _b = b / 255;\n\n    if (_r > 0.04045) {\n      _r = Math.pow((_r + 0.055) / 1.055, 2.4);\n    } else {\n      _r /= 12.92;\n    }\n    if (_g > 0.04045) {\n      _g = Math.pow((_g + 0.055) / 1.055, 2.4);\n    } else {\n      _g /= 12.92;\n    }\n    if (_b > 0.04045) {\n      _b = Math.pow((_b + 0.055) / 1.055, 2.4);\n    } else {\n      _b /= 12.92;\n    }\n\n    _r *= 100;\n    _g *= 100;\n    _b *= 100;\n\n    let x = _r * 0.4124 + _g * 0.3576 + _b * 0.1805;\n    let y = _r * 0.2126 + _g * 0.7152 + _b * 0.0722;\n    let z = _r * 0.0193 + _g * 0.1192 + _b * 0.9505;\n\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n\n    if (x > 0.008856) {\n      x = Math.pow(x, 1 / 3);\n    } else {\n      x = 7.787 * x + 16 / 116;\n    }\n    if (y > 0.008856) {\n      y = Math.pow(y, 1 / 3);\n    } else {\n      y = 7.787 * y + 16 / 116;\n    }\n    if (z > 0.008856) {\n      z = Math.pow(z, 1 / 3);\n    } else {\n      z = 7.787 * z + 16 / 116;\n    }\n\n    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { Float16 } from '../common/float16';\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Color, ColorConvertOptions } from './color';\nimport { ColorUtils } from './color-utils';\nimport { Format } from './format';\n\n/**\n * A 16-bit floating point color.\n */\nexport class ColorFloat16 implements Color {\n  protected data: Uint16Array;\n\n  public get format(): Format {\n    return Format.float16;\n  }\n\n  public get length(): number {\n    return this.data.length;\n  }\n\n  public get maxChannelValue(): number {\n    return 1;\n  }\n\n  public get maxIndexValue(): number {\n    return 1;\n  }\n\n  public get isLdrFormat(): boolean {\n    return false;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(data: Uint16Array | number) {\n    if (typeof data === 'number') {\n      this.data = new Uint16Array(data);\n    } else {\n      this.data = data.slice();\n    }\n  }\n\n  public static from(other: ColorFloat16) {\n    const c = new ColorFloat16(other.length);\n    c.data = other.data;\n    return c;\n  }\n\n  public static fromArray(color: Uint16Array) {\n    const c = new ColorFloat16(color);\n    const l = color.length;\n    for (let i = 0; i < l; ++i) {\n      c.data[i] = Float16.doubleToFloat16(color[i]);\n    }\n    return c;\n  }\n\n  public static rgb(r: number, g: number, b: number) {\n    const data = new Uint16Array([\n      Float16.doubleToFloat16(r),\n      Float16.doubleToFloat16(g),\n      Float16.doubleToFloat16(b),\n    ]);\n    return new ColorFloat16(data);\n  }\n\n  public static rgba(r: number, g: number, b: number, a: number) {\n    const data = new Uint16Array([\n      Float16.doubleToFloat16(r),\n      Float16.doubleToFloat16(g),\n      Float16.doubleToFloat16(b),\n      Float16.doubleToFloat16(a),\n    ]);\n    return new ColorFloat16(data);\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.data.length\n        ? Float16.float16ToDouble(this.data[channel])\n        : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: number | Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(index: number | Channel, value: number): void {\n    if (index < this.data.length) {\n      this.data[index] = Float16.doubleToFloat16(value);\n    }\n  }\n\n  public set(c: Color): void {\n    this.setRgba(c.r, c.g, c.b, c.a);\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    this.data[0] = Float16.doubleToFloat16(r);\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = Float16.doubleToFloat16(g);\n      if (nc > 2) {\n        this.data[2] = Float16.doubleToFloat16(b);\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    this.data[0] = Float16.doubleToFloat16(r);\n    const nc = this.data.length;\n    if (nc > 1) {\n      this.data[1] = Float16.doubleToFloat16(g);\n      if (nc > 2) {\n        this.data[2] = Float16.doubleToFloat16(b);\n        if (nc > 3) {\n          this.data[3] = Float16.doubleToFloat16(a);\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone() {\n    return ColorFloat16.from(this);\n  }\n\n  public equals(other: Color) {\n    if (other.length !== this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (other.getChannel(i) !== this.getChannel(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public convert(opt?: ColorConvertOptions) {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt?.format,\n      numChannels: opt?.numChannels,\n      alpha: opt?.alpha,\n    });\n  }\n}\n", "/** @format */\n\nimport { ColorUint8 } from './color-uint8';\n\nexport class ColorRgb8 extends ColorUint8 {\n  constructor(r: number, g: number, b: number) {\n    const data = new Uint8Array([r, g, b]);\n    super(data);\n  }\n\n  public static from(other: ColorUint8) {\n    const data = new Uint8Array([\n      other.getChannel(0),\n      other.getChannel(1),\n      other.getChannel(2),\n    ]);\n    return new ColorUint8(data);\n  }\n}\n", "/** @format */\n\nimport { ColorUint8 } from './color-uint8';\n\nexport class ColorRgba8 extends ColorUint8 {\n  constructor(r: number, g: number, b: number, a: number) {\n    const data = new Uint8Array([r, g, b, a]);\n    super(data);\n  }\n\n  public static from(other: ColorUint8) {\n    const data = new Uint8Array([\n      other.getChannel(0),\n      other.getChannel(1),\n      other.getChannel(2),\n      other.getChannel(3),\n    ]);\n    return new ColorUint8(data);\n  }\n}\n", "/** @format */\n\nimport { Palette } from '../image/palette';\nimport { Channel } from './channel';\nimport { Format } from './format';\n\nexport interface ColorConvertOptions {\n  format?: Format;\n  numChannels?: number;\n  alpha?: number;\n}\n\n/**\n * The abstract Color class is the base class for all specific color classes\n * and Pixel classes.\n */\nexport interface Color {\n  /**\n   * The number of channels used by the color.\n   */\n  get length(): number;\n  /**\n   * The maximum value for a color channel.\n   */\n  get maxChannelValue(): number;\n  /**\n   * The maximum value for a palette index.\n   */\n  get maxIndexValue(): number;\n  /**\n   * The Format of the color.\n   */\n  get format(): Format;\n  /**\n   *  True if the format is low dynamic range.\n   */\n  get isLdrFormat(): boolean;\n  /**\n   * True if the format is high dynamic range.\n   */\n  get isHdrFormat(): boolean;\n  /**\n   * True if the color uses a palette.\n   */\n  get hasPalette(): boolean;\n  /**\n   * The palette used by the color, or undefined.\n   */\n  get palette(): Palette | undefined;\n  /**\n   * Palette index value (or red channel if there is no palette).\n   */\n  get index(): number;\n  set index(i: number);\n  /**\n   * Red channel.\n   */\n  get r(): number;\n  set r(r: number);\n  /**\n   * Green channel.\n   */\n  get g(): number;\n  set g(g: number);\n  /**\n   * Blue channel.\n   */\n  get b(): number;\n  set b(b: number);\n  /**\n   * Alpha channel.\n   */\n  get a(): number;\n  set a(a: number);\n  /**\n   * Normalized [0, 1] red.\n   */\n  get rNormalized(): number;\n  set rNormalized(v: number);\n  /**\n   * Normalized [0, 1] green.\n   */\n  get gNormalized(): number;\n  set gNormalized(v: number);\n  /**\n   * Normalized [0, 1] blue.\n   */\n  get bNormalized(): number;\n  set bNormalized(v: number);\n  /**\n   * Normalized [0, 1] alpha.\n   */\n  get aNormalized(): number;\n  set aNormalized(v: number);\n  /**\n   * The luminance (grayscale) of the color.\n   */\n  get luminance(): number;\n  get luminanceNormalized(): number;\n  /**\n   * Gets a channel from the color by its index or Channel enum.\n   * If the channel isn't available, 0 will be returned.\n   */\n  getChannel(channel: number | Channel): number;\n  /**\n   * Sets a channel to the color by its index.\n   */\n  setChannel(channel: number | Channel, value: number): void;\n  /**\n   * Get the normalized [0, 1] value of A channel from the color. If the\n   * channel isn't available, 0 will be returned.\n   */\n  getChannelNormalized(channel: number | Channel): number;\n  /**\n   * The the values of this color to the given Color.\n   */\n  set(color: Color): void;\n  /**\n   * Set the individual **r**, **g**, **b** channels of the color.\n   */\n  setRgb(r: number, g: number, b: number): void;\n  /**\n   * Set the individual **r**, **g**, **b**, **a** channels of the color.\n   */\n  setRgba(r: number, g: number, b: number, a: number): void;\n  /**\n   * Converts the color to an array of channels.\n   */\n  toArray(): number[];\n  /**\n   * Returns a copy of the color.\n   */\n  clone(): Color;\n  /**\n   * Convert the **format** and/or the **numChannels** of the color. If\n   * **numChannels** is 4 and the current color does not have an alpha value,\n   * then **alpha** can specify what value to use for the new alpha channel.\n   * If **alpha** is not given, then **maxChannelValue** will be used.\n   */\n  convert(opt: ColorConvertOptions): Color;\n  /**\n   * Tests if this color is equivalent to another **Color**.\n   */\n  equals(other: Color | number[]): boolean;\n}\n", "/** @format */\n\nexport interface Crc32Options {\n  buffer: Uint8Array;\n  baseCrc?: number;\n  position?: number;\n  length?: number;\n}\n\nexport abstract class Crc32 {\n  private static readonly _crcTable = new Uint32Array(Crc32.makeTable());\n\n  private static makeTable() {\n    const table: number[] = [];\n    let c = 0;\n    for (let n = 0; n < 256; n++) {\n      c = n;\n      for (let k = 0; k < 8; k++) {\n        c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;\n      }\n      table[n] = c;\n    }\n    return table;\n  }\n\n  public static getChecksum(opt: Crc32Options) {\n    const t = Crc32._crcTable;\n    const len = opt.length ?? opt.buffer.length;\n    const pos = opt.position ?? 0;\n    const end = pos + len;\n\n    let result = (opt.baseCrc ?? 0) ^ -1;\n    for (let i = pos; i < end; i++) {\n      result = (result >>> 8) ^ t[(result ^ opt.buffer[i]) & 0xff];\n    }\n\n    return (result ^ -1) >>> 0;\n  }\n}\n", "/** @format */\n\nimport { LibError } from '../error/lib-error';\n\nexport abstract class StringUtils {\n  public static readonly utf8Decoder = new TextDecoder('utf8');\n  public static readonly latin1Decoder = new TextDecoder('latin1');\n\n  public static getCodePoints(str: string): Uint8Array {\n    const array = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      const codePoint = str.codePointAt(i);\n      if (codePoint !== undefined) {\n        if (0 <= codePoint && codePoint < 256) {\n          array[i] = codePoint;\n        } else {\n          throw new LibError(\n            `Error encoding text \"${str}\": unknown character code point ${codePoint}`\n          );\n        }\n      } else {\n        throw new LibError(`Error encoding text \"${str}\"`);\n      }\n    }\n    return array;\n  }\n}\n", "/** @format */\n\nimport { LibError } from '../error/lib-error';\nimport { BitUtils } from './bit-utils';\nimport { StringUtils } from './string-utils';\n\nexport interface InputBufferInitOptions {\n  buffer: Uint8Array;\n  offset?: number;\n  length?: number;\n  bigEndian?: boolean;\n}\n\n/**\n * A buffer that can be read as a stream of bytes.\n */\nexport class InputBuffer {\n  private readonly _buffer: Uint8Array;\n  public get buffer(): Uint8Array {\n    return this._buffer;\n  }\n\n  private _bigEndian: boolean;\n  public set bigEndian(v: boolean) {\n    this._bigEndian = v;\n  }\n  public get bigEndian(): boolean {\n    return this._bigEndian;\n  }\n\n  private _offset: number;\n  public set offset(v: number) {\n    this._offset = v;\n  }\n  public get offset(): number {\n    return this._offset;\n  }\n\n  private _start: number;\n  public get start(): number {\n    return this._start;\n  }\n\n  private _end: number;\n  public get end(): number {\n    return this._end;\n  }\n\n  /**\n   *  The current read position relative to the start of the buffer.\n   */\n  public get position(): number {\n    return this._offset - this._start;\n  }\n\n  /**\n   * How many bytes are left in the stream.\n   */\n  public get length(): number {\n    return this._end - this._offset;\n  }\n\n  /**\n   * Is the current position at the end of the stream?\n   */\n  public get isEOS(): boolean {\n    return this._offset >= this._end;\n  }\n\n  /**\n   * Create a InputStream for reading from an Array<int>\n   */\n  constructor(opt: InputBufferInitOptions) {\n    this._buffer = opt.buffer;\n    this._bigEndian = opt.bigEndian ?? false;\n    this._offset = opt.offset ?? 0;\n    this._start = this._offset;\n    this._end =\n      opt.length !== undefined ? this._start + opt.length : this._buffer.length;\n  }\n\n  /**\n   * Create a copy of **other**.\n   */\n  public static from(other: InputBuffer, offset?: number, length?: number) {\n    const offsetFromOther = offset ?? 0;\n    const result = new InputBuffer({\n      buffer: other._buffer,\n      bigEndian: other._bigEndian,\n      offset: other._offset + offsetFromOther,\n      length: length,\n    });\n    result._start = other._start;\n    result._end =\n      length !== undefined\n        ? other.offset + offsetFromOther + length\n        : other._end;\n    return result;\n  }\n\n  /**\n   * Reset to the beginning of the stream.\n   */\n  public rewind(): void {\n    this._offset = this._start;\n  }\n\n  /**\n   * Access the buffer relative from the current position.\n   */\n  public getByte(index: number): number {\n    return this._buffer[this._offset + index];\n  }\n\n  /**\n   * Set a buffer element relative to the current position.\n   */\n  public setByte(index: number, value: number) {\n    return (this._buffer[this._offset + index] = value);\n  }\n\n  /**\n   * Set a range of bytes in this buffer to **value**, at **start** offset from the\n   * current read position, and **length** number of bytes.\n   */\n  public memset(start: number, length: number, value: number): void {\n    this._buffer.fill(\n      this._offset + start,\n      this._offset + start + length,\n      value\n    );\n  }\n\n  /**\n   * Return an InputBuffer to read a subset of this stream. It does not\n   * move the read position of this stream. **position** is specified relative\n   * to the start of the buffer. If **position** is not specified, the current\n   * read position is used. If **length** is not specified, the remainder of this\n   * stream is used.\n   */\n  public subarray(count: number, position?: number, offset = 0): InputBuffer {\n    let pos = position !== undefined ? this._start + position : this._offset;\n    pos += offset;\n    return new InputBuffer({\n      buffer: this._buffer,\n      bigEndian: this._bigEndian,\n      offset: pos,\n      length: count,\n    });\n  }\n\n  /**\n   * Returns the position of the given **value** within the buffer, starting\n   * from the current read position with the given **offset**. The position\n   * returned is relative to the start of the buffer, or -1 if the **value**\n   * was not found.\n   */\n  public indexOf(value: number, offset = 0): number {\n    const end = this.offset + this.length;\n    for (let i = this.offset + offset; i < end; ++i) {\n      if (this._buffer[i] === value) {\n        return i - this._start;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Read **count** bytes from an **offset** of the current read position, without\n   * moving the read position.\n   */\n  public peekBytes(count: number, offset = 0): InputBuffer {\n    return this.subarray(count, undefined, offset);\n  }\n\n  /**\n   * Move the read position by **count** bytes.\n   */\n  public skip(count: number): void {\n    this._offset += count;\n  }\n\n  /**\n   * Read a single byte.\n   */\n  public readByte(): number {\n    return this._buffer[this._offset++];\n  }\n\n  public readInt8(): number {\n    return BitUtils.uint8ToInt8(this.readByte());\n  }\n\n  /**\n   * Read **count** bytes from the stream.\n   */\n  public readBytes(count: number): InputBuffer {\n    const bytes = this.subarray(count);\n    this._offset += bytes.length;\n    return bytes;\n  }\n\n  /**\n   * Read a null-terminated string, or if **length** is provided, that number of\n   * bytes returned as a string.\n   */\n  public readString(length?: number): string {\n    if (length === undefined) {\n      const codes: number[] = [];\n      while (!this.isEOS) {\n        const c = this.readByte();\n        if (c === 0) {\n          return String.fromCharCode(...codes);\n        }\n        codes.push(c);\n      }\n      throw new LibError('EOF reached without finding string terminator.');\n    }\n\n    const s = this.readBytes(length);\n    const bytes = s.toUint8Array();\n    const result = String.fromCharCode(...bytes);\n    return result;\n  }\n\n  /**\n   * Read a null-terminated UTF-8 string.\n   */\n  public readStringUtf8(): string {\n    const codes: number[] = [];\n    while (!this.isEOS) {\n      const c = this.readByte();\n      if (c === 0) {\n        const array = new Uint8Array(codes);\n        return StringUtils.utf8Decoder.decode(array);\n      }\n      codes.push(c);\n    }\n    const array = new Uint8Array(codes);\n    return StringUtils.utf8Decoder.decode(array);\n  }\n\n  /**\n   * Read a 16-bit word from the stream.\n   */\n  public readUint16(): number {\n    const b1 = this._buffer[this._offset++] & 0xff;\n    const b2 = this._buffer[this._offset++] & 0xff;\n    if (this._bigEndian) {\n      return (b1 << 8) | b2;\n    }\n    return (b2 << 8) | b1;\n  }\n\n  /**\n   * Read a 16-bit word from the stream.\n   */\n  public readInt16(): number {\n    return BitUtils.uint16ToInt16(this.readUint16());\n  }\n\n  /**\n   * Read a 24-bit word from the stream.\n   */\n  public readUint24(): number {\n    const b1 = this._buffer[this._offset++] & 0xff;\n    const b2 = this._buffer[this._offset++] & 0xff;\n    const b3 = this._buffer[this._offset++] & 0xff;\n    if (this._bigEndian) {\n      return b3 | (b2 << 8) | (b1 << 16);\n    }\n    return b1 | (b2 << 8) | (b3 << 16);\n  }\n\n  /**\n   * Read a 32-bit word from the stream.\n   */\n  public readUint32(): number {\n    return BitUtils.int32ToUint32(this.readInt32());\n  }\n\n  /**\n   * Read a signed 32-bit integer from the stream.\n   */\n  public readInt32(): number {\n    const b1 = this._buffer[this._offset++] & 0xff;\n    const b2 = this._buffer[this._offset++] & 0xff;\n    const b3 = this._buffer[this._offset++] & 0xff;\n    const b4 = this._buffer[this._offset++] & 0xff;\n    return this._bigEndian\n      ? (b1 << 24) | (b2 << 16) | (b3 << 8) | b4\n      : (b4 << 24) | (b3 << 16) | (b2 << 8) | b1;\n  }\n\n  /**\n   * Read a 32-bit float.\n   */\n  public readFloat32(): number {\n    return BitUtils.uint32ToFloat32(this.readUint32());\n  }\n\n  /**\n   * Read a 64-bit float.\n   */\n  public readFloat64(): number {\n    return BitUtils.uint64ToFloat64(this.readUint64());\n  }\n\n  /**\n   * Read a 64-bit word form the stream.\n   */\n  public readUint64(): bigint {\n    const b1 = this._buffer[this._offset++] & 0xff;\n    const b2 = this._buffer[this._offset++] & 0xff;\n    const b3 = this._buffer[this._offset++] & 0xff;\n    const b4 = this._buffer[this._offset++] & 0xff;\n    const b5 = this._buffer[this._offset++] & 0xff;\n    const b6 = this._buffer[this._offset++] & 0xff;\n    const b7 = this._buffer[this._offset++] & 0xff;\n    const b8 = this._buffer[this._offset++] & 0xff;\n    if (this._bigEndian) {\n      return (\n        BigInt(b1 << 56) |\n        BigInt(b2 << 48) |\n        BigInt(b3 << 40) |\n        BigInt(b4 << 32) |\n        BigInt(b5 << 24) |\n        BigInt(b6 << 16) |\n        BigInt(b7 << 8) |\n        BigInt(b8)\n      );\n    }\n    return (\n      BigInt(b8 << 56) |\n      BigInt(b7 << 48) |\n      BigInt(b6 << 40) |\n      BigInt(b5 << 32) |\n      BigInt(b4 << 24) |\n      BigInt(b3 << 16) |\n      BigInt(b2 << 8) |\n      BigInt(b1)\n    );\n  }\n\n  public toUint8Array(offset?: number, length?: number): Uint8Array {\n    const correctedOffset = offset ?? 0;\n    const correctedLength = length ?? this.length - correctedOffset;\n    return new Uint8Array(\n      this._buffer.buffer,\n      this._buffer.byteOffset + this._offset + correctedOffset,\n      correctedLength\n    );\n  }\n\n  public toUint32Array(offset?: number): Uint32Array {\n    const correctedOffset = offset ?? 0;\n    return new Uint32Array(\n      this._buffer.buffer,\n      this._buffer.byteOffset + this._offset + correctedOffset\n    );\n  }\n}\n", "/** @format */\n\n/**\n * Interpolation method to use when resizing images.\n */\nexport enum Interpolation {\n  /**\n   * Select the closest pixel.Fastest, lowest quality.\n   */\n  nearest,\n\n  /**\n   * Linearly blend between the neighboring pixels.\n   */\n  linear,\n\n  /**\n   * Cubic blend between the neighboring pixels. Slowest, highest Quality.\n   */\n  cubic,\n\n  /**\n   * Average the colors of the neighboring pixels.\n   */\n  average,\n}\n", "/** @format */\n\nimport { Point } from './point';\n\nexport class Line {\n  private _x1: number;\n  private _y1: number;\n  private _x2: number;\n  private _y2: number;\n\n  public get x1(): number {\n    return this._x1;\n  }\n\n  public get y1(): number {\n    return this._y1;\n  }\n\n  public get x2(): number {\n    return this._x2;\n  }\n\n  public get y2(): number {\n    return this._y2;\n  }\n\n  public get dx(): number {\n    return this._x2 - this._x1;\n  }\n\n  public get dy(): number {\n    return this._y2 - this._y1;\n  }\n\n  constructor(x1: number, y1: number, x2: number, y2: number) {\n    this._x1 = x1;\n    this._y1 = y1;\n    this._x2 = x2;\n    this._y2 = y2;\n  }\n\n  public static from(other: Line) {\n    return new Line(other.x1, other.y1, other.x2, other.y2);\n  }\n\n  public movePoint1(x: number, y: number) {\n    this._x1 = x;\n    this._y1 = y;\n  }\n\n  public movePoint2(x: number, y: number) {\n    this._x2 = x;\n    this._y2 = y;\n  }\n\n  public swapXY1() {\n    const tmp = this._x1;\n    this._x1 = this._y1;\n    this._y1 = tmp;\n  }\n\n  public swapXY2() {\n    const tmp = this._x2;\n    this._x2 = this._y2;\n    this._y2 = tmp;\n  }\n\n  public flipX() {\n    const tmp = this._x1;\n    this._x1 = this._x2;\n    this._x2 = tmp;\n  }\n\n  public flipY() {\n    const tmp = this._y1;\n    this._y1 = this._y2;\n    this._y2 = tmp;\n  }\n\n  public clone(): Line {\n    return new Line(this._x1, this._y1, this._x2, this._y2);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (x1: ${this._x1}, y1: ${this._y1}, x2: ${this._x2}, y2: ${this._y2})`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from './input-buffer';\nimport { ArrayUtils } from './array-utils';\n\nexport interface OutputBufferInitOptions {\n  bigEndian?: boolean;\n  size?: number;\n}\n\nexport class OutputBuffer {\n  // 8k block-size\n  private static readonly _blockSize = 0x2000;\n\n  private _buffer: Uint8Array;\n  public get buffer(): Uint8Array {\n    return this._buffer;\n  }\n\n  private _bigEndian: boolean;\n  public get bigEndian(): boolean {\n    return this._bigEndian;\n  }\n  public set bigEndian(v: boolean) {\n    this._bigEndian = v;\n  }\n\n  private _length: number;\n  public get length(): number {\n    return this._length;\n  }\n  public set length(v: number) {\n    this._length = v;\n  }\n\n  /**\n   * Create a byte buffer for writing.\n   */\n  constructor(opt?: OutputBufferInitOptions) {\n    this._bigEndian = opt?.bigEndian ?? false;\n    this._buffer = new Uint8Array(opt?.size ?? OutputBuffer._blockSize);\n    this._length = 0;\n  }\n\n  /**\n   * Grow the buffer to accommodate additional data.\n   */\n  private expandBuffer(required?: number): void {\n    let blockSize: number = OutputBuffer._blockSize;\n    if (required !== undefined) {\n      blockSize = required;\n    } else if (this._buffer.length > 0) {\n      blockSize = this._buffer.length * 2;\n    }\n    const newBuffer = new Uint8Array(this._buffer.length + blockSize);\n    ArrayUtils.copyRange(this._buffer, 0, this._buffer.length, newBuffer, 0);\n    this._buffer = newBuffer;\n  }\n\n  public rewind(): void {\n    this._length = 0;\n  }\n\n  /**\n   * Clear the buffer.\n   */\n  public clear(): void {\n    this._buffer = new Uint8Array(OutputBuffer._blockSize);\n    this._length = 0;\n  }\n\n  /**\n   * Get the resulting bytes from the buffer.\n   */\n  public getBytes(): Uint8Array {\n    return new Uint8Array(this._buffer.buffer, 0, this._length);\n  }\n\n  /**\n   * Write a byte to the end of the buffer.\n   */\n  public writeByte(value: number): void {\n    if (this._length === this._buffer.length) {\n      this.expandBuffer();\n    }\n    this._buffer[this._length++] = value & 0xff;\n  }\n\n  /**\n   * Write a set of bytes to the end of the buffer.\n   */\n  public writeBytes(bytes: Uint8Array, length?: number): void {\n    const bytesLength = length ?? bytes.length;\n    while (this._length + bytesLength > this._buffer.length) {\n      this.expandBuffer(this._length + bytesLength - this._buffer.length);\n    }\n    ArrayUtils.copyRange(bytes, 0, bytesLength, this._buffer, this._length);\n    this._length += bytesLength;\n  }\n\n  public writeBuffer(bytes: InputBuffer): void {\n    const bytesLength = bytes.length;\n    const requiredLength = this._length + bytesLength;\n    while (requiredLength > this._buffer.length) {\n      this.expandBuffer(requiredLength - this._buffer.length);\n    }\n    ArrayUtils.copyRange(\n      bytes.buffer,\n      bytes.offset,\n      bytesLength,\n      this._buffer,\n      this._length\n    );\n    this._length += bytesLength;\n  }\n\n  /**\n   * Write a 16-bit word to the end of the buffer.\n   */\n  public writeUint16(value: number): void {\n    if (this._bigEndian) {\n      this.writeByte((value >> 8) & 0xff);\n      this.writeByte(value & 0xff);\n      return;\n    }\n    this.writeByte(value & 0xff);\n    this.writeByte((value >> 8) & 0xff);\n  }\n\n  /**\n   * Write a 32-bit word to the end of the buffer.\n   */\n  public writeUint32(value: number): void {\n    if (this._bigEndian) {\n      this.writeByte((value >> 24) & 0xff);\n      this.writeByte((value >> 16) & 0xff);\n      this.writeByte((value >> 8) & 0xff);\n      this.writeByte(value & 0xff);\n      return;\n    }\n    this.writeByte(value & 0xff);\n    this.writeByte((value >> 8) & 0xff);\n    this.writeByte((value >> 16) & 0xff);\n    this.writeByte((value >> 24) & 0xff);\n  }\n\n  /**\n   * Write a 32-bit float value to the end of the buffer.\n   */\n  public writeFloat32(value: number): void {\n    const fb = new Float32Array(1);\n    fb[0] = value;\n    const b = new Uint8Array(fb.buffer);\n    if (this._bigEndian) {\n      this.writeByte(b[3]);\n      this.writeByte(b[2]);\n      this.writeByte(b[1]);\n      this.writeByte(b[0]);\n      return;\n    }\n    this.writeByte(b[0]);\n    this.writeByte(b[1]);\n    this.writeByte(b[2]);\n    this.writeByte(b[3]);\n  }\n\n  /**\n   * Write a 64-bit float value to the end of the buffer.\n   */\n  public writeFloat64(value: number): void {\n    const fb = new Float64Array(1);\n    fb[0] = value;\n    const b = new Uint8Array(fb.buffer);\n    if (this._bigEndian) {\n      this.writeByte(b[7]);\n      this.writeByte(b[6]);\n      this.writeByte(b[5]);\n      this.writeByte(b[4]);\n      this.writeByte(b[3]);\n      this.writeByte(b[2]);\n      this.writeByte(b[1]);\n      this.writeByte(b[0]);\n      return;\n    }\n    this.writeByte(b[0]);\n    this.writeByte(b[1]);\n    this.writeByte(b[2]);\n    this.writeByte(b[3]);\n    this.writeByte(b[4]);\n    this.writeByte(b[5]);\n    this.writeByte(b[6]);\n    this.writeByte(b[7]);\n  }\n\n  /**\n   * Return the subarray of the buffer in the range [**start**,**end**].\n   * If **start** or **end** are < 0 then it is relative to the end of the buffer.\n   * If **end** is not specified (or undefined), then it is the end of the buffer.\n   * This is equivalent to the python list range operator.\n   */\n  public subarray(start: number, end?: number): Uint8Array {\n    const correctedStart: number = start >= 0 ? start : this._length + start;\n    let correctedEnd: number = end ?? this._length;\n    if (correctedEnd < 0) {\n      correctedEnd = this._length + correctedEnd;\n    }\n    return new Uint8Array(\n      this._buffer.buffer,\n      correctedStart,\n      correctedEnd - correctedStart\n    );\n  }\n}\n", "/**\n * 2-dimensional point\n *\n * @format\n */\n\nexport class Point {\n  private _x: number;\n  private _y: number;\n\n  public get x(): number {\n    return this._x;\n  }\n\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xt() {\n    return Math.trunc(this.x);\n  }\n\n  public get yt() {\n    return Math.trunc(this.y);\n  }\n\n  constructor(x: number, y: number) {\n    this._x = x;\n    this._y = y;\n  }\n\n  public static from(other: Point): Point {\n    return new Point(other._x, other._y);\n  }\n\n  public move(x: number, y: number): Point {\n    return new Point(x, y);\n  }\n\n  public offset(dx: number, dy: number): Point {\n    return this.move(this._x + dx, this._y + dy);\n  }\n\n  public mul(n: number): Point {\n    return this.move(this._x * n, this._y * n);\n  }\n\n  public add(p: Point): Point {\n    return this.move(this._x + p._x, this._y + p._y);\n  }\n\n  public equals(other: Point) {\n    return this._x === other._x && this._y === other._y;\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (x: ${this._x}, y: ${this._y})`;\n  }\n}\n", "/** @format */\n\nexport abstract class RandomUtils {\n  /**\n   * Return a random number between [-1, 1].\n   */\n  public static crand(): number {\n    return 1 - 2 * Math.random();\n  }\n\n  /**\n   * Return a random number following a gaussian distribution and a standard\n   * deviation of 1.\n   */\n  public static grand(): number {\n    let x1 = 0;\n    let w = 0;\n    do {\n      const x2 = 2 * Math.random() - 1;\n      x1 = 2 * Math.random() - 1;\n      w = x1 * x1 + x2 * x2;\n    } while (w <= 0 || w >= 1);\n\n    return x1 * Math.sqrt((-2 * Math.log(w)) / w);\n  }\n\n  /**\n   * Return a random variable following a Poisson distribution of parameter **z**.\n   */\n  public static prand(z: number): number {\n    if (z <= 1e-10) {\n      return 0;\n    }\n    if (z > 100) {\n      return Math.trunc(Math.sqrt(z) * RandomUtils.grand() + z);\n    }\n    let k = 0;\n    const y = Math.exp(-z);\n    for (let s = 1.0; s >= y; ++k) {\n      s *= Math.random();\n    }\n    return k - 1;\n  }\n\n  /**\n   * Generates a non-negative random integer in the range from 0, inclusive, to **max**, exclusive.\n   */\n  public static intrand(max: number) {\n    return Math.floor(Math.random() * max);\n  }\n}\n", "/** @format */\n\nimport { Point } from './point';\n\nexport class Rectangle {\n  private readonly _left;\n  private readonly _top;\n  private readonly _right;\n  private readonly _bottom;\n\n  public get left(): number {\n    return this._left;\n  }\n\n  public get top(): number {\n    return this._top;\n  }\n\n  public get right(): number {\n    return this._right;\n  }\n\n  public get bottom(): number {\n    return this._bottom;\n  }\n\n  public get width(): number {\n    return this._right - this._left;\n  }\n\n  public get height(): number {\n    return this._bottom - this._top;\n  }\n\n  public get topLeft(): Point {\n    return new Point(this._left, this._top);\n  }\n\n  public get topRight(): Point {\n    return new Point(this._right, this._top);\n  }\n\n  public get bottomLeft(): Point {\n    return new Point(this._left, this._bottom);\n  }\n\n  public get bottomRight(): Point {\n    return new Point(this._right, this._bottom);\n  }\n\n  constructor(x1: number, y1: number, x2: number, y2: number) {\n    this._left = Math.min(x1, x2);\n    this._top = Math.min(y1, y2);\n    this._right = Math.max(x1, x2);\n    this._bottom = Math.max(y1, y2);\n  }\n\n  public static fromXYWH(x: number, y: number, width: number, height: number) {\n    return new Rectangle(x, y, x + width, y + height);\n  }\n\n  public static from(other: Rectangle) {\n    return new Rectangle(other._left, other._top, other._right, other._bottom);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (l: ${this._left}, t: ${this._top}, r: ${this._right}, b: ${this._bottom}, w: ${this.width}, h: ${this.height})`;\n  }\n}\n", "/** @format */\n\nexport type TypedArray =\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Uint8Array\n  | Uint16Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\nexport type BufferEncoding =\n  | 'ascii'\n  | 'utf8'\n  | 'utf-8'\n  | 'utf16le'\n  | 'ucs2'\n  | 'ucs-2'\n  | 'base64'\n  | 'latin1'\n  | 'binary'\n  | 'hex';\n\nexport type CompressionLevel =\n  | -1\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | undefined;\n", "/** @format */\n\nexport enum BlendMode {\n  direct,\n  alpha,\n  lighten,\n  screen,\n  dodge,\n  addition,\n  darken,\n  multiply,\n  burn,\n  overlay,\n  softLight,\n  hardLight,\n  difference,\n  subtract,\n  divide,\n}\n", "/** @format */\n\nexport enum CircleQuadrant {\n  topLeft = 1,\n  topRight = 2,\n  bottomLeft = 4,\n  bottomRight = 8,\n  all = topLeft | topRight | bottomLeft | bottomRight,\n}\n", "/** @format */\n\nimport { Line } from '../common/line';\nimport { Point } from '../common/point';\nimport { Rectangle } from '../common/rectangle';\nimport { Pixel } from './pixel';\n\nexport abstract class ImageUtils {\n  /**\n   * Test if the pixel **p** is within the circle centered at **center** with a\n   * squared radius of **rad2**. This will test the corners, edges, and center\n   * of the pixel and return the ratio of samples within the circle.\n   */\n  public static circleTest(\n    p: Pixel,\n    center: Point,\n    rad2: number,\n    antialias = true\n  ): number {\n    let total = 0;\n    const dx1 = p.x - center.x;\n    const dy1 = p.y - center.y;\n    const d1 = dx1 * dx1 + dy1 * dy1;\n    const r1 = d1 <= rad2 ? 1 : 0;\n    total += r1;\n\n    const dx2 = p.x + 1 - center.x;\n    const dy2 = p.y - center.y;\n    const d2 = dx2 * dx2 + dy2 * dy2;\n    const r2 = d2 <= rad2 ? 1 : 0;\n    total += r2;\n\n    const dx3 = p.x + 1 - center.x;\n    const dy3 = p.y + 1 - center.y;\n    const d3 = dx3 * dx3 + dy3 * dy3;\n    const r3 = d3 <= rad2 ? 1 : 0;\n    total += r3;\n\n    const dx4 = p.x - center.x;\n    const dy4 = p.y + 1 - center.y;\n    const d4 = dx4 * dx4 + dy4 * dy4;\n    const r4 = d4 <= rad2 ? 1 : 0;\n    total += r4;\n\n    const dx5 = p.x + 0.5 - center.x;\n    const dy5 = p.y - center.y;\n    const d5 = dx5 * dx5 + dy5 * dy5;\n    const r5 = d5 <= rad2 ? 1 : 0;\n    total += r5;\n\n    const dx6 = p.x + 0.5 - center.x;\n    const dy6 = p.y + 1 - center.y;\n    const d6 = dx6 * dx6 + dy6 * dy6;\n    const r6 = d6 <= rad2 ? 1 : 0;\n    total += r6;\n\n    const dx7 = p.x - center.x;\n    const dy7 = p.y + 0.5 - center.y;\n    const d7 = dx7 * dx7 + dy7 * dy7;\n    const r7 = d7 <= rad2 ? 1 : 0;\n    total += r7;\n\n    const dx8 = p.x + 1 - center.x;\n    const dy8 = p.y + 0.5 - center.y;\n    const d8 = dx8 * dx8 + dy8 * dy8;\n    const r8 = d8 <= rad2 ? 1 : 0;\n    total += r8;\n\n    const dx9 = p.x + 0.5 - center.x;\n    const dy9 = p.y + 0.5 - center.y;\n    const d9 = dx9 * dx9 + dy9 * dy9;\n    const r9 = d9 <= rad2 ? 1 : 0;\n    total += r9;\n\n    return antialias ? total / 9 : total > 0 ? 1 : 0;\n  }\n\n  /**\n   * Clip a line to a rectangle using the Cohen\u2013Sutherland clipping algorithm.\n   * **line** is a Line object.\n   * **rect** is a Rectangle object.\n   * Results are stored in **line**.\n   * If **line** falls completely outside of **rect**, false is returned, otherwise\n   * true is returned.\n   */\n  public static clipLine(rect: Rectangle, line: Line): boolean {\n    const xmin = rect.left;\n    const ymin = rect.top;\n    const xmax = rect.right;\n    const ymax = rect.bottom;\n\n    // 0000\n    const inside = 0;\n    // 0001\n    const left = 1;\n    // 0010\n    const right = 2;\n    // 0100\n    const bottom = 4;\n    // 1000\n    const top = 8;\n\n    const computeOutCode = (p: Point): number => {\n      // initialized as being inside of clip window\n      let code = inside;\n      if (p.x < xmin) {\n        // to the left of clip window\n        code |= left;\n      } else if (p.x > xmax) {\n        // to the right of clip window\n        code |= right;\n      }\n\n      if (p.y < ymin) {\n        // below the clip window\n        code |= bottom;\n      } else if (p.y > ymax) {\n        // above the clip window\n        code |= top;\n      }\n\n      return code;\n    };\n\n    // compute outcodes for P0, P1, and whatever point lies outside the clip rectangle\n    let outcode1 = computeOutCode(new Point(line.x1, line.y1));\n    let outcode2 = computeOutCode(new Point(line.x2, line.y2));\n    let accept = false;\n\n    while (true) {\n      if ((outcode1 | outcode2) === 0) {\n        // Bitwise OR is 0. Trivially accept and get out of loop\n        accept = true;\n        break;\n      } else if ((outcode1 & outcode2) !== 0) {\n        // Bitwise AND is not 0. Trivially reject and get out of loop\n        break;\n      } else {\n        // failed both tests, so calculate the line segment to clip\n        // from an outside point to an intersection with clip edge\n\n        // At least one endpoint is outside the clip rectangle; pick it.\n        const outcodeOut = outcode1 !== 0 ? outcode1 : outcode2;\n\n        let x = 0;\n        let y = 0;\n\n        // Now find the intersection point;\n        // use formulas y = y0 + slope * (x - x0), x = x0 + (1 / slope) * (y - y0)\n        if ((outcodeOut & top) !== 0) {\n          // point is above the clip rectangle\n          x = line.x1 + Math.trunc((line.dx * (ymax - line.y1)) / line.dy);\n          y = ymax;\n        } else if ((outcodeOut & bottom) !== 0) {\n          // point is below the clip rectangle\n          x = line.x1 + Math.trunc((line.dx * (ymin - line.y1)) / line.dy);\n          y = ymin;\n        } else if ((outcodeOut & right) !== 0) {\n          // point is to the right of clip rectangle\n          y = line.y1 + Math.trunc((line.dy * (xmax - line.x1)) / line.dx);\n          x = xmax;\n        } else if ((outcodeOut & left) !== 0) {\n          // point is to the left of clip rectangle\n          y = line.y1 + Math.trunc((line.dy * (xmin - line.x1)) / line.dx);\n          x = xmin;\n        }\n\n        // Now we move outside point to intersection point to clip\n        // and get ready for next pass.\n        if (outcodeOut === outcode1) {\n          line.movePoint1(x, y);\n          outcode1 = computeOutCode(new Point(line.x1, line.y1));\n        } else {\n          line.movePoint2(x, y);\n          outcode2 = computeOutCode(new Point(line.x2, line.y2));\n        }\n      }\n    }\n\n    return accept;\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { ArrayUtils } from '../common/array-utils';\nimport { Line } from '../common/line';\nimport { MathUtils } from '../common/math-utils';\nimport { Point } from '../common/point';\nimport { Rectangle } from '../common/rectangle';\nimport { MemoryImage } from '../image/image';\nimport { ImageUtils } from '../image/image-utils';\nimport { Pixel } from '../image/pixel';\nimport { BlendMode } from './blend-mode';\nimport { CircleQuadrant } from './circle-quadrant';\n\ntype FillFloodTestPixel = (y: number, x: number) => boolean;\ntype FillFloodMarkPixel = (y: number, x: number) => void;\n\ninterface DrawLineWuOptions {\n  image: MemoryImage;\n  line: Line;\n  color: Color;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface DrawLineOptions extends DrawLineWuOptions {\n  antialias?: boolean;\n  thickness?: number;\n}\n\ninterface DrawAntialiasCircleOptions {\n  image: MemoryImage;\n  x: number;\n  y: number;\n  radius: number;\n  color: Color;\n  quadrants?: CircleQuadrant;\n  mask?: MemoryImage;\n  maskChannel?: Channel;\n}\n\nexport interface DrawCircleOptions {\n  image: MemoryImage;\n  center: Point;\n  radius: number;\n  color: Color;\n  antialias?: boolean;\n  mask?: MemoryImage;\n  maskChannel?: Channel;\n}\n\nexport interface DrawPixelOptions {\n  image: MemoryImage;\n  pos: Point;\n  color: Color;\n  filter?: Color;\n  alpha?: number;\n  blend?: BlendMode;\n  linearBlend?: boolean;\n  mask?: MemoryImage;\n  maskChannel?: Channel;\n}\n\nexport interface DrawPolygonOptions {\n  image: MemoryImage;\n  vertices: Point[];\n  color: Color;\n  antialias?: boolean;\n  thickness?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface DrawRectOptions {\n  image: MemoryImage;\n  rect: Rectangle;\n  color: Color;\n  thickness?: number;\n  radius?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface FillCircleOptions {\n  image: MemoryImage;\n  center: Point;\n  radius: number;\n  color: Color;\n  antialias?: boolean;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface FillFloodOptions {\n  image: MemoryImage;\n  start: Point;\n  color: Color;\n  threshold?: number;\n  compareAlpha?: boolean;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface MaskFloodOptions {\n  image: MemoryImage;\n  start: Point;\n  threshold?: number;\n  compareAlpha?: boolean;\n  fillValue?: number;\n}\n\nexport interface FillPolygonOptions {\n  image: MemoryImage;\n  vertices: Point[];\n  color: Color;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface FillRectOptions {\n  image: MemoryImage;\n  rect: Rectangle;\n  color: Color;\n  radius?: number;\n  mask?: MemoryImage;\n  maskChannel?: Channel;\n}\n\nexport interface FillOptions {\n  image: MemoryImage;\n  color: Color;\n  maskChannel?: Channel.luminance;\n  mask?: MemoryImage;\n}\n\nexport interface CompositeImageOptions {\n  dst: MemoryImage;\n  src: MemoryImage;\n  dstX?: number;\n  dstY?: number;\n  dstW?: number;\n  dstH?: number;\n  srcX?: number;\n  srcY?: number;\n  srcW?: number;\n  srcH?: number;\n  blend?: BlendMode;\n  linearBlend?: boolean;\n  center?: boolean;\n  mask?: MemoryImage;\n  maskChannel?: Channel;\n}\n\nexport abstract class Draw {\n  /**\n   * Calculate the pixels that make up the circumference of a circle on the\n   * given **image**, centered at **center** and the given **radius**.\n   *\n   * The returned array of points is sorted, first by the **center.x** coordinate, and\n   * second by the **center.y** coordinate.\n   */\n  private static calculateCircumference(\n    image: MemoryImage,\n    center: Point,\n    radius: number\n  ): Point[] {\n    if (\n      radius < 0 ||\n      center.x + radius < 0 ||\n      center.x - radius >= image.width ||\n      center.y + radius < 0 ||\n      center.y - radius >= image.height\n    ) {\n      return [];\n    }\n\n    if (radius === 0) {\n      return [center];\n    }\n\n    const points: Point[] = [\n      new Point(center.x - radius, center.y),\n      new Point(center.x + radius, center.y),\n      new Point(center.x, center.y - radius),\n      new Point(center.x, center.y + radius),\n    ];\n\n    if (radius === 1) {\n      return points;\n    }\n\n    for (\n      let f = 1 - radius, ddFx = 0, ddFy = -(radius << 1), x = 0, y = radius;\n      x < y;\n\n    ) {\n      if (f >= 0) {\n        ddFy += 2;\n        f += ddFy;\n        --y;\n      }\n      ++x;\n      ddFx += 2;\n      f += ddFx + 1;\n\n      if (x !== y + 1) {\n        const x1 = center.x - y;\n        const x2 = center.x + y;\n        const y1 = center.y - x;\n        const y2 = center.y + x;\n        const x3 = center.x - x;\n        const x4 = center.x + x;\n        const y3 = center.y - y;\n        const y4 = center.y + y;\n\n        points.push(new Point(x1, y1));\n        points.push(new Point(x1, y2));\n        points.push(new Point(x2, y1));\n        points.push(new Point(x2, y2));\n\n        if (x !== y) {\n          points.push(new Point(x3, y3));\n          points.push(new Point(x4, y4));\n          points.push(new Point(x4, y3));\n          points.push(new Point(x3, y4));\n        }\n      }\n    }\n\n    return points;\n  }\n\n  private static drawAntialiasCircle(\n    opt: DrawAntialiasCircleOptions\n  ): MemoryImage {\n    const drawPixel4 = (\n      x: number,\n      y: number,\n      dx: number,\n      dy: number,\n      alpha: number\n    ): void => {\n      // bottom right\n      if ((quadrants & CircleQuadrant.bottomRight) !== 0) {\n        Draw.drawPixel({\n          image: opt.image,\n          pos: new Point(x + dx, y + dy),\n          color: opt.color,\n          alpha: alpha,\n          maskChannel: maskChannel,\n          mask: opt.mask,\n        });\n      }\n\n      // bottom left\n      if ((quadrants & CircleQuadrant.bottomLeft) !== 0) {\n        Draw.drawPixel({\n          image: opt.image,\n          pos: new Point(x - dx, y + dy),\n          color: opt.color,\n          alpha: alpha,\n          maskChannel: maskChannel,\n          mask: opt.mask,\n        });\n      }\n\n      // upper right\n      if ((quadrants & CircleQuadrant.topRight) !== 0) {\n        Draw.drawPixel({\n          image: opt.image,\n          pos: new Point(x + dx, y - dy),\n          color: opt.color,\n          alpha: alpha,\n          maskChannel: maskChannel,\n          mask: opt.mask,\n        });\n      }\n\n      // upper left\n      if ((quadrants & CircleQuadrant.topLeft) !== 0) {\n        Draw.drawPixel({\n          image: opt.image,\n          pos: new Point(x - dx, y - dy),\n          color: opt.color,\n          alpha: alpha,\n          maskChannel: maskChannel,\n          mask: opt.mask,\n        });\n      }\n    };\n\n    const quadrants = opt.quadrants ?? CircleQuadrant.all;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const radiusSqr = opt.radius * opt.radius;\n    const quarter = Math.round(opt.radius / Math.SQRT2);\n    for (let i = 0; i <= quarter; ++i) {\n      const j = Math.sqrt(radiusSqr - i * i);\n      const frc = MathUtils.fract(j);\n      const frc2 = frc * (i === quarter ? 0.25 : 1);\n      const flr = Math.floor(j);\n      drawPixel4(opt.x, opt.y, i, flr, 1 - frc);\n      drawPixel4(opt.x, opt.y, i, flr + 1, frc2);\n      drawPixel4(opt.x, opt.y, flr, i, 1 - frc);\n      drawPixel4(opt.x, opt.y, flr + 1, i, frc2);\n    }\n\n    return opt.image;\n  }\n\n  // Xiaolin Wu's line algorithm,\n  // https://en.wikipedia.org/wiki/Xiaolin_Wu's_line_algorithm\n  private static drawLineWu(opt: DrawLineWuOptions): MemoryImage {\n    const line = opt.line.clone();\n    const steep = Math.abs(line.dy) > Math.abs(line.dx);\n\n    if (steep) {\n      line.swapXY1();\n      line.swapXY2();\n    }\n    if (line.x1 > line.x2) {\n      line.flipX();\n      line.flipY();\n    }\n\n    const gradient = line.dx === 1 ? 1 : line.dy / line.dx;\n\n    // handle first endpoint\n    let xend = Math.floor(line.x1 + 0.5);\n    let yend = line.y1 + gradient * (xend - line.x1);\n    let xgap = 1 - (line.x1 + 0.5 - Math.floor(line.x1 + 0.5));\n    // this will be used in the main loop\n    const xpxl1 = xend;\n    const ypxl1 = Math.floor(yend);\n\n    if (steep) {\n      Draw.drawPixel({\n        image: opt.image,\n        pos: new Point(ypxl1, xpxl1),\n        color: opt.color,\n        alpha: (1 - (yend - Math.floor(yend))) * xgap,\n        maskChannel: opt.maskChannel,\n        mask: opt.mask,\n      });\n      Draw.drawPixel({\n        image: opt.image,\n        pos: new Point(ypxl1 + 1, xpxl1),\n        color: opt.color,\n        alpha: (yend - Math.floor(yend)) * xgap,\n        maskChannel: opt.maskChannel,\n        mask: opt.mask,\n      });\n    } else {\n      Draw.drawPixel({\n        image: opt.image,\n        pos: new Point(xpxl1, ypxl1),\n        color: opt.color,\n        alpha: (1 - (yend - Math.floor(yend))) * xgap,\n        maskChannel: opt.maskChannel,\n        mask: opt.mask,\n      });\n      Draw.drawPixel({\n        image: opt.image,\n        pos: new Point(xpxl1, ypxl1 + 1),\n        color: opt.color,\n        alpha: (yend - Math.floor(yend)) * xgap,\n        maskChannel: opt.maskChannel,\n        mask: opt.mask,\n      });\n    }\n\n    // first y-intersection for the main loop\n    let intery = yend + gradient;\n\n    // handle second endpoint\n    xend = Math.floor(line.x2 + 0.5);\n    yend = line.y2 + gradient * (xend - line.x2);\n    xgap = line.x2 + 0.5 - Math.floor(line.x2 + 0.5);\n\n    // this will be used in the main loop\n    const xpxl2 = xend;\n    const ypxl2 = Math.floor(yend);\n\n    if (steep) {\n      Draw.drawPixel({\n        image: opt.image,\n        pos: new Point(ypxl2, xpxl2),\n        color: opt.color,\n        alpha: (1 - (yend - Math.floor(yend))) * xgap,\n        mask: opt.mask,\n        maskChannel: opt.maskChannel,\n      });\n      Draw.drawPixel({\n        image: opt.image,\n        pos: new Point(ypxl2 + 1, xpxl2),\n        color: opt.color,\n        alpha: (yend - Math.floor(yend)) * xgap,\n        maskChannel: opt.maskChannel,\n        mask: opt.mask,\n      });\n\n      // main loop\n      for (let x = xpxl1 + 1; x <= xpxl2 - 1; x++) {\n        Draw.drawPixel({\n          image: opt.image,\n          pos: new Point(Math.floor(intery), x),\n          color: opt.color,\n          alpha: 1 - (intery - Math.floor(intery)),\n          mask: opt.mask,\n          maskChannel: opt.maskChannel,\n        });\n        Draw.drawPixel({\n          image: opt.image,\n          pos: new Point(Math.floor(intery) + 1, x),\n          color: opt.color,\n          alpha: intery - Math.floor(intery),\n          maskChannel: opt.maskChannel,\n          mask: opt.mask,\n        });\n\n        intery += gradient;\n      }\n    } else {\n      Draw.drawPixel({\n        image: opt.image,\n        pos: new Point(xpxl2, ypxl2),\n        color: opt.color,\n        alpha: (1 - (yend - Math.floor(yend))) * xgap,\n        maskChannel: opt.maskChannel,\n        mask: opt.mask,\n      });\n      Draw.drawPixel({\n        image: opt.image,\n        pos: new Point(xpxl2, ypxl2 + 1),\n        color: opt.color,\n        alpha: (yend - Math.floor(yend)) * xgap,\n        maskChannel: opt.maskChannel,\n        mask: opt.mask,\n      });\n\n      // main loop\n      for (let x = xpxl1 + 1; x <= xpxl2 - 1; x++) {\n        Draw.drawPixel({\n          image: opt.image,\n          pos: new Point(x, Math.floor(intery)),\n          color: opt.color,\n          alpha: 1 - (intery - Math.floor(intery)),\n          maskChannel: opt.maskChannel,\n          mask: opt.mask,\n        });\n        Draw.drawPixel({\n          image: opt.image,\n          pos: new Point(x, Math.floor(intery) + 1),\n          color: opt.color,\n          alpha: intery - Math.floor(intery),\n          maskChannel: opt.maskChannel,\n          mask: opt.mask,\n        });\n\n        intery += gradient;\n      }\n    }\n\n    return opt.image;\n  }\n\n  private static setAlpha(c: Color, a: number): Color {\n    c.a = a;\n    return c;\n  }\n\n  /**\n   * Compare colors from a 3 or 4 dimensional color space\n   */\n  private static colorDistance(\n    c1: number[],\n    c2: number[],\n    compareAlpha: boolean\n  ): number {\n    const d1 = c1[0] - c2[0];\n    const d2 = c1[1] - c2[1];\n    const d3 = c1[2] - c2[2];\n    if (compareAlpha) {\n      const dA = c1[3] - c2[3];\n      return Math.sqrt(\n        Math.max(d1 * d1, (d1 - dA) * (d1 - dA)) +\n          Math.max(d2 * d2, (d2 - dA) * (d2 - dA)) +\n          Math.max(d3 * d3, (d3 - dA) * (d3 - dA))\n      );\n    } else {\n      return Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3);\n    }\n  }\n\n  private static testPixelLabColorDistance(\n    src: MemoryImage,\n    x: number,\n    y: number,\n    refColor: number[],\n    threshold: number\n  ): boolean {\n    const pixel = src.getPixel(x, y);\n    const compareAlpha = refColor.length > 3;\n    const pixelColor = ColorUtils.rgbToLab(pixel.r, pixel.g, pixel.b);\n    if (compareAlpha) {\n      pixelColor.push(pixel.a);\n    }\n    return Draw.colorDistance(pixelColor, refColor, compareAlpha) > threshold;\n  }\n\n  private static fill4Core(\n    src: MemoryImage,\n    x: number,\n    y: number,\n    array: FillFloodTestPixel,\n    mark: FillFloodMarkPixel,\n    visited: Uint8Array\n  ): void {\n    let _x = x;\n    let _y = y;\n\n    if (visited[_y * src.width + _x] === 1) {\n      return;\n    }\n    // at this point, we know that array(y,x) is clear, and array(y-1,x) and\n    // array(y,x-1) are set. We'll begin scanning down and to the right,\n    // attempting to fill an entire rectangular block\n\n    // the number of cells that were clear in the last row we scanned\n    let lastRowLength = 0;\n\n    do {\n      let rowLength = 0;\n      let sx = _x;\n      // keep track of how long this row is. sx is the starting x for the main\n      // scan below now we want to handle a case like |***|, where we fill 3\n      // cells in the first row and then after we move to the second row we find\n      // the first  | **| cell is filled, ending our rectangular scan. rather\n      // than handling this via the recursion below, we'll increase the starting\n      // value of 'x' and reduce the last row length to match. then we'll continue\n      // trying to set the narrower rectangular block\n      if (lastRowLength !== 0 && array(_y, _x)) {\n        // if this is not the first row and the leftmost cell is filled...\n        do {\n          if (--lastRowLength === 0) {\n            // shorten the row. if it's full, we're done\n            return;\n          }\n          // otherwise, update the starting point of the main scan to match\n        } while (array(_y, ++_x));\n        sx = _x;\n      } else {\n        // we also want to handle the opposite case, | **|, where we begin\n        // scanning a 2-wide rectangular block and then find on the next row that\n        // it has |***| gotten wider on the left. again, we could handle this\n        // with recursion but we'd prefer to adjust x and lastRowLength instead\n        for (; _x !== 0 && !array(_y, _x - 1); rowLength++, lastRowLength++) {\n          mark(_y, --_x);\n          // to avoid scanning the cells twice, we'll fill them and update\n          // rowLength here if there's something above the new starting point,\n          // handle that recursively. this deals with cases like |* **| when we\n          // begin filling from (2,0), move down to (2,1), and then move left to\n          // (0,1). The  |****| main scan assumes the portion of the previous row\n          // from x to x+lastRowLength has already been filled. adjusting x and\n          // lastRowLength breaks that assumption in this case, so we must fix it\n          if (_y !== 0 && !array(_y - 1, _x)) {\n            // use _Fill since there may be more up and left\n            Draw.fill4(src, _x, _y - 1, array, mark, visited);\n          }\n        }\n      }\n\n      // now at this point we can begin to scan the current row in the rectangular\n      // block. the span of the previous row from x (inclusive) to x+lastRowLength\n      // (exclusive) has already been filled, so we don't need to\n      // check it. so scan across to the right in the current row\n      for (; sx < src.width && !array(_y, sx); rowLength++, sx++) {\n        mark(_y, sx);\n      }\n      // now we've scanned this row. if the block is rectangular, then the\n      // previous row has already been scanned, so we don't need to look upwards\n      // and we're going to scan the next row in the next iteration so we don't\n      // need to look downwards. however, if the block is not rectangular, we may\n      // need to look upwards or rightwards for some portion of the row. if this\n      // row was shorter than the last row, we may need to look rightwards near\n      // the end, as in the case of |*****|, where the first row is 5 cells long\n      // and the second row is 3 cells long. We must look to the right  |*** *|\n      // of the single cell at the end of the second row, i.e. at (4,1)\n      if (rowLength < lastRowLength) {\n        // 'end' is the end of the previous row, so scan the current row to\n        for (const end = _x + lastRowLength; ++sx < end; ) {\n          // there. any clear cells would have been connected to the previous\n          if (!array(_y, sx)) {\n            // row. the cells up and left must be set so use FillCore\n            Draw.fill4Core(src, sx, _y, array, mark, visited);\n          }\n        }\n      }\n      // alternately, if this row is longer than the previous row, as in the case\n      // |*** *| then we must look above the end of the row, i.e at (4,0)\n      // |*****|\n      else if (rowLength > lastRowLength && _y !== 0) {\n        // if this row is longer and we're not already at the top...\n        for (let ux = _x + lastRowLength; ++ux < sx; ) {\n          // sx is the end of the current row\n          if (!array(_y - 1, ux)) {\n            // since there may be clear cells up and left, use _Fill\n            Draw.fill4(src, ux, _y - 1, array, mark, visited);\n          }\n        }\n      }\n      // record the new row length\n      lastRowLength = rowLength;\n      // if we get to a full row or to the bottom, we're done\n    } while (lastRowLength !== 0 && ++_y < src.height);\n  }\n\n  // Adam Milazzo (2015). A More Efficient Flood Fill.\n  // http://www.adammil.net/blog/v126_A_More_Efficient_Flood_Fill.html\n  private static fill4(\n    src: MemoryImage,\n    x: number,\n    y: number,\n    array: FillFloodTestPixel,\n    mark: FillFloodMarkPixel,\n    visited: Uint8Array\n  ): void {\n    let _x = x;\n    let _y = y;\n\n    if (visited[_y * src.width + _x] === 1) {\n      return;\n    }\n\n    // at this point, we know array(y,x) is clear, and we want to move as far as\n    // possible to the upper-left. moving up is much more important than moving\n    // left, so we could try to make this smarter by sometimes moving to the\n    // right if doing so would allow us to move further up, but it doesn't seem\n    // worth the complexity\n    while (true) {\n      const ox = _x;\n      const oy = _y;\n      while (_y !== 0 && !array(_y - 1, _x)) {\n        _y--;\n      }\n      while (_x !== 0 && !array(_y, _x - 1)) {\n        _x--;\n      }\n      if (_x === ox && _y === oy) {\n        break;\n      }\n    }\n    Draw.fill4Core(src, _x, _y, array, mark, visited);\n  }\n\n  private static imgDirectComposite(\n    src: MemoryImage,\n    dst: MemoryImage,\n    dstX: number,\n    dstY: number,\n    dstW: number,\n    dstH: number,\n    xCache: number[],\n    yCache: number[],\n    maskChannel: Channel,\n    mask?: MemoryImage\n  ): void {\n    let p: Pixel | undefined = undefined;\n    if (mask !== undefined) {\n      for (let y = 0; y < dstH; ++y) {\n        for (let x = 0; x < dstW; ++x) {\n          const sx = xCache[x];\n          const sy = yCache[y];\n          p = src.getPixel(sx, sy, p);\n          const m = mask.getPixel(sx, sy).getChannelNormalized(maskChannel);\n          if (m === 1) {\n            dst.setPixel(dstX + x, dstY + y, p);\n          } else {\n            const dp = dst.getPixel(dstX + x, dstY + y);\n            dp.r = MathUtils.mix(dp.r, p.r, m);\n            dp.g = MathUtils.mix(dp.g, p.g, m);\n            dp.b = MathUtils.mix(dp.b, p.b, m);\n            dp.a = MathUtils.mix(dp.a, p.a, m);\n          }\n        }\n      }\n    } else {\n      for (let y = 0; y < dstH; ++y) {\n        for (let x = 0; x < dstW; ++x) {\n          p = src.getPixel(xCache[x], yCache[y], p);\n          dst.setPixel(dstX + x, dstY + y, p);\n        }\n      }\n    }\n  }\n\n  private static imgComposite(\n    src: MemoryImage,\n    dst: MemoryImage,\n    dstX: number,\n    dstY: number,\n    dstW: number,\n    dstH: number,\n    xCache: number[],\n    yCache: number[],\n    blend: BlendMode,\n    linearBlend: boolean,\n    maskChannel: Channel,\n    mask?: MemoryImage\n  ): void {\n    let p: Pixel | undefined = undefined;\n    for (let y = 0; y < dstH; ++y) {\n      for (let x = 0; x < dstW; ++x) {\n        p = src.getPixel(xCache[x], yCache[y], p);\n        Draw.drawPixel({\n          image: dst,\n          pos: new Point(dstX + x, dstY + y),\n          color: p,\n          blend: blend,\n          linearBlend: linearBlend,\n          maskChannel: maskChannel,\n          mask: mask,\n        });\n      }\n    }\n  }\n\n  /**\n   * Draw a circle into the **image** with a center of **center** and\n   * the given **radius** and **color**.\n   */\n  public static drawCircle(opt: DrawCircleOptions): MemoryImage {\n    const antialias = opt.antialias ?? false;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n    if (antialias) {\n      return Draw.drawAntialiasCircle({\n        image: opt.image,\n        x: opt.center.x,\n        y: opt.center.y,\n        radius: opt.radius,\n        color: opt.color,\n        mask: opt.mask,\n        maskChannel: maskChannel,\n      });\n    }\n\n    const points = Draw.calculateCircumference(\n      opt.image,\n      opt.center,\n      opt.radius\n    );\n    for (const pt of points) {\n      Draw.drawPixel({\n        image: opt.image,\n        pos: new Point(pt.x, pt.y),\n        color: opt.color,\n        mask: opt.mask,\n        maskChannel: maskChannel,\n      });\n    }\n    return opt.image;\n  }\n\n  /**\n   * Draw and fill a circle into the **image** with a **center**\n   * and the given **radius** and **color**.\n   */\n  public static fillCircle(opt: FillCircleOptions): MemoryImage {\n    const antialias = opt.antialias ?? false;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n    const radiusSqr = opt.radius * opt.radius;\n    const x1 = Math.max(0, opt.center.x - opt.radius);\n    const y1 = Math.max(0, opt.center.y - opt.radius);\n    const x2 = Math.min(opt.image.width - 1, opt.center.x + opt.radius);\n    const y2 = Math.min(opt.image.height - 1, opt.center.y + opt.radius);\n    const range = opt.image.getRange(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n\n    let it: IteratorResult<Pixel> | undefined = undefined;\n    while (((it = range.next()), !it.done)) {\n      const p = it.value;\n      if (antialias) {\n        const a = ImageUtils.circleTest(p, opt.center, radiusSqr, antialias);\n        if (a > 0) {\n          const alpha = opt.color.aNormalized * a;\n          Draw.drawPixel({\n            image: opt.image,\n            pos: new Point(p.x, p.y),\n            color: opt.color,\n            alpha: alpha,\n            maskChannel: maskChannel,\n            mask: opt.mask,\n          });\n        }\n      } else {\n        const dx = p.x - opt.center.x;\n        const dy = p.y - opt.center.y;\n        const d2 = dx * dx + dy * dy;\n        if (d2 < radiusSqr) {\n          Draw.drawPixel({\n            image: opt.image,\n            pos: new Point(p.x, p.y),\n            color: opt.color,\n            maskChannel: maskChannel,\n            mask: opt.mask,\n          });\n        }\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Draw a line into **image**.\n   *\n   * If **antialias** is true then the line is drawn with smooth edges.\n   * **thickness** determines how thick the line should be drawn, in pixels.\n   */\n  public static drawLine(opt: DrawLineOptions): MemoryImage {\n    const line = opt.line.clone();\n    const antialias = opt.antialias ?? false;\n    const thickness = opt.thickness ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (\n      !ImageUtils.clipLine(\n        new Rectangle(0, 0, opt.image.width - 1, opt.image.height - 1),\n        line\n      )\n    ) {\n      return opt.image;\n    }\n\n    const radius = Math.floor(thickness / 2);\n\n    // Drawing a single point.\n    if (line.dx === 0 && line.dy === 0) {\n      opt.thickness === 1\n        ? Draw.drawPixel({\n            image: opt.image,\n            pos: new Point(line.x1, line.y1),\n            color: opt.color,\n            maskChannel: opt.maskChannel,\n            mask: opt.mask,\n          })\n        : Draw.fillCircle({\n            image: opt.image,\n            center: new Point(line.x1, line.y1),\n            radius: radius,\n            color: opt.color,\n            maskChannel: opt.maskChannel,\n            mask: opt.mask,\n          });\n      return opt.image;\n    }\n\n    // Axis-aligned lines\n    if (line.dx === 0) {\n      if (line.dy < 0) {\n        for (let y = line.y2; y <= line.y1; ++y) {\n          if (thickness <= 1) {\n            Draw.drawPixel({\n              image: opt.image,\n              pos: new Point(line.x1, y),\n              color: opt.color,\n              maskChannel: maskChannel,\n              mask: opt.mask,\n            });\n          } else {\n            for (let i = 0; i < thickness; i++) {\n              Draw.drawPixel({\n                image: opt.image,\n                pos: new Point(line.x1 - radius + i, y),\n                color: opt.color,\n                maskChannel: maskChannel,\n                mask: opt.mask,\n              });\n            }\n          }\n        }\n      } else {\n        for (let y = line.y1; y <= line.y2; ++y) {\n          if (thickness <= 1) {\n            Draw.drawPixel({\n              image: opt.image,\n              pos: new Point(line.x1, y),\n              color: opt.color,\n              maskChannel: maskChannel,\n              mask: opt.mask,\n            });\n          } else {\n            for (let i = 0; i < thickness; i++) {\n              Draw.drawPixel({\n                image: opt.image,\n                pos: new Point(line.x1 - radius + i, y),\n                color: opt.color,\n                maskChannel: maskChannel,\n                mask: opt.mask,\n              });\n            }\n          }\n        }\n      }\n      return opt.image;\n    } else if (line.dy === 0) {\n      if (line.dx < 0) {\n        for (let x = line.x2; x <= line.x1; ++x) {\n          if (thickness <= 1) {\n            Draw.drawPixel({\n              image: opt.image,\n              pos: new Point(x, line.y1),\n              color: opt.color,\n              maskChannel: maskChannel,\n              mask: opt.mask,\n            });\n          } else {\n            for (let i = 0; i < thickness; i++) {\n              Draw.drawPixel({\n                image: opt.image,\n                pos: new Point(x, line.y1 - radius + i),\n                color: opt.color,\n                maskChannel: maskChannel,\n                mask: opt.mask,\n              });\n            }\n          }\n        }\n      } else {\n        for (let x = line.x1; x <= line.x2; ++x) {\n          if (thickness <= 1) {\n            Draw.drawPixel({\n              image: opt.image,\n              pos: new Point(x, line.y1),\n              color: opt.color,\n              maskChannel: maskChannel,\n              mask: opt.mask,\n            });\n          } else {\n            for (let i = 0; i < thickness; i++) {\n              Draw.drawPixel({\n                image: opt.image,\n                pos: new Point(x, line.y1 - radius + i),\n                color: opt.color,\n                maskChannel: maskChannel,\n                mask: opt.mask,\n              });\n            }\n          }\n        }\n      }\n      return opt.image;\n    }\n\n    // 16-bit unsigned int xor.\n    const xor = (n: number): number => {\n      return (~n + 0x10000) & 0xffff;\n    };\n\n    if (!antialias) {\n      const dx = Math.abs(line.dx);\n      const dy = Math.abs(line.dy);\n      if (dy <= dx) {\n        // More-or-less horizontal. use wid for vertical stroke\n        const ac = Math.cos(Math.atan2(dy, dx));\n        let wid = 0;\n        if (ac !== 0) {\n          wid = Math.trunc(thickness / ac);\n        } else {\n          wid = 1;\n        }\n\n        if (wid === 0) {\n          wid = 1;\n        }\n\n        let d = 2 * dy - dx;\n        const incr1 = 2 * dy;\n        const incr2 = 2 * (dy - dx);\n\n        let x = 0;\n        let y = 0;\n        let ydirflag = 0;\n        let xend = 0;\n        if (line.x1 > line.x2) {\n          x = line.x2;\n          y = line.y2;\n          ydirflag = -1;\n          xend = line.x1;\n        } else {\n          x = line.x1;\n          y = line.y1;\n          ydirflag = 1;\n          xend = line.x2;\n        }\n\n        // Set up line thickness\n        let wstart = Math.trunc(y - wid / 2);\n        for (let w = wstart; w < wstart + wid; w++) {\n          Draw.drawPixel({\n            image: opt.image,\n            pos: new Point(x, w),\n            color: opt.color,\n            maskChannel: maskChannel,\n            mask: opt.mask,\n          });\n        }\n\n        if ((line.y2 - line.y1) * ydirflag > 0) {\n          while (x < xend) {\n            x++;\n            if (d < 0) {\n              d += incr1;\n            } else {\n              y++;\n              d += incr2;\n            }\n            wstart = Math.trunc(y - wid / 2);\n            for (let w = wstart; w < wstart + wid; w++) {\n              Draw.drawPixel({\n                image: opt.image,\n                pos: new Point(x, w),\n                color: opt.color,\n                maskChannel: maskChannel,\n                mask: opt.mask,\n              });\n            }\n          }\n        } else {\n          while (x < xend) {\n            x++;\n            if (d < 0) {\n              d += incr1;\n            } else {\n              y--;\n              d += incr2;\n            }\n            wstart = Math.trunc(y - wid / 2);\n            for (let w = wstart; w < wstart + wid; w++) {\n              Draw.drawPixel({\n                image: opt.image,\n                pos: new Point(x, w),\n                color: opt.color,\n                maskChannel: maskChannel,\n                mask: opt.mask,\n              });\n            }\n          }\n        }\n      } else {\n        // More-or-less vertical. use wid for horizontal stroke\n        const as = Math.sin(Math.atan2(dy, dx));\n        let wid = 0;\n        if (as !== 0) {\n          wid = Math.trunc(thickness / as);\n        } else {\n          wid = 1;\n        }\n        if (wid === 0) {\n          wid = 1;\n        }\n\n        let d = 2 * dx - dy;\n        const incr1 = 2 * dx;\n        const incr2 = 2 * (dx - dy);\n        let x = 0;\n        let y = 0;\n        let yend = 0;\n        let xdirflag = 0;\n        if (line.y1 > line.y2) {\n          y = line.y2;\n          x = line.x2;\n          yend = line.y1;\n          xdirflag = -1;\n        } else {\n          y = line.y1;\n          x = line.x1;\n          yend = line.y2;\n          xdirflag = 1;\n        }\n\n        // Set up line thickness\n        let wstart = Math.trunc(x - wid / 2);\n        for (let w = wstart; w < wstart + wid; w++) {\n          Draw.drawPixel({\n            image: opt.image,\n            pos: new Point(w, y),\n            color: opt.color,\n            maskChannel: maskChannel,\n            mask: opt.mask,\n          });\n        }\n\n        if ((line.x2 - line.x1) * xdirflag > 0) {\n          while (y < yend) {\n            y++;\n            if (d < 0) {\n              d += incr1;\n            } else {\n              x++;\n              d += incr2;\n            }\n            wstart = Math.trunc(x - wid / 2);\n            for (let w = wstart; w < wstart + wid; w++) {\n              Draw.drawPixel({\n                image: opt.image,\n                pos: new Point(w, y),\n                color: opt.color,\n                maskChannel: maskChannel,\n                mask: opt.mask,\n              });\n            }\n          }\n        } else {\n          while (y < yend) {\n            y++;\n            if (d < 0) {\n              d += incr1;\n            } else {\n              x--;\n              d += incr2;\n            }\n            wstart = Math.trunc(x - wid / 2);\n            for (let w = wstart; w < wstart + wid; w++) {\n              Draw.drawPixel({\n                image: opt.image,\n                pos: new Point(w, y),\n                color: opt.color,\n                maskChannel: maskChannel,\n                mask: opt.mask,\n              });\n            }\n          }\n        }\n      }\n\n      return opt.image;\n    }\n\n    // Antialias Line\n    if (thickness === 1) {\n      return Draw.drawLineWu({\n        image: opt.image,\n        line: new Line(line.x1, line.y1, line.x2, line.y2),\n        color: opt.color,\n      });\n    }\n\n    const ag =\n      Math.abs(line.dy) < Math.abs(line.dx)\n        ? Math.cos(Math.atan2(line.dy, line.dx))\n        : Math.sin(Math.atan2(line.dy, line.dx));\n\n    let wid = 0;\n    if (ag !== 0.0) {\n      wid = Math.trunc(Math.abs(thickness / ag));\n    } else {\n      wid = 1;\n    }\n    if (wid === 0) {\n      wid = 1;\n    }\n\n    if (Math.abs(line.dx) > Math.abs(line.dy)) {\n      if (line.dx < 0) {\n        line.flipX();\n        line.flipY();\n      }\n\n      let y = line.y1;\n      const inc = Math.trunc((line.dy * 65536) / line.dx);\n      let frac = 0;\n\n      for (let x = line.x1; x <= line.x2; x++) {\n        const wstart = y - Math.trunc(wid / 2);\n        for (let w = wstart; w < wstart + wid; w++) {\n          Draw.drawPixel({\n            image: opt.image,\n            pos: new Point(x, w),\n            color: opt.color,\n            alpha: ((frac >> 8) & 0xff) / 255,\n            maskChannel: maskChannel,\n            mask: opt.mask,\n          });\n\n          Draw.drawPixel({\n            image: opt.image,\n            pos: new Point(x, w + 1),\n            color: opt.color,\n            alpha: ((xor(frac) >> 8) & 0xff) / 255,\n            maskChannel: maskChannel,\n            mask: opt.mask,\n          });\n        }\n\n        frac += inc;\n        if (frac >= 65536) {\n          frac -= 65536;\n          y++;\n        } else if (frac < 0) {\n          frac += 65536;\n          y--;\n        }\n      }\n    } else {\n      if (line.dy < 0) {\n        line.flipX();\n        line.flipY();\n      }\n\n      let x = line.x1;\n      const inc = Math.trunc((line.dx * 65536) / line.dy);\n      let frac = 0;\n\n      for (let y = line.y1; y <= line.y2; y++) {\n        const wstart = x - Math.trunc(wid / 2);\n        for (let w = wstart; w < wstart + wid; w++) {\n          Draw.drawPixel({\n            image: opt.image,\n            pos: new Point(w, y),\n            color: opt.color,\n            alpha: ((frac >> 8) & 0xff) / 255,\n            maskChannel: maskChannel,\n            mask: opt.mask,\n          });\n\n          Draw.drawPixel({\n            image: opt.image,\n            pos: new Point(w + 1, y),\n            color: opt.color,\n            alpha: ((xor(frac) >> 8) & 0xff) / 255,\n            maskChannel: maskChannel,\n            mask: opt.mask,\n          });\n        }\n\n        frac += inc;\n        if (frac >= 65536) {\n          frac -= 65536;\n          x++;\n        } else if (frac < 0) {\n          frac += 65536;\n          x--;\n        }\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Draw a single pixel into the image, applying alpha and opacity blending.\n   * If **filter** is provided, the color c will be scaled by the **filter**\n   * color. If **alpha** is provided, it will be used in place of the\n   * color alpha, as a normalized color value [0, 1].\n   */\n  public static drawPixel(opt: DrawPixelOptions): MemoryImage {\n    const blend = opt.blend ?? BlendMode.alpha;\n    const linearBlend = opt.linearBlend ?? false;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (!opt.image.isBoundsSafe(opt.pos.x, opt.pos.y)) {\n      return opt.image;\n    }\n\n    if (blend === BlendMode.direct || opt.image.hasPalette) {\n      if (opt.image.isBoundsSafe(opt.pos.x, opt.pos.y)) {\n        opt.image.getPixel(opt.pos.x, opt.pos.y).set(opt.color);\n        return opt.image;\n      }\n    }\n\n    const msk =\n      opt.mask\n        ?.getPixel(opt.pos.x, opt.pos.y)\n        .getChannelNormalized(maskChannel) ?? 1;\n\n    let overlayR =\n      opt.filter !== undefined\n        ? opt.color.rNormalized * opt.filter.rNormalized\n        : opt.color.rNormalized;\n    let overlayG =\n      opt.filter !== undefined\n        ? opt.color.gNormalized * opt.filter.gNormalized\n        : opt.color.gNormalized;\n    let overlayB =\n      opt.filter !== undefined\n        ? opt.color.bNormalized * opt.filter.bNormalized\n        : opt.color.bNormalized;\n\n    const overlayA =\n      (opt.alpha ?? (opt.color.length < 4 ? 1 : opt.color.aNormalized)) * msk;\n\n    if (overlayA === 0) {\n      return opt.image;\n    }\n\n    const dst = opt.image.getPixel(opt.pos.x, opt.pos.y);\n\n    const baseR = dst.rNormalized;\n    const baseG = dst.gNormalized;\n    const baseB = dst.bNormalized;\n    const baseA = dst.aNormalized;\n\n    switch (blend) {\n      case BlendMode.direct:\n        return opt.image;\n      case BlendMode.alpha:\n        break;\n      case BlendMode.lighten:\n        overlayR = Math.max(baseR, overlayR);\n        overlayG = Math.max(baseG, overlayG);\n        overlayB = Math.max(baseB, overlayB);\n        break;\n      case BlendMode.screen:\n        overlayR = 1 - (1 - overlayR) * (1 - baseR);\n        overlayG = 1 - (1 - overlayG) * (1 - baseG);\n        overlayB = 1 - (1 - overlayB) * (1 - baseB);\n        break;\n      case BlendMode.dodge:\n        {\n          const baseOverlayAlphaProduct = overlayA * baseA;\n\n          const rightHandProductR =\n            overlayR * (1 - baseA) + baseR * (1 - overlayA);\n          const rightHandProductG =\n            overlayG * (1 - baseA) + baseG * (1 - overlayA);\n          const rightHandProductB =\n            overlayB * (1 - baseA) + baseB * (1 - overlayA);\n\n          const firstBlendColorR = baseOverlayAlphaProduct + rightHandProductR;\n          const firstBlendColorG = baseOverlayAlphaProduct + rightHandProductG;\n          const firstBlendColorB = baseOverlayAlphaProduct + rightHandProductB;\n\n          const oR = MathUtils.clamp(\n            (overlayR / MathUtils.clamp(overlayA, 0.01, 1)) *\n              MathUtils.step(0, overlayA),\n            0,\n            0.99\n          );\n          const oG = MathUtils.clamp(\n            (overlayG / MathUtils.clamp(overlayA, 0.01, 1)) *\n              MathUtils.step(0, overlayA),\n            0,\n            0.99\n          );\n          const oB = MathUtils.clamp(\n            (overlayB / MathUtils.clamp(overlayA, 0.01, 1)) *\n              MathUtils.step(0, overlayA),\n            0,\n            0.99\n          );\n\n          const secondBlendColorR =\n            (baseR * overlayA) / (1 - oR) + rightHandProductR;\n          const secondBlendColorG =\n            (baseG * overlayA) / (1 - oG) + rightHandProductG;\n          const secondBlendColorB =\n            (baseB * overlayA) / (1 - oB) + rightHandProductB;\n\n          const colorChoiceR = MathUtils.step(\n            overlayR * baseA + baseR * overlayA,\n            baseOverlayAlphaProduct\n          );\n          const colorChoiceG = MathUtils.step(\n            overlayG * baseA + baseG * overlayA,\n            baseOverlayAlphaProduct\n          );\n          const colorChoiceB = MathUtils.step(\n            overlayB * baseA + baseB * overlayA,\n            baseOverlayAlphaProduct\n          );\n\n          overlayR = MathUtils.mix(\n            firstBlendColorR,\n            secondBlendColorR,\n            colorChoiceR\n          );\n          overlayG = MathUtils.mix(\n            firstBlendColorG,\n            secondBlendColorG,\n            colorChoiceG\n          );\n          overlayB = MathUtils.mix(\n            firstBlendColorB,\n            secondBlendColorB,\n            colorChoiceB\n          );\n        }\n        break;\n      case BlendMode.addition:\n        overlayR = baseR + overlayR;\n        overlayG = baseG + overlayG;\n        overlayB = baseB + overlayB;\n        break;\n      case BlendMode.darken:\n        overlayR = Math.min(baseR, overlayR);\n        overlayG = Math.min(baseG, overlayG);\n        overlayB = Math.min(baseB, overlayB);\n        break;\n      case BlendMode.multiply:\n        overlayR *= baseR;\n        overlayG *= baseG;\n        overlayB *= baseB;\n        break;\n      case BlendMode.burn:\n        overlayR = overlayR !== 0 ? 1 - (1 - baseR) / overlayR : 0;\n        overlayG = overlayG !== 0 ? 1 - (1 - baseG) / overlayG : 0;\n        overlayB = overlayB !== 0 ? 1 - (1 - baseB) / overlayB : 0;\n        break;\n      case BlendMode.overlay:\n        if (2 * baseR < baseA) {\n          overlayR =\n            2 * overlayR * baseR +\n            overlayR * (1 - baseA) +\n            baseR * (1 - overlayA);\n        } else {\n          overlayR =\n            overlayA * baseA -\n            2 * (baseA - baseR) * (overlayA - overlayR) +\n            overlayR * (1 - baseA) +\n            baseR * (1 - overlayA);\n        }\n\n        if (2 * baseG < baseA) {\n          overlayG =\n            2 * overlayG * baseG +\n            overlayG * (1 - baseA) +\n            baseG * (1 - overlayA);\n        } else {\n          overlayG =\n            overlayA * baseA -\n            2 * (baseA - baseG) * (overlayA - overlayG) +\n            overlayG * (1 - baseA) +\n            baseG * (1 - overlayA);\n        }\n\n        if (2 * baseB < baseA) {\n          overlayB =\n            2 * overlayB * baseB +\n            overlayB * (1 - baseA) +\n            baseB * (1 - overlayA);\n        } else {\n          overlayB =\n            overlayA * baseA -\n            2 * (baseA - baseB) * (overlayA - overlayB) +\n            overlayB * (1 - baseA) +\n            baseB * (1 - overlayA);\n        }\n        break;\n      case BlendMode.softLight:\n        overlayR =\n          baseA === 0\n            ? 0\n            : baseR *\n                (overlayA * (baseR / baseA) +\n                  2 * overlayR * (1 - baseR / baseA)) +\n              overlayR * (1 - baseA) +\n              baseR * (1 - overlayA);\n\n        overlayG =\n          baseA === 0\n            ? 0\n            : baseG *\n                (overlayA * (baseG / baseA) +\n                  2 * overlayG * (1 - baseG / baseA)) +\n              overlayG * (1 - baseA) +\n              baseG * (1 - overlayA);\n\n        overlayB =\n          baseA === 0\n            ? 0\n            : baseB *\n                (overlayA * (baseB / baseA) +\n                  2 * overlayB * (1 - baseB / baseA)) +\n              overlayB * (1 - baseA) +\n              baseB * (1 - overlayA);\n        break;\n      case BlendMode.hardLight:\n        if (2 * overlayR < overlayA) {\n          overlayR =\n            2 * overlayR * baseR +\n            overlayR * (1 - baseA) +\n            baseR * (1 - overlayA);\n        } else {\n          overlayR =\n            overlayA * baseA -\n            2 * (baseA - baseR) * (overlayA - overlayR) +\n            overlayR * (1 - baseA) +\n            baseR * (1 - overlayA);\n        }\n\n        if (2 * overlayG < overlayA) {\n          overlayG =\n            2 * overlayG * baseG +\n            overlayG * (1 - baseA) +\n            baseG * (1 - overlayA);\n        } else {\n          overlayG =\n            overlayA * baseA -\n            2 * (baseA - baseG) * (overlayA - overlayG) +\n            overlayG * (1 - baseA) +\n            baseG * (1 - overlayA);\n        }\n\n        if (2 * overlayB < overlayA) {\n          overlayB =\n            2 * overlayB * baseB +\n            overlayB * (1 - baseA) +\n            baseB * (1 - overlayA);\n        } else {\n          overlayB =\n            overlayA * baseA -\n            2 * (baseA - baseB) * (overlayA - overlayB) +\n            overlayB * (1 - baseA) +\n            baseB * (1 - overlayA);\n        }\n        break;\n      case BlendMode.difference:\n        overlayR = Math.abs(overlayR - baseR);\n        overlayG = Math.abs(overlayG - baseG);\n        overlayB = Math.abs(overlayB - baseB);\n        break;\n      case BlendMode.subtract:\n        overlayR = baseR - overlayR;\n        overlayG = baseG - overlayG;\n        overlayB = baseB - overlayB;\n        break;\n      case BlendMode.divide:\n        overlayR = overlayR !== 0 ? baseR / overlayR : 0;\n        overlayG = overlayG !== 0 ? baseG / overlayG : 0;\n        overlayB = overlayB !== 0 ? baseB / overlayB : 0;\n        break;\n    }\n\n    const invA = 1 - overlayA;\n\n    if (linearBlend) {\n      const lbr = Math.pow(baseR, 2.2);\n      const lbg = Math.pow(baseG, 2.2);\n      const lbb = Math.pow(baseB, 2.2);\n      const lor = Math.pow(overlayR, 2.2);\n      const log = Math.pow(overlayG, 2.2);\n      const lob = Math.pow(overlayB, 2.2);\n      const r = Math.pow(lor * overlayA + lbr * baseA * invA, 1 / 2.2);\n      const g = Math.pow(log * overlayA + lbg * baseA * invA, 1 / 2.2);\n      const b = Math.pow(lob * overlayA + lbb * baseA * invA, 1 / 2.2);\n      const a = overlayA + baseA * invA;\n      dst.rNormalized = r;\n      dst.gNormalized = g;\n      dst.bNormalized = b;\n      dst.aNormalized = a;\n    } else {\n      const r = overlayR * overlayA + baseR * baseA * invA;\n      const g = overlayG * overlayA + baseG * baseA * invA;\n      const b = overlayB * overlayA + baseB * baseA * invA;\n      const a = overlayA + baseA * invA;\n      dst.rNormalized = r;\n      dst.gNormalized = g;\n      dst.bNormalized = b;\n      dst.aNormalized = a;\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Fill a polygon defined by the given **vertices**.\n   */\n  public static drawPolygon(opt: DrawPolygonOptions): MemoryImage {\n    const antialias = opt.antialias ?? false;\n    const thickness = opt.thickness ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (opt.color.a === 0) {\n      return opt.image;\n    }\n\n    const vertices = opt.vertices;\n    const numVertices = vertices.length;\n\n    if (numVertices === 0) {\n      return opt.image;\n    }\n\n    if (numVertices === 1) {\n      return Draw.drawPixel({\n        image: opt.image,\n        pos: vertices[0],\n        color: opt.color,\n        maskChannel: maskChannel,\n        mask: opt.mask,\n      });\n    }\n\n    if (numVertices === 2) {\n      return Draw.drawLine({\n        image: opt.image,\n        line: new Line(\n          vertices[0].x,\n          vertices[0].y,\n          vertices[1].x,\n          vertices[1].y\n        ),\n        color: opt.color,\n        antialias: antialias,\n        thickness: thickness,\n        maskChannel: maskChannel,\n        mask: opt.mask,\n      });\n    }\n\n    for (let i = 0; i < numVertices - 1; ++i) {\n      Draw.drawLine({\n        image: opt.image,\n        line: new Line(\n          vertices[i].x,\n          vertices[i].y,\n          vertices[i + 1].x,\n          vertices[i + 1].y\n        ),\n        color: opt.color,\n        antialias: antialias,\n        thickness: thickness,\n        maskChannel: maskChannel,\n        mask: opt.mask,\n      });\n    }\n\n    Draw.drawLine({\n      image: opt.image,\n      line: new Line(\n        vertices[numVertices - 1].x,\n        vertices[numVertices - 1].y,\n        vertices[0].x,\n        vertices[0].y\n      ),\n      color: opt.color,\n      antialias: antialias,\n      thickness: thickness,\n      maskChannel: maskChannel,\n      mask: opt.mask,\n    });\n\n    return opt.image;\n  }\n\n  /**\n   * Draw a rectangle in the **image** with the **color**.\n   */\n  public static drawRect(opt: DrawRectOptions): MemoryImage {\n    const rect = opt.rect;\n    const thickness = opt.thickness ?? 1;\n    const radius = opt.radius ?? 0;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const x0 = rect.left;\n    const y0 = rect.top;\n    const x1 = rect.right;\n    const y1 = rect.bottom;\n\n    // Draw a rounded rectangle\n    if (radius > 0) {\n      const rad = Math.round(radius);\n      Draw.drawLine({\n        image: opt.image,\n        line: new Line(x0 + rad, y0, x1 - rad, y0),\n        color: opt.color,\n      });\n      Draw.drawLine({\n        image: opt.image,\n        line: new Line(x1, y0 + rad, x1, y1 - rad),\n        color: opt.color,\n      });\n      Draw.drawLine({\n        image: opt.image,\n        line: new Line(x0 + rad, y1, x1 - rad, y1),\n        color: opt.color,\n      });\n      Draw.drawLine({\n        image: opt.image,\n        line: new Line(x0, y0 + rad, x0, y1 - rad),\n        color: opt.color,\n      });\n\n      const c1x = x0 + rad;\n      const c1y = y0 + rad;\n      const c2x = x1 - rad;\n      const c2y = y0 + rad;\n      const c3x = x1 - rad;\n      const c3y = y1 - rad;\n      const c4x = x0 + rad;\n      const c4y = y1 - rad;\n\n      Draw.drawAntialiasCircle({\n        image: opt.image,\n        x: c1x,\n        y: c1y,\n        radius: rad,\n        color: opt.color,\n        maskChannel: maskChannel,\n        quadrants: CircleQuadrant.topLeft,\n        mask: opt.mask,\n      });\n\n      Draw.drawAntialiasCircle({\n        image: opt.image,\n        x: c2x,\n        y: c2y,\n        radius: rad,\n        color: opt.color,\n        maskChannel: maskChannel,\n        quadrants: CircleQuadrant.topRight,\n        mask: opt.mask,\n      });\n\n      Draw.drawAntialiasCircle({\n        image: opt.image,\n        x: c3x,\n        y: c3y,\n        radius: rad,\n        color: opt.color,\n        maskChannel: maskChannel,\n        quadrants: CircleQuadrant.bottomRight,\n        mask: opt.mask,\n      });\n\n      Draw.drawAntialiasCircle({\n        image: opt.image,\n        x: c4x,\n        y: c4y,\n        radius: rad,\n        color: opt.color,\n        maskChannel: maskChannel,\n        quadrants: CircleQuadrant.bottomLeft,\n        mask: opt.mask,\n      });\n\n      return opt.image;\n    }\n\n    const ht = thickness / 2;\n\n    Draw.drawLine({\n      image: opt.image,\n      line: new Line(x0, y0, x1, y0),\n      color: opt.color,\n      thickness: thickness,\n      maskChannel: maskChannel,\n      mask: opt.mask,\n    });\n\n    Draw.drawLine({\n      image: opt.image,\n      line: new Line(x0, y1, x1, y1),\n      color: opt.color,\n      thickness: thickness,\n      maskChannel: maskChannel,\n      mask: opt.mask,\n    });\n\n    const isEvenThickness = ht - Math.trunc(ht) === 0;\n    const dh = isEvenThickness ? 1 : 0;\n\n    const by0 = Math.ceil(y0 + ht);\n    const by1 = Math.floor(y1 - ht - dh);\n    const bx0 = Math.floor(x0 + ht);\n    const bx1 = Math.ceil(x1 - ht + dh);\n\n    Draw.drawLine({\n      image: opt.image,\n      line: new Line(bx0, by0, bx0, by1),\n      color: opt.color,\n      thickness: thickness,\n      maskChannel: maskChannel,\n      mask: opt.mask,\n    });\n\n    Draw.drawLine({\n      image: opt.image,\n      line: new Line(bx1, by0, bx1, by1),\n      color: opt.color,\n      thickness: thickness,\n      maskChannel: maskChannel,\n      mask: opt.mask,\n    });\n\n    return opt.image;\n  }\n\n  /**\n   * Fill the 4-connected shape containing **start** in the **image** with the\n   * given **color**.\n   */\n  public static fillFlood(opt: FillFloodOptions): MemoryImage {\n    const threshold = opt.threshold ?? 0;\n    const compareAlpha = opt.compareAlpha ?? false;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (opt.color.a === 0) {\n      return opt.image;\n    }\n\n    const visited = new Uint8Array(opt.image.width * opt.image.height);\n\n    const srcColor = opt.image.getPixel(opt.start.x, opt.start.y);\n    if (!compareAlpha) {\n      opt.color.a = 0;\n    }\n\n    let array: FillFloodTestPixel | undefined = undefined;\n    if (threshold > 0) {\n      const lab = ColorUtils.rgbToLab(srcColor.r, srcColor.g, srcColor.b);\n      if (compareAlpha) {\n        lab.push(srcColor.a);\n      }\n\n      array = (y: number, x: number) => {\n        return (\n          visited[y * opt.image.width + x] === 0 &&\n          Draw.testPixelLabColorDistance(opt.image, x, y, lab, threshold)\n        );\n      };\n    } else if (!compareAlpha) {\n      array = (y: number, x: number) => {\n        return (\n          visited[y * opt.image.width + x] === 0 &&\n          Draw.setAlpha(opt.image.getPixel(x, y), 0) !== srcColor\n        );\n      };\n    } else {\n      array = (y: number, x: number) => {\n        return (\n          visited[y * opt.image.width + x] === 0 &&\n          opt.image.getPixel(x, y) !== srcColor\n        );\n      };\n    }\n\n    let p: Pixel | undefined = undefined;\n\n    const mark = (y: number, x: number): void => {\n      if (opt.mask !== undefined) {\n        const m = opt.mask.getPixel(x, y).getChannelNormalized(maskChannel);\n        if (m > 0) {\n          p = opt.image.getPixel(x, y, p);\n          p.r = MathUtils.mix(p!.r, opt.color.r, m);\n          p.g = MathUtils.mix(p!.g, opt.color.g, m);\n          p.b = MathUtils.mix(p!.b, opt.color.b, m);\n          p.a = MathUtils.mix(p!.a, opt.color.a, m);\n        }\n      } else {\n        opt.image.setPixel(x, y, opt.color);\n      }\n      visited[y * opt.image.width + x] = 1;\n    };\n\n    Draw.fill4(opt.image, opt.start.x, opt.start.y, array, mark, visited);\n\n    return opt.image;\n  }\n\n  /**\n   * Fill a polygon defined by the given **vertices**.\n   */\n  public static fillPolygon(opt: FillPolygonOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (opt.color.a === 0) {\n      return opt.image;\n    }\n\n    const numVertices = opt.vertices.length;\n\n    if (numVertices === 0) {\n      return opt.image;\n    }\n\n    if (numVertices === 1) {\n      return Draw.drawPixel({\n        image: opt.image,\n        pos: opt.vertices[0],\n        color: opt.color,\n        maskChannel: maskChannel,\n        mask: opt.mask,\n      });\n    }\n\n    if (numVertices === 2) {\n      return Draw.drawLine({\n        image: opt.image,\n        line: new Line(\n          opt.vertices[0].x,\n          opt.vertices[0].y,\n          opt.vertices[1].x,\n          opt.vertices[1].y\n        ),\n        color: opt.color,\n        mask: opt.mask,\n        maskChannel: maskChannel,\n      });\n    }\n\n    let xMin = 0;\n    let yMin = 0;\n    let xMax = 0;\n    let yMax = 0;\n    let first = true;\n    for (const vertex of opt.vertices) {\n      if (first) {\n        xMin = vertex.x;\n        yMin = vertex.y;\n        xMax = vertex.x;\n        yMax = vertex.y;\n        first = false;\n      } else {\n        xMin = Math.min(xMin, vertex.x);\n        yMin = Math.min(yMin, vertex.y);\n        xMax = Math.max(xMax, vertex.x);\n        yMax = Math.max(yMax, vertex.y);\n      }\n    }\n\n    xMin = Math.max(xMin, 0);\n    yMin = Math.max(yMin, 0);\n    xMax = Math.min(xMax, opt.image.width - 1);\n    yMax = Math.min(yMax, opt.image.height - 1);\n\n    const inter = ArrayUtils.fill<number>(40, 0);\n    const vi = ArrayUtils.generate<number>(numVertices + 1, (i) =>\n      i < numVertices ? i : 0\n    );\n\n    for (let yi = yMin, y = yMin + 0.5; yi <= yMax; ++yi, ++y) {\n      let c = 0;\n      for (let i = 0; i < numVertices; ++i) {\n        const v1 = opt.vertices[vi[i]];\n        const v2 = opt.vertices[vi[i + 1]];\n\n        let x1 = v1.x;\n        let y1 = v1.y;\n        let x2 = v2.x;\n        let y2 = v2.y;\n        if (y2 < y1) {\n          let temp = x1;\n          x1 = x2;\n          x2 = temp;\n          temp = y1;\n          y1 = y2;\n          y2 = temp;\n        }\n\n        if (y <= y2 && y >= y1) {\n          let x = 0;\n          if (y1 - y2 === 0) {\n            x = x1;\n          } else {\n            x = ((x2 - x1) * (y - y1)) / (y2 - y1);\n            x += x1;\n          }\n          if (x <= xMax && x >= xMin) {\n            inter[c++] = x;\n          }\n        }\n      }\n\n      for (let i = 0; i < c; i += 2) {\n        let x1f = inter[i];\n        let x2f = inter[i + 1];\n        if (x1f > x2f) {\n          const t = x1f;\n          x1f = x2f;\n          x2f = t;\n        }\n        const x1 = Math.floor(x1f);\n        const x2 = Math.ceil(x2f);\n        for (let x = x1; x <= x2; ++x) {\n          Draw.drawPixel({\n            image: opt.image,\n            pos: new Point(x, yi),\n            color: opt.color,\n            maskChannel: maskChannel,\n            mask: opt.mask,\n          });\n        }\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Fill a rectangle **rect** in the **image** with the given **color**.\n   */\n  public static fillRect(opt: FillRectOptions): MemoryImage {\n    const radius = opt.radius ?? 0;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (opt.color.a === 0) {\n      return opt.image;\n    }\n\n    const xx0 = MathUtils.clamp(opt.rect.left, 0, opt.image.width - 1);\n    const yy0 = MathUtils.clamp(opt.rect.top, 0, opt.image.height - 1);\n    const xx1 = MathUtils.clamp(opt.rect.right, 0, opt.image.width - 1);\n    const yy1 = MathUtils.clamp(opt.rect.bottom, 0, opt.image.height - 1);\n    const ww = xx1 - xx0 + 1;\n    const hh = yy1 - yy0 + 1;\n\n    // Fill a rounded rect\n    if (radius > 0) {\n      const rad = Math.round(radius);\n      const rad2 = rad * rad;\n      const c1x = xx0 + rad;\n      const c1y = yy0 + rad;\n      const c2x = xx1 - rad + 1;\n      const c2y = yy0 + rad;\n      const c3x = xx1 - rad + 1;\n      const c3y = yy1 - rad + 1;\n      const c4x = xx0 + rad;\n      const c4y = yy1 - rad + 1;\n\n      const range = opt.image.getRange(xx0, yy0, ww, hh);\n      let it: IteratorResult<Pixel> | undefined = undefined;\n      while (((it = range.next()), !it.done)) {\n        const p = it.value;\n        const px = p.x;\n        const py = p.y;\n\n        let a = 1;\n        if (px < c1x && py < c1y) {\n          a = ImageUtils.circleTest(p, new Point(c1x, c1y), rad2);\n          if (a === 0) {\n            continue;\n          }\n        } else if (px > c2x && py < c2y) {\n          a = ImageUtils.circleTest(p, new Point(c2x, c2y), rad2);\n          if (a === 0) {\n            continue;\n          }\n        } else if (px > c3x && py > c3y) {\n          a = ImageUtils.circleTest(p, new Point(c3x, c3y), rad2);\n          if (a === 0) {\n            continue;\n          }\n        } else if (px < c4x && py > c4y) {\n          a = ImageUtils.circleTest(p, new Point(c4x, c4y), rad2);\n          if (a === 0) {\n            continue;\n          }\n        }\n\n        a *= opt.color.aNormalized;\n\n        const m =\n          opt.mask?.getPixel(p.x, p.y).getChannelNormalized(maskChannel) ?? 1;\n        p.r = MathUtils.mix(p.r, opt.color.r, a * m);\n        p.g = MathUtils.mix(p.g, opt.color.g, a * m);\n        p.b = MathUtils.mix(p.b, opt.color.b, a * m);\n        p.a *= 1 - opt.color.a * m;\n      }\n\n      return opt.image;\n    }\n\n    // If no blending is necessary, use a faster fill method.\n    if (opt.color.a === opt.color.maxChannelValue && opt.mask === undefined) {\n      const range = opt.image.getRange(xx0, yy0, ww, hh);\n      let it: IteratorResult<Pixel> | undefined = undefined;\n      while (((it = range.next()), !it.done)) {\n        it.value.set(opt.color);\n      }\n    } else {\n      const a = opt.color.a / opt.color.maxChannelValue;\n      const range = opt.image.getRange(xx0, yy0, ww, hh);\n      let it: IteratorResult<Pixel> | undefined = undefined;\n      while (((it = range.next()), !it.done)) {\n        const p = it.value;\n        const m =\n          opt.mask?.getPixel(p.x, p.y).getChannelNormalized(maskChannel) ?? 1;\n        p.r = MathUtils.mix(p.r, opt.color.r, a * m);\n        p.g = MathUtils.mix(p.g, opt.color.g, a * m);\n        p.b = MathUtils.mix(p.b, opt.color.b, a * m);\n        p.a *= 1 - opt.color.a * m;\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Set all of the pixels of an **image** to the given **color**.\n   */\n  public static fill(opt: FillOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (opt.mask === undefined) {\n      opt.image.clear(opt.color);\n      return opt.image;\n    }\n\n    for (const p of opt.image) {\n      const maskValue = opt.mask\n        .getPixel(p.x, p.y)\n        .getChannelNormalized(maskChannel);\n      p.r = MathUtils.mix(p.r, opt.color.r, maskValue);\n      p.g = MathUtils.mix(p.g, opt.color.g, maskValue);\n      p.b = MathUtils.mix(p.b, opt.color.b, maskValue);\n      p.a = MathUtils.mix(p.a, opt.color.a, maskValue);\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Create a mask describing the 4-connected shape containing **start** in the\n   * **image**.\n   */\n  public static maskFlood(opt: MaskFloodOptions): Uint8Array {\n    const threshold = opt.threshold ?? 0;\n    const compareAlpha = opt.compareAlpha ?? false;\n    const fillValue = opt.fillValue ?? 255;\n\n    const visited = new Uint8Array(opt.image.width * opt.image.height);\n\n    let srcColor: Color = opt.image.getPixel(opt.start.x, opt.start.y);\n    if (!compareAlpha) {\n      srcColor = Draw.setAlpha(srcColor, 0);\n    }\n\n    const ret = new Uint8Array(opt.image.width * opt.image.height);\n\n    let array: FillFloodTestPixel | undefined = undefined;\n    if (threshold > 0) {\n      const lab = ColorUtils.rgbToLab(srcColor.r, srcColor.g, srcColor.b);\n      if (compareAlpha) {\n        lab.push(srcColor.a);\n      }\n      array = (y: number, x: number) => {\n        return (\n          visited[y * opt.image.width + x] === 0 &&\n          (ret[y * opt.image.width + x] !== 0 ||\n            Draw.testPixelLabColorDistance(opt.image, x, y, lab, threshold))\n        );\n      };\n    } else if (!compareAlpha) {\n      array = (y: number, x: number) => {\n        return (\n          visited[y * opt.image.width + x] === 0 &&\n          (ret[y * opt.image.width + x] !== 0 ||\n            Draw.setAlpha(opt.image.getPixel(x, y), 0) !== srcColor)\n        );\n      };\n    } else {\n      array = (y: number, x: number) => {\n        return (\n          visited[y * opt.image.width + x] === 0 &&\n          (ret[y * opt.image.width + x] !== 0 ||\n            opt.image.getPixel(x, y) !== srcColor)\n        );\n      };\n    }\n\n    const mark = (y: number, x: number): void => {\n      ret[y * opt.image.width + x] = fillValue;\n      visited[y * opt.image.width + x] = 1;\n    };\n\n    Draw.fill4(opt.image, opt.start.x, opt.start.y, array, mark, visited);\n    return ret;\n  }\n\n  /**\n   * Composite the image **src** onto the image **dst**.\n   *\n   * In other words, compositeImage will take an rectangular area from src of\n   * width **srcW** and height **srcH** at position (**srcX**,**srcY**) and place it\n   * in a rectangular area of **dst** of width **dstW** and height **dstH** at\n   * position (**dstX**,**dstY**).\n   *\n   * If the source and destination coordinates and width and heights differ,\n   * appropriate stretching or shrinking of the image fragment will be performed.\n   * The coordinates refer to the upper left corner. This function can be used to\n   * copy regions within the same image (if **dst** is the same as **src**)\n   * but if the regions overlap the results will be unpredictable.\n   *\n   * if **center** is true, the **src** will be centered in **dst**.\n   */\n  public static compositeImage(opt: CompositeImageOptions): MemoryImage {\n    let dstX = opt.dstX ?? 0;\n    let dstY = opt.dstY ?? 0;\n    const srcX = opt.srcX ?? 0;\n    const srcY = opt.srcY ?? 0;\n    const srcW = opt.srcW ?? opt.src.width;\n    const srcH = opt.srcH ?? opt.src.height;\n    const dstW =\n      opt.dstW ??\n      (opt.dst.width < opt.src.width ? opt.dst.width : opt.src.width);\n    const dstH =\n      opt.dstH ??\n      (opt.dst.height < opt.src.height ? opt.dst.height : opt.src.height);\n    const blend = opt.blend ?? BlendMode.alpha;\n    const linearBlend = opt.linearBlend ?? false;\n    const center = opt.center ?? false;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (center) {\n      // if [src] is wider than [dst]\n      let wdt = opt.dst.width - opt.src.width;\n      if (wdt < 0) wdt = 0;\n      dstX = Math.trunc(wdt / 2);\n      // if [src] is higher than [dst]\n      let height = opt.dst.height - opt.src.height;\n      if (height < 0) height = 0;\n      dstY = Math.trunc(height / 2);\n    }\n\n    if (opt.dst.hasPalette) {\n      opt.dst.convert({\n        numChannels: opt.dst.numChannels,\n      });\n    }\n\n    const dy = srcH / dstH;\n    const dx = srcW / dstW;\n    const yCache = Array.from(\n      { length: dstH },\n      (_, y) => srcY + Math.trunc(y * dy)\n    );\n    const xCache = Array.from(\n      { length: dstW },\n      (_, x) => srcX + Math.trunc(x * dx)\n    );\n\n    if (blend === BlendMode.direct) {\n      Draw.imgDirectComposite(\n        opt.src,\n        opt.dst,\n        dstX,\n        dstY,\n        dstW,\n        dstH,\n        xCache,\n        yCache,\n        maskChannel,\n        opt.mask\n      );\n    } else {\n      Draw.imgComposite(\n        opt.src,\n        opt.dst,\n        dstX,\n        dstY,\n        dstW,\n        dstH,\n        xCache,\n        yCache,\n        blend,\n        linearBlend,\n        maskChannel,\n        opt.mask\n      );\n    }\n\n    return opt.dst;\n  }\n}\n", "/** @format */\n\nimport { IfdValue } from './ifd-value/ifd-value';\n\nexport class ExifEntry {\n  private readonly _tag: number;\n  public get tag(): number {\n    return this._tag;\n  }\n\n  private _value: IfdValue | undefined;\n  public get value(): IfdValue | undefined {\n    return this._value;\n  }\n  public set value(v: IfdValue | undefined) {\n    this._value = v;\n  }\n\n  constructor(tag: number, value?: IfdValue) {\n    this._tag = tag;\n    this._value = value;\n  }\n}\n", "/** @format */\n\nexport enum IfdValueType {\n  none,\n  byte,\n  ascii,\n  short,\n  long,\n  rational,\n  sByte,\n  undefined,\n  sShort,\n  sLong,\n  sRational,\n  single,\n  double,\n}\n\nexport const IfdValueTypeSize = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8];\n\nexport function getIfdValueTypeString(type: IfdValueType) {\n  return IfdValueType[type];\n}\n\nexport function getIfdValueTypeSize(type: IfdValueType, length = 1) {\n  return IfdValueTypeSize[type] * length;\n}\n", "/** @format */\n\nimport { IfdValueType } from './ifd-value-type';\n\nexport interface ExifTagInitOptions {\n  name: string;\n  type?: IfdValueType;\n  count?: number;\n}\n\nexport class ExifTag {\n  private readonly _name: string;\n  public get name(): string {\n    return this._name;\n  }\n\n  private readonly _type: IfdValueType;\n  public get type(): IfdValueType {\n    return this._type;\n  }\n\n  private _count?: number;\n  public get count(): number | undefined {\n    return this._count;\n  }\n\n  constructor(opt: ExifTagInitOptions) {\n    this._name = opt.name;\n    this._type = opt.type ?? IfdValueType.none;\n    this._count = opt.count;\n  }\n}\n\nexport const ExifTagNameToID = new Map<string, number>([\n  ['ProcessingSoftware', 0xb],\n  ['SubfileType', 0xfe],\n  ['OldSubfileType', 0xff],\n  ['ImageWidth', 0x100],\n  ['ImageLength', 0x101],\n  // alias for a more common name.\n  ['ImageHeight', 0x101],\n  ['BitsPerSample', 0x102],\n  ['Compression', 0x103],\n  ['PhotometricInterpretation', 0x106],\n  ['Thresholding', 0x107],\n  ['CellWidth', 0x108],\n  ['CellLength', 0x109],\n  ['FillOrder', 0x10a],\n  ['DocumentName', 0x10d],\n  ['ImageDescription', 0x10e],\n  ['Make', 0x10f],\n  ['Model', 0x110],\n  ['StripOffsets', 0x111],\n  ['Orientation', 0x112],\n  ['SamplesPerPixel', 0x115],\n  ['RowsPerStrip', 0x116],\n  ['StripByteCounts', 0x117],\n  ['MinSampleValue', 0x118],\n  ['MaxSampleValue', 0x119],\n  ['XResolution', 0x11a],\n  ['YResolution', 0x11b],\n  ['PlanarConfiguration', 0x11c],\n  ['PageName', 0x11d],\n  ['XPosition', 0x11e],\n  ['YPosition', 0x11f],\n  ['GrayResponseUnit', 0x122],\n  ['GrayResponseCurve', 0x123],\n  ['T4Options', 0x124],\n  ['T6Options', 0x125],\n  ['ResolutionUnit', 0x128],\n  ['PageNumber', 0x129],\n  ['ColorResponseUnit', 0x12c],\n  ['TransferFunction', 0x12d],\n  ['Software', 0x131],\n  ['DateTime', 0x132],\n  ['Artist', 0x13b],\n  ['HostComputer', 0x13c],\n  ['Predictor', 0x13d],\n  ['WhitePoint', 0x13e],\n  ['PrimaryChromaticities', 0x13f],\n  ['ColorMap', 0x140],\n  ['HalftoneHints', 0x141],\n  ['TileWidth', 0x142],\n  ['TileLength', 0x143],\n  ['TileOffsets', 0x144],\n  ['TileByteCounts', 0x145],\n  ['BadFaxLines', 0x146],\n  ['CleanFaxData', 0x147],\n  ['ConsecutiveBadFaxLines', 0x148],\n  ['InkSet', 0x14c],\n  ['InkNames', 0x14d],\n  ['NumberofInks', 0x14e],\n  ['DotRange', 0x150],\n  ['TargetPrinter', 0x151],\n  ['ExtraSamples', 0x152],\n  ['SampleFormat', 0x153],\n  ['SMinSampleValue', 0x154],\n  ['SMaxSampleValue', 0x155],\n  ['TransferRange', 0x156],\n  ['ClipPath', 0x157],\n  ['JPEGProc', 0x200],\n  ['JPEGInterchangeFormat', 0x201],\n  ['JPEGInterchangeFormatLength', 0x202],\n  ['YCbCrCoefficients', 0x211],\n  ['YCbCrSubSampling', 0x212],\n  ['YCbCrPositioning', 0x213],\n  ['ReferenceBlackWhite', 0x214],\n  ['ApplicationNotes', 0x2bc],\n  ['Rating', 0x4746],\n  ['CFARepeatPatternDim', 0x828d],\n  ['CFAPattern', 0x828e],\n  ['BatteryLevel', 0x828f],\n  ['Copyright', 0x8298],\n  ['ExposureTime', 0x829a],\n  ['FNumber', 0x829d],\n  ['IPTC-NAA', 0x83bb],\n  ['ExifOffset', 0x8769],\n  ['InterColorProfile', 0x8773],\n  ['ExposureProgram', 0x8822],\n  ['SpectralSensitivity', 0x8824],\n  ['GPSOffset', 0x8825],\n  ['ISOSpeed', 0x8827],\n  ['OECF', 0x8828],\n  ['SensitivityType', 0x8830],\n  ['RecommendedExposureIndex', 0x8832],\n  ['ExifVersion', 0x9000],\n  ['DateTimeOriginal', 0x9003],\n  ['DateTimeDigitized', 0x9004],\n  ['OffsetTime', 0x9010],\n  ['OffsetTimeOriginal', 0x9011],\n  ['OffsetTimeDigitized', 0x9012],\n  ['ComponentsConfiguration', 0x9101],\n  ['CompressedBitsPerPixel', 0x9102],\n  ['ShutterSpeedValue', 0x9201],\n  ['ApertureValue', 0x9202],\n  ['BrightnessValue', 0x9203],\n  ['ExposureBiasValue', 0x9204],\n  ['MaxApertureValue', 0x9205],\n  ['SubjectDistance', 0x9206],\n  ['MeteringMode', 0x9207],\n  ['LightSource', 0x9208],\n  ['Flash', 0x9209],\n  ['FocalLength', 0x920a],\n  ['SubjectArea', 0x9214],\n  ['MakerNote', 0x927c],\n  ['UserComment', 0x9286],\n  ['SubSecTime', 0x9290],\n  ['SubSecTimeOriginal', 0x9291],\n  ['SubSecTimeDigitized', 0x9292],\n  ['XPTitle', 0x9c9b],\n  ['XPComment', 0x9c9c],\n  ['XPAuthor', 0x9c9d],\n  ['XPKeywords', 0x9c9e],\n  ['XPSubject', 0x9c9f],\n  ['FlashPixVersion', 0xa000],\n  ['ColorSpace', 0xa001],\n  ['ExifImageWidth', 0xa002],\n  ['ExifImageLength', 0xa003],\n  ['RelatedSoundFile', 0xa004],\n  ['InteroperabilityOffset', 0xa005],\n  ['FlashEnergy', 0xa20b],\n  ['SpatialFrequencyResponse', 0xa20c],\n  ['FocalPlaneXResolution', 0xa20e],\n  ['FocalPlaneYResolution', 0xa20f],\n  ['FocalPlaneResolutionUnit', 0xa210],\n  ['SubjectLocation', 0xa214],\n  ['ExposureIndex', 0xa215],\n  ['SensingMethod', 0xa217],\n  ['FileSource', 0xa300],\n  ['SceneType', 0xa301],\n  ['CVAPattern', 0xa302],\n  ['CustomRendered', 0xa401],\n  ['ExposureMode', 0xa402],\n  ['WhiteBalance', 0xa403],\n  ['DigitalZoomRatio', 0xa404],\n  ['FocalLengthIn35mmFilm', 0xa405],\n  ['SceneCaptureType', 0xa406],\n  ['GainControl', 0xa407],\n  ['Contrast', 0xa408],\n  ['Saturation', 0xa409],\n  ['Sharpness', 0xa40a],\n  ['DeviceSettingDescription', 0xa40b],\n  ['SubjectDistanceRange', 0xa40c],\n  ['ImageUniqueID', 0xa420],\n  ['CameraOwnerName', 0xa430],\n  ['BodySerialNumber', 0xa431],\n  ['LensSpecification', 0xa432],\n  ['LensMake', 0xa433],\n  ['LensModel', 0xa434],\n  ['LensSerialNumber', 0xa435],\n  ['Gamma', 0xa500],\n  ['PrintIM', 0xc4a5],\n  ['Padding', 0xea1c],\n  ['OffsetSchema', 0xea1d],\n  ['OwnerName', 0xfde8],\n  ['SerialNumber', 0xfde9],\n  ['InteropIndex', 0x1],\n  ['InteropVersion', 0x2],\n  ['RelatedImageFileFormat', 0x1000],\n  ['RelatedImageWidth', 0x1001],\n  ['RelatedImageLength', 0x1002],\n  ['GPSVersionID', 0x0],\n  ['GPSLatitudeRef', 0x1],\n  ['GPSLatitude', 0x2],\n  ['GPSLongitudeRef', 0x3],\n  ['GPSLongitude', 0x4],\n  ['GPSAltitudeRef', 0x5],\n  ['GPSAltitude', 0x6],\n  ['GPSTimeStamp', 0x7],\n  ['GPSSatellites', 0x8],\n  ['GPSStatus', 0x9],\n  ['GPSMeasureMode', 0xa],\n  ['GPSDOP', 0xb],\n  ['GPSSpeedRef', 0xc],\n  ['GPSSpeed', 0xd],\n  ['GPSTrackRef', 0xe],\n  ['GPSTrack', 0xf],\n  ['GPSImgDirectionRef', 0x10],\n  ['GPSImgDirection', 0x11],\n  ['GPSMapDatum', 0x12],\n  ['GPSDestLatitudeRef', 0x13],\n  ['GPSDestLatitude', 0x14],\n  ['GPSDestLongitudeRef', 0x15],\n  ['GPSDestLongitude', 0x16],\n  ['GPSDestBearingRef', 0x17],\n  ['GPSDestBearing', 0x18],\n  ['GPSDestDistanceRef', 0x19],\n  ['GPSDestDistance', 0x1a],\n  ['GPSProcessingMethod', 0x1b],\n  ['GPSAreaInformation', 0x1c],\n  ['GPSDate', 0x1d],\n  ['GPSDifferential', 0x1e],\n]);\n\nexport const ExifImageTags = new Map<number, ExifTag>([\n  [\n    0x000b,\n    new ExifTag({\n      name: 'ProcessingSoftware',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x00fe,\n    new ExifTag({\n      name: 'SubfileType',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x00ff,\n    new ExifTag({\n      name: 'OldSubfileType',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x0100,\n    new ExifTag({\n      name: 'ImageWidth',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x0101,\n    new ExifTag({\n      name: 'ImageLength',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x0102,\n    new ExifTag({\n      name: 'BitsPerSample',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0103,\n    new ExifTag({\n      name: 'Compression',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0106,\n    new ExifTag({\n      name: 'PhotometricInterpretation',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0107,\n    new ExifTag({\n      name: 'Thresholding',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0108,\n    new ExifTag({\n      name: 'CellWidth',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0109,\n    new ExifTag({\n      name: 'CellLength',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x010a,\n    new ExifTag({\n      name: 'FillOrder',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x010d,\n    new ExifTag({\n      name: 'DocumentName',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x010e,\n    new ExifTag({\n      name: 'ImageDescription',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x010f,\n    new ExifTag({\n      name: 'Make',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x0110,\n    new ExifTag({\n      name: 'Model',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x0111,\n    new ExifTag({\n      name: 'StripOffsets',\n      type: IfdValueType.long,\n    }),\n  ],\n  [\n    0x0112,\n    new ExifTag({\n      name: 'Orientation',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0115,\n    new ExifTag({\n      name: 'SamplesPerPixel',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0116,\n    new ExifTag({\n      name: 'RowsPerStrip',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x0117,\n    new ExifTag({\n      name: 'StripByteCounts',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x0118,\n    new ExifTag({\n      name: 'MinSampleValue',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0119,\n    new ExifTag({\n      name: 'MaxSampleValue',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x011a,\n    new ExifTag({\n      name: 'XResolution',\n      type: IfdValueType.rational,\n      count: 1,\n    }),\n  ],\n  [\n    0x011b,\n    new ExifTag({\n      name: 'YResolution',\n      type: IfdValueType.rational,\n      count: 1,\n    }),\n  ],\n  [\n    0x011c,\n    new ExifTag({\n      name: 'PlanarConfiguration',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x011d,\n    new ExifTag({\n      name: 'PageName',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x011e,\n    new ExifTag({\n      name: 'XPosition',\n      type: IfdValueType.rational,\n      count: 1,\n    }),\n  ],\n  [\n    0x011f,\n    new ExifTag({\n      name: 'YPosition',\n      type: IfdValueType.rational,\n      count: 1,\n    }),\n  ],\n  [\n    0x0122,\n    new ExifTag({\n      name: 'GrayResponseUnit',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0123,\n    new ExifTag({\n      name: 'GrayResponseCurve',\n    }),\n  ],\n  [\n    0x0124,\n    new ExifTag({\n      name: 'T4Options',\n    }),\n  ],\n  [\n    0x0125,\n    new ExifTag({\n      name: 'T6Options',\n    }),\n  ],\n  [\n    0x0128,\n    new ExifTag({\n      name: 'ResolutionUnit',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0129,\n    new ExifTag({\n      name: 'PageNumber',\n      type: IfdValueType.short,\n      count: 2,\n    }),\n  ],\n  [\n    0x012c,\n    new ExifTag({\n      name: 'ColorResponseUnit',\n    }),\n  ],\n  [\n    0x012d,\n    new ExifTag({\n      name: 'TransferFunction',\n      type: IfdValueType.short,\n      count: 768,\n    }),\n  ],\n  [\n    0x0131,\n    new ExifTag({\n      name: 'Software',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x0132,\n    new ExifTag({\n      name: 'DateTime',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x013b,\n    new ExifTag({\n      name: 'Artist',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x013c,\n    new ExifTag({\n      name: 'HostComputer',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x013d,\n    new ExifTag({\n      name: 'Predictor',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x013e,\n    new ExifTag({\n      name: 'WhitePoint',\n      type: IfdValueType.rational,\n      count: 2,\n    }),\n  ],\n  [\n    0x013f,\n    new ExifTag({\n      name: 'PrimaryChromaticities',\n      type: IfdValueType.rational,\n      count: 6,\n    }),\n  ],\n  [\n    0x0140,\n    new ExifTag({\n      name: 'ColorMap',\n      type: IfdValueType.short,\n    }),\n  ],\n  [\n    0x0141,\n    new ExifTag({\n      name: 'HalftoneHints',\n      type: IfdValueType.short,\n      count: 2,\n    }),\n  ],\n  [\n    0x0142,\n    new ExifTag({\n      name: 'TileWidth',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x0143,\n    new ExifTag({\n      name: 'TileLength',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x0144,\n    new ExifTag({\n      name: 'TileOffsets',\n      type: IfdValueType.long,\n    }),\n  ],\n  [\n    0x0145,\n    new ExifTag({\n      name: 'TileByteCounts',\n    }),\n  ],\n  [\n    0x0146,\n    new ExifTag({\n      name: 'BadFaxLines',\n    }),\n  ],\n  [\n    0x0147,\n    new ExifTag({\n      name: 'CleanFaxData',\n    }),\n  ],\n  [\n    0x0148,\n    new ExifTag({\n      name: 'ConsecutiveBadFaxLines',\n    }),\n  ],\n  [\n    0x014c,\n    new ExifTag({\n      name: 'InkSet',\n    }),\n  ],\n  [\n    0x014d,\n    new ExifTag({\n      name: 'InkNames',\n    }),\n  ],\n  [\n    0x014e,\n    new ExifTag({\n      name: 'NumberofInks',\n    }),\n  ],\n  [\n    0x0150,\n    new ExifTag({\n      name: 'DotRange',\n    }),\n  ],\n  [\n    0x0151,\n    new ExifTag({\n      name: 'TargetPrinter',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x0152,\n    new ExifTag({\n      name: 'ExtraSamples',\n    }),\n  ],\n  [\n    0x0153,\n    new ExifTag({\n      name: 'SampleFormat',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0154,\n    new ExifTag({\n      name: 'SMinSampleValue',\n    }),\n  ],\n  [\n    0x0155,\n    new ExifTag({\n      name: 'SMaxSampleValue',\n    }),\n  ],\n  [\n    0x0156,\n    new ExifTag({\n      name: 'TransferRange',\n    }),\n  ],\n  [\n    0x0157,\n    new ExifTag({\n      name: 'ClipPath',\n    }),\n  ],\n  [\n    0x0200,\n    new ExifTag({\n      name: 'JPEGProc',\n    }),\n  ],\n  [\n    0x0201,\n    new ExifTag({\n      name: 'JPEGInterchangeFormat',\n    }),\n  ],\n  [\n    0x0202,\n    new ExifTag({\n      name: 'JPEGInterchangeFormatLength',\n    }),\n  ],\n  [\n    0x0211,\n    new ExifTag({\n      name: 'YCbCrCoefficients',\n      type: IfdValueType.rational,\n      count: 3,\n    }),\n  ],\n  [\n    0x0212,\n    new ExifTag({\n      name: 'YCbCrSubSampling',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0213,\n    new ExifTag({\n      name: 'YCbCrPositioning',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x0214,\n    new ExifTag({\n      name: 'ReferenceBlackWhite',\n      type: IfdValueType.rational,\n      count: 6,\n    }),\n  ],\n  // XPM Info\n  [\n    0x02bc,\n    new ExifTag({\n      name: 'ApplicationNotes',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x4746,\n    new ExifTag({\n      name: 'Rating',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x828d,\n    new ExifTag({\n      name: 'CFARepeatPatternDim',\n    }),\n  ],\n  [\n    0x828e,\n    new ExifTag({\n      name: 'CFAPattern',\n    }),\n  ],\n  [\n    0x828f,\n    new ExifTag({\n      name: 'BatteryLevel',\n    }),\n  ],\n  [\n    0x8298,\n    new ExifTag({\n      name: 'Copyright',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x829a,\n    new ExifTag({\n      name: 'ExposureTime',\n      type: IfdValueType.rational,\n      count: 1,\n    }),\n  ],\n  [\n    0x829d,\n    new ExifTag({\n      name: 'FNumber',\n      type: IfdValueType.rational,\n    }),\n  ],\n  [\n    0x83bb,\n    new ExifTag({\n      name: 'IPTC-NAA',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  // Exif Tags\n  [\n    0x8769,\n    new ExifTag({\n      name: 'ExifOffset',\n    }),\n  ],\n  [\n    0x8773,\n    new ExifTag({\n      name: 'InterColorProfile',\n    }),\n  ],\n  [\n    0x8822,\n    new ExifTag({\n      name: 'ExposureProgram',\n      type: IfdValueType.short,\n    }),\n  ],\n  [\n    0x8824,\n    new ExifTag({\n      name: 'SpectralSensitivity',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  // GPS tags\n  [\n    0x8825,\n    new ExifTag({\n      name: 'GPSOffset',\n    }),\n  ],\n  [\n    0x8827,\n    new ExifTag({\n      name: 'ISOSpeed',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x8828,\n    new ExifTag({\n      name: 'OECF',\n    }),\n  ],\n  [\n    0x8830,\n    new ExifTag({\n      name: 'SensitivityType',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x8832,\n    new ExifTag({\n      name: 'RecommendedExposureIndex',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x8833,\n    new ExifTag({\n      name: 'ISOSpeed',\n      type: IfdValueType.long,\n      count: 1,\n    }),\n  ],\n  [\n    0x9000,\n    new ExifTag({\n      name: 'ExifVersion',\n      type: IfdValueType.undefined,\n    }),\n  ],\n  [\n    0x9003,\n    new ExifTag({\n      name: 'DateTimeOriginal',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x9004,\n    new ExifTag({\n      name: 'DateTimeDigitized',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x9010,\n    new ExifTag({\n      name: 'OffsetTime',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x9011,\n    new ExifTag({\n      name: 'OffsetTimeOriginal',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x9012,\n    new ExifTag({\n      name: 'OffsetTimeDigitized',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x9101,\n    new ExifTag({\n      name: 'ComponentsConfiguration',\n      type: IfdValueType.undefined,\n    }),\n  ],\n  [\n    0x9102,\n    new ExifTag({\n      name: 'CompressedBitsPerPixel',\n    }),\n  ],\n  [\n    0x9201,\n    new ExifTag({\n      name: 'ShutterSpeedValue',\n    }),\n  ],\n  [\n    0x9202,\n    new ExifTag({\n      name: 'ApertureValue',\n    }),\n  ],\n  [\n    0x9203,\n    new ExifTag({\n      name: 'BrightnessValue',\n    }),\n  ],\n  [\n    0x9204,\n    new ExifTag({\n      name: 'ExposureBiasValue',\n    }),\n  ],\n  [\n    0x9205,\n    new ExifTag({\n      name: 'MaxApertureValue',\n    }),\n  ],\n  [\n    0x9206,\n    new ExifTag({\n      name: 'SubjectDistance',\n    }),\n  ],\n  [\n    0x9207,\n    new ExifTag({\n      name: 'MeteringMode',\n    }),\n  ],\n  [\n    0x9208,\n    new ExifTag({\n      name: 'LightSource',\n    }),\n  ],\n  [\n    0x9209,\n    new ExifTag({\n      name: 'Flash',\n    }),\n  ],\n  [\n    0x920a,\n    new ExifTag({\n      name: 'FocalLength',\n    }),\n  ],\n  [\n    0x9214,\n    new ExifTag({\n      name: 'SubjectArea',\n    }),\n  ],\n  [\n    0x927c,\n    new ExifTag({\n      name: 'MakerNote',\n      type: IfdValueType.undefined,\n    }),\n  ],\n  [\n    0x9286,\n    new ExifTag({\n      name: 'UserComment',\n      type: IfdValueType.undefined,\n    }),\n  ],\n  [\n    0x9290,\n    new ExifTag({\n      name: 'SubSecTime',\n    }),\n  ],\n  [\n    0x9291,\n    new ExifTag({\n      name: 'SubSecTimeOriginal',\n    }),\n  ],\n  [\n    0x9292,\n    new ExifTag({\n      name: 'SubSecTimeDigitized',\n    }),\n  ],\n  [\n    0x9c9b,\n    new ExifTag({\n      name: 'XPTitle',\n    }),\n  ],\n  [\n    0x9c9c,\n    new ExifTag({\n      name: 'XPComment',\n    }),\n  ],\n  [\n    0x9c9d,\n    new ExifTag({\n      name: 'XPAuthor',\n    }),\n  ],\n  [\n    0x9c9e,\n    new ExifTag({\n      name: 'XPKeywords',\n    }),\n  ],\n  [\n    0x9c9f,\n    new ExifTag({\n      name: 'XPSubject',\n    }),\n  ],\n  [\n    0xa000,\n    new ExifTag({\n      name: 'FlashPixVersion',\n    }),\n  ],\n  [\n    0xa001,\n    new ExifTag({\n      name: 'ColorSpace',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0xa002,\n    new ExifTag({\n      name: 'ExifImageWidth',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0xa003,\n    new ExifTag({\n      name: 'ExifImageLength',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0xa004,\n    new ExifTag({\n      name: 'RelatedSoundFile',\n    }),\n  ],\n  [\n    0xa005,\n    new ExifTag({\n      name: 'InteroperabilityOffset',\n    }),\n  ],\n  // [0x920B in TIFF/EP\n  [\n    0xa20b,\n    new ExifTag({\n      name: 'FlashEnergy',\n    }),\n  ],\n  [\n    0xa20c,\n    new ExifTag({\n      name: 'SpatialFrequencyResponse',\n    }),\n  ],\n  [\n    0xa20e,\n    new ExifTag({\n      name: 'FocalPlaneXResolution',\n    }),\n  ],\n  [\n    0xa20f,\n    new ExifTag({\n      name: 'FocalPlaneYResolution',\n    }),\n  ],\n  [\n    0xa210,\n    new ExifTag({\n      name: 'FocalPlaneResolutionUnit',\n    }),\n  ],\n  [\n    0xa214,\n    new ExifTag({\n      name: 'SubjectLocation',\n    }),\n  ],\n  [\n    0xa215,\n    new ExifTag({\n      name: 'ExposureIndex',\n    }),\n  ],\n  [\n    0xa217,\n    new ExifTag({\n      name: 'SensingMethod',\n    }),\n  ],\n  [\n    0xa300,\n    new ExifTag({\n      name: 'FileSource',\n    }),\n  ],\n  [\n    0xa301,\n    new ExifTag({\n      name: 'SceneType',\n    }),\n  ],\n  [\n    0xa302,\n    new ExifTag({\n      name: 'CVAPattern',\n    }),\n  ],\n  [\n    0xa401,\n    new ExifTag({\n      name: 'CustomRendered',\n    }),\n  ],\n  [\n    0xa402,\n    new ExifTag({\n      name: 'ExposureMode',\n    }),\n  ],\n  [\n    0xa403,\n    new ExifTag({\n      name: 'WhiteBalance',\n    }),\n  ],\n  [\n    0xa404,\n    new ExifTag({\n      name: 'DigitalZoomRatio',\n    }),\n  ],\n  [\n    0xa405,\n    new ExifTag({\n      name: 'FocalLengthIn35mmFilm',\n    }),\n  ],\n  [\n    0xa406,\n    new ExifTag({\n      name: 'SceneCaptureType',\n    }),\n  ],\n  [\n    0xa407,\n    new ExifTag({\n      name: 'GainControl',\n    }),\n  ],\n  [\n    0xa408,\n    new ExifTag({\n      name: 'Contrast',\n    }),\n  ],\n  [\n    0xa409,\n    new ExifTag({\n      name: 'Saturation',\n    }),\n  ],\n  [\n    0xa40a,\n    new ExifTag({\n      name: 'Sharpness',\n    }),\n  ],\n  [\n    0xa40b,\n    new ExifTag({\n      name: 'DeviceSettingDescription',\n    }),\n  ],\n  [\n    0xa40c,\n    new ExifTag({\n      name: 'SubjectDistanceRange',\n    }),\n  ],\n  [\n    0xa420,\n    new ExifTag({\n      name: 'ImageUniqueID',\n    }),\n  ],\n  [\n    0xa430,\n    new ExifTag({\n      name: 'CameraOwnerName',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0xa431,\n    new ExifTag({\n      name: 'BodySerialNumber',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0xa432,\n    new ExifTag({\n      name: 'LensSpecification',\n    }),\n  ],\n  [\n    0xa433,\n    new ExifTag({\n      name: 'LensMake',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0xa434,\n    new ExifTag({\n      name: 'LensModel',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0xa435,\n    new ExifTag({\n      name: 'LensSerialNumber',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0xa500,\n    new ExifTag({\n      name: 'Gamma',\n      type: IfdValueType.rational,\n      count: 1,\n    }),\n  ],\n  [\n    0xc4a5,\n    new ExifTag({\n      name: 'PrintIM',\n    }),\n  ],\n  [\n    0xea1c,\n    new ExifTag({\n      name: 'Padding',\n    }),\n  ],\n  [\n    0xea1d,\n    new ExifTag({\n      name: 'OffsetSchema',\n    }),\n  ],\n  [\n    0xfde8,\n    new ExifTag({\n      name: 'OwnerName',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0xfde9,\n    new ExifTag({\n      name: 'SerialNumber',\n      type: IfdValueType.ascii,\n    }),\n  ],\n]);\n\nexport const ExifInteropTags = new Map<number, ExifTag>([\n  [\n    0x0001,\n    new ExifTag({\n      name: 'InteropIndex',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x0002,\n    new ExifTag({\n      name: 'InteropVersion',\n      type: IfdValueType.undefined,\n    }),\n  ],\n  [\n    0x1000,\n    new ExifTag({\n      name: 'RelatedImageFileFormat',\n      type: IfdValueType.ascii,\n    }),\n  ],\n  [\n    0x1001,\n    new ExifTag({\n      name: 'RelatedImageWidth',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n  [\n    0x1002,\n    new ExifTag({\n      name: 'RelatedImageLength',\n      type: IfdValueType.short,\n      count: 1,\n    }),\n  ],\n]);\n\nexport const ExifGpsTags = new Map<number, ExifTag>([\n  [\n    0x0000,\n    new ExifTag({\n      name: 'GPSVersionID',\n    }),\n  ],\n  [\n    0x0001,\n    new ExifTag({\n      name: 'GPSLatitudeRef',\n    }),\n  ],\n  [\n    0x0002,\n    new ExifTag({\n      name: 'GPSLatitude',\n    }),\n  ],\n  [\n    0x0003,\n    new ExifTag({\n      name: 'GPSLongitudeRef',\n    }),\n  ],\n  [\n    0x0004,\n    new ExifTag({\n      name: 'GPSLongitude',\n    }),\n  ],\n  [\n    0x0005,\n    new ExifTag({\n      name: 'GPSAltitudeRef',\n    }),\n  ],\n  [\n    0x0006,\n    new ExifTag({\n      name: 'GPSAltitude',\n    }),\n  ],\n  [\n    0x0007,\n    new ExifTag({\n      name: 'GPSTimeStamp',\n    }),\n  ],\n  [\n    0x0008,\n    new ExifTag({\n      name: 'GPSSatellites',\n    }),\n  ],\n  [\n    0x0009,\n    new ExifTag({\n      name: 'GPSStatus',\n    }),\n  ],\n  [\n    0x000a,\n    new ExifTag({\n      name: 'GPSMeasureMode',\n    }),\n  ],\n  [\n    0x000b,\n    new ExifTag({\n      name: 'GPSDOP',\n    }),\n  ],\n  [\n    0x000c,\n    new ExifTag({\n      name: 'GPSSpeedRef',\n    }),\n  ],\n  [\n    0x000d,\n    new ExifTag({\n      name: 'GPSSpeed',\n    }),\n  ],\n  [\n    0x000e,\n    new ExifTag({\n      name: 'GPSTrackRef',\n    }),\n  ],\n  [\n    0x000f,\n    new ExifTag({\n      name: 'GPSTrack',\n    }),\n  ],\n  [\n    0x0010,\n    new ExifTag({\n      name: 'GPSImgDirectionRef',\n    }),\n  ],\n  [\n    0x0011,\n    new ExifTag({\n      name: 'GPSImgDirection',\n    }),\n  ],\n  [\n    0x0012,\n    new ExifTag({\n      name: 'GPSMapDatum',\n    }),\n  ],\n  [\n    0x0013,\n    new ExifTag({\n      name: 'GPSDestLatitudeRef',\n    }),\n  ],\n  [\n    0x0014,\n    new ExifTag({\n      name: 'GPSDestLatitude',\n    }),\n  ],\n  [\n    0x0015,\n    new ExifTag({\n      name: 'GPSDestLongitudeRef',\n    }),\n  ],\n  [\n    0x0016,\n    new ExifTag({\n      name: 'GPSDestLongitude',\n    }),\n  ],\n  [\n    0x0017,\n    new ExifTag({\n      name: 'GPSDestBearingRef',\n    }),\n  ],\n  [\n    0x0018,\n    new ExifTag({\n      name: 'GPSDestBearing',\n    }),\n  ],\n  [\n    0x0019,\n    new ExifTag({\n      name: 'GPSDestDistanceRef',\n    }),\n  ],\n  [\n    0x001a,\n    new ExifTag({\n      name: 'GPSDestDistance',\n    }),\n  ],\n  [\n    0x001b,\n    new ExifTag({\n      name: 'GPSProcessingMethod',\n    }),\n  ],\n  [\n    0x001c,\n    new ExifTag({\n      name: 'GPSAreaInformation',\n    }),\n  ],\n  [\n    0x001d,\n    new ExifTag({\n      name: 'GPSDate',\n    }),\n  ],\n  [\n    0x001e,\n    new ExifTag({\n      name: 'GPSDifferential',\n    }),\n  ],\n]);\n", "/** @format */\n\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { Rational } from '../../common/rational';\nimport { LibError } from '../../error/lib-error';\nimport {\n  getIfdValueTypeSize,\n  getIfdValueTypeString,\n  IfdValueType,\n} from '../ifd-value-type';\n\nexport abstract class IfdValue {\n  public get type(): IfdValueType {\n    return IfdValueType.none;\n  }\n\n  public get length(): number {\n    return 0;\n  }\n\n  public get dataSize(): number {\n    return getIfdValueTypeSize(this.type, this.length);\n  }\n\n  public get typeString(): string {\n    return getIfdValueTypeString(this.type);\n  }\n\n  public toBool(_index?: number): boolean {\n    return false;\n  }\n\n  public toInt(_index?: number): number {\n    return 0;\n  }\n\n  public toDouble(_index?: number): number {\n    return 0;\n  }\n\n  public toData(): Uint8Array {\n    return new Uint8Array();\n  }\n\n  public toRational(_index?: number): Rational {\n    return new Rational(0, 1);\n  }\n\n  public write(_out: OutputBuffer): void {}\n\n  public setBool(_v: boolean, _index?: number): void {}\n\n  public setInt(_v: number, _index?: number): void {}\n\n  public setDouble(_v: number, _index?: number): void {}\n\n  public setRational(\n    _numerator: number,\n    _denomitator: number,\n    _index?: number\n  ): void {}\n\n  public setString(_v: string): void {}\n\n  public equals(_other: IfdValue): boolean {\n    return false;\n  }\n\n  public clone(): IfdValue {\n    throw new LibError('Cannot be copied.');\n  }\n\n  public toString(): string {\n    return `${this.constructor.name}`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { StringUtils } from '../../common/string-utils';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\n\nexport class IfdAsciiValue extends IfdValue {\n  private _value: string;\n\n  public get type(): IfdValueType {\n    return IfdValueType.ascii;\n  }\n\n  public get length(): number {\n    const codeUnits = StringUtils.getCodePoints(this._value);\n    return codeUnits.length + 1;\n  }\n\n  constructor(value: number[] | string) {\n    super();\n    if (typeof value === 'string') {\n      this._value = value;\n    } else {\n      this._value = String.fromCharCode(...value);\n    }\n  }\n\n  public static data(data: InputBuffer, length: number) {\n    // The final byte is a null terminator\n    const value = length > 0 ? data.readString(length - 1) : '';\n    return new IfdAsciiValue(value);\n  }\n\n  public toData(): Uint8Array {\n    return StringUtils.getCodePoints(this._value);\n  }\n\n  public write(out: OutputBuffer): void {\n    const bytes = StringUtils.getCodePoints(this._value);\n    out.writeBytes(bytes);\n    out.writeByte(0);\n  }\n\n  public setString(v: string): void {\n    this._value = v;\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdAsciiValue &&\n      this.length === other.length &&\n      this._value === this._value\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdAsciiValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this._value})`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdShortValue extends IfdValue {\n  private _value: Uint16Array;\n\n  public get type(): IfdValueType {\n    return IfdValueType.short;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Uint16Array | number) {\n    super();\n    if (typeof value === 'number') {\n      this._value = new Uint16Array(1);\n      this._value[0] = value;\n    } else {\n      this._value = Uint16Array.from(value);\n    }\n  }\n\n  public static data(data: InputBuffer, length: number) {\n    const array = new Uint16Array(length);\n    for (let i = 0; i < length; ++i) {\n      array[i] = data.readUint16();\n    }\n    return new IfdShortValue(array);\n  }\n\n  public toInt(index = 0): number {\n    return this._value[index];\n  }\n\n  public write(out: OutputBuffer): void {\n    for (let i = 0, l = this._value.length; i < l; ++i) {\n      out.writeUint16(this._value[i]);\n    }\n  }\n\n  public setInt(v: number, index = 0): void {\n    this._value[index] = v;\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdShortValue &&\n      this.length === other.length &&\n      ArrayUtils.equals(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdShortValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${\n      this._value.length === 1 ? `${this._value[0]}` : `${this._value}`\n    })`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { Rational } from '../../common/rational';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdRationalValue extends IfdValue {\n  private _value: Rational[];\n\n  public get type(): IfdValueType {\n    return IfdValueType.rational;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Rational[] | Rational) {\n    super();\n    if (value instanceof Rational) {\n      this._value = [value];\n    } else {\n      this._value = value;\n    }\n  }\n\n  public static data(data: InputBuffer, length: number) {\n    const array = new Array<Rational>();\n    for (let i = 0; i < length; i++) {\n      const r = new Rational(data.readUint32(), data.readUint32());\n      array.push(r);\n    }\n    return new IfdRationalValue(array);\n  }\n\n  public static from(other: Rational) {\n    const r = new Rational(other.numerator, other.denominator);\n    return new IfdRationalValue(r);\n  }\n\n  public toInt(index = 0): number {\n    return this._value[index].toInt;\n  }\n\n  public toDouble(index = 0): number {\n    return this._value[index].toDouble;\n  }\n\n  public toRational(index = 0): Rational {\n    return this._value[index];\n  }\n\n  public write(out: OutputBuffer): void {\n    for (const v of this._value) {\n      out.writeUint32(v.numerator);\n      out.writeUint32(v.denominator);\n    }\n  }\n\n  public setRational(numerator: number, denomitator: number, index = 0): void {\n    this._value[index] = new Rational(numerator, denomitator);\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdRationalValue &&\n      this.length === other.length &&\n      ArrayUtils.equalsRationalArray(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdRationalValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${\n      this._value.length === 1 ? `${this._value[0]}` : `${this._value}`\n    })`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdByteValue extends IfdValue {\n  private _value: Uint8Array;\n\n  public get type(): IfdValueType {\n    return IfdValueType.byte;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Uint8Array | number) {\n    super();\n    if (typeof value === 'number') {\n      this._value = new Uint8Array(1);\n      this._value[0] = value;\n    } else {\n      this._value = Uint8Array.from(value);\n    }\n  }\n\n  public static data(data: InputBuffer, offset?: number, length?: number) {\n    const array = data.toUint8Array(offset, length);\n    return new IfdByteValue(array);\n  }\n\n  public toInt(index = 0): number {\n    return this._value[index];\n  }\n\n  public toData(): Uint8Array {\n    return this._value;\n  }\n\n  public write(out: OutputBuffer): void {\n    out.writeBytes(this._value);\n  }\n\n  public setInt(v: number, index = 0): void {\n    this._value[index] = v;\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdByteValue &&\n      this.length === other.length &&\n      ArrayUtils.equals(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdByteValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${\n      this._value.length === 1 ? `${this._value[0]}` : `${this._value}`\n    })`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdLongValue extends IfdValue {\n  private _value: Uint32Array;\n\n  public get type(): IfdValueType {\n    return IfdValueType.long;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Uint32Array | number) {\n    super();\n    if (typeof value === 'number') {\n      this._value = new Uint32Array(1);\n      this._value[0] = value;\n    } else {\n      this._value = Uint32Array.from(value);\n    }\n  }\n\n  public static data(data: InputBuffer, length: number) {\n    const array = new Uint32Array(length);\n    for (let i = 0; i < length; ++i) {\n      array[i] = data.readUint32();\n    }\n    return new IfdLongValue(array);\n  }\n\n  public toInt(index = 0): number {\n    return this._value[index];\n  }\n\n  public toData(): Uint8Array {\n    return new Uint8Array(this._value.buffer);\n  }\n\n  public write(out: OutputBuffer): void {\n    for (let i = 0, l = this._value.length; i < l; ++i) {\n      out.writeUint32(this._value[i]);\n    }\n  }\n\n  public setInt(v: number, index = 0): void {\n    this._value[index] = v;\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdLongValue &&\n      this.length === other.length &&\n      ArrayUtils.equals(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdLongValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${\n      this._value.length === 1 ? `${this._value[0]}` : `${this._value}`\n    })`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdSByteValue extends IfdValue {\n  private _value: Int8Array;\n\n  public get type(): IfdValueType {\n    return IfdValueType.sByte;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Int8Array | number) {\n    super();\n    if (typeof value === 'number') {\n      this._value = new Int8Array(1);\n      this._value[0] = value;\n    } else {\n      this._value = Int8Array.from(value);\n    }\n  }\n\n  public static data(data: InputBuffer, offset?: number, length?: number) {\n    const array = new Int8Array(\n      new Int8Array(data.toUint8Array(offset, length).buffer)\n    );\n    return new IfdSByteValue(array);\n  }\n\n  public toInt(index = 0): number {\n    return this._value[index];\n  }\n\n  public toData(): Uint8Array {\n    return new Uint8Array(this._value.buffer);\n  }\n\n  public write(out: OutputBuffer): void {\n    out.writeBytes(new Uint8Array(this._value.buffer));\n  }\n\n  public setInt(v: number, index = 0): void {\n    this._value[index] = v;\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdSByteValue &&\n      this.length === other.length &&\n      ArrayUtils.equals(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdSByteValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${\n      this._value.length === 1 ? `${this._value[0]}` : `${this._value}`\n    })`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdUndefinedValue extends IfdValue {\n  private _value: Uint8Array;\n\n  public get type(): IfdValueType {\n    return IfdValueType.undefined;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Uint8Array | number) {\n    super();\n    if (typeof value === 'number') {\n      this._value = new Uint8Array(1);\n      this._value[0] = value;\n    } else {\n      this._value = value;\n    }\n  }\n\n  public static data(data: InputBuffer, offset?: number, length?: number) {\n    const array = new Uint8Array(data.toUint8Array(offset, length));\n    return new IfdUndefinedValue(array);\n  }\n\n  public toData(): Uint8Array {\n    return this._value;\n  }\n\n  public write(out: OutputBuffer): void {\n    out.writeBytes(this._value);\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdUndefinedValue &&\n      this.length === other.length &&\n      ArrayUtils.equals(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdUndefinedValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (undefined)`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdSShortValue extends IfdValue {\n  private _value: Int16Array;\n\n  public get type(): IfdValueType {\n    return IfdValueType.sShort;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Int16Array | number) {\n    super();\n    if (typeof value === 'number') {\n      this._value = new Int16Array(1);\n      this._value[0] = value;\n    } else {\n      this._value = Int16Array.from(value);\n    }\n  }\n\n  public static data(data: InputBuffer, length: number) {\n    const array = new Int16Array(length);\n    for (let i = 0; i < length; ++i) {\n      array[i] = data.readInt16();\n    }\n    return new IfdSShortValue(array);\n  }\n\n  public toInt(index = 0): number {\n    return this._value[index];\n  }\n\n  public toData(): Uint8Array {\n    return new Uint8Array(this._value.buffer);\n  }\n\n  public write(out: OutputBuffer): void {\n    const v = new Int16Array(1);\n    const vb = new Uint16Array(v.buffer);\n    for (let i = 0, l = this._value.length; i < l; ++i) {\n      v[0] = this._value[i];\n      out.writeUint16(vb[0]);\n    }\n  }\n\n  public setInt(v: number, index = 0): void {\n    this._value[index] = v;\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdSShortValue &&\n      this.length === other.length &&\n      ArrayUtils.equals(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdSShortValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${\n      this._value.length === 1 ? `${this._value[0]}` : `${this._value}`\n    })`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { BitUtils } from '../../common/bit-utils';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdSLongValue extends IfdValue {\n  private _value: Int32Array;\n\n  public get type(): IfdValueType {\n    return IfdValueType.sLong;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Int32Array | number) {\n    super();\n    if (typeof value === 'number') {\n      this._value = new Int32Array(1);\n      this._value[0] = value;\n    } else {\n      this._value = Int32Array.from(value);\n    }\n  }\n\n  public static data(data: InputBuffer, length: number) {\n    const array = new Int32Array(length);\n    for (let i = 0; i < length; ++i) {\n      array[i] = data.readInt32();\n    }\n    return new IfdSLongValue(array);\n  }\n\n  public toInt(index = 0): number {\n    return this._value[index];\n  }\n\n  public toData(): Uint8Array {\n    return new Uint8Array(this._value.buffer);\n  }\n\n  public write(out: OutputBuffer): void {\n    for (let i = 0, l = this._value.length; i < l; ++i) {\n      out.writeUint32(BitUtils.int32ToUint32(this._value[i]));\n    }\n  }\n\n  public setInt(v: number, index = 0): void {\n    this._value[index] = v;\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdSLongValue &&\n      this.length === other.length &&\n      ArrayUtils.equals(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdSLongValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${\n      this._value.length === 1 ? `${this._value[0]}` : `${this._value}`\n    })`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { BitUtils } from '../../common/bit-utils';\nimport { Rational } from '../../common/rational';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdSRationalValue extends IfdValue {\n  private _value: Rational[];\n\n  public get type(): IfdValueType {\n    return IfdValueType.sRational;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Rational[] | Rational) {\n    super();\n    if (value instanceof Rational) {\n      this._value = [value];\n    } else {\n      this._value = value;\n    }\n  }\n\n  public static data(data: InputBuffer, length: number) {\n    const array = new Array<Rational>();\n    for (let i = 0; i < length; i++) {\n      const r = new Rational(data.readInt32(), data.readInt32());\n      array.push(r);\n    }\n    return new IfdSRationalValue(array);\n  }\n\n  public static from(other: Rational) {\n    const r = new Rational(other.numerator, other.denominator);\n    return new IfdSRationalValue(r);\n  }\n\n  public toInt(index = 0): number {\n    return this._value[index].toInt;\n  }\n\n  public toDouble(index = 0): number {\n    return this._value[index].toDouble;\n  }\n\n  public toRational(index = 0): Rational {\n    return this._value[index];\n  }\n\n  public write(out: OutputBuffer): void {\n    for (const v of this._value) {\n      out.writeUint32(BitUtils.int32ToUint32(v.numerator));\n      out.writeUint32(BitUtils.int32ToUint32(v.denominator));\n    }\n  }\n\n  public setRational(numerator: number, denomitator: number, index = 0): void {\n    this._value[index] = new Rational(numerator, denomitator);\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdSRationalValue &&\n      this.length === other.length &&\n      ArrayUtils.equalsRationalArray(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdSRationalValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${\n      this._value.length === 1 ? `${this._value[0]}` : `${this._value}`\n    })`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdSingleValue extends IfdValue {\n  private _value: Float32Array;\n\n  public get type(): IfdValueType {\n    return IfdValueType.single;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Float32Array | number) {\n    super();\n    if (typeof value === 'number') {\n      this._value = new Float32Array(1);\n      this._value[0] = value;\n    } else {\n      this._value = Float32Array.from(value);\n    }\n  }\n\n  public static data(data: InputBuffer, length: number) {\n    const array = new Float32Array(length);\n    for (let i = 0; i < length; ++i) {\n      array[i] = data.readFloat32();\n    }\n    return new IfdSingleValue(array);\n  }\n\n  public toDouble(index = 0): number {\n    return this._value[index];\n  }\n\n  public toData(): Uint8Array {\n    return new Uint8Array(this._value.buffer);\n  }\n\n  public write(out: OutputBuffer): void {\n    for (let i = 0, l = this._value.length; i < l; ++i) {\n      out.writeFloat32(this._value[i]);\n    }\n  }\n\n  public setDouble(v: number, index = 0): void {\n    this._value[index] = v;\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdSingleValue &&\n      this.length === other.length &&\n      ArrayUtils.equals(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdSingleValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${\n      this._value.length === 1 ? `${this._value[0]}` : `${this._value}`\n    })`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { IfdValue } from './ifd-value';\nimport { IfdValueType } from '../ifd-value-type';\nimport { ArrayUtils } from '../../common/array-utils';\n\nexport class IfdDoubleValue extends IfdValue {\n  private _value: Float64Array;\n\n  public get type(): IfdValueType {\n    return IfdValueType.double;\n  }\n\n  public get length(): number {\n    return this._value.length;\n  }\n\n  constructor(value: Float64Array | number) {\n    super();\n    if (typeof value === 'number') {\n      this._value = new Float64Array(1);\n      this._value[0] = value;\n    } else {\n      this._value = Float64Array.from(value);\n    }\n  }\n\n  public static data(data: InputBuffer, length: number) {\n    const array = new Float64Array(length);\n    for (let i = 0; i < length; ++i) {\n      array[i] = data.readFloat64();\n    }\n    return new IfdDoubleValue(array);\n  }\n\n  public toDouble(index = 0): number {\n    return this._value[index];\n  }\n\n  public toData(): Uint8Array {\n    return new Uint8Array(this._value.buffer);\n  }\n\n  public write(out: OutputBuffer): void {\n    for (let i = 0, l = this._value.length; i < l; ++i) {\n      out.writeFloat64(this._value[i]);\n    }\n  }\n\n  public setDouble(v: number, index = 0): void {\n    this._value[index] = v;\n  }\n\n  public equals(other: IfdValue): boolean {\n    return (\n      other instanceof IfdDoubleValue &&\n      this.length === other.length &&\n      ArrayUtils.equals(this._value, other._value)\n    );\n  }\n\n  public clone(): IfdValue {\n    return new IfdDoubleValue(this._value);\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${\n      this._value.length === 1 ? `${this._value[0]}` : `${this._value}`\n    })`;\n  }\n}\n", "/** @format */\n\nimport { Rational } from '../common/rational';\nimport { ExifImageTags, ExifTagNameToID } from './exif-tag';\nimport { IfdValueType } from './ifd-value-type';\nimport { IfdContainer } from './ifd-container';\nimport { IfdValue } from './ifd-value/ifd-value';\nimport { IfdAsciiValue } from './ifd-value/ifd-ascii-value';\nimport { IfdShortValue } from './ifd-value/ifd-short-value';\nimport { IfdRationalValue } from './ifd-value/ifd-rational-value';\nimport { IfdByteValue } from './ifd-value/ifd-byte-value';\nimport { IfdLongValue } from './ifd-value/ifd-long-value';\nimport { IfdSByteValue } from './ifd-value/ifd-sbyte-value';\nimport { IfdUndefinedValue } from './ifd-value/ifd-undefined-value';\nimport { IfdSShortValue } from './ifd-value/ifd-sshort-value';\nimport { IfdSLongValue } from './ifd-value/ifd-slong-value';\nimport { IfdSRationalValue } from './ifd-value/ifd-srational-value';\nimport { IfdSingleValue } from './ifd-value/ifd-single-value';\nimport { IfdDoubleValue } from './ifd-value/ifd-double-value';\nimport { TypedArray } from '../common/typings';\nimport { StringUtils } from '../common/string-utils';\nimport { ArrayUtils } from '../common/array-utils';\n\nexport class IfdDirectory {\n  private readonly _data: Map<number, IfdValue>;\n\n  private readonly _sub = new IfdContainer();\n  public get sub(): IfdContainer {\n    return this._sub;\n  }\n\n  public get keys(): IterableIterator<number> {\n    return this._data.keys();\n  }\n\n  public get values(): IterableIterator<IfdValue> {\n    return this._data.values();\n  }\n\n  public get size(): number {\n    return this._data.size;\n  }\n\n  public get isEmpty(): boolean {\n    return this._data.size === 0 && this._sub.isEmpty;\n  }\n\n  public get hasUserComment(): boolean {\n    return this._data.has(0x9286);\n  }\n\n  public get userComment(): string | undefined {\n    const data = this._data.get(0x9286)?.toData();\n    return data !== undefined\n      ? StringUtils.utf8Decoder.decode(data)\n      : undefined;\n  }\n\n  public set userComment(v: string | undefined) {\n    if (v === undefined) {\n      this._data.delete(0x9286);\n    } else {\n      const codeUnits = StringUtils.getCodePoints(v);\n      this._data.set(0x9286, new IfdUndefinedValue(codeUnits));\n    }\n  }\n\n  public get hasImageDescription(): boolean {\n    return this._data.has(0x010e);\n  }\n\n  public get imageDescription(): string | undefined {\n    return this._data.get(0x010e)?.toString();\n  }\n\n  public set imageDescription(v: string | undefined) {\n    if (v === undefined) {\n      this._data.delete(0x010e);\n    } else {\n      this._data.set(0x010e, new IfdAsciiValue(v));\n    }\n  }\n\n  public get hasMake(): boolean {\n    return this._data.has(0x010f);\n  }\n\n  public get make(): string | undefined {\n    return this._data.get(0x010f)?.toString();\n  }\n\n  public set make(v: string | undefined) {\n    if (v === undefined) {\n      this._data.delete(0x010f);\n    } else {\n      this._data.set(0x010f, new IfdAsciiValue(v));\n    }\n  }\n\n  public get hasModel(): boolean {\n    return this._data.has(0x0110);\n  }\n\n  public get model(): string | undefined {\n    return this._data.get(0x0110)?.toString();\n  }\n\n  public set model(v: string | undefined) {\n    if (v === undefined) {\n      this._data.delete(0x0110);\n    } else {\n      this._data.set(0x0110, new IfdAsciiValue(v));\n    }\n  }\n\n  public get hasOrientation(): boolean {\n    return this._data.has(0x0112);\n  }\n\n  public get orientation(): number | undefined {\n    return this._data.get(0x0112)?.toInt();\n  }\n\n  public set orientation(v: number | undefined) {\n    if (v === undefined) {\n      this._data.delete(0x0112);\n    } else {\n      this._data.set(0x0112, new IfdShortValue(v));\n    }\n  }\n\n  public get hasResolutionX(): boolean {\n    return this._data.has(0x011a);\n  }\n\n  public get resolutionX(): Rational | undefined {\n    return this._data.get(0x011a)?.toRational();\n  }\n\n  public set resolutionX(v: Rational | undefined) {\n    if (!this.setRational(0x011a, v)) {\n      this._data.delete(0x011a);\n    }\n  }\n\n  public get hasResolutionY(): boolean {\n    return this._data.has(0x011b);\n  }\n\n  public get resolutionY(): Rational | undefined {\n    return this._data.get(0x011b)?.toRational();\n  }\n\n  public set resolutionY(v: Rational | undefined) {\n    if (!this.setRational(0x011b, v)) {\n      this._data.delete(0x011b);\n    }\n  }\n\n  public get hasResolutionUnit(): boolean {\n    return this._data.has(0x0128);\n  }\n\n  public get resolutionUnit(): number | undefined {\n    return this._data.get(0x0128)?.toInt();\n  }\n\n  public set resolutionUnit(v: number | undefined) {\n    if (v === undefined) {\n      this._data.delete(0x0128);\n    } else {\n      this._data.set(0x0128, new IfdShortValue(Math.trunc(v)));\n    }\n  }\n\n  public get hasImageWidth(): boolean {\n    return this._data.has(0x0100);\n  }\n\n  public get imageWidth(): number | undefined {\n    return this._data.get(0x0100)?.toInt();\n  }\n\n  public set imageWidth(v: number | undefined) {\n    if (v === undefined) {\n      this._data.delete(0x0100);\n    } else {\n      this._data.set(0x0100, new IfdShortValue(Math.trunc(v)));\n    }\n  }\n\n  public get hasImageHeight(): boolean {\n    return this._data.has(0x0101);\n  }\n\n  public get imageHeight(): number | undefined {\n    return this._data.get(0x0101)?.toInt();\n  }\n\n  public set imageHeight(v: number | undefined) {\n    if (v === undefined) {\n      this._data.delete(0x0101);\n    } else {\n      this._data.set(0x0101, new IfdShortValue(Math.trunc(v)));\n    }\n  }\n\n  public get hasSoftware(): boolean {\n    return this._data.has(0x0131);\n  }\n\n  public get software(): string | undefined {\n    return this._data.get(0x0131)?.toString();\n  }\n\n  public set software(v: string | undefined) {\n    if (v === undefined) {\n      this._data.delete(0x0131);\n    } else {\n      this._data.set(0x0131, new IfdAsciiValue(v));\n    }\n  }\n\n  public get hasCopyright(): boolean {\n    return this._data.has(0x8298);\n  }\n\n  public get copyright(): string | undefined {\n    return this._data.get(0x8298)?.toString();\n  }\n\n  public set copyright(v: string | undefined) {\n    if (v === undefined) {\n      this._data.delete(0x8298);\n    } else {\n      this._data.set(0x8298, new IfdAsciiValue(v));\n    }\n  }\n\n  /**\n   * The size in bytes of the data written by this directory. Can be used to\n   * calculate end-of-block offsets.\n   */\n  public get dataSize(): number {\n    const numEntries = this.size;\n    let dataOffset = 2 + 12 * numEntries + 4;\n    for (const value of this.values) {\n      const dataSize = value.dataSize;\n      if (dataSize > 4) {\n        dataOffset += dataSize;\n      }\n    }\n    // storage for sub-ifd blocks\n    for (const subName of this.sub.keys) {\n      const subIfd = this.sub.get(subName);\n      let subSize = 2 + 12 * subIfd.size;\n      for (const value of subIfd.values) {\n        const dataSize = value.dataSize;\n        if (dataSize > 4) {\n          subSize += dataSize;\n        }\n      }\n      dataOffset += subSize;\n    }\n    return dataOffset;\n  }\n\n  constructor(data?: Map<number, IfdValue>) {\n    this._data = data ?? new Map<number, IfdValue>();\n  }\n\n  private setRational(\n    tag: number,\n    value: Rational | number[] | TypedArray | unknown\n  ): boolean {\n    if (value instanceof Rational) {\n      this._data.set(tag, IfdRationalValue.from(value));\n      return true;\n    } else if (\n      ArrayUtils.isNumArrayOrTypedArray(value) &&\n      (value as []).length >= 2\n    ) {\n      const r = new Rational((value as number[])[0], (value as number[])[1]);\n      this._data.set(tag, IfdRationalValue.from(r));\n      return true;\n    }\n    return false;\n  }\n\n  public static from(other: IfdDirectory): IfdDirectory {\n    return new IfdDirectory(new Map<number, IfdValue>(other._data));\n  }\n\n  public static isArrayOfRationalNumbers(value: unknown): boolean {\n    return (\n      Array.isArray(value) &&\n      value.every(\n        (v) => ArrayUtils.isNumArrayOrTypedArray(v) && (v as []).length >= 2\n      )\n    );\n  }\n\n  public has(tag: number): boolean {\n    return this._data.has(tag);\n  }\n\n  public getValue(tag: number | string): IfdValue | undefined {\n    let _tag: string | number | undefined = tag;\n    if (typeof _tag === 'string') {\n      _tag = ExifTagNameToID.get(_tag);\n    }\n    if (typeof _tag === 'number') {\n      return this._data.get(_tag);\n    }\n    return undefined;\n  }\n\n  public setValue(\n    tag: number | string,\n    value:\n      | Rational[]\n      | number[]\n      | TypedArray\n      | Rational\n      | IfdValue\n      | number\n      | undefined\n  ): void {\n    let _tag: string | number | undefined = tag;\n    if (typeof _tag === 'string') {\n      _tag = ExifTagNameToID.get(_tag);\n    }\n    if (typeof _tag !== 'number') {\n      return;\n    }\n\n    if (value === undefined) {\n      this._data.delete(_tag);\n    } else {\n      if (value instanceof IfdValue) {\n        this._data.set(_tag, value);\n      } else {\n        const tagInfo = ExifImageTags.get(_tag);\n        if (tagInfo !== undefined) {\n          const tagType = tagInfo.type;\n          switch (tagType) {\n            case IfdValueType.byte:\n              if (ArrayUtils.isNumArrayOrTypedArray(value)) {\n                this._data.set(\n                  _tag,\n                  new IfdByteValue(new Uint8Array(value as number[]))\n                );\n              } else if (typeof value === 'number') {\n                this._data.set(_tag, new IfdByteValue(value));\n              }\n              break;\n            case IfdValueType.ascii:\n              if (typeof value === 'string') {\n                this._data.set(_tag, new IfdAsciiValue(value));\n              }\n              break;\n            case IfdValueType.short:\n              if (ArrayUtils.isNumArrayOrTypedArray(value)) {\n                this._data.set(\n                  _tag,\n                  new IfdShortValue(new Uint16Array(value as number[]))\n                );\n              } else if (typeof value === 'number') {\n                this._data.set(_tag, new IfdShortValue(value));\n              }\n              break;\n            case IfdValueType.long:\n              if (ArrayUtils.isNumArrayOrTypedArray(value)) {\n                this._data.set(\n                  _tag,\n                  new IfdLongValue(new Uint32Array(value as number[]))\n                );\n              } else if (typeof value === 'number') {\n                this._data.set(_tag, new IfdLongValue(value));\n              }\n              break;\n            case IfdValueType.rational:\n              if (ArrayUtils.isArrayOfRational(value)) {\n                this._data.set(_tag, new IfdRationalValue(value as Rational[]));\n              } else if (\n                ArrayUtils.isNumArrayOrTypedArray(value) &&\n                (value as []).length >= 2\n              ) {\n                const r = new Rational(\n                  (value as number[])[0],\n                  (value as number[])[1]\n                );\n                this._data.set(_tag, new IfdRationalValue(r));\n              } else if (value instanceof Rational) {\n                this._data.set(_tag, new IfdRationalValue(value));\n              }\n              break;\n            case IfdValueType.sByte:\n              if (ArrayUtils.isNumArrayOrTypedArray(value)) {\n                this._data.set(\n                  _tag,\n                  new IfdSByteValue(new Int8Array(value as number[]))\n                );\n              } else if (typeof value === 'number') {\n                this._data.set(_tag, new IfdSByteValue(value));\n              }\n              break;\n            case IfdValueType.undefined:\n              if (ArrayUtils.isNumArrayOrTypedArray(value)) {\n                this._data.set(\n                  _tag,\n                  new IfdUndefinedValue(new Uint8Array(value as number[]))\n                );\n              }\n              break;\n            case IfdValueType.sShort:\n              if (ArrayUtils.isNumArrayOrTypedArray(value)) {\n                this._data.set(\n                  _tag,\n                  new IfdSShortValue(new Int16Array(value as number[]))\n                );\n              } else if (typeof value === 'number') {\n                this._data.set(_tag, new IfdSShortValue(value));\n              }\n              break;\n            case IfdValueType.sLong:\n              if (ArrayUtils.isNumArrayOrTypedArray(value)) {\n                this._data.set(\n                  _tag,\n                  new IfdSLongValue(new Int32Array(value as number[]))\n                );\n              } else if (typeof value === 'number') {\n                this._data.set(_tag, new IfdSLongValue(value));\n              }\n              break;\n            case IfdValueType.sRational:\n              if (ArrayUtils.isArrayOfRational(value)) {\n                this._data.set(\n                  _tag,\n                  new IfdSRationalValue(value as Rational[])\n                );\n              } else if (\n                ArrayUtils.isNumArrayOrTypedArray(value) &&\n                (value as []).length >= 2\n              ) {\n                const r = new Rational(\n                  (value as number[])[0],\n                  (value as number[])[1]\n                );\n                this._data.set(_tag, new IfdSRationalValue(r));\n              } else if (value instanceof Rational) {\n                this._data.set(_tag, new IfdSRationalValue(value));\n              }\n              break;\n            case IfdValueType.single:\n              if (ArrayUtils.isNumArrayOrTypedArray(value)) {\n                this._data.set(\n                  _tag,\n                  new IfdSingleValue(new Float32Array(value as number[]))\n                );\n              } else if (typeof value === 'number') {\n                this._data.set(_tag, new IfdSingleValue(value));\n              }\n              break;\n            case IfdValueType.double:\n              if (ArrayUtils.isNumArrayOrTypedArray(value)) {\n                this._data.set(\n                  _tag,\n                  new IfdDoubleValue(new Float64Array(value as number[]))\n                );\n              } else if (typeof value === 'number') {\n                this._data.set(_tag, new IfdDoubleValue(value));\n              }\n              break;\n            case IfdValueType.none:\n              break;\n          }\n        }\n      }\n    }\n  }\n\n  public copyFrom(other: IfdDirectory): void {\n    other._data.forEach((value, tag) => this._data.set(tag, value.clone()));\n  }\n\n  public clone(): IfdDirectory {\n    return IfdDirectory.from(this);\n  }\n}\n", "/** @format */\n\nimport { IfdDirectory } from './ifd-directory';\n\nexport class IfdContainer {\n  protected directories: Map<string, IfdDirectory>;\n\n  public get keys(): IterableIterator<string> {\n    return this.directories.keys();\n  }\n\n  public get values(): IterableIterator<IfdDirectory> {\n    return this.directories.values();\n  }\n\n  public get size(): number {\n    return this.directories.size;\n  }\n\n  public get isEmpty(): boolean {\n    if (this.directories.size === 0) {\n      return true;\n    }\n    for (const ifd of this.directories.values()) {\n      if (!ifd.isEmpty) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  constructor(directories?: Map<string, IfdDirectory>) {\n    this.directories = directories ?? new Map<string, IfdDirectory>();\n  }\n\n  public static from(other: IfdContainer) {\n    const dirs = new Map<string, IfdDirectory>(other.directories);\n    return new IfdContainer(dirs);\n  }\n\n  public has(key: string): boolean {\n    return this.directories.has(key);\n  }\n\n  public get(ifdName: string): IfdDirectory {\n    let ifd = this.directories.get(ifdName);\n    if (ifd === undefined) {\n      ifd = new IfdDirectory();\n      this.directories.set(ifdName, ifd);\n      return ifd;\n    } else {\n      return ifd;\n    }\n  }\n\n  public set(ifdName: string, value: IfdDirectory): void {\n    this.directories.set(ifdName, value);\n  }\n\n  public clear(): void {\n    this.directories.clear();\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../common/input-buffer';\nimport { OutputBuffer } from '../common/output-buffer';\nimport { ExifEntry } from './exif-entry';\nimport { ExifImageTags, ExifTagNameToID } from './exif-tag';\nimport { IfdContainer } from './ifd-container';\nimport { IfdDirectory } from './ifd-directory';\nimport { IfdValueType, IfdValueTypeSize } from './ifd-value-type';\nimport { IfdAsciiValue } from './ifd-value/ifd-ascii-value';\nimport { IfdByteValue } from './ifd-value/ifd-byte-value';\nimport { IfdDoubleValue } from './ifd-value/ifd-double-value';\nimport { IfdLongValue } from './ifd-value/ifd-long-value';\nimport { IfdRationalValue } from './ifd-value/ifd-rational-value';\nimport { IfdSByteValue } from './ifd-value/ifd-sbyte-value';\nimport { IfdShortValue } from './ifd-value/ifd-short-value';\nimport { IfdSingleValue } from './ifd-value/ifd-single-value';\nimport { IfdSLongValue } from './ifd-value/ifd-slong-value';\nimport { IfdSRationalValue } from './ifd-value/ifd-srational-value';\nimport { IfdSShortValue } from './ifd-value/ifd-sshort-value';\nimport { IfdUndefinedValue } from './ifd-value/ifd-undefined-value';\nimport { IfdValue } from './ifd-value/ifd-value';\n\nexport class ExifData extends IfdContainer {\n  public get imageIfd(): IfdDirectory {\n    return this.get('ifd0');\n  }\n\n  public get thumbnailIfd(): IfdDirectory {\n    return this.get('ifd1');\n  }\n\n  public get exifIfd(): IfdDirectory {\n    return this.get('ifd0').sub.get('exif');\n  }\n\n  public get gpsIfd(): IfdDirectory {\n    return this.get('ifd0').sub.get('gps');\n  }\n\n  public get interopIfd(): IfdDirectory {\n    return this.get('ifd0').sub.get('interop');\n  }\n\n  public get dataSize(): number {\n    return 8 + (this.directories.get('ifd0')?.dataSize ?? 0);\n  }\n\n  private writeDirectory(\n    out: OutputBuffer,\n    ifd: IfdDirectory,\n    dataOffset: number\n  ): number {\n    let offset = dataOffset;\n    const stripOffsetTag = ExifTagNameToID.get('StripOffsets');\n    out.writeUint16(ifd.size);\n    for (const tag of ifd.keys) {\n      const value = ifd.getValue(tag)!;\n\n      // Special-case StripOffsets, used by TIFF, that if it points to\n      // Undefined value type, then its storing the image data and should\n      // be translated to the StripOffsets long type.\n      const tagType =\n        tag === stripOffsetTag && value.type === IfdValueType.undefined\n          ? IfdValueType.long\n          : value.type;\n\n      const tagLength =\n        tag === stripOffsetTag && value.type === IfdValueType.undefined\n          ? 1\n          : value.length;\n\n      out.writeUint16(tag);\n      out.writeUint16(tagType);\n      out.writeUint32(tagLength);\n\n      let size = value.dataSize;\n      if (size <= 4) {\n        value.write(out);\n        while (size < 4) {\n          out.writeByte(0);\n          size++;\n        }\n      } else {\n        out.writeUint32(offset);\n        offset += size;\n      }\n    }\n    return offset;\n  }\n\n  private writeDirectoryLargeValues(\n    out: OutputBuffer,\n    ifd: IfdDirectory\n  ): void {\n    for (const value of ifd.values) {\n      const size = value.dataSize;\n      if (size > 4) {\n        value.write(out);\n      }\n    }\n  }\n\n  private readEntry(block: InputBuffer, blockOffset: number): ExifEntry {\n    const tag = block.readUint16();\n    const format = block.readUint16();\n    const count = block.readUint32();\n\n    const entry = new ExifEntry(tag, undefined);\n\n    if (format > Object.keys(IfdValueType).length) return entry;\n\n    const f = format as IfdValueType;\n    const fsize = IfdValueTypeSize[format];\n    const size = count * fsize;\n\n    const endOffset = block.offset + 4;\n\n    if (size > 4) {\n      const fieldOffset = block.readUint32();\n      block.offset = fieldOffset + blockOffset;\n    }\n\n    if (block.offset + size > block.end) {\n      return entry;\n    }\n\n    const data = block.readBytes(size);\n\n    switch (f) {\n      case IfdValueType.none:\n        break;\n      case IfdValueType.sByte:\n        entry.value = IfdSByteValue.data(data, count);\n        break;\n      case IfdValueType.byte:\n        entry.value = IfdByteValue.data(data, count);\n        break;\n      case IfdValueType.undefined:\n        entry.value = IfdUndefinedValue.data(data, count);\n        break;\n      case IfdValueType.ascii:\n        entry.value = IfdAsciiValue.data(data, count);\n        break;\n      case IfdValueType.short:\n        entry.value = IfdShortValue.data(data, count);\n        break;\n      case IfdValueType.long:\n        entry.value = IfdLongValue.data(data, count);\n        break;\n      case IfdValueType.rational:\n        entry.value = IfdRationalValue.data(data, count);\n        break;\n      case IfdValueType.sRational:\n        entry.value = IfdSRationalValue.data(data, count);\n        break;\n      case IfdValueType.sShort:\n        entry.value = IfdSShortValue.data(data, count);\n        break;\n      case IfdValueType.sLong:\n        entry.value = IfdSLongValue.data(data, count);\n        break;\n      case IfdValueType.single:\n        entry.value = IfdSingleValue.data(data, count);\n        break;\n      case IfdValueType.double:\n        entry.value = IfdDoubleValue.data(data, count);\n        break;\n    }\n\n    block.offset = endOffset;\n\n    return entry;\n  }\n\n  public static from(other: ExifData) {\n    const dirs = new Map<string, IfdDirectory>(other.directories);\n    return new ExifData(dirs);\n  }\n\n  public static fromInputBuffer(input: InputBuffer) {\n    const data = new ExifData();\n    data.read(input);\n    return data;\n  }\n\n  public hasTag(tag: number): boolean {\n    for (const directory of this.directories.values()) {\n      if (directory.has(tag)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public getTag(tag: number): IfdValue | undefined {\n    for (const directory of this.directories.values()) {\n      if (directory.has(tag)) {\n        return directory.getValue(tag);\n      }\n    }\n    return undefined;\n  }\n\n  public getTagName(tag: number): string {\n    return ExifImageTags.get(tag)?.name ?? '<unknown>';\n  }\n\n  public write(out: OutputBuffer): void {\n    const saveEndian = out.bigEndian;\n    out.bigEndian = true;\n\n    // Tiff header\n    // big endian\n    out.writeUint16(0x4d4d);\n    out.writeUint16(0x002a);\n    // offset to first ifd block\n    out.writeUint32(8);\n\n    if (this.directories.get('ifd0') === undefined)\n      this.directories.set('ifd0', new IfdDirectory());\n\n    // offset to first ifd block, from start of tiff header\n    let dataOffset = 8;\n    const offsets = new Map<string, number>();\n\n    for (const [name, ifd] of this.directories) {\n      offsets.set(name, dataOffset);\n\n      if (ifd.sub.has('exif')) {\n        ifd.setValue(0x8769, new IfdLongValue(0));\n      } else {\n        ifd.setValue(0x8769, undefined);\n      }\n\n      if (ifd.sub.has('interop')) {\n        ifd.setValue(0xa005, new IfdLongValue(0));\n      } else {\n        ifd.setValue(0xa005, undefined);\n      }\n\n      if (ifd.sub.has('gps')) {\n        ifd.setValue(0x8825, new IfdLongValue(0));\n      } else {\n        ifd.setValue(0x8825, undefined);\n      }\n\n      // ifd block size\n      dataOffset += 2 + 12 * ifd.size + 4;\n\n      // storage for large tag values\n      for (const value of ifd.values) {\n        const dataSize = value.dataSize;\n        if (dataSize > 4) {\n          dataOffset += dataSize;\n        }\n      }\n\n      // storage for sub-ifd blocks\n      for (const subName of ifd.sub.keys) {\n        const subIfd = ifd.sub.get(subName);\n        offsets.set(subName, dataOffset);\n        let subSize = 2 + 12 * subIfd.size;\n        for (const value of subIfd.values) {\n          const dataSize = value.dataSize;\n          if (dataSize > 4) {\n            subSize += dataSize;\n          }\n        }\n        dataOffset += subSize;\n      }\n    }\n\n    const dirArray = Array.from(this.directories);\n    for (let i = 0; i < dirArray.length; i++) {\n      const [name, ifd] = dirArray[i];\n\n      if (ifd.sub.has('exif')) {\n        ifd.getValue(0x8769)!.setInt(offsets.get('exif')!);\n      }\n\n      if (ifd.sub.has('interop')) {\n        ifd.getValue(0xa005)!.setInt(offsets.get('interop')!);\n      }\n\n      if (ifd.sub.has('gps')) {\n        ifd.getValue(0x8825)!.setInt(offsets.get('gps')!);\n      }\n\n      const ifdOffset = offsets.get(name)!;\n      const dataOffset = ifdOffset + 2 + 12 * ifd.size + 4;\n\n      this.writeDirectory(out, ifd, dataOffset);\n\n      if (i === dirArray.length - 1) {\n        out.writeUint32(0);\n      } else {\n        const nextName = dirArray[i + 1][0];\n        out.writeUint32(offsets.get(nextName)!);\n      }\n\n      this.writeDirectoryLargeValues(out, ifd);\n\n      for (const subName of ifd.sub.keys) {\n        const subIfd = ifd.sub.get(subName);\n        const subOffset = offsets.get(subName)!;\n        const dataOffset = subOffset + 2 + 12 * subIfd.size;\n        this.writeDirectory(out, subIfd, dataOffset);\n        this.writeDirectoryLargeValues(out, subIfd);\n      }\n    }\n\n    out.bigEndian = saveEndian;\n  }\n\n  public read(block: InputBuffer): boolean {\n    const saveEndian = block.bigEndian;\n    block.bigEndian = true;\n\n    const blockOffset = block.offset;\n\n    // Tiff header\n    const endian = block.readUint16();\n    if (endian === 0x4949) {\n      // II\n      block.bigEndian = false;\n      if (block.readUint16() !== 0x002a) {\n        block.bigEndian = saveEndian;\n        return false;\n      }\n    } else if (endian === 0x4d4d) {\n      // MM\n      block.bigEndian = true;\n      if (block.readUint16() !== 0x002a) {\n        block.bigEndian = saveEndian;\n        return false;\n      }\n    } else {\n      return false;\n    }\n\n    let ifdOffset = block.readUint32();\n\n    // IFD blocks\n    let index = 0;\n    while (ifdOffset > 0) {\n      block.offset = blockOffset + ifdOffset;\n\n      const directory = new IfdDirectory();\n      const numEntries = block.readUint16();\n\n      const dir = new Array<ExifEntry>();\n      for (let i = 0; i < numEntries; i++) {\n        const entry = this.readEntry(block, blockOffset);\n        dir.push(entry);\n      }\n\n      for (const entry of dir) {\n        if (entry.value !== undefined) {\n          directory.setValue(entry.tag, entry.value);\n        }\n      }\n      this.directories.set(`ifd${index}`, directory);\n      index++;\n\n      ifdOffset = block.readUint32();\n    }\n\n    const subTags = new Map<number, string>([\n      [0x8769, 'exif'],\n      [0xa005, 'interop'],\n      [0x8825, 'gps'],\n    ]);\n\n    for (const d of this.directories.values()) {\n      for (const dt of subTags.keys()) {\n        // ExifOffset\n        if (d.has(dt)) {\n          const ifdOffset = d.getValue(dt)!.toInt();\n          block.offset = blockOffset + ifdOffset;\n          const directory = new IfdDirectory();\n          const numEntries = block.readUint16();\n\n          const dir = new Array<ExifEntry>();\n          for (let i = 0; i < numEntries; i++) {\n            const entry = this.readEntry(block, blockOffset);\n            dir.push(entry);\n          }\n\n          for (const entry of dir) {\n            if (entry.value !== undefined) {\n              directory.setValue(entry.tag, entry.value!);\n            }\n          }\n          d.sub.set(subTags.get(dt)!, directory);\n        }\n      }\n    }\n\n    block.bigEndian = saveEndian;\n    return false;\n  }\n\n  public clone(): ExifData {\n    return ExifData.from(this);\n  }\n\n  public toString(): string {\n    let s = '';\n    for (const [name, directory] of this.directories) {\n      s += `${name}\\n`;\n      for (const tag of directory.keys) {\n        const value = directory.getValue(tag);\n        if (value === undefined) {\n          s += `\\t${this.getTagName(tag)}\\n`;\n        } else {\n          s += `\\t${this.getTagName(tag)}: ${value.toString()}\\n`;\n        }\n      }\n      for (const subName of directory.sub.keys) {\n        s += `${subName}\\n`;\n        const subDirectory = directory.sub.get(subName);\n        for (const tag of subDirectory.keys) {\n          const value = subDirectory.getValue(tag);\n          if (value === undefined) {\n            s += `\\t${this.getTagName(tag)}\\n`;\n          } else {\n            s += `\\t${this.getTagName(tag)}: ${value}\\n`;\n          }\n        }\n      }\n    }\n    return `${this.constructor.name} (${s})`;\n  }\n}\n", "/** @format */\n\n/**\n * The pattern to use for dithering\n */\nexport enum DitherKernel {\n  none,\n  falseFloydSteinberg,\n  floydSteinberg,\n  stucki,\n  atkinson,\n}\n\nexport const DitherKernels = [\n  [\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0],\n  ],\n  // FalseFloydSteinberg\n  [\n    [3 / 8, 1, 0],\n    [3 / 8, 0, 1],\n    [2 / 8, 1, 1],\n  ],\n  // FloydSteinberg\n  [\n    [7 / 16, 1, 0],\n    [3 / 16, -1, 1],\n    [5 / 16, 0, 1],\n    [1 / 16, 1, 1],\n  ],\n  // Stucki\n  [\n    [8 / 42, 1, 0],\n    [4 / 42, 2, 0],\n    [2 / 42, -2, 1],\n    [4 / 42, -1, 1],\n    [8 / 42, 0, 1],\n    [4 / 42, 1, 1],\n    [2 / 42, 2, 1],\n    [1 / 42, -2, 2],\n    [2 / 42, -1, 2],\n    [4 / 42, 0, 2],\n    [2 / 42, 1, 2],\n    [1 / 42, 2, 2],\n  ],\n  //Atkinson:\n  [\n    [1 / 8, 1, 0],\n    [1 / 8, 2, 0],\n    [1 / 8, -1, 1],\n    [1 / 8, 0, 1],\n    [1 / 8, 1, 1],\n    [1 / 8, 0, 2],\n  ],\n];\n", "/** @format */\n\n/**\n * The type of image this frame represents. Multi-page formats, such as\n * TIFF, can represent the frames of an animation as pages in a document.\n */\nexport enum FrameType {\n  /**\n   * The frames of this document are to be interpreted as animation.\n   */\n  animation,\n\n  /**\n   * The frames of this document are to be interpreted as pages of a document.\n   */\n  page,\n\n  /**\n   * The frames of this document are to be interpreted as a sequence of images.\n   */\n  sequence,\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { Float16 } from '../common/float16';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataFloat16 } from './image-data-float16';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelFloat16 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n\n  private readonly _image: MemoryImageDataFloat16;\n  public get image(): MemoryImageDataFloat16 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get data(): Uint16Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.float16;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get r(): number {\n    return this.numChannels > 0\n      ? Float16.float16ToDouble(this.data[this._index])\n      : 0;\n  }\n  public set r(r: number) {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Float16.doubleToFloat16(r);\n    }\n  }\n\n  public get g(): number {\n    return this.numChannels > 1\n      ? Float16.float16ToDouble(this.data[this._index + 1])\n      : 0;\n  }\n  public set g(g: number) {\n    if (this.numChannels > 1) {\n      this.data[this._index + 1] = Float16.doubleToFloat16(g);\n    }\n  }\n\n  public get b(): number {\n    return this.numChannels > 2\n      ? Float16.float16ToDouble(this.data[this._index + 2])\n      : 0;\n  }\n  public set b(b: number) {\n    if (this.numChannels > 2) {\n      this.data[this._index + 2] = Float16.doubleToFloat16(b);\n    }\n  }\n\n  public get a(): number {\n    return this.numChannels > 3\n      ? Float16.float16ToDouble(this.data[this._index + 3])\n      : 0;\n  }\n  public set a(a: number) {\n    if (this.numChannels > 3) {\n      this.data[this._index + 3] = Float16.doubleToFloat16(a);\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    image: MemoryImageDataFloat16\n  ) {\n    this._image = image;\n    this._index = index;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataFloat16) {\n    return new PixelFloat16(-1, 0, -image.numChannels, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelFloat16(\n      -1,\n      0,\n      -image.numChannels,\n      image.data instanceof MemoryImageDataFloat16\n        ? (image.data as MemoryImageDataFloat16)\n        : new MemoryImageDataFloat16(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelFloat16) {\n    return new PixelFloat16(other.x, other.y, other._index, other.image);\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      if (this._y === this.height) {\n        return <IteratorResult<Pixel>>{\n          done: true,\n          value: this,\n        };\n      }\n    }\n    this._index += this.numChannels;\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    this._index =\n      this._y * this._image.width * this._image.numChannels +\n      this._x * this._image.numChannels;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.numChannels\n        ? Float16.float16ToDouble(this.data[this._index + channel])\n        : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel < this.numChannels) {\n      this.data[this._index + channel] = Float16.doubleToFloat16(value);\n    }\n  }\n\n  public set(color: Color): void {\n    if (this.numChannels > 0) {\n      this.r = color.r;\n      this.g = color.g;\n      this.b = color.b;\n      this.a = color.a;\n    }\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Float16.doubleToFloat16(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Float16.doubleToFloat16(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Float16.doubleToFloat16(b);\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Float16.doubleToFloat16(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Float16.doubleToFloat16(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Float16.doubleToFloat16(b);\n          if (this.numChannels > 3) {\n            this.data[this._index + 3] = Float16.doubleToFloat16(a);\n          }\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelFloat16) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public clone(): PixelFloat16 {\n    return PixelFloat16.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { Pixel } from './pixel';\n\nexport class PixelRangeIterator implements Iterator<Pixel> {\n  private _pixel: Pixel;\n  private _x1: number;\n  private _y1: number;\n  private _x2: number;\n  private _y2: number;\n\n  constructor(\n    pixel: Pixel,\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ) {\n    this._pixel = pixel;\n    this._x1 = x;\n    this._y1 = y;\n    this._x2 = x + width - 1;\n    this._y2 = y + height - 1;\n    this._pixel.setPosition(x - 1, y);\n  }\n\n  public next(): IteratorResult<Pixel> {\n    if (this._pixel.x + 1 > this._x2) {\n      this._pixel.setPosition(this._x1, this._pixel.y + 1);\n      return {\n        done: this._pixel.y > this._y2,\n        value: this._pixel,\n      };\n    }\n    return this._pixel.next();\n  }\n\n  public [Symbol.iterator](): IterableIterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelFloat16 } from './pixel-float16';\nimport { PixelRangeIterator } from './pixel-range-iterator';\nimport { ColorFloat16 } from '../color/color-float16';\nimport { Float16 } from '../common/float16';\n\nexport class MemoryImageDataFloat16\n  implements MemoryImageData, Iterable<Pixel>\n{\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Uint16Array;\n  public get data(): Uint16Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.float16;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.float;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get rowStride(): number {\n    return this._width * this._numChannels * 2;\n  }\n\n  public get iterator(): PixelFloat16 {\n    return PixelFloat16.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return 1;\n  }\n\n  public get maxIndexValue(): number {\n    return 1;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 16;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Uint16Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._data =\n      data ?? new Uint16Array(this._width * this._height * this._numChannels);\n  }\n\n  public static from(\n    other: MemoryImageDataFloat16,\n    skipPixels = false\n  ): MemoryImageDataFloat16 {\n    const data = skipPixels\n      ? new Uint16Array(other.data.length)\n      : other.data.slice();\n    return new MemoryImageDataFloat16(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelFloat16.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorFloat16.rgb(r, g, b)\n      : ColorFloat16.rgba(r, g, b, a);\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelFloat16) || p.image !== this) {\n      p = PixelFloat16.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    const index = y * this._width * this._numChannels + x * this.numChannels;\n    this.data[index] = Float16.doubleToFloat16(r);\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    const index = y * this._width * this._numChannels + x * this._numChannels;\n    this._data[index] = Float16.doubleToFloat16(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Float16.doubleToFloat16(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Float16.doubleToFloat16(b);\n      }\n    }\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    const index = y * this._width * this._numChannels + x * this._numChannels;\n    this._data[index] = Float16.doubleToFloat16(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Float16.doubleToFloat16(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Float16.doubleToFloat16(b);\n        if (this._numChannels > 3) {\n          this._data[index + 3] = Float16.doubleToFloat16(a);\n        }\n      }\n    }\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataFloat16 {\n    return MemoryImageDataFloat16.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelFloat16.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataFloat32 } from './image-data-float32';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelFloat32 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n\n  private readonly _image: MemoryImageDataFloat32;\n  public get image(): MemoryImageDataFloat32 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get data(): Float32Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.float32;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get r(): number {\n    return this.numChannels > 0 ? this.data[this._index] : 0;\n  }\n  public set r(r: number) {\n    if (this.numChannels > 0) {\n      this.data[this._index] = r;\n    }\n  }\n\n  public get g(): number {\n    return this.numChannels > 1 ? this.data[this._index + 1] : 0;\n  }\n  public set g(g: number) {\n    if (this.numChannels > 1) {\n      this.data[this._index + 1] = g;\n    }\n  }\n\n  public get b(): number {\n    return this.numChannels > 2 ? this.data[this._index + 2] : 0;\n  }\n  public set b(b: number) {\n    if (this.numChannels > 2) {\n      this.data[this._index + 2] = b;\n    }\n  }\n\n  public get a(): number {\n    return this.numChannels > 3 ? this.data[this._index + 3] : 1;\n  }\n  public set a(a: number) {\n    if (this.numChannels > 3) {\n      this.data[this._index + 3] = a;\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    image: MemoryImageDataFloat32\n  ) {\n    this._image = image;\n    this._index = index;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataFloat32) {\n    return new PixelFloat32(-1, 0, -image.numChannels, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelFloat32(\n      -1,\n      0,\n      -image.numChannels,\n      image.data instanceof MemoryImageDataFloat32\n        ? (image.data as MemoryImageDataFloat32)\n        : new MemoryImageDataFloat32(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelFloat32) {\n    return new PixelFloat32(other.x, other.y, other._index, other.image);\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      if (this._y === this.height) {\n        return <IteratorResult<Pixel>>{\n          done: true,\n          value: this,\n        };\n      }\n    }\n    this._index += this.numChannels;\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    this._index =\n      this._y * this._image.width * this._image.numChannels +\n      this._x * this._image.numChannels;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.numChannels ? this.data[this._index + channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel < this.numChannels) {\n      this.data[this._index + channel] = value;\n    }\n  }\n\n  public set(color: Color): void {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = r;\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = g;\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = b;\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = r;\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = g;\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = b;\n          if (this.numChannels > 3) {\n            this.data[this._index + 3] = a;\n          }\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelFloat32) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public clone(): PixelFloat32 {\n    return PixelFloat32.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelFloat32 } from './pixel-float32';\nimport { PixelRangeIterator } from './pixel-range-iterator';\nimport { ColorFloat32 } from '../color/color-float32';\n\nexport class MemoryImageDataFloat32\n  implements MemoryImageData, Iterable<Pixel>\n{\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Float32Array;\n  public get data(): Float32Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.float32;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.float;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get rowStride(): number {\n    return this._width * this._numChannels * 4;\n  }\n\n  public get iterator(): PixelFloat32 {\n    return PixelFloat32.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return 1;\n  }\n\n  public get maxIndexValue(): number {\n    return 1;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 32;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Float32Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._data =\n      data ?? new Float32Array(this._width * this._height * this._numChannels);\n  }\n\n  public static from(\n    other: MemoryImageDataFloat32,\n    skipPixels = false\n  ): MemoryImageDataFloat32 {\n    const data = skipPixels\n      ? new Float32Array(other.data.length)\n      : other.data.slice();\n    return new MemoryImageDataFloat32(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelFloat32.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorFloat32.rgb(r, g, b)\n      : ColorFloat32.rgba(r, g, b, a);\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelFloat32) || p.image !== this) {\n      p = PixelFloat32.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    const index = y * this._width * this._numChannels + x * this.numChannels;\n    this.data[index] = r;\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    const index = y * this._width * this._numChannels + x * this._numChannels;\n    this._data[index] = r;\n    if (this._numChannels > 1) {\n      this._data[index + 1] = g;\n      if (this._numChannels > 2) {\n        this._data[index + 2] = b;\n      }\n    }\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    const index = y * this._width * this._numChannels + x * this._numChannels;\n    this._data[index] = r;\n    if (this._numChannels > 1) {\n      this._data[index + 1] = g;\n      if (this._numChannels > 2) {\n        this._data[index + 2] = b;\n        if (this._numChannels > 3) {\n          this._data[index + 3] = a;\n        }\n      }\n    }\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataFloat32 {\n    return MemoryImageDataFloat32.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelFloat32.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataFloat64 } from './image-data-float64';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelFloat64 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n\n  private readonly _image: MemoryImageDataFloat64;\n  public get image(): MemoryImageDataFloat64 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get data(): Float64Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.float64;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get r(): number {\n    return this.numChannels > 0 ? this.data[this._index] : 0;\n  }\n  public set r(r: number) {\n    if (this.numChannels > 0) {\n      this.data[this._index] = r;\n    }\n  }\n\n  public get g(): number {\n    return this.numChannels > 1 ? this.data[this._index + 1] : 0;\n  }\n  public set g(g: number) {\n    if (this.numChannels > 1) {\n      this.data[this._index + 1] = g;\n    }\n  }\n\n  public get b(): number {\n    return this.numChannels > 2 ? this.data[this._index + 2] : 0;\n  }\n  public set b(b: number) {\n    if (this.numChannels > 2) {\n      this.data[this._index + 2] = b;\n    }\n  }\n\n  public get a(): number {\n    return this.numChannels > 3 ? this.data[this._index + 3] : 0;\n  }\n  public set a(a: number) {\n    if (this.numChannels > 3) {\n      this.data[this._index + 3] = a;\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    image: MemoryImageDataFloat64\n  ) {\n    this._image = image;\n    this._index = index;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataFloat64) {\n    return new PixelFloat64(-1, 0, -image.numChannels, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelFloat64(\n      -1,\n      0,\n      -image.numChannels,\n      image.data instanceof MemoryImageDataFloat64\n        ? (image.data as MemoryImageDataFloat64)\n        : new MemoryImageDataFloat64(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelFloat64) {\n    return new PixelFloat64(other.x, other.y, other._index, other.image);\n  }\n\n  [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      if (this._y === this.height) {\n        return <IteratorResult<Pixel>>{\n          done: true,\n          value: this,\n        };\n      }\n    }\n    this._index += this.numChannels;\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    this._index =\n      this._y * this._image.width * this._image.numChannels +\n      this._x * this._image.numChannels;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.numChannels ? this.data[this._index + channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel < this.numChannels) {\n      this.data[this._index + channel] = value;\n    }\n  }\n\n  public set(color: Color): void {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = r;\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = g;\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = b;\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = r;\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = g;\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = b;\n          if (this.numChannels > 3) {\n            this.data[this._index + 3] = a;\n          }\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelFloat64) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public clone(): PixelFloat64 {\n    return PixelFloat64.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelFloat64 } from './pixel-float64';\nimport { PixelRangeIterator } from './pixel-range-iterator';\nimport { ColorFloat64 } from '../color/color-float64';\n\nexport class MemoryImageDataFloat64\n  implements MemoryImageData, Iterable<Pixel>\n{\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Float64Array;\n  public get data(): Float64Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.float64;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.float;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get rowStride(): number {\n    return this._width * this._numChannels * 8;\n  }\n\n  public get iterator(): PixelFloat64 {\n    return PixelFloat64.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return 1;\n  }\n\n  public get maxIndexValue(): number {\n    return 1;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 64;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Float64Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._data =\n      data ??\n      new Float64Array(this._width * this._height * 4 * this._numChannels);\n  }\n\n  public static from(\n    other: MemoryImageDataFloat64,\n    skipPixels = false\n  ): MemoryImageDataFloat64 {\n    const data = skipPixels\n      ? new Float64Array(other.data.length)\n      : other.data.slice();\n    return new MemoryImageDataFloat64(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelFloat64.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorFloat64.rgb(r, g, b)\n      : ColorFloat64.rgba(r, g, b, a);\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelFloat64) || p.image !== this) {\n      p = PixelFloat64.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    const index = y * this._width * this._numChannels + x * this.numChannels;\n    this.data[index] = r;\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    const index = y * this._width * this._numChannels + x * this._numChannels;\n    this._data[index] = r;\n    if (this._numChannels > 1) {\n      this._data[index + 1] = g;\n      if (this._numChannels > 2) {\n        this._data[index + 2] = b;\n      }\n    }\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    const index = y * this._width * this._numChannels + x * this._numChannels;\n    this._data[index] = r;\n    if (this._numChannels > 1) {\n      this._data[index + 1] = g;\n      if (this._numChannels > 2) {\n        this._data[index + 2] = b;\n        if (this._numChannels > 3) {\n          this._data[index + 3] = a;\n        }\n      }\n    }\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataFloat64 {\n    return MemoryImageDataFloat64.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelFloat64.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataInt16 } from './image-data-int16';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelInt16 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n\n  private readonly _image: MemoryImageDataInt16;\n  public get image(): MemoryImageDataInt16 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get data(): Int16Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.int16;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get r(): number {\n    return this.numChannels > 0 ? this.data[this._index] : 0;\n  }\n  public set r(r: number) {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n    }\n  }\n\n  public get g(): number {\n    return this.numChannels > 1 ? this.data[this._index + 1] : 0;\n  }\n  public set g(g: number) {\n    if (this.numChannels > 1) {\n      this.data[this._index + 1] = Math.trunc(g);\n    }\n  }\n\n  public get b(): number {\n    return this.numChannels > 2 ? this.data[this._index + 2] : 0;\n  }\n  public set b(b: number) {\n    if (this.numChannels > 2) {\n      this.data[this._index + 2] = Math.trunc(b);\n    }\n  }\n\n  public get a(): number {\n    return this.numChannels > 3 ? this.data[this._index + 3] : 0;\n  }\n  public set a(a: number) {\n    if (this.numChannels > 3) {\n      this.data[this._index + 3] = Math.trunc(a);\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    image: MemoryImageDataInt16\n  ) {\n    this._image = image;\n    this._index = index;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataInt16) {\n    return new PixelInt16(-1, 0, -image.numChannels, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelInt16(\n      -1,\n      0,\n      -image.numChannels,\n      image.data instanceof MemoryImageDataInt16\n        ? (image.data as MemoryImageDataInt16)\n        : new MemoryImageDataInt16(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelInt16) {\n    return new PixelInt16(other.x, other.y, other._index, other.image);\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      if (this._y === this.height) {\n        return <IteratorResult<Pixel>>{\n          done: true,\n          value: this,\n        };\n      }\n    }\n    this._index += this.numChannels;\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    this._index =\n      this._y * this._image.width * this._image.numChannels +\n      this._x * this._image.numChannels;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.numChannels ? this.data[this._index + channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel < this.numChannels) {\n      this.data[this._index + channel] = Math.trunc(value);\n    }\n  }\n\n  public set(color: Color): void {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n          if (this.numChannels > 3) {\n            this.data[this._index + 3] = Math.trunc(a);\n          }\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelInt16) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public clone(): PixelInt16 {\n    return PixelInt16.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { ColorInt16 } from '../color/color-int16';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelInt16 } from './pixel-int16';\nimport { PixelRangeIterator } from './pixel-range-iterator';\n\nexport class MemoryImageDataInt16 implements MemoryImageData, Iterable<Pixel> {\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Int16Array;\n  public get data(): Int16Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.int16;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.int;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get rowStride(): number {\n    return this._width * this._numChannels * 2;\n  }\n\n  public get iterator(): PixelInt16 {\n    return PixelInt16.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return 0x7fff;\n  }\n\n  public get maxIndexValue(): number {\n    return 0x7fff;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 16;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Int16Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._data =\n      data ?? new Int16Array(this._width * this._height * this._numChannels);\n  }\n\n  public static from(\n    other: MemoryImageDataInt16,\n    skipPixels = false\n  ): MemoryImageDataInt16 {\n    const data = skipPixels\n      ? new Int16Array(other.data.length)\n      : other.data.slice();\n    return new MemoryImageDataInt16(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelInt16.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorInt16.rgb(Math.trunc(r), Math.trunc(g), Math.trunc(b))\n      : ColorInt16.rgba(\n          Math.trunc(r),\n          Math.trunc(g),\n          Math.trunc(b),\n          Math.trunc(a)\n        );\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelInt16) || p.image !== this) {\n      p = PixelInt16.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    const index = y * this.width * this.numChannels + x * this.numChannels;\n    this.data[index] = Math.trunc(r);\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    const index = y * this.width * this.numChannels + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    const index = y * this.width * this.numChannels + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataInt16 {\n    return MemoryImageDataInt16.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelInt16.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataInt32 } from './image-data-int32';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelInt32 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n\n  private readonly _image: MemoryImageDataInt32;\n  public get image(): MemoryImageDataInt32 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get data(): Int32Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.int32;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get r(): number {\n    return this.numChannels > 0 ? this.data[this._index] : 0;\n  }\n  public set r(r: number) {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n    }\n  }\n\n  public get g(): number {\n    return this.numChannels > 1 ? this.data[this._index + 1] : 0;\n  }\n  public set g(g: number) {\n    if (this.numChannels > 1) {\n      this.data[this._index + 1] = Math.trunc(g);\n    }\n  }\n\n  public get b(): number {\n    return this.numChannels > 2 ? this.data[this._index + 2] : 0;\n  }\n  public set b(b: number) {\n    if (this.numChannels > 2) {\n      this.data[this._index + 2] = Math.trunc(b);\n    }\n  }\n\n  public get a(): number {\n    return this.numChannels > 3 ? this.data[this._index + 3] : 0;\n  }\n  public set a(a: number) {\n    if (this.numChannels > 3) {\n      this.data[this._index + 3] = Math.trunc(a);\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    image: MemoryImageDataInt32\n  ) {\n    this._image = image;\n    this._index = index;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataInt32) {\n    return new PixelInt32(-1, 0, -image.numChannels, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelInt32(\n      -1,\n      0,\n      -image.numChannels,\n      image.data instanceof MemoryImageDataInt32\n        ? (image.data as MemoryImageDataInt32)\n        : new MemoryImageDataInt32(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelInt32) {\n    return new PixelInt32(other.x, other.y, other._index, other.image);\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      if (this._y === this.height) {\n        return <IteratorResult<Pixel>>{\n          done: true,\n          value: this,\n        };\n      }\n    }\n    this._index += this.numChannels;\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    this._index =\n      this._y * this._image.width * this._image.numChannels +\n      this._x * this._image.numChannels;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.numChannels ? this.data[this._index + channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel < this.numChannels) {\n      this.data[this._index + channel] = Math.trunc(value);\n    }\n  }\n\n  public set(color: Color): void {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n          if (this.numChannels > 3) {\n            this.data[this._index + 3] = Math.trunc(a);\n          }\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelInt32) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public clone(): PixelInt32 {\n    return PixelInt32.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { ColorInt32 } from '../color/color-int32';\nimport { Format, FormatType } from '../color/format';\nimport { StringUtils } from '../common/string-utils';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelInt32 } from './pixel-int32';\nimport { PixelRangeIterator } from './pixel-range-iterator';\n\nexport class MemoryImageDataInt32 implements MemoryImageData, Iterable<Pixel> {\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Int32Array;\n  public get data(): Int32Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.int32;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.int;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get rowStride(): number {\n    return this._width * this._numChannels * 4;\n  }\n\n  public get iterator(): PixelInt32 {\n    return PixelInt32.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return 0x7fffffff;\n  }\n\n  public get maxIndexValue(): number {\n    return 0x7fffffff;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 32;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Int32Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._data =\n      data ?? new Int32Array(this._width * this._height * this._numChannels);\n  }\n\n  public static from(\n    other: MemoryImageDataInt32,\n    skipPixels = false\n  ): MemoryImageDataInt32 {\n    const data = skipPixels\n      ? new Int32Array(other.data.length)\n      : other.data.slice();\n    return new MemoryImageDataInt32(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelInt32.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorInt32.rgb(Math.trunc(r), Math.trunc(g), Math.trunc(b))\n      : ColorInt32.rgba(\n          Math.trunc(r),\n          Math.trunc(g),\n          Math.trunc(b),\n          Math.trunc(a)\n        );\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelInt32) || p.image !== this) {\n      p = PixelInt32.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    const index = y * this.width * this.numChannels + x * this.numChannels;\n    this.data[index] = Math.trunc(r);\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    const index = y * this.width * this.numChannels + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    const index = y * this.width * this.numChannels + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataInt32 {\n    return MemoryImageDataInt32.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelInt32.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataInt8 } from './image-data-int8';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelInt8 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n\n  private readonly _image: MemoryImageDataInt8;\n  public get image(): MemoryImageDataInt8 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get data(): Int8Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.int8;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get r(): number {\n    return this.numChannels > 0 ? this.data[this._index] : 0;\n  }\n  public set r(r: number) {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n    }\n  }\n\n  public get g(): number {\n    return this.numChannels > 1 ? this.data[this._index + 1] : 0;\n  }\n  public set g(g: number) {\n    if (this.numChannels > 1) {\n      this.data[this._index + 1] = Math.trunc(g);\n    }\n  }\n\n  public get b(): number {\n    return this.numChannels > 2 ? this.data[this._index + 2] : 0;\n  }\n  public set b(b: number) {\n    if (this.numChannels > 2) {\n      this.data[this._index + 2] = Math.trunc(b);\n    }\n  }\n\n  public get a(): number {\n    return this.numChannels > 3 ? this.data[this._index + 3] : 0;\n  }\n  public set a(a: number) {\n    if (this.numChannels > 3) {\n      this.data[this._index + 3] = Math.trunc(a);\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(x: number, y: number, index: number, image: MemoryImageDataInt8) {\n    this._image = image;\n    this._index = index;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataInt8) {\n    return new PixelInt8(-1, 0, -image.numChannels, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelInt8(\n      -1,\n      0,\n      -image.numChannels,\n      image.data instanceof MemoryImageDataInt8\n        ? (image.data as MemoryImageDataInt8)\n        : new MemoryImageDataInt8(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelInt8) {\n    return new PixelInt8(other.x, other.y, other._index, other.image);\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      if (this._y === this.height) {\n        return <IteratorResult<Pixel>>{\n          done: true,\n          value: this,\n        };\n      }\n    }\n    this._index += this.numChannels;\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    this._index =\n      this._y * this._image.width * this._image.numChannels +\n      this._x * this._image.numChannels;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.numChannels ? this.data[this._index + channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel < this.numChannels) {\n      this.data[this._index + channel] = Math.trunc(value);\n    }\n  }\n\n  public set(color: Color): void {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n          if (this.numChannels > 3) {\n            this.data[this._index + 3] = Math.trunc(a);\n          }\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelInt8) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public clone(): PixelInt8 {\n    return PixelInt8.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { ColorInt8 } from '../color/color-int8';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelInt8 } from './pixel-int8';\nimport { PixelRangeIterator } from './pixel-range-iterator';\n\nexport class MemoryImageDataInt8 implements MemoryImageData, Iterable<Pixel> {\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Int8Array;\n  public get data(): Int8Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.int8;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.int;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get rowStride(): number {\n    return this._width * this._numChannels;\n  }\n\n  public get iterator(): PixelInt8 {\n    return PixelInt8.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return 0x7f;\n  }\n\n  public get maxIndexValue(): number {\n    return 0x7f;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 8;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Int8Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._data =\n      data ?? new Int8Array(this._width * this._height * this._numChannels);\n  }\n\n  public static from(\n    other: MemoryImageDataInt8,\n    skipPixels = false\n  ): MemoryImageDataInt8 {\n    const data = skipPixels\n      ? new Int8Array(other.data.length)\n      : other.data.slice();\n    return new MemoryImageDataInt8(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelInt8.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorInt8.rgb(Math.trunc(r), Math.trunc(g), Math.trunc(b))\n      : ColorInt8.rgba(\n          Math.trunc(r),\n          Math.trunc(g),\n          Math.trunc(b),\n          Math.trunc(a)\n        );\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelInt8) || p.image !== this) {\n      p = PixelInt8.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    const index = y * this.rowStride + x * this.numChannels;\n    this.data[index] = Math.trunc(r);\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    const index = y * this.rowStride + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    const index = y * this.rowStride + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataInt8 {\n    return MemoryImageDataInt8.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelInt8.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MathUtils } from '../common/math-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataUint1 } from './image-data-uint1';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelUint1 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n  private _bitIndex: number;\n  private _rowOffset: number;\n\n  private readonly _image: MemoryImageDataUint1;\n  public get image(): MemoryImageDataUint1 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.getChannelInternal(0);\n  }\n  public set index(i: number) {\n    this.setChannel(0, i);\n  }\n\n  public get data(): Uint8Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this.palette?.numChannels ?? this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.uint1;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return this._image.palette;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  public get imageLength(): number {\n    return this._image.length;\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    bitIndex: number,\n    rowOffset: number,\n    image: MemoryImageDataUint1\n  ) {\n    this._image = image;\n    this._index = index;\n    this._bitIndex = bitIndex;\n    this._rowOffset = rowOffset;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataUint1) {\n    return new PixelUint1(-1, 0, 0, -1, 0, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelUint1(\n      -1,\n      0,\n      0,\n      -1,\n      0,\n      image.data instanceof MemoryImageDataUint1\n        ? (image.data as MemoryImageDataUint1)\n        : new MemoryImageDataUint1(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelUint1) {\n    return new PixelUint1(\n      other.x,\n      other.y,\n      other._index,\n      other._bitIndex,\n      other._rowOffset,\n      other.image\n    );\n  }\n\n  private getChannelInternal(channel: number): number {\n    let i = this._index;\n    let bi = 7 - (this._bitIndex + channel);\n    if (bi < 0) {\n      bi += 8;\n      i++;\n    }\n    if (i >= this._image.data.length) {\n      return 0;\n    }\n    return (this._image.data[i] >> bi) & 0x1;\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      this._bitIndex = 0;\n      this._index++;\n      this._rowOffset += this.image.rowStride;\n      return <IteratorResult<Pixel>>{\n        done: this._y >= this.height,\n        value: this,\n      };\n    }\n\n    const nc = this.numChannels;\n    if (this.palette !== undefined || nc === 1) {\n      this._bitIndex++;\n      if (this._bitIndex > 7) {\n        this._bitIndex = 0;\n        this._index++;\n      }\n    } else {\n      const bpp = this.image.numChannels;\n      this._bitIndex = (this._x * bpp) & 0x7;\n      this._index = this._rowOffset + ((this._x * bpp) >> 3);\n    }\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.imageLength,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    const bpp = this._image.numChannels;\n    this._rowOffset = this._y * this._image.rowStride;\n    this._index = this._rowOffset + ((this._x * bpp) >> 3);\n    this._bitIndex = (this._x * bpp) & 0x7;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (this.palette !== undefined) {\n      return this.palette.get(this.getChannelInternal(0), channel);\n    } else {\n      if (channel === Channel.luminance) {\n        return this.luminance;\n      } else {\n        return channel < this.numChannels\n          ? this.getChannelInternal(channel)\n          : 0;\n      }\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel >= this.numChannels) {\n      return;\n    }\n\n    let i = this._index;\n    let bi = 7 - (this._bitIndex + channel);\n    if (bi < 0) {\n      bi += 8;\n      i++;\n    }\n\n    let v = this.data[i];\n\n    const vi = MathUtils.clampInt(value, 0, 1);\n    const msk = [0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f];\n    const mask = msk[bi];\n    v = (v & mask) | (vi << bi);\n    this.data[i] = v;\n  }\n\n  public set(color: Color): void {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    const nc = this.image.numChannels;\n    if (nc > 0) {\n      this.setChannel(0, r);\n      if (nc > 1) {\n        this.setChannel(1, g);\n        if (nc > 2) {\n          this.setChannel(2, b);\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    const nc = this.numChannels;\n    if (nc > 0) {\n      this.setChannel(0, r);\n      if (nc > 1) {\n        this.setChannel(1, g);\n        if (nc > 2) {\n          this.setChannel(2, b);\n          if (nc > 3) {\n            this.setChannel(3, a);\n          }\n        }\n      }\n    }\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelUint1) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public clone(): PixelUint1 {\n    return PixelUint1.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelUint1 } from './pixel-uint1';\nimport { PixelRangeIterator } from './pixel-range-iterator';\nimport { ColorUint1 } from '../color/color-uint1';\n\nexport class MemoryImageDataUint1 implements MemoryImageData, Iterable<Pixel> {\n  private pixel?: PixelUint1;\n\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Uint8Array;\n  public get data(): Uint8Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.uint1;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.uint;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  private _rowStride: number;\n  public get rowStride(): number {\n    return this._rowStride;\n  }\n\n  public get iterator(): PixelUint1 {\n    return PixelUint1.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return this._palette?.maxChannelValue ?? 1;\n  }\n\n  public get maxIndexValue(): number {\n    return 1;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  private _palette?: Palette;\n  public get palette(): Palette | undefined {\n    return this._palette;\n  }\n\n  public get isHdrFormat(): boolean {\n    return false;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 1;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Uint8Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._rowStride = Math.ceil((this._width * this._numChannels) / 8);\n    this._palette = undefined;\n    this._data =\n      data ?? new Uint8Array(Math.max(this._rowStride * this._height, 1));\n  }\n\n  public static palette(\n    width: number,\n    height: number,\n    palette?: Palette\n  ): MemoryImageDataUint1 {\n    const rowStride = Math.ceil(width / 8);\n    const data = new Uint8Array(Math.max(rowStride * height, 1));\n    const d = new MemoryImageDataUint1(width, height, 1, data);\n    d._rowStride = rowStride;\n    d._palette = palette;\n    return d;\n  }\n\n  public static from(\n    other: MemoryImageDataUint1,\n    skipPixels = false\n  ): MemoryImageDataUint1 {\n    const data = skipPixels\n      ? new Uint8Array(other.data.length)\n      : other.data.slice();\n    const d = new MemoryImageDataUint1(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n    d._rowStride = other.rowStride;\n    d._palette = other.palette?.clone();\n    return d;\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelUint1.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorUint1.rgb(Math.trunc(r), Math.trunc(g), Math.trunc(b))\n      : ColorUint1.rgba(\n          Math.trunc(r),\n          Math.trunc(g),\n          Math.trunc(b),\n          Math.trunc(a)\n        );\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelUint1) || p.image !== this) {\n      p = PixelUint1.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    if (this._numChannels < 1) {\n      return;\n    }\n    this.pixel ??= PixelUint1.imageData(this);\n    this.pixel.setPosition(x, y);\n    this.pixel.index = r;\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (this._numChannels < 1) {\n      return;\n    }\n    this.pixel ??= PixelUint1.imageData(this);\n    this.pixel.setPosition(x, y);\n    this.pixel.setRgb(r, g, b);\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (this._numChannels < 1) {\n      return;\n    }\n    this.pixel ??= PixelUint1.imageData(this);\n    this.pixel.setPosition(x, y);\n    this.pixel.setRgba(r, g, b, a);\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataUint1 {\n    return MemoryImageDataUint1.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelUint1.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataUint16 } from './image-data-uint16';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelUint16 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n\n  private readonly _image: MemoryImageDataUint16;\n  public get image(): MemoryImageDataUint16 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get data(): Uint16Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.uint16;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get r(): number {\n    return this.numChannels > 0 ? this.data[this._index] : 0;\n  }\n  public set r(r: number) {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n    }\n  }\n\n  public get g(): number {\n    return this.numChannels > 1 ? this.data[this._index + 1] : 0;\n  }\n  public set g(g: number) {\n    if (this.numChannels > 1) {\n      this.data[this._index + 1] = Math.trunc(g);\n    }\n  }\n\n  public get b(): number {\n    return this.numChannels > 2 ? this.data[this._index + 2] : 0;\n  }\n  public set b(b: number) {\n    if (this.numChannels > 2) {\n      this.data[this._index + 2] = Math.trunc(b);\n    }\n  }\n\n  public get a(): number {\n    return this.numChannels > 3 ? this.data[this._index + 3] : 0;\n  }\n  public set a(a: number) {\n    if (this.numChannels > 3) {\n      this.data[this._index + 3] = Math.trunc(a);\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    image: MemoryImageDataUint16\n  ) {\n    this._image = image;\n    this._index = index;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataUint16) {\n    return new PixelUint16(-1, 0, -image.numChannels, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelUint16(\n      -1,\n      0,\n      -image.numChannels,\n      image.data instanceof MemoryImageDataUint16\n        ? (image.data as MemoryImageDataUint16)\n        : new MemoryImageDataUint16(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelUint16) {\n    return new PixelUint16(other.x, other.y, other._index, other.image);\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      if (this._y === this.height) {\n        return <IteratorResult<Pixel>>{\n          done: true,\n          value: this,\n        };\n      }\n    }\n    this._index += this.numChannels;\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    this._index =\n      this._y * this._image.width * this._image.numChannels +\n      this._x * this._image.numChannels;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.numChannels ? this.data[this._index + channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel < this.numChannels) {\n      this.data[this._index + channel] = Math.trunc(value);\n    }\n  }\n\n  public set(color: Color): void {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n          if (this.numChannels > 3) {\n            this.data[this._index + 3] = Math.trunc(a);\n          }\n        }\n      }\n    }\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelUint16) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone(): PixelUint16 {\n    return PixelUint16.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelUint16 } from './pixel-uint16';\nimport { PixelRangeIterator } from './pixel-range-iterator';\nimport { ColorUint16 } from '../color/color-uint16';\n\nexport class MemoryImageDataUint16 implements MemoryImageData, Iterable<Pixel> {\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Uint16Array;\n  public get data(): Uint16Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.uint16;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.uint;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get rowStride(): number {\n    return this._width * this._numChannels * 2;\n  }\n\n  public get iterator(): PixelUint16 {\n    return PixelUint16.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return 0xffff;\n  }\n\n  public get maxIndexValue(): number {\n    return 0xffff;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 16;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Uint16Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._data =\n      data ?? new Uint16Array(this._width * this._height * this._numChannels);\n  }\n\n  public static from(\n    other: MemoryImageDataUint16,\n    skipPixels = false\n  ): MemoryImageDataUint16 {\n    const data = skipPixels\n      ? new Uint16Array(other.data.length)\n      : other.data.slice();\n    return new MemoryImageDataUint16(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelUint16.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorUint16.rgb(Math.trunc(r), Math.trunc(g), Math.trunc(b))\n      : ColorUint16.rgba(\n          Math.trunc(r),\n          Math.trunc(g),\n          Math.trunc(b),\n          Math.trunc(a)\n        );\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelUint16) || p.image !== this) {\n      p = PixelUint16.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    const index = y * this._width * this._numChannels + x * this.numChannels;\n    this.data[index] = Math.trunc(r);\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    const index = y * this._width * this._numChannels + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    const index = y * this._width * this._numChannels + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataUint16 {\n    return MemoryImageDataUint16.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelUint16.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MathUtils } from '../common/math-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataUint2 } from './image-data-uint2';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelUint2 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n  private _bitIndex: number;\n  private _rowOffset: number;\n\n  private readonly _image: MemoryImageDataUint2;\n  public get image(): MemoryImageDataUint2 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.getChannelInternal(0);\n  }\n  public set index(i: number) {\n    this.setChannel(0, i);\n  }\n\n  public get data(): Uint8Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this.palette?.numChannels ?? this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.uint2;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return this._image.palette;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  public get bitsPerPixel(): number {\n    return this._image.palette !== undefined ? 2 : this._image.numChannels << 1;\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    bitIndex: number,\n    rowOffset: number,\n    image: MemoryImageDataUint2\n  ) {\n    this._image = image;\n    this._index = index;\n    this._bitIndex = bitIndex;\n    this._rowOffset = rowOffset;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataUint2) {\n    return new PixelUint2(-1, 0, 0, -2, 0, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelUint2(\n      -1,\n      0,\n      0,\n      -2,\n      0,\n      image.data instanceof MemoryImageDataUint2\n        ? (image.data as MemoryImageDataUint2)\n        : new MemoryImageDataUint2(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelUint2) {\n    return new PixelUint2(\n      other.x,\n      other.y,\n      other._index,\n      other._bitIndex,\n      other._rowOffset,\n      other.image\n    );\n  }\n\n  private getChannelInternal(channel: number): number {\n    let i = this._index;\n    let bi = 6 - (this._bitIndex + (channel << 1));\n    if (bi < 0) {\n      bi += 8;\n      i++;\n    }\n    return (this._image.data[i] >> bi) & 0x3;\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      this._bitIndex = 0;\n      this._index++;\n      this._rowOffset += this.image.rowStride;\n      return <IteratorResult<Pixel>>{\n        done: this._y >= this.height,\n        value: this,\n      };\n    }\n\n    const nc = this.numChannels;\n    if (this.palette !== undefined || nc === 1) {\n      this._bitIndex += 2;\n      if (this._bitIndex > 7) {\n        this._bitIndex = 0;\n        this._index++;\n      }\n    } else {\n      const bpp = this.bitsPerPixel;\n      this._bitIndex = (this._x * bpp) & 0x7;\n      this._index = this._rowOffset + ((this._x * bpp) >> 3);\n    }\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    const bpp = this.bitsPerPixel;\n    this._rowOffset = this._y * this._image.rowStride;\n    this._index = this._rowOffset + ((this._x * bpp) >> 3);\n    this._bitIndex = (this._x * bpp) & 0x7;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (this.palette !== undefined) {\n      return this.palette.get(this.getChannelInternal(0), channel);\n    } else {\n      if (channel === Channel.luminance) {\n        return this.luminance;\n      } else {\n        return channel < this.numChannels\n          ? this.getChannelInternal(channel)\n          : 0;\n      }\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel >= this.image.numChannels) {\n      return;\n    }\n\n    let i = this._index;\n    let bi = 6 - (this._bitIndex + (channel << 1));\n    if (bi < 0) {\n      bi += 8;\n      i++;\n    }\n\n    let v = this.data[i];\n\n    const vi = MathUtils.clampInt(value, 0, 3);\n    const msk = [0xfc, 0xf3, 0xcf, 0x3f];\n    const mask = msk[bi >> 1];\n    v = (v & mask) | (vi << bi);\n    this.data[i] = v;\n  }\n\n  public set(color: Color): void {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    const nc = this.image.numChannels;\n    if (nc > 0) {\n      this.setChannel(0, r);\n      if (nc > 1) {\n        this.setChannel(1, g);\n        if (nc > 2) {\n          this.setChannel(2, b);\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    const nc = this.image.numChannels;\n    if (nc > 0) {\n      this.setChannel(0, r);\n      if (nc > 1) {\n        this.setChannel(1, g);\n        if (nc > 2) {\n          this.setChannel(2, b);\n          if (nc > 3) {\n            this.setChannel(3, a);\n          }\n        }\n      }\n    }\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelUint2) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone(): PixelUint2 {\n    return PixelUint2.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelUint2 } from './pixel-uint2';\nimport { PixelRangeIterator } from './pixel-range-iterator';\nimport { ColorUint2 } from '../color/color-uint2';\n\nexport class MemoryImageDataUint2 implements MemoryImageData, Iterable<Pixel> {\n  private _pixel?: PixelUint2;\n\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Uint8Array;\n  public get data(): Uint8Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.uint2;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.uint;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  private _rowStride: number;\n  public get rowStride(): number {\n    return this._rowStride;\n  }\n\n  public get iterator(): PixelUint2 {\n    return PixelUint2.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return this._palette?.maxChannelValue ?? 3;\n  }\n\n  public get maxIndexValue(): number {\n    return 1;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  private _palette?: Palette;\n  public get palette(): Palette | undefined {\n    return this._palette;\n  }\n\n  public get isHdrFormat(): boolean {\n    return false;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 2;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Uint8Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._rowStride = Math.ceil((this._width * (this._numChannels << 1)) / 8);\n    this._palette = undefined;\n    this._data =\n      data ?? new Uint8Array(Math.max(this._rowStride * this._height, 1));\n  }\n\n  public static palette(\n    width: number,\n    height: number,\n    palette?: Palette\n  ): MemoryImageDataUint2 {\n    const rowStride = Math.ceil(width / 4);\n    const data = new Uint8Array(Math.max(rowStride * height, 1));\n    const d = new MemoryImageDataUint2(width, height, 1, data);\n    d._rowStride = rowStride;\n    d._palette = palette;\n    return d;\n  }\n\n  public static from(\n    other: MemoryImageDataUint2,\n    skipPixels = false\n  ): MemoryImageDataUint2 {\n    const data = skipPixels\n      ? new Uint8Array(other.data.length)\n      : other.data.slice();\n    const d = new MemoryImageDataUint2(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n    d._rowStride = other.rowStride;\n    d._palette = other.palette?.clone();\n    return d;\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelUint2.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorUint2.rgb(Math.trunc(r), Math.trunc(g), Math.trunc(b))\n      : ColorUint2.rgba(\n          Math.trunc(r),\n          Math.trunc(g),\n          Math.trunc(b),\n          Math.trunc(a)\n        );\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelUint2) || p.image !== this) {\n      p = PixelUint2.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    if (this._numChannels < 1) {\n      return;\n    }\n    this._pixel ??= PixelUint2.imageData(this);\n    this._pixel.setPosition(x, y);\n    this._pixel.index = r;\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (this._numChannels < 1) {\n      return;\n    }\n    this._pixel ??= PixelUint2.imageData(this);\n    this._pixel.setPosition(x, y);\n    this._pixel.setRgb(r, g, b);\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (this._numChannels < 1) {\n      return;\n    }\n    this._pixel ??= PixelUint2.imageData(this);\n    this._pixel.setPosition(x, y);\n    this._pixel.setRgba(r, g, b, a);\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataUint2 {\n    return MemoryImageDataUint2.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelUint2.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataUint32 } from './image-data-uint32';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelUint32 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n\n  private readonly _image: MemoryImageDataUint32;\n  public get image(): MemoryImageDataUint32 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.r;\n  }\n  public set index(i: number) {\n    this.r = i;\n  }\n\n  public get data(): Uint32Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.uint32;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get r(): number {\n    return this.numChannels > 0 ? this.data[this._index] : 0;\n  }\n  public set r(r: number) {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n    }\n  }\n\n  public get g(): number {\n    return this.numChannels > 1 ? this.data[this._index + 1] : 0;\n  }\n  public set g(g: number) {\n    if (this.numChannels > 1) {\n      this.data[this._index + 1] = Math.trunc(g);\n    }\n  }\n\n  public get b(): number {\n    return this.numChannels > 2 ? this.data[this._index + 2] : 0;\n  }\n  public set b(b: number) {\n    if (this.numChannels > 2) {\n      this.data[this._index + 2] = Math.trunc(b);\n    }\n  }\n\n  public get a(): number {\n    return this.numChannels > 3 ? this.data[this._index + 3] : 0;\n  }\n  public set a(a: number) {\n    if (this.numChannels > 3) {\n      this.data[this._index + 3] = Math.trunc(a);\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    image: MemoryImageDataUint32\n  ) {\n    this._image = image;\n    this._index = index;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataUint32) {\n    return new PixelUint32(-1, 0, -image.numChannels, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelUint32(\n      -1,\n      0,\n      -image.numChannels,\n      image.data instanceof MemoryImageDataUint32\n        ? (image.data as MemoryImageDataUint32)\n        : new MemoryImageDataUint32(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelUint32) {\n    return new PixelUint32(other.x, other.y, other._index, other.image);\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      if (this._y === this.height) {\n        return <IteratorResult<Pixel>>{\n          done: true,\n          value: this,\n        };\n      }\n    }\n    this._index += this.numChannels;\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    this._index =\n      this._y * this._image.width * this._image.numChannels +\n      this._x * this._image.numChannels;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (channel === Channel.luminance) {\n      return this.luminance;\n    } else {\n      return channel < this.numChannels ? this.data[this._index + channel] : 0;\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel < this.numChannels) {\n      this.data[this._index + channel] = Math.trunc(value);\n    }\n  }\n\n  public set(color: Color): void {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n          if (this.numChannels > 3) {\n            this.data[this._index + 3] = Math.trunc(a);\n          }\n        }\n      }\n    }\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelUint32) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone(): PixelUint32 {\n    return PixelUint32.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelUint32 } from './pixel-uint32';\nimport { PixelRangeIterator } from './pixel-range-iterator';\nimport { ColorUint32 } from '../color/color-uint32';\n\nexport class MemoryImageDataUint32 implements MemoryImageData, Iterable<Pixel> {\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Uint32Array;\n  public get data(): Uint32Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.uint32;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.uint;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get rowStride(): number {\n    return this._width * this._numChannels * 4;\n  }\n\n  public get iterator(): PixelUint32 {\n    return PixelUint32.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return 0xffffffff;\n  }\n\n  public get maxIndexValue(): number {\n    return 0xffffffff;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get isHdrFormat(): boolean {\n    return true;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 32;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Uint32Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._data =\n      data ?? new Uint32Array(this._width * this._height * this._numChannels);\n  }\n\n  public static from(\n    other: MemoryImageDataUint32,\n    skipPixels = false\n  ): MemoryImageDataUint32 {\n    const data = skipPixels\n      ? new Uint32Array(other.data.length)\n      : other.data.slice();\n    return new MemoryImageDataUint32(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelUint32.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorUint32.rgb(Math.trunc(r), Math.trunc(g), Math.trunc(b))\n      : ColorUint32.rgba(\n          Math.trunc(r),\n          Math.trunc(g),\n          Math.trunc(b),\n          Math.trunc(a)\n        );\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelUint32) || p.image !== this) {\n      p = PixelUint32.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    const index = y * this._width * this._numChannels + x * this.numChannels;\n    this.data[index] = Math.trunc(r);\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    const index = y * this._width * this._numChannels + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    const index = y * this._width * this._numChannels + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataUint32 {\n    return MemoryImageDataUint32.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelUint32.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MathUtils } from '../common/math-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataUint4 } from './image-data-uint4';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelUint4 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n  private _bitIndex: number;\n\n  private readonly _image: MemoryImageDataUint4;\n  public get image(): MemoryImageDataUint4 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.getChannelInternal(0);\n  }\n  public set index(i: number) {\n    this.setChannel(0, i);\n  }\n\n  public get data(): Uint8Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this.palette?.numChannels ?? this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.uint4;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return this._image.palette;\n  }\n\n  public get r(): number {\n    return this.getChannel(0);\n  }\n  public set r(r: number) {\n    this.setChannel(0, r);\n  }\n\n  public get g(): number {\n    return this.getChannel(1);\n  }\n  public set g(g: number) {\n    this.setChannel(1, g);\n  }\n\n  public get b(): number {\n    return this.getChannel(2);\n  }\n  public set b(b: number) {\n    this.setChannel(2, b);\n  }\n\n  public get a(): number {\n    return this.getChannel(3);\n  }\n  public set a(a: number) {\n    this.setChannel(3, a);\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    bitIndex: number,\n    image: MemoryImageDataUint4\n  ) {\n    this._image = image;\n    this._index = index;\n    this._bitIndex = bitIndex;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataUint4) {\n    return new PixelUint4(-1, 0, 0, -(image.numChannels << 2), image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelUint4(\n      -1,\n      0,\n      0,\n      -(image.numChannels << 2),\n      image.data instanceof MemoryImageDataUint4\n        ? (image.data as MemoryImageDataUint4)\n        : new MemoryImageDataUint4(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelUint4) {\n    return new PixelUint4(\n      other.x,\n      other.y,\n      other._index,\n      other._bitIndex,\n      other.image\n    );\n  }\n\n  private getChannelInternal(channel: number): number {\n    let i = this._index;\n    let bi = 4 - (this._bitIndex + (channel << 2));\n    if (bi < 0) {\n      bi += 8;\n      i++;\n    }\n    return (this._image.data[i] >> bi) & 0xf;\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      // skip row stride padding bits\n      this._x = 0;\n      this._y++;\n      this._bitIndex = 0;\n      this._index = this._y * this.image.rowStride;\n      return <IteratorResult<Pixel>>{\n        done: this._y >= this.height,\n        value: this,\n      };\n    }\n    const nc = this.image.numChannels;\n    if (this.palette !== undefined || nc === 1) {\n      this._bitIndex += 4;\n      if (this._bitIndex > 7) {\n        this._bitIndex = 0;\n        this._index++;\n      }\n    } else {\n      const bpp = nc << 2;\n      this._bitIndex += bpp;\n      while (this._bitIndex > 7) {\n        this._bitIndex -= 8;\n        this._index++;\n      }\n    }\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    const bpp = this.image.numChannels * 4;\n    const w = this.image.width;\n    const rowStride = this.image.rowStride;\n    this._index =\n      bpp === 4\n        ? this._y * rowStride + (this._x >> 1)\n        : bpp === 8\n        ? this._y * w + this._x\n        : bpp === 16\n        ? this._y * rowStride + (this._x << 1)\n        : this._y * rowStride + ((this._x * bpp) >> 3);\n    this._bitIndex = bpp > 7 ? (this._x * bpp) & 0x4 : (this._x * bpp) & 0x7;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (this.palette !== undefined) {\n      return this.palette.get(this.getChannelInternal(0), channel);\n    } else {\n      if (channel === Channel.luminance) {\n        return this.luminance;\n      } else {\n        return channel < this.numChannels\n          ? this.getChannelInternal(channel)\n          : 0;\n      }\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel >= this.image.numChannels) {\n      return;\n    }\n\n    let i = this._index;\n    let bi = 4 - (this._bitIndex + (channel << 2));\n    if (bi < 0) {\n      bi += 8;\n      i++;\n    }\n\n    let v = this.data[i];\n\n    const vi = MathUtils.clampInt(value, 0, 15);\n    const mask = bi === 4 ? 0x0f : 0xf0;\n    v = (v & mask) | (vi << bi);\n    this.data[i] = v;\n  }\n\n  public set(color: Color): void {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    const nc = this.image.numChannels;\n    if (nc > 0) {\n      this.setChannel(0, r);\n      if (nc > 1) {\n        this.setChannel(1, g);\n        if (nc > 2) {\n          this.setChannel(2, b);\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    const nc = this.image.numChannels;\n    if (nc > 0) {\n      this.setChannel(0, r);\n      if (nc > 1) {\n        this.setChannel(1, g);\n        if (nc > 2) {\n          this.setChannel(2, b);\n          if (nc > 3) {\n            this.setChannel(3, a);\n          }\n        }\n      }\n    }\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelUint4) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone(): PixelUint4 {\n    return PixelUint4.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelUint4 } from './pixel-uint4';\nimport { PixelRangeIterator } from './pixel-range-iterator';\nimport { ColorUint4 } from '../color/color-uint4';\n\nexport class MemoryImageDataUint4 implements MemoryImageData, Iterable<Pixel> {\n  private _pixel?: PixelUint4;\n\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Uint8Array;\n  public get data(): Uint8Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.uint4;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.uint;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  private _rowStride: number;\n  public get rowStride(): number {\n    return this._rowStride;\n  }\n\n  public get iterator(): PixelUint4 {\n    return PixelUint4.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return this._palette?.maxChannelValue ?? 15;\n  }\n\n  public get maxIndexValue(): number {\n    return 15;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  private _palette?: Palette;\n  public get palette(): Palette | undefined {\n    return this._palette;\n  }\n\n  public get isHdrFormat(): boolean {\n    return false;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 4;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Uint8Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._rowStride =\n      this._numChannels === 2\n        ? this._width\n        : this._numChannels === 4\n        ? this._width * 2\n        : this._numChannels === 3\n        ? Math.ceil(this._width * 1.5)\n        : Math.ceil(this._width / 2);\n    this._palette = undefined;\n    this._data =\n      data ?? new Uint8Array(Math.max(this._rowStride * this._height, 1));\n  }\n\n  public static palette(\n    width: number,\n    height: number,\n    palette?: Palette\n  ): MemoryImageDataUint4 {\n    const rowStride = Math.ceil(width / 2);\n    const data = new Uint8Array(Math.max(rowStride * height, 1));\n    const d = new MemoryImageDataUint4(width, height, 1, data);\n    d._rowStride = rowStride;\n    d._palette = palette;\n    return d;\n  }\n\n  public static from(\n    other: MemoryImageDataUint4,\n    skipPixels = false\n  ): MemoryImageDataUint4 {\n    const data = skipPixels\n      ? new Uint8Array(other.data.length)\n      : other.data.slice();\n    const d = new MemoryImageDataUint4(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n    d._rowStride = other.rowStride;\n    d._palette = other.palette?.clone();\n    return d;\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelUint4.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? ColorUint4.rgb(Math.trunc(r), Math.trunc(g), Math.trunc(b))\n      : ColorUint4.rgba(\n          Math.trunc(r),\n          Math.trunc(g),\n          Math.trunc(b),\n          Math.trunc(a)\n        );\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelUint4) || p.image !== this) {\n      p = PixelUint4.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    if (this._numChannels < 1) {\n      return;\n    }\n    this._pixel ??= PixelUint4.imageData(this);\n    this._pixel.setPosition(x, y);\n    this._pixel.index = r;\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (this._numChannels < 1) {\n      return;\n    }\n    this._pixel ??= PixelUint4.imageData(this);\n    this._pixel.setPosition(x, y);\n    this._pixel.setRgb(r, g, b);\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (this._numChannels < 1) {\n      return;\n    }\n    this._pixel ??= PixelUint4.imageData(this);\n    this._pixel.setPosition(x, y);\n    this._pixel.setRgba(r, g, b, a);\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(_c?: Color): void {}\n\n  public clone(skipPixels = false): MemoryImageDataUint4 {\n    return MemoryImageDataUint4.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelUint4.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { ColorUtils } from '../color/color-utils';\nimport { Format } from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MathUtils } from '../common/math-utils';\nimport { MemoryImage } from './image';\nimport { MemoryImageDataUint8 } from './image-data-uint8';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport class PixelUint8 implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private _index: number;\n\n  private readonly _image: MemoryImageDataUint8;\n  public get image(): MemoryImageDataUint8 {\n    return this._image;\n  }\n\n  private _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  public get xNormalized(): number {\n    return this.width > 1 ? this._x / (this.width - 1) : 0;\n  }\n\n  public get yNormalized(): number {\n    return this.height > 1 ? this._y / (this.height - 1) : 0;\n  }\n\n  public get index(): number {\n    return this.data[this._index];\n  }\n  public set index(i: number) {\n    this.data[this._index] = MathUtils.clampInt255(i);\n  }\n\n  public get data(): Uint8Array {\n    return this._image.data;\n  }\n\n  public get isValid(): boolean {\n    return (\n      this._x >= 0 &&\n      this._x < this._image.width - 1 &&\n      this._y >= 0 &&\n      this._y < this._image.height - 1\n    );\n  }\n\n  public get width(): number {\n    return this._image.width;\n  }\n\n  public get height(): number {\n    return this._image.width;\n  }\n\n  public get length(): number {\n    return this.palette?.numChannels ?? this._image.numChannels;\n  }\n\n  public get numChannels(): number {\n    return this._image.numChannels;\n  }\n\n  public get maxChannelValue(): number {\n    return this._image.maxChannelValue;\n  }\n\n  public get maxIndexValue(): number {\n    return this._image.maxIndexValue;\n  }\n\n  public get format(): Format {\n    return Format.uint8;\n  }\n\n  public get isLdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get isHdrFormat(): boolean {\n    return this._image.isLdrFormat;\n  }\n\n  public get hasPalette(): boolean {\n    return this._image.hasPalette;\n  }\n\n  public get palette(): Palette | undefined {\n    return this._image.palette;\n  }\n\n  public get r(): number {\n    return this.palette === undefined\n      ? this.numChannels > 0\n        ? this.data[this._index]\n        : 0\n      : this.palette.getRed(this.data[this._index]);\n  }\n  public set r(r: number) {\n    if (this.numChannels > 0) {\n      this.data[this._index] = MathUtils.clampInt255(r);\n    }\n  }\n\n  public get g(): number {\n    return this.palette === undefined\n      ? this.numChannels > 1\n        ? this.data[this._index + 1]\n        : 0\n      : this.palette.getGreen(this.data[this._index]);\n  }\n  public set g(g: number) {\n    if (this.numChannels > 1) {\n      this.data[this._index + 1] = MathUtils.clampInt255(g);\n    }\n  }\n\n  public get b(): number {\n    return this.palette === undefined\n      ? this.numChannels > 2\n        ? this.data[this._index + 2]\n        : 0\n      : this.palette.getBlue(this.data[this._index]);\n  }\n  public set b(b: number) {\n    if (this.numChannels > 2) {\n      this.data[this._index + 2] = MathUtils.clampInt255(b);\n    }\n  }\n\n  public get a(): number {\n    return this.palette === undefined\n      ? this.numChannels > 3\n        ? this.data[this._index + 3]\n        : 255\n      : this.palette.getAlpha(this.data[this._index]);\n  }\n  public set a(a: number) {\n    if (this.numChannels > 3) {\n      this.data[this._index + 3] = MathUtils.clampInt255(a);\n    }\n  }\n\n  public get rNormalized(): number {\n    return this.r / this.maxChannelValue;\n  }\n  public set rNormalized(v: number) {\n    this.r = v * this.maxChannelValue;\n  }\n\n  public get gNormalized(): number {\n    return this.g / this.maxChannelValue;\n  }\n  public set gNormalized(v: number) {\n    this.g = v * this.maxChannelValue;\n  }\n\n  public get bNormalized(): number {\n    return this.b / this.maxChannelValue;\n  }\n  public set bNormalized(v: number) {\n    this.b = v * this.maxChannelValue;\n  }\n\n  public get aNormalized(): number {\n    return this.a / this.maxChannelValue;\n  }\n  public set aNormalized(v: number) {\n    this.a = v * this.maxChannelValue;\n  }\n\n  public get luminance(): number {\n    return ColorUtils.getLuminance(this);\n  }\n\n  public get luminanceNormalized(): number {\n    return ColorUtils.getLuminanceNormalized(this);\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    index: number,\n    image: MemoryImageDataUint8\n  ) {\n    this._image = image;\n    this._index = index;\n    this._x = x;\n    this._y = y;\n  }\n\n  public static imageData(image: MemoryImageDataUint8) {\n    return new PixelUint8(-1, 0, -image.numChannels, image);\n  }\n\n  public static image(image: MemoryImage) {\n    return new PixelUint8(\n      -1,\n      0,\n      -image.numChannels,\n      image.data instanceof MemoryImageDataUint8\n        ? (image.data as MemoryImageDataUint8)\n        : new MemoryImageDataUint8(0, 0, 0)\n    );\n  }\n\n  public static from(other: PixelUint8) {\n    return new PixelUint8(other.x, other.y, other._index, other.image);\n  }\n\n  public next(): IteratorResult<Pixel> {\n    this._x++;\n    if (this._x === this.width) {\n      this._x = 0;\n      this._y++;\n      if (this._y === this.height) {\n        return <IteratorResult<Pixel>>{\n          done: true,\n          value: this,\n        };\n      }\n    }\n    this._index += this.palette === undefined ? this.numChannels : 1;\n    return <IteratorResult<Pixel>>{\n      done: this._index >= this.image.data.length,\n      value: this,\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this._x = x;\n    this._y = y;\n    this._index =\n      this._y * this._image.width * this._image.numChannels +\n      this._x * this._image.numChannels;\n  }\n\n  public setPositionNormalized(x: number, y: number): void {\n    return this.setPosition(\n      Math.floor(x * (this.width - 1)),\n      Math.floor(y * (this.height - 1))\n    );\n  }\n\n  public getChannel(channel: number | Channel): number {\n    if (this.palette !== undefined) {\n      return this.palette.get(this.data[this._index], channel);\n    } else {\n      if (channel === Channel.luminance) {\n        return this.luminance;\n      } else {\n        return channel < this.data.length\n          ? this.data[this._index + channel]\n          : 0;\n      }\n    }\n  }\n\n  public getChannelNormalized(channel: Channel): number {\n    return this.getChannel(channel) / this.maxChannelValue;\n  }\n\n  public setChannel(channel: number, value: number): void {\n    if (channel < this.numChannels) {\n      this.data[this._index + channel] = MathUtils.clampInt255(value);\n    }\n  }\n\n  public set(color: Color): void {\n    if (this._image.hasPalette) {\n      this._index = color.index;\n    } else {\n      this.r = color.r;\n      this.g = color.g;\n      this.b = color.b;\n      this.a = color.a;\n    }\n  }\n\n  public setRgb(r: number, g: number, b: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n        }\n      }\n    }\n  }\n\n  public setRgba(r: number, g: number, b: number, a: number): void {\n    if (this.numChannels > 0) {\n      this.data[this._index] = Math.trunc(r);\n      if (this.numChannels > 1) {\n        this.data[this._index + 1] = Math.trunc(g);\n        if (this.numChannels > 2) {\n          this.data[this._index + 2] = Math.trunc(b);\n          if (this.numChannels > 3) {\n            this.data[this._index + 3] = Math.trunc(a);\n          }\n        }\n      }\n    }\n  }\n\n  public equals(other: Pixel | number[]): boolean {\n    if (other instanceof PixelUint8) {\n      return ArrayUtils.equals(this.toArray(), other.toArray());\n    }\n    if (Array.isArray(other)) {\n      return ArrayUtils.equals(this.toArray(), other);\n    }\n    return false;\n  }\n\n  public toArray(): number[] {\n    return ArrayUtils.generate<number>(this.length, (i) => this.getChannel(i));\n  }\n\n  public clone(): PixelUint8 {\n    return PixelUint8.from(this);\n  }\n\n  public convert(opt: ColorConvertOptions): Color {\n    return ColorUtils.convertColor({\n      from: this,\n      format: opt.format,\n      numChannels: opt.numChannels,\n      alpha: opt.alpha,\n    });\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (${this.toArray()})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { Format, FormatType } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\nimport { PixelUint8 } from './pixel-uint8';\nimport { PixelRangeIterator } from './pixel-range-iterator';\nimport { ColorRgb8 } from '../color/color-rgb8';\nimport { ColorRgba8 } from '../color/color-rgba8';\nimport { MathUtils } from '../common/math-utils';\n\nexport class MemoryImageDataUint8 implements MemoryImageData, Iterable<Pixel> {\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _data: Uint8Array;\n  public get data(): Uint8Array {\n    return this._data;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get format(): Format {\n    return Format.uint8;\n  }\n\n  public get formatType(): FormatType {\n    return FormatType.uint;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get rowStride(): number {\n    return this._width * this._numChannels;\n  }\n\n  public get iterator(): PixelUint8 {\n    return PixelUint8.imageData(this);\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get length(): number {\n    return this._data.byteLength;\n  }\n\n  public get maxChannelValue(): number {\n    return this._palette?.maxChannelValue ?? 255;\n  }\n\n  public get maxIndexValue(): number {\n    return 255;\n  }\n\n  public get hasPalette(): boolean {\n    return this.palette !== undefined;\n  }\n\n  private _palette?: Palette;\n  public get palette(): Palette | undefined {\n    return this._palette;\n  }\n\n  public get isHdrFormat(): boolean {\n    return false;\n  }\n\n  public get isLdrFormat(): boolean {\n    return !this.isHdrFormat;\n  }\n\n  public get bitsPerChannel(): number {\n    return 8;\n  }\n\n  constructor(\n    width: number,\n    height: number,\n    numChannels: number,\n    data?: Uint8Array\n  ) {\n    this._width = width;\n    this._height = height;\n    this._numChannels = numChannels;\n    this._palette = undefined;\n    this._data =\n      data ?? new Uint8Array(this._width * this._height * this._numChannels);\n  }\n\n  public static palette(\n    width: number,\n    height: number,\n    palette?: Palette\n  ): MemoryImageDataUint8 {\n    const data = new Uint8Array(width * height);\n    const d = new MemoryImageDataUint8(width, height, 1, data);\n    d._palette = palette;\n    return d;\n  }\n\n  public static from(\n    other: MemoryImageDataUint8,\n    skipPixels = false\n  ): MemoryImageDataUint8 {\n    const data = skipPixels\n      ? new Uint8Array(other.data.length)\n      : other.data.slice();\n    const d = new MemoryImageDataUint8(\n      other.width,\n      other.height,\n      other._numChannels,\n      data\n    );\n    d._palette = other.palette?.clone();\n    return d;\n  }\n\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return new PixelRangeIterator(\n      PixelUint8.imageData(this),\n      x,\n      y,\n      width,\n      height\n    );\n  }\n\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return a === undefined\n      ? new ColorRgb8(\n          MathUtils.clampInt255(r),\n          MathUtils.clampInt255(g),\n          MathUtils.clampInt255(b)\n        )\n      : new ColorRgba8(\n          MathUtils.clampInt255(r),\n          MathUtils.clampInt255(g),\n          MathUtils.clampInt255(b),\n          MathUtils.clampInt255(a)\n        );\n  }\n\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    let p = pixel;\n    if (p === undefined || !(p instanceof PixelUint8) || p.image !== this) {\n      p = PixelUint8.imageData(this);\n    }\n    p.setPosition(x, y);\n    return p;\n  }\n\n  public setPixel(x: number, y: number, p: Color): void {\n    this.setPixelRgba(x, y, p.r, p.g, p.b, p.a);\n  }\n\n  public setPixelR(x: number, y: number, r: number): void {\n    const index = y * this.rowStride + x * this.numChannels;\n    this.data[index] = Math.trunc(r);\n  }\n\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    const index = y * this.rowStride + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    const index = y * this.rowStride + x * this._numChannels;\n    this._data[index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public setPixelRgbSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgb(x, y, r, g, b);\n  }\n\n  public setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return;\n    }\n    this.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  public clear(c?: Color): void {\n    const c8 = c?.convert({\n      format: Format.uint8,\n    });\n    if (this._numChannels === 1) {\n      const ri = c8 === undefined ? 0 : MathUtils.clampInt255(c8.r);\n      this._data.fill(ri);\n    } else if (this._numChannels === 2) {\n      const ri = c8 === undefined ? 0 : MathUtils.clampInt255(c8.r);\n      const gi = c8 === undefined ? 0 : MathUtils.clampInt255(c8.g);\n      const rg = (gi << 8) | ri;\n      const u16 = new Uint16Array(this._data.buffer);\n      u16.fill(rg);\n    } else if (this._numChannels === 4) {\n      const ri = c8 === undefined ? 0 : MathUtils.clampInt255(c8.r);\n      const gi = c8 === undefined ? 0 : MathUtils.clampInt255(c8.g);\n      const bi = c8 === undefined ? 0 : MathUtils.clampInt255(c8.b);\n      const ai = c8 === undefined ? 0 : MathUtils.clampInt255(c8.a);\n      const rgba = (ai << 24) | (bi << 16) | (gi << 8) | ri;\n      const u32 = new Uint32Array(this._data.buffer);\n      u32.fill(rgba);\n    } else {\n      const ri = c8 === undefined ? 0 : MathUtils.clampInt255(c8.r);\n      const gi = c8 === undefined ? 0 : MathUtils.clampInt255(c8.g);\n      const bi = c8 === undefined ? 0 : MathUtils.clampInt255(c8.b);\n      // rgb is the slow case since we can't pack the channels\n      for (const p of this) {\n        p.r = ri;\n        p.g = gi;\n        p.b = bi;\n      }\n    }\n  }\n\n  public clone(skipPixels = false): MemoryImageDataUint8 {\n    return MemoryImageDataUint8.from(this, skipPixels);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n\n  public getBytes(order?: ChannelOrder | undefined): Uint8Array {\n    if (order === undefined) {\n      return this.toUint8Array();\n    }\n\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        const tempImage = this.clone();\n        if (order === ChannelOrder.abgr) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of tempImage) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n        return tempImage.toUint8Array();\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        const tempImage = this.clone();\n        for (const p of tempImage) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n        return tempImage.toUint8Array();\n      }\n    }\n\n    return this.toUint8Array();\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this._width}, h: ${this._height}, ch: ${this._numChannels})`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel, Pixel, undefined> {\n    return PixelUint8.imageData(this);\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { Float16 } from '../common/float16';\nimport { Palette } from './palette';\n\nexport class PaletteFloat16 implements Palette {\n  private readonly _data: Uint16Array;\n  public get data(): Uint16Array {\n    return this._data;\n  }\n\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get byteLength(): number {\n    return this.data.byteLength;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this.data.buffer;\n  }\n\n  public get format(): Format {\n    return Format.float16;\n  }\n\n  public get maxChannelValue(): number {\n    return 1;\n  }\n\n  constructor(numColors: number, numChannels: number, data?: Uint16Array) {\n    this._numColors = numColors;\n    this._numChannels = numChannels;\n    this._data = data ?? new Uint16Array(numColors * numChannels);\n  }\n\n  public static from(other: PaletteFloat16) {\n    return new PaletteFloat16(other.numColors, other.numChannels, other.data);\n  }\n\n  public setRgb(index: number, r: number, g: number, b: number): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Float16.doubleToFloat16(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Float16.doubleToFloat16(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Float16.doubleToFloat16(b);\n      }\n    }\n  }\n\n  public setRgba(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Float16.doubleToFloat16(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Float16.doubleToFloat16(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Float16.doubleToFloat16(b);\n        if (this._numChannels > 3) {\n          this._data[_index + 3] = Float16.doubleToFloat16(a);\n        }\n      }\n    }\n  }\n\n  public set(index: number, channel: number, value: number): void {\n    let _index = index;\n    if (channel < this._numChannels) {\n      _index *= this._numChannels;\n      this._data[_index + channel] = Float16.doubleToFloat16(value);\n    }\n  }\n\n  public get(index: number, channel: number): number {\n    return channel < this._numChannels\n      ? Float16.float16ToDouble(this._data[index * this._numChannels + channel])\n      : 0;\n  }\n\n  public getRed(index: number): number {\n    let _index = index;\n    _index *= this._numChannels;\n    return Float16.float16ToDouble(this._data[_index]);\n  }\n\n  public getGreen(index: number): number {\n    let _index = index;\n    if (this._numChannels < 2) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return Float16.float16ToDouble(this._data[_index + 1]);\n  }\n\n  public getBlue(index: number): number {\n    let _index = index;\n    if (this._numChannels < 3) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return Float16.float16ToDouble(this._data[_index + 2]);\n  }\n\n  public getAlpha(index: number) {\n    let _index = index;\n    if (this._numChannels < 4) {\n      return 255;\n    }\n    _index *= this._numChannels;\n    return Float16.float16ToDouble(this._data[_index + 3]);\n  }\n\n  public setRed(index: number, value: number): void {\n    this.set(index, 0, value);\n  }\n\n  public setGreen(index: number, value: number): void {\n    this.set(index, 1, value);\n  }\n\n  public setBlue(index: number, value: number): void {\n    this.set(index, 2, value);\n  }\n\n  public setAlpha(index: number, value: number): void {\n    this.set(index, 3, value);\n  }\n\n  public clone(): PaletteFloat16 {\n    return PaletteFloat16.from(this);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { Palette } from './palette';\n\nexport class PaletteFloat32 implements Palette {\n  private readonly _data: Float32Array;\n  public get data(): Float32Array {\n    return this._data;\n  }\n\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get byteLength(): number {\n    return this.data.byteLength;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this.data.buffer;\n  }\n\n  public get format(): Format {\n    return Format.float32;\n  }\n\n  public get maxChannelValue(): number {\n    return 1;\n  }\n\n  constructor(numColors: number, numChannels: number, data?: Float32Array) {\n    this._numColors = numColors;\n    this._numChannels = numChannels;\n    this._data = data ?? new Float32Array(numColors * numChannels);\n  }\n\n  public static from(other: PaletteFloat32) {\n    return new PaletteFloat32(other.numColors, other.numChannels, other.data);\n  }\n\n  public setRgb(index: number, r: number, g: number, b: number): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = r;\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = g;\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = b;\n      }\n    }\n  }\n\n  public setRgba(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = r;\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = g;\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = b;\n        if (this._numChannels > 3) {\n          this._data[_index + 3] = a;\n        }\n      }\n    }\n  }\n\n  public set(index: number, channel: number, value: number): void {\n    let _index = index;\n    if (channel < this._numChannels) {\n      _index *= this._numChannels;\n      this._data[_index + channel] = value;\n    }\n  }\n\n  public get(index: number, channel: number): number {\n    return channel < this._numChannels\n      ? this._data[index * this._numChannels + channel]\n      : 0;\n  }\n\n  public getRed(index: number): number {\n    let _index = index;\n    _index *= this._numChannels;\n    return this._data[_index];\n  }\n\n  public getGreen(index: number): number {\n    let _index = index;\n    if (this._numChannels < 2) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 1];\n  }\n\n  public getBlue(index: number): number {\n    let _index = index;\n    if (this._numChannels < 3) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 2];\n  }\n\n  public getAlpha(index: number) {\n    let _index = index;\n    if (this._numChannels < 4) {\n      return 255;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 3];\n  }\n\n  public setRed(index: number, value: number): void {\n    this.set(index, 0, value);\n  }\n\n  public setGreen(index: number, value: number): void {\n    this.set(index, 1, value);\n  }\n\n  public setBlue(index: number, value: number): void {\n    this.set(index, 2, value);\n  }\n\n  public setAlpha(index: number, value: number): void {\n    this.set(index, 3, value);\n  }\n\n  public clone(): PaletteFloat32 {\n    return PaletteFloat32.from(this);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { Palette } from './palette';\n\nexport class PaletteFloat64 implements Palette {\n  private readonly _data: Float64Array;\n  public get data(): Float64Array {\n    return this._data;\n  }\n\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get byteLength(): number {\n    return this.data.byteLength;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this.data.buffer;\n  }\n\n  public get format(): Format {\n    return Format.float64;\n  }\n\n  public get maxChannelValue(): number {\n    return 1;\n  }\n\n  constructor(numColors: number, numChannels: number, data?: Float64Array) {\n    this._numColors = numColors;\n    this._numChannels = numChannels;\n    this._data = data ?? new Float64Array(numColors * numChannels);\n  }\n\n  public static from(other: PaletteFloat64) {\n    return new PaletteFloat64(other.numColors, other.numChannels, other.data);\n  }\n\n  public setRgb(index: number, r: number, g: number, b: number): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = r;\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = g;\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = b;\n      }\n    }\n  }\n\n  public setRgba(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = r;\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = g;\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = b;\n        if (this._numChannels > 3) {\n          this._data[_index + 3] = a;\n        }\n      }\n    }\n  }\n\n  public set(index: number, channel: number, value: number): void {\n    let _index = index;\n    if (channel < this._numChannels) {\n      _index *= this._numChannels;\n      this._data[_index + channel] = value;\n    }\n  }\n\n  public get(index: number, channel: number): number {\n    return channel < this._numChannels\n      ? this._data[index * this._numChannels + channel]\n      : 0;\n  }\n\n  public getRed(index: number): number {\n    let _index = index;\n    _index *= this._numChannels;\n    return this._data[_index];\n  }\n\n  public getGreen(index: number): number {\n    let _index = index;\n    if (this._numChannels < 2) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 1];\n  }\n\n  public getBlue(index: number): number {\n    let _index = index;\n    if (this._numChannels < 3) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 2];\n  }\n\n  public getAlpha(index: number) {\n    let _index = index;\n    if (this._numChannels < 4) {\n      return 255;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 3];\n  }\n\n  public setRed(index: number, value: number): void {\n    this.set(index, 0, value);\n  }\n\n  public setGreen(index: number, value: number): void {\n    this.set(index, 1, value);\n  }\n\n  public setBlue(index: number, value: number): void {\n    this.set(index, 2, value);\n  }\n\n  public setAlpha(index: number, value: number): void {\n    this.set(index, 3, value);\n  }\n\n  public clone(): PaletteFloat64 {\n    return PaletteFloat64.from(this);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { Palette } from './palette';\n\nexport class PaletteInt16 implements Palette {\n  private readonly _data: Int16Array;\n  public get data(): Int16Array {\n    return this._data;\n  }\n\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get format(): Format {\n    return Format.int16;\n  }\n\n  public get maxChannelValue(): number {\n    return 0x7fff;\n  }\n\n  constructor(numColors: number, numChannels: number, data?: Int16Array) {\n    this._numColors = numColors;\n    this._numChannels = numChannels;\n    this._data = data ?? new Int16Array(numColors * numChannels);\n  }\n\n  public static from(other: PaletteInt16) {\n    return new PaletteInt16(other.numColors, other.numChannels, other.data);\n  }\n\n  public setRgb(index: number, r: number, g: number, b: number): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[_index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public set(index: number, channel: number, value: number): void {\n    let _index = index;\n    if (channel < this._numChannels) {\n      _index *= this._numChannels;\n      this._data[_index + channel] = Math.trunc(value);\n    }\n  }\n\n  public get(index: number, channel: number): number {\n    return channel < this._numChannels\n      ? this._data[index * this._numChannels + channel]\n      : 0;\n  }\n\n  public getRed(index: number): number {\n    let _index = index;\n    _index *= this._numChannels;\n    return this._data[_index];\n  }\n\n  public getGreen(index: number): number {\n    let _index = index;\n    if (this._numChannels < 2) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 1];\n  }\n\n  public getBlue(index: number): number {\n    let _index = index;\n    if (this._numChannels < 3) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 2];\n  }\n\n  public getAlpha(index: number) {\n    let _index = index;\n    if (this._numChannels < 4) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 3];\n  }\n\n  public setRed(index: number, value: number): void {\n    this.set(index, 0, value);\n  }\n\n  public setGreen(index: number, value: number): void {\n    this.set(index, 1, value);\n  }\n\n  public setBlue(index: number, value: number): void {\n    this.set(index, 2, value);\n  }\n\n  public setAlpha(index: number, value: number): void {\n    this.set(index, 3, value);\n  }\n\n  public clone(): PaletteInt16 {\n    return PaletteInt16.from(this);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { Palette } from './palette';\n\nexport class PaletteInt32 implements Palette {\n  private readonly _data: Int32Array;\n  public get data(): Int32Array {\n    return this._data;\n  }\n\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get format(): Format {\n    return Format.int32;\n  }\n\n  public get maxChannelValue(): number {\n    return 0x7fffffff;\n  }\n\n  constructor(numColors: number, numChannels: number, data?: Int32Array) {\n    this._numColors = numColors;\n    this._numChannels = numChannels;\n    this._data = data ?? new Int32Array(numColors * numChannels);\n  }\n\n  public static from(other: PaletteInt32) {\n    return new PaletteInt32(other.numColors, other.numChannels, other.data);\n  }\n\n  public setRgb(index: number, r: number, g: number, b: number): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[_index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public set(index: number, channel: number, value: number): void {\n    let _index = index;\n    if (channel < this._numChannels) {\n      _index *= this._numChannels;\n      this._data[_index + channel] = Math.trunc(value);\n    }\n  }\n\n  public get(index: number, channel: number): number {\n    return channel < this._numChannels\n      ? this._data[index * this._numChannels + channel]\n      : 0;\n  }\n\n  public getRed(index: number): number {\n    let _index = index;\n    _index *= this._numChannels;\n    return this._data[_index];\n  }\n\n  public getGreen(index: number): number {\n    let _index = index;\n    if (this._numChannels < 2) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 1];\n  }\n\n  public getBlue(index: number): number {\n    let _index = index;\n    if (this._numChannels < 3) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 2];\n  }\n\n  public getAlpha(index: number) {\n    let _index = index;\n    if (this._numChannels < 4) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 3];\n  }\n\n  public setRed(index: number, value: number): void {\n    this.set(index, 0, value);\n  }\n\n  public setGreen(index: number, value: number): void {\n    this.set(index, 1, value);\n  }\n\n  public setBlue(index: number, value: number): void {\n    this.set(index, 2, value);\n  }\n\n  public setAlpha(index: number, value: number): void {\n    this.set(index, 3, value);\n  }\n\n  public clone(): PaletteInt32 {\n    return PaletteInt32.from(this);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { Palette } from './palette';\n\nexport class PaletteInt8 implements Palette {\n  private readonly _data: Int8Array;\n  public get data(): Int8Array {\n    return this._data;\n  }\n\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get byteLength(): number {\n    return this.data.byteLength;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this.data.buffer;\n  }\n\n  public get format(): Format {\n    return Format.int8;\n  }\n\n  public get maxChannelValue(): number {\n    return 0x7f;\n  }\n\n  constructor(numColors: number, numChannels: number, data?: Int8Array) {\n    this._numColors = numColors;\n    this._numChannels = numChannels;\n    this._data = data ?? new Int8Array(numColors * numChannels);\n  }\n\n  public static from(other: PaletteInt8) {\n    return new PaletteInt8(other.numColors, other.numChannels, other.data);\n  }\n\n  public setRgb(index: number, r: number, g: number, b: number): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[_index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public set(index: number, channel: number, value: number): void {\n    let _index = index;\n    if (channel < this._numChannels) {\n      _index *= this._numChannels;\n      this._data[_index + channel] = Math.trunc(value);\n    }\n  }\n\n  public get(index: number, channel: number): number {\n    return channel < this._numChannels\n      ? this._data[index * this._numChannels + channel]\n      : 0;\n  }\n\n  public getRed(index: number): number {\n    let _index = index;\n    _index *= this._numChannels;\n    return this._data[_index];\n  }\n\n  public getGreen(index: number): number {\n    let _index = index;\n    if (this._numChannels < 2) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 1];\n  }\n\n  public getBlue(index: number): number {\n    let _index = index;\n    if (this._numChannels < 3) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 2];\n  }\n\n  public getAlpha(index: number) {\n    let _index = index;\n    if (this._numChannels < 4) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 3];\n  }\n\n  public setRed(index: number, value: number): void {\n    this.set(index, 0, value);\n  }\n\n  public setGreen(index: number, value: number): void {\n    this.set(index, 1, value);\n  }\n\n  public setBlue(index: number, value: number): void {\n    this.set(index, 2, value);\n  }\n\n  public setAlpha(index: number, value: number): void {\n    this.set(index, 3, value);\n  }\n\n  public clone(): PaletteInt8 {\n    return PaletteInt8.from(this);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { Palette } from './palette';\n\nexport class PaletteUint16 implements Palette {\n  private readonly _data: Uint16Array;\n  public get data(): Uint16Array {\n    return this._data;\n  }\n\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get format(): Format {\n    return Format.uint16;\n  }\n\n  public get maxChannelValue(): number {\n    return 0xffff;\n  }\n\n  constructor(numColors: number, numChannels: number, data?: Uint16Array) {\n    this._numColors = numColors;\n    this._numChannels = numChannels;\n    this._data = data ?? new Uint16Array(numColors * numChannels);\n  }\n\n  public static from(other: PaletteUint16) {\n    return new PaletteUint16(other.numColors, other.numChannels, other.data);\n  }\n\n  public setRgb(index: number, r: number, g: number, b: number): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[_index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public set(index: number, channel: number, value: number): void {\n    let _index = index;\n    if (channel < this._numChannels) {\n      _index *= this._numChannels;\n      this._data[_index + channel] = Math.trunc(value);\n    }\n  }\n\n  public get(index: number, channel: number): number {\n    return channel < this._numChannels\n      ? this._data[index * this._numChannels + channel]\n      : 0;\n  }\n\n  public getRed(index: number): number {\n    let _index = index;\n    _index *= this._numChannels;\n    return this._data[_index];\n  }\n\n  public getGreen(index: number): number {\n    let _index = index;\n    if (this._numChannels < 2) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 1];\n  }\n\n  public getBlue(index: number): number {\n    let _index = index;\n    if (this._numChannels < 3) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 2];\n  }\n\n  public getAlpha(index: number) {\n    let _index = index;\n    if (this._numChannels < 4) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 3];\n  }\n\n  public setRed(index: number, value: number): void {\n    this.set(index, 0, value);\n  }\n\n  public setGreen(index: number, value: number): void {\n    this.set(index, 1, value);\n  }\n\n  public setBlue(index: number, value: number): void {\n    this.set(index, 2, value);\n  }\n\n  public setAlpha(index: number, value: number): void {\n    this.set(index, 3, value);\n  }\n\n  public clone(): PaletteUint16 {\n    return PaletteUint16.from(this);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { Palette } from './palette';\n\nexport class PaletteUint32 implements Palette {\n  private readonly _data: Uint32Array;\n  public get data(): Uint32Array {\n    return this._data;\n  }\n\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get format(): Format {\n    return Format.uint32;\n  }\n\n  public get maxChannelValue(): number {\n    return 0xffffffff;\n  }\n\n  constructor(numColors: number, numChannels: number, data?: Uint32Array) {\n    this._numColors = numColors;\n    this._numChannels = numChannels;\n    this._data = data ?? new Uint32Array(numColors * numChannels);\n  }\n\n  public static from(other: PaletteUint32) {\n    return new PaletteUint32(other.numColors, other.numChannels, other.data);\n  }\n\n  public setRgb(index: number, r: number, g: number, b: number): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[_index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public set(index: number, channel: number, value: number): void {\n    let _index = index;\n    if (channel < this._numChannels) {\n      _index *= this._numChannels;\n      this._data[_index + channel] = Math.trunc(value);\n    }\n  }\n\n  public get(index: number, channel: number): number {\n    return channel < this._numChannels\n      ? this._data[index * this._numChannels + channel]\n      : 0;\n  }\n\n  public getRed(index: number): number {\n    let _index = index;\n    _index *= this._numChannels;\n    return this._data[_index];\n  }\n\n  public getGreen(index: number): number {\n    let _index = index;\n    if (this._numChannels < 2) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 1];\n  }\n\n  public getBlue(index: number): number {\n    let _index = index;\n    if (this._numChannels < 3) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 2];\n  }\n\n  public getAlpha(index: number) {\n    let _index = index;\n    if (this._numChannels < 4) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    return this._data[_index + 3];\n  }\n\n  public setRed(index: number, value: number): void {\n    this.set(index, 0, value);\n  }\n\n  public setGreen(index: number, value: number): void {\n    this.set(index, 1, value);\n  }\n\n  public setBlue(index: number, value: number): void {\n    this.set(index, 2, value);\n  }\n\n  public setAlpha(index: number, value: number): void {\n    this.set(index, 3, value);\n  }\n\n  public clone(): PaletteUint32 {\n    return PaletteUint32.from(this);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { Palette } from './palette';\n\nexport class PaletteUint8 implements Palette {\n  private readonly _data: Uint8Array;\n  public get data(): Uint8Array {\n    return this._data;\n  }\n\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _numChannels: number;\n  public get numChannels(): number {\n    return this._numChannels;\n  }\n\n  public get byteLength(): number {\n    return this._data.byteLength;\n  }\n\n  public get buffer(): ArrayBufferLike {\n    return this._data.buffer;\n  }\n\n  public get format(): Format {\n    return Format.uint8;\n  }\n\n  public get maxChannelValue(): number {\n    return 255;\n  }\n\n  constructor(numColors: number, numChannels: number, data?: Uint8Array) {\n    this._numColors = numColors;\n    this._numChannels = numChannels;\n    this._data = data ?? new Uint8Array(numColors * numChannels);\n  }\n\n  public static from(other: PaletteUint8) {\n    return new PaletteUint8(other.numColors, other.numChannels, other.data);\n  }\n\n  public setRgb(index: number, r: number, g: number, b: number): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n      }\n    }\n  }\n\n  public setRgba(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    let _index = index;\n    _index *= this._numChannels;\n    this._data[_index] = Math.trunc(r);\n    if (this._numChannels > 1) {\n      this._data[_index + 1] = Math.trunc(g);\n      if (this._numChannels > 2) {\n        this._data[_index + 2] = Math.trunc(b);\n        if (this._numChannels > 3) {\n          this._data[_index + 3] = Math.trunc(a);\n        }\n      }\n    }\n  }\n\n  public set(index: number, channel: number, value: number): void {\n    let _index = index;\n    if (channel < this._numChannels) {\n      _index *= this._numChannels;\n      this._data[_index + channel] = Math.trunc(value);\n    }\n  }\n\n  public get(index: number, channel: number): number {\n    return channel < this._numChannels\n      ? this._data[index * this._numChannels + channel]\n      : 0;\n  }\n\n  public getRed(index: number): number {\n    let _index = index;\n    _index *= this._numChannels;\n    if (_index >= this._data.length) {\n      return 0;\n    }\n    return this._data[_index];\n  }\n\n  public getGreen(index: number): number {\n    let _index = index;\n    if (this._numChannels < 2) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    if (_index >= this._data.length) {\n      return 0;\n    }\n    return this._data[_index + 1];\n  }\n\n  public getBlue(index: number): number {\n    let _index = index;\n    if (this._numChannels < 3) {\n      return 0;\n    }\n    _index *= this._numChannels;\n    if (_index >= this._data.length) {\n      return 0;\n    }\n    return this._data[_index + 2];\n  }\n\n  public getAlpha(index: number) {\n    let _index = index;\n    if (this._numChannels < 4) {\n      return 255;\n    }\n    _index *= this._numChannels;\n    if (_index >= this._data.length) {\n      return 0;\n    }\n    return this._data[_index + 3];\n  }\n\n  public setRed(index: number, value: number): void {\n    this.set(index, 0, value);\n  }\n\n  public setGreen(index: number, value: number): void {\n    this.set(index, 1, value);\n  }\n\n  public setBlue(index: number, value: number): void {\n    this.set(index, 2, value);\n  }\n\n  public setAlpha(index: number, value: number): void {\n    this.set(index, 3, value);\n  }\n\n  public clone(): PaletteUint8 {\n    return PaletteUint8.from(this);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer);\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color, ColorConvertOptions } from '../color/color';\nimport { Format } from '../color/format';\nimport { MemoryImageData } from './image-data';\nimport { MemoryImageDataUint8 } from './image-data-uint8';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\n/**\n * Represents an invalid pixel.\n */\nexport class PixelUndefined implements Pixel, Iterable<Pixel>, Iterator<Pixel> {\n  private static readonly _nullImageData = new MemoryImageDataUint8(0, 0, 0);\n\n  public get image(): MemoryImageData {\n    return PixelUndefined._nullImageData;\n  }\n\n  public get isValid(): boolean {\n    return false;\n  }\n\n  public get width(): number {\n    return 0;\n  }\n\n  public get height(): number {\n    return 0;\n  }\n\n  public get x(): number {\n    return 0;\n  }\n\n  public get y(): number {\n    return 0;\n  }\n\n  public get xNormalized(): number {\n    return 0;\n  }\n\n  public get yNormalized(): number {\n    return 0;\n  }\n\n  public get length(): number {\n    return 0;\n  }\n\n  public get maxChannelValue(): number {\n    return 0;\n  }\n\n  public get maxIndexValue(): number {\n    return 0;\n  }\n\n  public get format(): Format {\n    return Format.uint8;\n  }\n\n  public get isLdrFormat(): boolean {\n    return false;\n  }\n\n  public get isHdrFormat(): boolean {\n    return false;\n  }\n\n  public get hasPalette(): boolean {\n    return false;\n  }\n\n  public get palette(): Palette | undefined {\n    return undefined;\n  }\n\n  public get index(): number {\n    return 0;\n  }\n\n  public set index(_i: number) {}\n\n  public get r(): number {\n    return 0;\n  }\n\n  public set r(_r: number) {}\n\n  public get g(): number {\n    return 0;\n  }\n\n  public set g(_g: number) {}\n\n  public get b(): number {\n    return 0;\n  }\n\n  public set b(_b: number) {}\n\n  public get a(): number {\n    return 0;\n  }\n\n  public set a(_a: number) {}\n\n  public get rNormalized(): number {\n    return 0;\n  }\n\n  public set rNormalized(_v: number) {}\n\n  public get gNormalized(): number {\n    return 0;\n  }\n\n  public set gNormalized(_v: number) {}\n\n  public get bNormalized(): number {\n    return 0;\n  }\n\n  public set bNormalized(_v: number) {}\n\n  public get aNormalized(): number {\n    return 0;\n  }\n\n  public set aNormalized(_v: number) {}\n\n  public get luminance(): number {\n    return 0;\n  }\n\n  public get luminanceNormalized(): number {\n    return 0;\n  }\n\n  public getChannel(_channel: number): number {\n    return 0;\n  }\n\n  public getChannelNormalized(_channel: Channel): number {\n    return 0;\n  }\n\n  public setChannel(_channel: number, _value: number): void {}\n\n  public set(_color: Color): void {}\n\n  public setRgb(_r: number, _g: number, _b: number): void {}\n\n  public setRgba(_r: number, _g: number, _b: number, _a: number): void {}\n\n  public clone(): Color {\n    return new PixelUndefined();\n  }\n\n  public convert(_options: ColorConvertOptions): Color {\n    return this;\n  }\n\n  public setPosition(_x: number, _y: number): void {}\n\n  public setPositionNormalized(_x: number, _y: number): void {}\n\n  public equals(other: Pixel): boolean {\n    return other instanceof PixelUndefined;\n  }\n\n  public next(): IteratorResult<Pixel> {\n    return {\n      done: true,\n      value: this,\n    };\n  }\n\n  public toArray(): number[] {\n    return [];\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (undefined)`;\n  }\n\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this;\n  }\n}\n", "/** @format */\n\nimport { Color } from '../color/color';\nimport { MemoryImageData } from './image-data';\nimport { PixelUndefined } from './pixel-undefined';\n\nexport interface Pixel extends Color, Iterator<Pixel> {\n  /**\n   * The [MemoryImageData] this pixel refers to.\n   */\n  get image(): MemoryImageData;\n  /**\n   * True if this points to a valid pixel, otherwise false.\n   */\n  get isValid(): boolean;\n  /**\n   * The width in pixels of the image data this pixel refers to.\n   */\n  get width(): number;\n  /**\n   * The height in pixels of the image data this pixel refers to.\n   */\n  get height(): number;\n  /**\n   * The x coordinate of the pixel.\n   */\n  get x(): number;\n  /**\n   * The y coordinate of the pixel.\n   */\n  get y(): number;\n  /**\n   * The normalized x coordinate of the pixel, in the range [0, 1].\n   */\n  get xNormalized(): number;\n  /**\n   * The normalized y coordinate of the pixel, in the range [0, 1].\n   */\n  get yNormalized(): number;\n  /**\n   * Set the coordinates of the pixel.\n   */\n  setPosition(x: number, y: number): void;\n  /**\n   * Set the normalized coordinates of the pixel, in the range [0, 1].\n   */\n  setPositionNormalized(x: number, y: number): void;\n  /**\n   * Tests if this pixel has the same values as the given pixel or color.\n   */\n  equals(other: Pixel | number[]): boolean;\n}\n\n/**\n * UndefinedPixel is used to represent an invalid pixel.\n */\nexport const UndefinedPixel = new PixelUndefined();\n", "/** @format */\n\nimport { ChannelOrder, ChannelOrderLength } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { ColorUint8 } from '../color/color-uint8';\nimport { ColorUtils } from '../color/color-utils';\nimport {\n  Format,\n  FormatMaxValue,\n  FormatSize,\n  FormatType,\n} from '../color/format';\nimport { ArrayUtils } from '../common/array-utils';\nimport { Interpolation } from '../common/interpolation';\nimport { MathUtils } from '../common/math-utils';\nimport { LibError } from '../error/lib-error';\nimport { ExifData } from '../exif/exif-data';\nimport { FrameType } from './frame-type';\nimport { IccProfile } from './icc-profile';\nimport { MemoryImageData } from './image-data';\nimport { MemoryImageDataFloat16 } from './image-data-float16';\nimport { MemoryImageDataFloat32 } from './image-data-float32';\nimport { MemoryImageDataFloat64 } from './image-data-float64';\nimport { MemoryImageDataInt16 } from './image-data-int16';\nimport { MemoryImageDataInt32 } from './image-data-int32';\nimport { MemoryImageDataInt8 } from './image-data-int8';\nimport { MemoryImageDataUint1 } from './image-data-uint1';\nimport { MemoryImageDataUint16 } from './image-data-uint16';\nimport { MemoryImageDataUint2 } from './image-data-uint2';\nimport { MemoryImageDataUint32 } from './image-data-uint32';\nimport { MemoryImageDataUint4 } from './image-data-uint4';\nimport { MemoryImageDataUint8 } from './image-data-uint8';\nimport { Palette } from './palette';\nimport { PaletteFloat16 } from './palette-float16';\nimport { PaletteFloat32 } from './palette-float32';\nimport { PaletteFloat64 } from './palette-float64';\nimport { PaletteInt16 } from './palette-int16';\nimport { PaletteInt32 } from './palette-int32';\nimport { PaletteInt8 } from './palette-int8';\nimport { PaletteUint16 } from './palette-uint16';\nimport { PaletteUint32 } from './palette-uint32';\nimport { PaletteUint8 } from './palette-uint8';\nimport { Pixel, UndefinedPixel } from './pixel';\n\ninterface MemoryImageInitializeOptions {\n  width: number;\n  height: number;\n  format?: Format;\n  numChannels?: number;\n  withPalette?: boolean;\n  paletteFormat?: Format;\n  palette?: Palette;\n  exifData?: ExifData;\n  iccProfile?: IccProfile;\n}\n\nexport interface MemoryImageCreateOptions extends MemoryImageInitializeOptions {\n  loopCount?: number;\n  frameType?: FrameType;\n  frameDuration?: number;\n  frameIndex?: number;\n  backgroundColor?: Color;\n  textData?: Map<string, string>;\n}\n\nexport interface MemoryImageFromBytesOptions extends MemoryImageCreateOptions {\n  bytes: ArrayBufferLike;\n  rowStride?: number;\n  channelOrder?: ChannelOrder;\n}\n\nexport interface MemoryImageCloneOptions {\n  skipAnimation?: boolean;\n  skipPixels?: boolean;\n}\n\nexport interface MemoryImageConvertOptions {\n  format?: Format;\n  numChannels?: number;\n  alpha?: number;\n  withPalette?: boolean;\n  skipAnimation?: boolean;\n}\n\nexport interface MemoryImageColorExtremes {\n  min: number;\n  max: number;\n}\n\n/**\n * A MemoryImage is a container for MemoryImageData and other various metadata\n * representing an image in memory.\n */\nexport class MemoryImage implements Iterable<Pixel> {\n  private _data?: MemoryImageData;\n  public get data(): MemoryImageData | undefined {\n    return this._data;\n  }\n\n  private get numPixelColors(): number {\n    return this.format === Format.uint1\n      ? 2\n      : this.format === Format.uint2\n      ? 4\n      : this.format === Format.uint4\n      ? 16\n      : this.format === Format.uint8\n      ? 256\n      : 0;\n  }\n\n  /**\n   * The format of the image pixels.\n   */\n  public get format(): Format {\n    return this._data?.format ?? Format.uint8;\n  }\n\n  /**\n   * Indicates whether this image has a palette.\n   */\n  public get hasPalette(): boolean {\n    return this._data?.palette !== undefined;\n  }\n\n  /**\n   * The palette if the image has one, undefined otherwise.\n   */\n  public get palette(): Palette | undefined {\n    return this._data?.palette;\n  }\n\n  /**\n   * The number of color channels for the image.\n   */\n  public get numChannels(): number {\n    return this.palette?.numChannels ?? this._data?.numChannels ?? 0;\n  }\n\n  /**\n   * Indicates whether this image is animated.\n   * An image is considered animated if it has more than one frame, as the\n   * first image in the frames list is the image itself.\n   */\n  public get hasAnimation(): boolean {\n    return this._frames.length > 1;\n  }\n\n  /**\n   * The number of frames in this MemoryImage. A MemoryImage will have at least one\n   * frame, itself, so it's considered animated if it has more than one\n   * frame.\n   */\n  public get numFrames(): number {\n    return this._frames.length;\n  }\n\n  private _exifData?: ExifData;\n  /**\n   * The EXIF metadata for the image. If an ExifData hasn't been created\n   * for the image yet, one will be added.\n   */\n  public get exifData(): ExifData {\n    this._exifData ??= new ExifData();\n    return this._exifData;\n  }\n  public set exifData(exif: ExifData) {\n    this._exifData = exif;\n  }\n\n  /**\n   * The maximum value of a pixel channel, based on the format of the image.\n   * If the image has a **palette**, this will be the maximum value of a palette\n   * color channel. Float format images will have a **maxChannelValue** of 1,\n   * though they can have values above that.\n   */\n  public get maxChannelValue(): number {\n    return this._data?.maxChannelValue ?? 0;\n  }\n\n  /**\n   * The maximum value of a palette index, based on the format of the image.\n   * This differs from **maxChannelValue** in that it will not be affected by\n   * the format of the **palette**.\n   */\n  public get maxIndexValue(): number {\n    return this.data?.maxIndexValue ?? 0;\n  }\n\n  /**\n   * Indicates whether this image supports using a palette.\n   */\n  public get supportsPalette(): boolean {\n    return (\n      this.format === Format.uint1 ||\n      this.format === Format.uint2 ||\n      this.format === Format.uint4 ||\n      this.format === Format.uint8\n    );\n  }\n\n  /**\n   * The width of the image in pixels.\n   */\n  public get width(): number {\n    return this.data?.width ?? 0;\n  }\n\n  /**\n   * The height of the image in pixels.\n   */\n  public get height(): number {\n    return this.data?.height ?? 0;\n  }\n\n  /**\n   * The general type of the format, whether it's uint data, int data, or\n   * float data (regardless of precision).\n   */\n  public get formatType(): FormatType {\n    return this.data?.formatType ?? FormatType.uint;\n  }\n\n  /**\n   * Indicates whether this image is valid and has data.\n   */\n  public get isValid(): boolean {\n    return this._data !== undefined && this.width > 0 && this.height > 0;\n  }\n\n  /**\n   * The ArrayBufferLike of the image storage data or undefined if not initialized.\n   */\n  public get buffer(): ArrayBufferLike | undefined {\n    return this._data?.buffer;\n  }\n\n  /**\n   * The length in bytes of the image data buffer.\n   */\n  public get byteLength(): number {\n    return this._data?.buffer.byteLength ?? 0;\n  }\n\n  /**\n   * The length in bytes of a row of pixels in the image buffer.\n   */\n  public get rowStride(): number {\n    return this._data?.rowStride ?? 0;\n  }\n\n  /**\n   * Indicates whether this image is a Low Dynamic Range (regular) image.\n   */\n  public get isLdrFormat(): boolean {\n    return this._data?.isLdrFormat ?? false;\n  }\n\n  /**\n   * Indicates whether this image is a High Dynamic Range image.\n   */\n  public get isHdrFormat(): boolean {\n    return this._data?.isHdrFormat ?? false;\n  }\n\n  /**\n   * The number of bits per color channel.\n   */\n  public get bitsPerChannel(): number {\n    return this._data?.bitsPerChannel ?? 0;\n  }\n\n  /**\n   * Indicates whether this MemoryImage has an alpha channel.\n   */\n  public get hasAlpha(): boolean {\n    return this.numChannels === 4;\n  }\n\n  /**\n   * Named non-color channels used by this image.\n   */\n  private _extraChannels?: Map<string, MemoryImageData>;\n\n  private _iccProfile: IccProfile | undefined;\n  public get iccProfile(): IccProfile | undefined {\n    return this._iccProfile;\n  }\n  public set iccProfile(v: IccProfile | undefined) {\n    this._iccProfile = v;\n  }\n\n  private _textData: Map<string, string> | undefined;\n  public get textData(): Map<string, string> | undefined {\n    return this._textData;\n  }\n\n  private _backgroundColor?: Color;\n  /**\n   * The suggested background color to clear the canvas with.\n   */\n  public get backgroundColor(): Color | undefined {\n    return this._backgroundColor;\n  }\n  public set backgroundColor(v: Color | undefined) {\n    this._backgroundColor = v;\n  }\n\n  private _loopCount: number;\n  /**\n   * How many times should the animation loop (0 means forever)\n   */\n  public get loopCount(): number {\n    return this._loopCount;\n  }\n  public set loopCount(v: number) {\n    this._loopCount = v;\n  }\n\n  private _frameType: FrameType;\n  /**\n   * Gets or sets how should the frames be interpreted.\n   * If the **frameType** is _FrameType.animation_, the frames are part\n   * of an animated sequence. If the **frameType** is _FrameType.page_,\n   * the frames are the pages of a document.\n   */\n  public get frameType(): FrameType {\n    return this._frameType;\n  }\n  public set frameType(v: FrameType) {\n    this._frameType = v;\n  }\n\n  /**\n   * The list of sub-frames for the image, if it's an animation. An image\n   * is considered animated if it has more than one frame, as the first\n   * frame will be the image itself.\n   */\n  private _frames: MemoryImage[] = [];\n  public get frames(): MemoryImage[] {\n    return this._frames;\n  }\n\n  private _frameDuration: number;\n  /**\n   * How long this frame should be displayed, in milliseconds.\n   * A duration of 0 indicates no delay and the next frame will be drawn\n   * as quickly as it can.\n   */\n  public get frameDuration(): number {\n    return this._frameDuration;\n  }\n  public set frameDuration(v: number) {\n    this._frameDuration = v;\n  }\n\n  /**\n   * Index of this image in the parent animations frame list.\n   */\n  private _frameIndex: number;\n  public get frameIndex(): number {\n    return this._frameIndex;\n  }\n\n  constructor(opt?: MemoryImageCreateOptions) {\n    if (opt !== undefined) {\n      this._loopCount = opt.loopCount ?? 0;\n      this._frameType = opt.frameType ?? FrameType.sequence;\n      this._frameDuration = opt.frameDuration ?? 0;\n      this._frameIndex = opt.frameIndex ?? 0;\n      this._backgroundColor = opt.backgroundColor;\n      this._textData = opt.textData;\n      this._frames.push(this);\n      this.initialize({\n        width: opt.width,\n        height: opt.height,\n        format: opt.format ?? Format.uint8,\n        numChannels: opt.numChannels ?? 3,\n        withPalette: opt.withPalette ?? false,\n        paletteFormat: opt.paletteFormat ?? Format.uint8,\n        palette: opt.palette,\n        exifData: opt.exifData,\n        iccProfile: opt.iccProfile,\n      });\n    } else {\n      // create an empty image\n      this._loopCount = 0;\n      this._frameType = FrameType.sequence;\n      this._frameDuration = 0;\n      this._frameIndex = 0;\n    }\n  }\n\n  public static fromResized(\n    other: MemoryImage,\n    width: number,\n    height: number,\n    skipAnimation = false\n  ): MemoryImage {\n    const image = new MemoryImage({\n      width: width,\n      height: height,\n      loopCount: other._loopCount,\n      frameType: other._frameType,\n      frameDuration: other._frameDuration,\n      frameIndex: other._frameIndex,\n      backgroundColor: other._backgroundColor?.clone(),\n      format: other.format,\n      numChannels: other.numChannels,\n      withPalette: other.hasPalette,\n      paletteFormat: other.palette?.format,\n      palette: other.palette,\n      exifData: other._exifData?.clone(),\n      iccProfile: other._iccProfile?.clone(),\n      textData:\n        other._textData !== undefined\n          ? new Map<string, string>(other._textData)\n          : undefined,\n    });\n\n    if (other._extraChannels !== undefined) {\n      image._extraChannels = new Map<string, MemoryImageData>(\n        other._extraChannels\n      );\n    }\n\n    if (!skipAnimation) {\n      const numFrames = other.numFrames;\n      for (let fi = 1; fi < numFrames; ++fi) {\n        const frame = other._frames[fi];\n        image.addFrame(MemoryImage.fromResized(frame, width, height));\n      }\n    }\n\n    return image;\n  }\n\n  /**\n   * Creates a copy of the given **other** MemoryImage.\n   */\n  public static from(\n    other: MemoryImage,\n    skipAnimation = false,\n    skipPixels = false\n  ): MemoryImage {\n    const image = new MemoryImage();\n    image._data = other.data?.clone(skipPixels);\n    image._exifData = other._exifData?.clone();\n    image._iccProfile = other.iccProfile?.clone();\n    image._frameType = other.frameType;\n    image._loopCount = other._loopCount;\n    image._backgroundColor = other._backgroundColor?.clone();\n    image._frameDuration = other._frameDuration;\n    image._frameIndex = other._frameIndex;\n    if (other._extraChannels !== undefined) {\n      image._extraChannels = new Map<string, MemoryImageData>(\n        other._extraChannels\n      );\n    }\n    if (other._textData !== undefined) {\n      image._textData = new Map<string, string>(other.textData);\n    }\n    image._frames.push(image);\n    if (!skipAnimation && other.hasAnimation) {\n      const numFrames = other.numFrames;\n      for (let fi = 1; fi < numFrames; ++fi) {\n        const frame = other._frames[fi];\n        image.addFrame(MemoryImage.from(frame));\n      }\n    }\n    return image;\n  }\n\n  /**\n   * Create an image from raw data in **bytes**.\n   *\n   * **format** defines the order of color channels in **bytes**.\n   * An HTML canvas element stores colors in _Format.rgba_ format;\n   * a MemoryImage object stores colors in _Format.rgba_ format.\n   *\n   * **rowStride** is the row stride, in bytes, of the source data **bytes**.\n   * This may be different than the rowStride of the MemoryImage, as some data\n   * sources align rows to different byte alignments and include padding.\n   *\n   * **order** can be used if the source **bytes** has a different channel order\n   * than RGBA. _ChannelOrder.bgra_ will rearrange the color channels from\n   * BGRA to what MemoryImage wants, RGBA.\n   *\n   * If **numChannels** and **order** are not provided, a default of 3 for\n   * **numChannels** and _ChannelOrder.rgba_ for **order** will be assumed.\n   */\n  public static fromBytes(opt: MemoryImageFromBytesOptions): MemoryImage {\n    const image = new MemoryImage();\n    image._loopCount = opt.loopCount ?? 0;\n    image._frameType = opt.frameType ?? FrameType.sequence;\n    image._frameDuration = opt.frameDuration ?? 0;\n    image._frameIndex = opt.frameIndex ?? 0;\n    image._backgroundColor = opt.backgroundColor;\n    image._textData = opt.textData;\n    image._frames.push(image);\n\n    const format = opt.format ?? Format.uint8;\n    const withPalette = opt.withPalette ?? false;\n    const paletteFormat = opt.paletteFormat ?? Format.uint8;\n    const numChannels =\n      opt.numChannels ??\n      (opt.channelOrder !== undefined\n        ? ChannelOrderLength.get(opt.channelOrder)!\n        : 3);\n\n    if (numChannels < 0 || numChannels > 4) {\n      throw new LibError('A MemoryImage can only have 1-4 channels.');\n    }\n\n    let channelOrder =\n      opt.channelOrder ??\n      (numChannels === 3\n        ? ChannelOrder.rgb\n        : numChannels === 4\n        ? ChannelOrder.rgba\n        : numChannels === 1\n        ? ChannelOrder.red\n        : ChannelOrder.grayAlpha);\n\n    if (numChannels === 1) {\n      // There is only one channel order\n      channelOrder = ChannelOrder.red;\n    } else if (numChannels === 2) {\n      // There is only one channel order\n      channelOrder = ChannelOrder.grayAlpha;\n    } else if (numChannels === 3) {\n      if (\n        channelOrder !== ChannelOrder.rgb &&\n        channelOrder !== ChannelOrder.bgr\n      ) {\n        // The user asked for a channel order that conflicts with the number\n        // of channels.\n        channelOrder = ChannelOrder.rgb;\n      }\n    } else if (numChannels === 4) {\n      if (\n        channelOrder !== ChannelOrder.bgra &&\n        channelOrder !== ChannelOrder.rgba &&\n        channelOrder !== ChannelOrder.abgr &&\n        channelOrder !== ChannelOrder.argb\n      ) {\n        // The user asked for a channel order that conflicts with the number\n        // of channels.\n        channelOrder = ChannelOrder.rgba;\n      }\n    }\n\n    image.initialize({\n      width: opt.width,\n      height: opt.height,\n      format: format,\n      numChannels: numChannels,\n      withPalette: withPalette,\n      paletteFormat: paletteFormat,\n      palette: opt.palette,\n      exifData: opt.exifData,\n      iccProfile: opt.iccProfile,\n    });\n\n    if (image.data !== undefined) {\n      const toBytes = image.data.toUint8Array();\n      const fromBytes = new Uint8Array(opt.bytes);\n\n      const rowStride =\n        opt.rowStride ?? opt.width * numChannels * FormatSize.get(format)!;\n      const dataStride = image.data.rowStride;\n      const stride = Math.min(rowStride, dataStride);\n\n      let dOff = 0;\n      let bOff = 0;\n      for (\n        let y = 0;\n        y < opt.height;\n        ++y, bOff += rowStride, dOff += dataStride\n      ) {\n        ArrayUtils.copyRange(fromBytes, bOff, bOff + stride, toBytes, dOff);\n      }\n\n      if (numChannels === 3 && channelOrder === ChannelOrder.bgr) {\n        for (const p of image) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n      } else if (numChannels === 4 && channelOrder === ChannelOrder.abgr) {\n        for (const p of image) {\n          const r = p.r;\n          const g = p.g;\n          const b = p.b;\n          const a = p.a;\n          p.r = a;\n          p.g = b;\n          p.b = g;\n          p.a = r;\n        }\n      } else if (numChannels === 4 && channelOrder === ChannelOrder.argb) {\n        for (const p of image) {\n          const r = p.r;\n          const g = p.g;\n          const b = p.b;\n          const a = p.a;\n          p.r = a;\n          p.g = r;\n          p.b = g;\n          p.a = b;\n        }\n      } else if (numChannels === 4 && channelOrder === ChannelOrder.bgra) {\n        for (const p of image) {\n          const r = p.r;\n          const g = p.g;\n          const b = p.b;\n          const a = p.a;\n          p.r = b;\n          p.g = g;\n          p.b = r;\n          p.a = a;\n        }\n      }\n    }\n    return image;\n  }\n\n  private initialize(opt: MemoryImageInitializeOptions): void {\n    const format = opt.format ?? Format.uint8;\n    const numChannels = opt.numChannels ?? 3;\n    const withPalette = opt.withPalette ?? false;\n    const paletteFormat = opt.paletteFormat ?? Format.uint8;\n\n    if (numChannels < 1 || numChannels > 4) {\n      throw new LibError(\n        `Invalid number of channels for image (${numChannels}). Must be between 1 and 4.`\n      );\n    }\n\n    this._iccProfile = opt.iccProfile;\n\n    if (opt.exifData !== undefined) {\n      this._exifData = opt.exifData.clone();\n    }\n\n    const palette =\n      opt.palette ??\n      (withPalette && this.supportsPalette\n        ? this.createPalette(paletteFormat, numChannels)\n        : undefined);\n\n    this.createImageData(opt.width, opt.height, format, numChannels, palette);\n  }\n\n  private createImageData(\n    width: number,\n    height: number,\n    format: Format,\n    numChannels: number,\n    palette?: Palette\n  ): void {\n    switch (format) {\n      case Format.uint1:\n        if (palette === undefined) {\n          this._data = new MemoryImageDataUint1(width, height, numChannels);\n        } else {\n          this._data = MemoryImageDataUint1.palette(width, height, palette);\n        }\n        break;\n      case Format.uint2:\n        if (palette === undefined) {\n          this._data = new MemoryImageDataUint2(width, height, numChannels);\n        } else {\n          this._data = MemoryImageDataUint2.palette(width, height, palette);\n        }\n        break;\n      case Format.uint4:\n        if (palette === undefined) {\n          this._data = new MemoryImageDataUint4(width, height, numChannels);\n        } else {\n          this._data = MemoryImageDataUint4.palette(width, height, palette);\n        }\n        break;\n      case Format.uint8:\n        if (palette === undefined) {\n          this._data = new MemoryImageDataUint8(width, height, numChannels);\n        } else {\n          this._data = MemoryImageDataUint8.palette(width, height, palette);\n        }\n        break;\n      case Format.uint16:\n        this._data = new MemoryImageDataUint16(width, height, numChannels);\n        break;\n      case Format.uint32:\n        this._data = new MemoryImageDataUint32(width, height, numChannels);\n        break;\n      case Format.int8:\n        this._data = new MemoryImageDataInt8(width, height, numChannels);\n        break;\n      case Format.int16:\n        this._data = new MemoryImageDataInt16(width, height, numChannels);\n        break;\n      case Format.int32:\n        this._data = new MemoryImageDataInt32(width, height, numChannels);\n        break;\n      case Format.float16:\n        this._data = new MemoryImageDataFloat16(width, height, numChannels);\n        break;\n      case Format.float32:\n        this._data = new MemoryImageDataFloat32(width, height, numChannels);\n        break;\n      case Format.float64:\n        this._data = new MemoryImageDataFloat64(width, height, numChannels);\n        break;\n    }\n  }\n\n  private createPalette(\n    paletteFormat: Format,\n    numChannels: number\n  ): Palette | undefined {\n    switch (paletteFormat) {\n      case Format.uint1:\n        return undefined;\n      case Format.uint2:\n        return undefined;\n      case Format.uint4:\n        return undefined;\n      case Format.uint8:\n        return new PaletteUint8(this.numPixelColors, numChannels);\n      case Format.uint16:\n        return new PaletteUint16(this.numPixelColors, numChannels);\n      case Format.uint32:\n        return new PaletteUint32(this.numPixelColors, numChannels);\n      case Format.int8:\n        return new PaletteInt8(this.numPixelColors, numChannels);\n      case Format.int16:\n        return new PaletteInt16(this.numPixelColors, numChannels);\n      case Format.int32:\n        return new PaletteInt32(this.numPixelColors, numChannels);\n      case Format.float16:\n        return new PaletteFloat16(this.numPixelColors, numChannels);\n      case Format.float32:\n        return new PaletteFloat32(this.numPixelColors, numChannels);\n      case Format.float64:\n        return new PaletteFloat64(this.numPixelColors, numChannels);\n    }\n    throw new LibError('Unknown palette format.');\n  }\n\n  /**\n   * Add a frame to the animation of this MemoryImage.\n   */\n  public addFrame(image?: MemoryImage): MemoryImage {\n    const img = image ?? MemoryImage.from(this, true, true);\n    img._frameIndex = this._frames.length;\n    if (this._frames[this._frames.length - 1] !== img) {\n      this._frames.push(img);\n    }\n    return img;\n  }\n\n  /**\n   * Get a frame from this image. If the MemoryImage is not animated, this\n   * MemoryImage will be returned; otherwise the particular frame MemoryImage will\n   * be returned.\n   */\n  public getFrame(index: number): MemoryImage {\n    return this._frames[index];\n  }\n\n  /**\n   * Create a copy of this image.\n   */\n  public clone(opt?: MemoryImageCloneOptions): MemoryImage {\n    const skipAnimation = opt?.skipAnimation ?? false;\n    const skipPixels = opt?.skipPixels ?? false;\n    return MemoryImage.from(this, skipAnimation, skipPixels);\n  }\n\n  public hasExtraChannel(name: string): boolean {\n    return this._extraChannels !== undefined && this._extraChannels.has(name);\n  }\n\n  public getExtraChannel(name: string): MemoryImageData | undefined {\n    return this._extraChannels !== undefined\n      ? this._extraChannels.get(name)\n      : undefined;\n  }\n\n  public setExtraChannel(name: string, data?: MemoryImageData): void {\n    if (this._extraChannels === undefined && data === undefined) {\n      return;\n    }\n\n    this._extraChannels ??= new Map<string, MemoryImageData>();\n\n    if (data === undefined) {\n      this._extraChannels.delete(name);\n    } else {\n      this._extraChannels.set(name, data);\n    }\n\n    if (this._extraChannels.size === 0) {\n      this._extraChannels = undefined;\n    }\n  }\n\n  /**\n   * Returns a pixel iterator for iterating over a rectangular range of pixels\n   * in the image.\n   */\n  public getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel> {\n    return this.data!.getRange(x, y, width, height);\n  }\n\n  /**\n   * Get a Uint8Array view of the image storage data.\n   */\n  public toUint8Array(): Uint8Array {\n    return (\n      this._data?.toUint8Array() ??\n      (this.buffer !== undefined\n        ? new Uint8Array(this.buffer)\n        : new Uint8Array())\n    );\n  }\n\n  /**\n   * Similar to **toUint8Array**, but will convert the channels of the image pixels\n   * to the given **order**. If that happens, the returned bytes will be a copy\n   * and not a direct view of the image data.\n   */\n  public getBytes(order?: ChannelOrder): Uint8Array {\n    return this._data?.getBytes(order) ?? this.toUint8Array();\n  }\n\n  /**\n   * Remap the color channels to the given **order**. Normally MemoryImage color\n   * channels are stored in rgba order for 4 channel images, and\n   * rgb order for 3 channel images. This method lets you re-arrange the\n   * color channels in-place without needing to clone the image for preparing\n   * image data for external usage that requires alternative channel ordering.\n   */\n  public remapChannels(order: ChannelOrder): void {\n    if (this.numChannels === 4) {\n      if (\n        order === ChannelOrder.abgr ||\n        order === ChannelOrder.argb ||\n        order === ChannelOrder.bgra\n      ) {\n        if (order === ChannelOrder.abgr) {\n          for (const p of this) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = b;\n            p.b = g;\n            p.a = r;\n          }\n        } else if (order === ChannelOrder.argb) {\n          for (const p of this) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = a;\n            p.g = r;\n            p.b = g;\n            p.a = b;\n          }\n        } else if (order === ChannelOrder.bgra) {\n          for (const p of this) {\n            const r = p.r;\n            const g = p.g;\n            const b = p.b;\n            const a = p.a;\n            p.r = b;\n            p.g = g;\n            p.b = r;\n            p.a = a;\n          }\n        }\n      }\n    } else if (this.numChannels === 3) {\n      if (order === ChannelOrder.bgr) {\n        for (const p of this) {\n          const r = p.r;\n          p.r = p.b;\n          p.b = r;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns true if the given pixel coordinates is within the dimensions\n   * of the image.\n   */\n  public isBoundsSafe(x: number, y: number): boolean {\n    return x >= 0 && y >= 0 && x < this.width && y < this.height;\n  }\n\n  /**\n   * Create a Color object with the format and number of channels of the\n   * image.\n   */\n  public getColor(r: number, g: number, b: number, a?: number): Color {\n    return this._data?.getColor(r, g, b, a) ?? new ColorUint8(0);\n  }\n\n  /**\n   * Return the Pixel at the given coordinates **x**,**y**. If **pixel** is provided,\n   * it will be updated and returned rather than allocating a new Pixel.\n   */\n  public getPixel(x: number, y: number, pixel?: Pixel): Pixel {\n    return this._data?.getPixel(x, y, pixel) ?? UndefinedPixel;\n  }\n\n  /**\n   * Get the pixel from the given **x**, **y** coordinate. If the pixel coordinates\n   * are out of bounds, PixelUndefined is returned.\n   */\n  public getPixelSafe(x: number, y: number, pixel?: Pixel): Pixel {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return UndefinedPixel;\n    }\n    return this.getPixel(x, y, pixel);\n  }\n\n  /**\n   * Get the pixel from the given **x**, **y** coordinate. If the pixel coordinates\n   * are out of range of the image, they will be clamped to the resolution.\n   */\n  public getPixelClamped(x: number, y: number, pixel?: Pixel): Pixel {\n    const _x = MathUtils.clamp(x, 0, this.width - 1);\n    const _y = MathUtils.clamp(y, 0, this.height - 1);\n    return this.getPixel(_x, _y, pixel);\n  }\n\n  /**\n   * Get the pixel using the given **interpolation** type for non-integer pixel\n   * coordinates.\n   */\n  public getPixelInterpolate(\n    fx: number,\n    fy: number,\n    interpolation = Interpolation.linear\n  ): Color {\n    switch (interpolation) {\n      case Interpolation.nearest:\n        return this.getPixelSafe(Math.trunc(fx), Math.trunc(fy));\n      case Interpolation.linear:\n      case Interpolation.average:\n        return this.getPixelLinear(fx, fy);\n      case Interpolation.cubic:\n        return this.getPixelCubic(fx, fy);\n    }\n    throw new LibError('Unknown Interpolation mode.');\n  }\n\n  /**\n   * Get the pixel using linear interpolation for non-integer pixel\n   * coordinates.\n   */\n  public getPixelLinear(fx: number, fy: number): Color {\n    const x = Math.trunc(fx) - (fx >= 0 ? 0 : 1);\n    const nx = x + 1;\n    const y = Math.trunc(fy) - (fy >= 0 ? 0 : 1);\n    const ny = y + 1;\n    const dx = fx - x;\n    const dy = fy - y;\n\n    const linear = (\n      icc: number,\n      inc: number,\n      icn: number,\n      inn: number\n    ): number => {\n      return (\n        icc + dx * (inc - icc + dy * (icc + inn - icn - inc)) + dy * (icn - icc)\n      );\n    };\n\n    const icc = this.getPixelSafe(x, y);\n    const icn = ny >= this.height ? icc : this.getPixelSafe(x, ny);\n    const inc = nx >= this.width ? icc : this.getPixelSafe(nx, y);\n    const inn =\n      nx >= this.width || ny >= this.height ? icc : this.getPixelSafe(nx, ny);\n\n    return this.getColor(\n      linear(icc.r, inc.r, icn.r, inn.r),\n      linear(icc.g, inc.g, icn.g, inn.g),\n      linear(icc.b, inc.b, icn.b, inn.b),\n      linear(icc.a, inc.a, icn.a, inn.a)\n    );\n  }\n\n  /**\n   * Get the pixel using cubic interpolation for non-integer pixel\n   * coordinates.\n   */\n  public getPixelCubic(fx: number, fy: number): Color {\n    const x = Math.trunc(fx) - (fx >= 0 ? 0 : 1);\n    const px = x - 1;\n    const nx = x + 1;\n    const ax = x + 2;\n    const y = Math.trunc(fy) - (fy >= 0 ? 0 : 1);\n    const py = y - 1;\n    const ny = y + 1;\n    const ay = y + 2;\n\n    const dx = fx - x;\n    const dy = fy - y;\n\n    const cubic = (\n      dx: number,\n      ipp: number,\n      icp: number,\n      inp: number,\n      iap: number\n    ): number => {\n      return (\n        icp +\n        0.5 *\n          (dx * (-ipp + inp) +\n            dx * dx * (2 * ipp - 5 * icp + 4 * inp - iap) +\n            dx * dx * dx * (-ipp + 3 * icp - 3 * inp + iap))\n      );\n    };\n\n    const icc = this.getPixelSafe(x, y);\n\n    const ipp = px < 0 || py < 0 ? icc : this.getPixelSafe(px, py);\n    const icp = px < 0 ? icc : this.getPixelSafe(x, py);\n    const inp = py < 0 || nx >= this.width ? icc : this.getPixelSafe(nx, py);\n    const iap = ax >= this.width || py < 0 ? icc : this.getPixelSafe(ax, py);\n\n    const ip0 = cubic(dx, ipp.r, icp.r, inp.r, iap.r);\n    const ip1 = cubic(dx, ipp.g, icp.g, inp.g, iap.g);\n    const ip2 = cubic(dx, ipp.b, icp.b, inp.b, iap.b);\n    const ip3 = cubic(dx, ipp.a, icp.a, inp.a, iap.a);\n\n    const ipc = px < 0 ? icc : this.getPixelSafe(px, y);\n    const inc = nx >= this.width ? icc : this.getPixelSafe(nx, y);\n    const iac = ax >= this.width ? icc : this.getPixelSafe(ax, y);\n\n    const ic0 = cubic(dx, ipc.r, icc.r, inc.r, iac.r);\n    const ic1 = cubic(dx, ipc.g, icc.g, inc.g, iac.g);\n    const ic2 = cubic(dx, ipc.b, icc.b, inc.b, iac.b);\n    const ic3 = cubic(dx, ipc.a, icc.a, inc.a, iac.a);\n\n    const ipn = px < 0 || ny >= this.height ? icc : this.getPixelSafe(px, ny);\n    const icn = ny >= this.height ? icc : this.getPixelSafe(x, ny);\n    const inn =\n      nx >= this.width || ny >= this.height ? icc : this.getPixelSafe(nx, ny);\n    const ian =\n      ax >= this.width || ny >= this.height ? icc : this.getPixelSafe(ax, ny);\n\n    const in0 = cubic(dx, ipn.r, icn.r, inn.r, ian.r);\n    const in1 = cubic(dx, ipn.g, icn.g, inn.g, ian.g);\n    const in2 = cubic(dx, ipn.b, icn.b, inn.b, ian.b);\n    const in3 = cubic(dx, ipn.a, icn.a, inn.a, ian.a);\n\n    const ipa = px < 0 || ay >= this.height ? icc : this.getPixelSafe(px, ay);\n    const ica = ay >= this.height ? icc : this.getPixelSafe(x, ay);\n    const ina =\n      nx >= this.width || ay >= this.height ? icc : this.getPixelSafe(nx, ay);\n    const iaa =\n      ax >= this.width || ay >= this.height ? icc : this.getPixelSafe(ax, ay);\n\n    const ia0 = cubic(dx, ipa.r, ica.r, ina.r, iaa.r);\n    const ia1 = cubic(dx, ipa.g, ica.g, ina.g, iaa.g);\n    const ia2 = cubic(dx, ipa.b, ica.b, ina.b, iaa.b);\n    const ia3 = cubic(dx, ipa.a, ica.a, ina.a, iaa.a);\n\n    const c0 = cubic(dy, ip0, ic0, in0, ia0);\n    const c1 = cubic(dy, ip1, ic1, in1, ia1);\n    const c2 = cubic(dy, ip2, ic2, in2, ia2);\n    const c3 = cubic(dy, ip3, ic3, in3, ia3);\n\n    return this.getColor(\n      Math.trunc(c0),\n      Math.trunc(c1),\n      Math.trunc(c2),\n      Math.trunc(c3)\n    );\n  }\n\n  /**\n   * Set the color of the pixel at the given coordinates to the color of the\n   * given Color **c**.\n   */\n  public setPixel(x: number, y: number, c: Color | Pixel): void {\n    // TODO: improve the class check for being a Pixel\n    if ('image' in c && 'index' in c) {\n      if (c.image.hasPalette) {\n        if (this.hasPalette) {\n          this.setPixelIndex(x, y, c.index);\n          return;\n        }\n      }\n    }\n    this._data?.setPixelRgba(x, y, c.r, c.g, c.b, c.a);\n  }\n\n  /**\n   * Set the index value for palette images, or the red channel otherwise.\n   */\n  public setPixelIndex(x: number, y: number, i: number): void {\n    this._data?.setPixelR(x, y, i);\n  }\n\n  /**\n   * Set the red (or index) color channel of a pixel.\n   */\n  public setPixelR(x: number, y: number, i: number): void {\n    this._data?.setPixelR(x, y, i);\n  }\n\n  /**\n   * Set the color of the Pixel at the given coordinates to the given\n   * color values **r**, **g**, **b**.\n   */\n  public setPixelRgb(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number\n  ): void {\n    this._data?.setPixelRgb(x, y, r, g, b);\n  }\n\n  /**\n   * Set the color of the Pixel at the given coordinates to the given\n   * color values **r**, **g**, **b**, and **a**.\n   */\n  public setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void {\n    this._data?.setPixelRgba(x, y, r, g, b, a);\n  }\n\n  /**\n   * Set all pixels in the image to the given **color**. If no color is provided\n   * the image will be initialized to 0.\n   */\n  public clear(color?: Color): void {\n    this._data?.clear(color);\n  }\n\n  /**\n   * Convert this image to a new **format** or number of channels, **numChannels**.\n   * If the new number of channels is 4 and the current image does\n   * not have an alpha channel, then the given **alpha** value will be used\n   * to set the new alpha channel. If **alpha** is not provided, then the\n   * **maxChannelValue** will be used to set the alpha. If **withPalette** is\n   * true, and to target format and **numChannels** has fewer than 256 colors,\n   * then the new image will be converted to use a palette.\n   */\n  public convert(opt: MemoryImageConvertOptions): MemoryImage {\n    const format = opt.format ?? this.format;\n    const numChannels = opt.numChannels ?? this.numChannels;\n    const alpha = opt.alpha ?? FormatMaxValue.get(format);\n    let withPalette = opt.withPalette ?? false;\n    const skipAnimation = opt.skipAnimation ?? false;\n\n    if (\n      (withPalette &&\n        (numChannels >= 4 ||\n          !(\n            format === Format.uint1 ||\n            format === Format.uint2 ||\n            format === Format.uint4 ||\n            (format === Format.uint8 && numChannels === 1)\n          ))) ||\n      (format < Format.uint8 && this.format >= Format.uint8)\n    ) {\n      withPalette = false;\n    }\n\n    if (\n      format === this.format &&\n      numChannels === this.numChannels &&\n      ((!withPalette && this.palette === undefined) ||\n        (withPalette && this.palette !== undefined))\n    ) {\n      // Same format and number of channels\n      return MemoryImage.from(this);\n    }\n\n    let firstFrame: MemoryImage | undefined = undefined;\n    for (const frame of this._frames) {\n      const newImage = new MemoryImage({\n        width: frame.width,\n        height: frame.height,\n        format: format,\n        numChannels: numChannels,\n        withPalette: withPalette,\n        exifData: frame._exifData?.clone(),\n        iccProfile: frame._iccProfile?.clone(),\n        backgroundColor: frame._backgroundColor?.clone(),\n        frameType: frame._frameType,\n        loopCount: frame._loopCount,\n        frameDuration: frame._frameDuration,\n        textData:\n          frame._textData !== undefined\n            ? new Map<string, string>(frame.textData)\n            : undefined,\n      });\n\n      if (firstFrame !== undefined) {\n        firstFrame.addFrame(newImage);\n      } else {\n        firstFrame = newImage;\n      }\n\n      const pal = newImage.palette;\n      const f = newImage.palette?.format ?? format;\n      if (pal !== undefined) {\n        const usedColors = new Map<number, number>();\n        let numColors = 0;\n        const op = frame.getPixel(0, 0);\n        let c: Color | undefined = undefined;\n        for (const np of newImage) {\n          const nr = Math.floor(op.rNormalized * 255);\n          const ng = Math.floor(op.gNormalized * 255);\n          const nb = Math.floor(op.bNormalized * 255);\n          const h = ColorUtils.rgbaToUint32(nr, ng, nb, 0);\n          if (usedColors.has(h)) {\n            np.index = usedColors.get(h)!;\n          } else {\n            usedColors.set(h, numColors);\n            np.index = numColors;\n            c = ColorUtils.convertColor({\n              from: op,\n              to: c,\n              format: f,\n              numChannels: numChannels,\n              alpha: alpha,\n            });\n            pal.setRgb(numColors, c.r, c.g, c.b);\n            numColors++;\n          }\n          op.next();\n        }\n      } else {\n        const op = frame.getPixel(0, 0);\n        for (const np of newImage) {\n          ColorUtils.convertColor({\n            from: op,\n            to: np,\n            alpha: alpha,\n          });\n          op.next();\n        }\n      }\n\n      if (skipAnimation) {\n        break;\n      }\n    }\n\n    return firstFrame!;\n  }\n\n  /**\n   * Add text metadata to the image.\n   */\n  public addTextData(data: Map<string, string>): void {\n    this._textData ??= new Map<string, string>();\n    for (const [key, value] of data) {\n      this._textData.set(key, value);\n    }\n  }\n\n  public getColorExtremes(): MemoryImageColorExtremes {\n    let first = true;\n    let min = 0;\n    let max = 0;\n    for (const p of this) {\n      for (let i = 0; i < p.length; i++) {\n        const c = p.getChannel(i);\n        if (first || c < min) {\n          min = c;\n        }\n        if (first || c > max) {\n          max = c;\n        }\n      }\n      first = false;\n    }\n    return {\n      min: min,\n      max: max,\n    };\n  }\n\n  public toString(): string {\n    return `${this.constructor.name} (w: ${this.width}, h: ${this.height}, f: ${\n      Format[this.format]\n    }, ch: ${this.numChannels})`;\n  }\n\n  /**\n   * Returns a pixel iterator for iterating over all of the pixels in the\n   * image.\n   */\n  public [Symbol.iterator](): Iterator<Pixel> {\n    return this._data !== undefined\n      ? this._data[Symbol.iterator]()\n      : {\n          next: () =>\n            <IteratorResult<Pixel>>{\n              done: true,\n              value: UndefinedPixel,\n            },\n        };\n  }\n}\n", "/** @format */\n\nimport { Color } from '../color/color';\nimport { ColorRgb8 } from '../color/color-rgb8';\nimport { ColorRgba8 } from '../color/color-rgba8';\nimport { MathUtils } from '../common/math-utils';\nimport { MemoryImage } from './image';\nimport { PaletteUint32 } from './palette-uint32';\nimport { PaletteUint8 } from './palette-uint8';\nimport { Pixel } from './pixel';\nimport { Quantizer } from './quantizer';\n\n/**\n * Compute a color map with a given number of colors that best represents\n * the given image.\n */\nexport class NeuralQuantizer implements Quantizer {\n  // No. of learning cycles\n  private static readonly _numCycles: number = 100;\n\n  // Alpha starts at 1\n  private static readonly _alphaBiasShift: number = 10;\n\n  // Biased by 10 bits\n  private static readonly _initAlpha: number =\n    1 << NeuralQuantizer._alphaBiasShift;\n\n  private static readonly _radiusBiasShift: number = 8;\n\n  private static readonly _radiusBias: number =\n    1 << NeuralQuantizer._radiusBiasShift;\n\n  private static readonly _alphaRadiusBiasShift: number =\n    NeuralQuantizer._alphaBiasShift + NeuralQuantizer._radiusBiasShift;\n\n  private static readonly alphaRadiusBias: number =\n    1 << NeuralQuantizer._alphaRadiusBiasShift;\n\n  // Factor of 1/30 each cycle\n  private static readonly _radiusDec: number = 30;\n\n  private static readonly _gamma: number = 1024;\n\n  private static readonly _beta: number = 1 / 1024;\n\n  private static readonly _betaGamma: number =\n    NeuralQuantizer._beta * NeuralQuantizer._gamma;\n\n  // Four primes near 500 - assume no image has a length so large\n  // that it is divisible by all four primes\n\n  private static readonly _prime1 = 499;\n\n  private static readonly _prime2 = 491;\n\n  private static readonly _prime3 = 487;\n\n  private static readonly _prime4 = 503;\n\n  private static readonly _smallImageBytes = 3 * NeuralQuantizer._prime4;\n\n  private readonly _netIndex = new Int32Array(256);\n\n  private _samplingFactor: number;\n\n  // Number of colors used\n  private _netSize = 16;\n\n  // Number of reserved colors used\n  private _specials = 3;\n\n  // Reserved background color\n  private _bgColor = 0;\n\n  private _cutNetSize = 0;\n\n  private _maxNetPos = 0;\n\n  // For 256 cols, radius starts at 32\n  private _initRadius = 0;\n\n  private _initBiasRadius = 0;\n\n  private _radiusPower!: Int32Array;\n\n  /**\n   * The network itself\n   */\n  private _network!: number[];\n\n  private _paletteInternal!: PaletteUint32;\n\n  private _palette!: PaletteUint8;\n  public get palette(): PaletteUint8 {\n    return this._palette;\n  }\n\n  /**\n   * Bias array for learning\n   */\n  private _bias!: number[];\n\n  // Freq array for learning\n  private _freq!: number[];\n\n  /**\n   * How many colors are in the **palette**?\n   */\n  public get numColors(): number {\n    return this._netSize;\n  }\n\n  /**\n   * 10 is a reasonable **samplingFactor** according to\n   * https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/.\n   */\n  constructor(image: MemoryImage, numberOfColors = 256, samplingFactor = 10) {\n    this._samplingFactor = samplingFactor;\n    this.initialize(numberOfColors);\n    this.addImage(image);\n  }\n\n  private initialize(numberOfColors: number): void {\n    // Number of colours used\n    this._netSize = Math.max(numberOfColors, 4);\n    this._cutNetSize = this._netSize - this._specials;\n    this._maxNetPos = this._netSize - 1;\n    // For 256 cols, radius starts at 32\n    this._initRadius = Math.floor(this._netSize / 8);\n    this._initBiasRadius = this._initRadius * NeuralQuantizer._radiusBias;\n    this._paletteInternal = new PaletteUint32(256, 4);\n    this._palette = new PaletteUint8(256, 3);\n    // Number of reserved colors used\n    this._specials = 3;\n    this._bgColor = this._specials - 1;\n    this._radiusPower = new Int32Array(this._netSize >> 3);\n\n    this._network = new Array<number>(this._netSize * 3).fill(0);\n    this._bias = new Array<number>(this._netSize).fill(0);\n    this._freq = new Array<number>(this._netSize).fill(0);\n\n    // Black\n    this._network[0] = 0.0;\n    this._network[1] = 0.0;\n    this._network[2] = 0.0;\n\n    // White\n    this._network[3] = 255.0;\n    this._network[4] = 255.0;\n    this._network[5] = 255.0;\n\n    // RESERVED bgColor\n    // background\n    const f = 1 / this._netSize;\n    for (let i = 0; i < this._specials; ++i) {\n      this._freq[i] = f;\n      this._bias[i] = 0.0;\n    }\n\n    for (\n      let i = this._specials, p = this._specials * 3;\n      i < this._netSize;\n      ++i\n    ) {\n      this._network[p++] = (255 * (i - this._specials)) / this._cutNetSize;\n      this._network[p++] = (255 * (i - this._specials)) / this._cutNetSize;\n      this._network[p++] = (255 * (i - this._specials)) / this._cutNetSize;\n\n      this._freq[i] = f;\n      this._bias[i] = 0.0;\n    }\n  }\n\n  private updateRadiusPower(rad: number, alpha: number): void {\n    for (let i = 0; i < rad; i++) {\n      this._radiusPower[i] = Math.trunc(\n        alpha *\n          (((rad * rad - i * i) * NeuralQuantizer._radiusBias) / (rad * rad))\n      );\n    }\n  }\n\n  private specialFind(b: number, g: number, r: number): number {\n    for (let i = 0, p = 0; i < this._specials; i++) {\n      if (\n        this._network[p++] === b &&\n        this._network[p++] === g &&\n        this._network[p++] === r\n      ) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Search for biased BGR values\n   */\n  private contest(b: number, g: number, r: number): number {\n    // Finds closest neuron (min dist) and updates freq\n    // finds best neuron (min dist-bias) and returns position\n    // for frequently chosen neurons, freq[i] is high and bias[i] is negative\n    // bias[i] = gamma*((1/netSize)-freq[i])\n\n    let bestD = 1.0e30;\n    let bestBiasDist = bestD;\n    let bestPos = -1;\n    let bestBiasPos = bestPos;\n\n    for (\n      let i = this._specials, p = this._specials * 3;\n      i < this._netSize;\n      i++\n    ) {\n      let dist = this._network[p++] - b;\n      if (dist < 0) {\n        dist = -dist;\n      }\n      let a = this._network[p++] - g;\n      if (a < 0) {\n        a = -a;\n      }\n      dist += a;\n      a = this._network[p++] - r;\n      if (a < 0) {\n        a = -a;\n      }\n      dist += a;\n      if (dist < bestD) {\n        bestD = dist;\n        bestPos = i;\n      }\n\n      const biasDist = dist - this._bias[i];\n      if (biasDist < bestBiasDist) {\n        bestBiasDist = biasDist;\n        bestBiasPos = i;\n      }\n      this._freq[i] -= NeuralQuantizer._beta * this._freq[i];\n      this._bias[i] += NeuralQuantizer._betaGamma * this._freq[i];\n    }\n\n    this._freq[bestPos] += NeuralQuantizer._beta;\n    this._bias[bestPos] -= NeuralQuantizer._betaGamma;\n    return bestBiasPos;\n  }\n\n  private alterSingle(\n    alpha: number,\n    i: number,\n    b: number,\n    g: number,\n    r: number\n  ): void {\n    // Move neuron i towards biased (b,g,r) by factor alpha\n    const p = i * 3;\n    this._network[p] -= alpha * (this._network[p] - b);\n    this._network[p + 1] -= alpha * (this._network[p + 1] - g);\n    this._network[p + 2] -= alpha * (this._network[p + 2] - r);\n  }\n\n  private alterNeighbors(\n    _: number,\n    rad: number,\n    i: number,\n    b: number,\n    g: number,\n    r: number\n  ): void {\n    let lo = i - rad;\n    if (lo < this._specials - 1) {\n      lo = this._specials - 1;\n    }\n\n    let hi = i + rad;\n    if (hi > this._netSize) {\n      hi = this._netSize;\n    }\n\n    let j = i + 1;\n    let k = i - 1;\n    let m = 1;\n    while (j < hi || k > lo) {\n      const a = this._radiusPower[m++];\n      if (j < hi) {\n        const p = j * 3;\n        this._network[p] -=\n          (a * (this._network[p] - b)) / NeuralQuantizer.alphaRadiusBias;\n        this._network[p + 1] -=\n          (a * (this._network[p + 1] - g)) / NeuralQuantizer.alphaRadiusBias;\n        this._network[p + 2] -=\n          (a * (this._network[p + 2] - r)) / NeuralQuantizer.alphaRadiusBias;\n        j++;\n      }\n      if (k > lo) {\n        const p = k * 3;\n        this._network[p] -=\n          (a * (this._network[p] - b)) / NeuralQuantizer.alphaRadiusBias;\n        this._network[p + 1] -=\n          (a * (this._network[p + 1] - g)) / NeuralQuantizer.alphaRadiusBias;\n        this._network[p + 2] -=\n          (a * (this._network[p + 2] - r)) / NeuralQuantizer.alphaRadiusBias;\n        k--;\n      }\n    }\n  }\n\n  private learn(image: MemoryImage): void {\n    let biasRadius = this._initBiasRadius;\n    const alphaDec = 30 + Math.floor((this._samplingFactor - 1) / 3);\n    const lengthCount = image.width * image.height;\n    const samplePixels = Math.floor(lengthCount / this._samplingFactor);\n    let delta = Math.max(\n      Math.floor(samplePixels / NeuralQuantizer._numCycles),\n      1\n    );\n    let alpha = NeuralQuantizer._initAlpha;\n\n    if (delta === 0) {\n      delta = 1;\n    }\n\n    let rad = biasRadius >> NeuralQuantizer._radiusBiasShift;\n    if (rad <= 1) {\n      rad = 0;\n    }\n\n    this.updateRadiusPower(rad, alpha);\n\n    let step = 0;\n    let pos = 0;\n    if (lengthCount < NeuralQuantizer._smallImageBytes) {\n      this._samplingFactor = 1;\n      step = 1;\n    } else if (lengthCount % NeuralQuantizer._prime1 !== 0) {\n      step = NeuralQuantizer._prime1;\n    } else {\n      if (lengthCount % NeuralQuantizer._prime2 !== 0) {\n        step = NeuralQuantizer._prime2;\n      } else {\n        if (lengthCount % NeuralQuantizer._prime3 !== 0) {\n          step = NeuralQuantizer._prime3;\n        } else {\n          step = NeuralQuantizer._prime4;\n        }\n      }\n    }\n\n    const w = image.width;\n    const h = image.height;\n\n    let x = 0;\n    let y = 0;\n    let i = 0;\n    while (i < samplePixels) {\n      const p = image.getPixel(x, y);\n\n      const red = p.r;\n      const green = p.g;\n      const blue = p.b;\n\n      if (i === 0) {\n        // Remember background colour\n        this._network[this._bgColor * 3] = blue;\n        this._network[this._bgColor * 3 + 1] = green;\n        this._network[this._bgColor * 3 + 2] = red;\n      }\n\n      let j = this.specialFind(blue, green, red);\n      j = j < 0 ? this.contest(blue, green, red) : j;\n\n      if (j >= this._specials) {\n        // Don't learn for specials\n        const a = Number(alpha) / NeuralQuantizer._initAlpha;\n        this.alterSingle(a, j, blue, green, red);\n        if (rad > 0) {\n          // Alter neighbours\n          this.alterNeighbors(a, rad, j, blue, green, red);\n        }\n      }\n\n      pos += step;\n      x += step;\n      while (x > w) {\n        x -= w;\n        y++;\n      }\n      while (pos >= lengthCount) {\n        pos -= lengthCount;\n        y -= h;\n      }\n\n      i++;\n      if (i % delta === 0) {\n        alpha -= Math.floor(alpha / alphaDec);\n        biasRadius -= Math.floor(biasRadius / NeuralQuantizer._radiusDec);\n        rad = biasRadius >> NeuralQuantizer._radiusBiasShift;\n        if (rad <= 1) {\n          rad = 0;\n        }\n        this.updateRadiusPower(rad, alpha);\n      }\n    }\n  }\n\n  private fix(): void {\n    for (let i = 0, p = 0; i < this._netSize; i++) {\n      for (let j = 0; j < 3; ++j, ++p) {\n        const x = MathUtils.clampInt255(Math.trunc(0.5 + this._network[p]));\n        this._paletteInternal.set(i, j, x);\n      }\n      this._paletteInternal.set(i, 3, i);\n    }\n  }\n\n  /**\n   * Insertion sort of network and building of netindex[0..255]\n   */\n  private inxBuild(): void {\n    let previousColor = 0;\n    let startPos = 0;\n\n    for (let i = 0; i < this._netSize; i++) {\n      let smallPos = i;\n      // index on g\n      let smallVal = this._paletteInternal.get(i, 1);\n\n      // find smallest in i..netSize-1\n      for (let j = i + 1; j < this._netSize; j++) {\n        if (this._paletteInternal.get(j, 1) < smallVal) {\n          smallPos = j;\n          // index on g\n          smallVal = this._paletteInternal.get(j, 1);\n        }\n      }\n\n      const p = i;\n      const q = smallPos;\n\n      // swap p (i) and q (smallPos) entries\n      if (i !== smallPos) {\n        let j = this._paletteInternal.get(q, 0);\n        this._paletteInternal.set(q, 0, this._paletteInternal.get(p, 0));\n        this._paletteInternal.set(p, 0, j);\n\n        j = this._paletteInternal.get(q, 1);\n        this._paletteInternal.set(q, 1, this._paletteInternal.get(p, 1));\n        this._paletteInternal.set(p, 1, j);\n\n        j = this._paletteInternal.get(q, 2);\n        this._paletteInternal.set(q, 2, this._paletteInternal.get(p, 2));\n        this._paletteInternal.set(p, 2, j);\n\n        j = this._paletteInternal.get(q, 3);\n        this._paletteInternal.set(q, 3, this._paletteInternal.get(p, 3));\n        this._paletteInternal.set(p, 3, j);\n      }\n\n      // smallVal entry is now in position i\n      if (smallVal !== previousColor) {\n        this._netIndex[previousColor] = (startPos + i) >> 1;\n        for (let j = previousColor + 1; j < smallVal; j++) {\n          this._netIndex[j] = i;\n        }\n        previousColor = Math.trunc(smallVal);\n        startPos = i;\n      }\n    }\n\n    this._netIndex[previousColor] = (startPos + this._maxNetPos) >> 1;\n    for (let j = previousColor + 1; j < 256; j++) {\n      // really 256\n      this._netIndex[j] = this._maxNetPos;\n    }\n  }\n\n  private copyPalette(): void {\n    for (let i = 0; i < this._netSize; ++i) {\n      this._palette.setRgb(\n        i,\n        Math.abs(this._paletteInternal.get(i, 2)),\n        Math.abs(this._paletteInternal.get(i, 1)),\n        Math.abs(this._paletteInternal.get(i, 0))\n      );\n    }\n  }\n\n  /**\n   * Search for BGR values 0..255 and return color index\n   */\n  private inxSearch(b: number, g: number, r: number): number {\n    // Biggest possible dist is 256*3\n    let bestD = 1000;\n    let best = -1;\n    // Index on g\n    let i = this._netIndex[g];\n    // Start at netIndex[g] and work outwards\n    let j = i - 1;\n\n    while (i < this._netSize || j >= 0) {\n      if (i < this._netSize) {\n        // Inx key\n        let dist = this._paletteInternal.get(i, 1) - g;\n        if (dist >= bestD) {\n          // Stop iter\n          i = this._netSize;\n        } else {\n          if (dist < 0) {\n            dist = -dist;\n          }\n          let a = this._paletteInternal.get(i, 0) - b;\n          if (a < 0) {\n            a = -a;\n          }\n          dist += a;\n          if (dist < bestD) {\n            a = this._paletteInternal.get(i, 2) - r;\n            if (a < 0) {\n              a = -a;\n            }\n            dist += a;\n            if (dist < bestD) {\n              bestD = Math.trunc(dist);\n              best = i;\n            }\n          }\n          i++;\n        }\n      }\n\n      if (j >= 0) {\n        const p = j * 4;\n        // Inx key - reverse dif\n        let dist = g - this._paletteInternal.get(j, 1);\n        if (dist >= bestD) {\n          // Stop iter\n          j = -1;\n        } else {\n          if (dist < 0) {\n            dist = -dist;\n          }\n          let a = this._paletteInternal.get(j, 0) - b;\n          if (a < 0) {\n            a = -a;\n          }\n          dist += a;\n          if (dist < bestD) {\n            a = this._paletteInternal.get(j, 2) - r;\n            if (a < 0) {\n              a = -a;\n            }\n            dist += a;\n            if (dist < bestD) {\n              bestD = Math.trunc(dist);\n              best = j;\n            }\n          }\n          j--;\n        }\n      }\n    }\n    return best;\n  }\n\n  /**\n   * Find the index of the closest color to **c** in the **palette**.\n   */\n  public getColorIndex(c: Color): number {\n    const r = Math.trunc(c.r);\n    const g = Math.trunc(c.g);\n    const b = Math.trunc(c.b);\n    return this.inxSearch(b, g, r);\n  }\n\n  /**\n   * Find the index of the closest color to **r**,**g**,**b** in the **palette**.\n   */\n  public getColorIndexRgb(r: number, g: number, b: number): number {\n    return this.inxSearch(b, g, r);\n  }\n\n  /**\n   * Find the color closest to **c** in the **palette**.\n   */\n  public getQuantizedColor(c: Color): Color {\n    const i = this.getColorIndex(c);\n    const out =\n      c.length === 4 ? new ColorRgba8(0, 0, 0, 255) : new ColorRgb8(0, 0, 0);\n    out.r = this.palette.get(i, 0);\n    out.g = this.palette.get(i, 1);\n    out.b = this.palette.get(i, 2);\n    if (c.length === 4) {\n      out.a = c.a;\n    }\n    return out;\n  }\n\n  /**\n   * Convert the **image** to a palette image.\n   */\n  public getIndexImage(image: MemoryImage): MemoryImage {\n    const target = new MemoryImage({\n      width: image.width,\n      height: image.height,\n      numChannels: 1,\n      palette: this.palette,\n    });\n\n    const imageIt = image[Symbol.iterator]();\n    const targetIt = target[Symbol.iterator]();\n    let imageItRes: IteratorResult<Pixel> | undefined = undefined;\n    let targetItRes: IteratorResult<Pixel> | undefined = undefined;\n    while (\n      (((imageItRes = imageIt.next()), (targetItRes = targetIt.next())),\n      !imageItRes.done && !targetItRes.done)\n    ) {\n      const t = targetItRes.value;\n      t.setChannel(0, this.getColorIndex(imageItRes.value));\n    }\n\n    return target;\n  }\n\n  /**\n   * Add an image to the quantized color table.\n   */\n  public addImage(image: MemoryImage): void {\n    this.learn(image);\n    this.fix();\n    this.inxBuild();\n    this.copyPalette();\n  }\n}\n", "/** @format */\n\nimport { OctreeNode } from './octree-node';\n\nexport class HeapNode {\n  private _buf: Array<OctreeNode | undefined> = [undefined];\n  public get buf(): Array<OctreeNode | undefined> {\n    return this._buf;\n  }\n\n  public get n(): number {\n    return this._buf.length;\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\n\nexport class OctreeNode {\n  // sum of all colors represented by this node.\n  private _r = 0;\n  public get r(): number {\n    return this._r;\n  }\n  public set r(v: number) {\n    this._r = v;\n  }\n\n  private _g = 0;\n  public get g(): number {\n    return this._g;\n  }\n  public set g(v: number) {\n    this._g = v;\n  }\n\n  private _b = 0;\n  public get b(): number {\n    return this._b;\n  }\n  public set b(v: number) {\n    this._b = v;\n  }\n\n  private _count = 0;\n  public get count(): number {\n    return this._count;\n  }\n  public set count(v: number) {\n    this._count = v;\n  }\n\n  private _heapIndex = 0;\n  public get heapIndex(): number {\n    return this._heapIndex;\n  }\n  public set heapIndex(v: number) {\n    this._heapIndex = v;\n  }\n\n  private _paletteIndex = 0;\n  public get paletteIndex(): number {\n    return this._paletteIndex;\n  }\n  public set paletteIndex(v: number) {\n    this._paletteIndex = v;\n  }\n\n  private _parent: OctreeNode | undefined;\n  public get parent(): OctreeNode | undefined {\n    return this._parent;\n  }\n\n  private _children: Array<OctreeNode | undefined> = ArrayUtils.fill<\n    OctreeNode | undefined\n  >(8, undefined);\n  public get children(): Array<OctreeNode | undefined> {\n    return this._children;\n  }\n\n  private _childCount = 0;\n  public get childCount(): number {\n    return this._childCount;\n  }\n  public set childCount(v: number) {\n    this._childCount = v;\n  }\n\n  private _childIndex = 0;\n  public get childIndex(): number {\n    return this._childIndex;\n  }\n\n  private _flags = 0;\n  public get flags(): number {\n    return this._flags;\n  }\n  public set flags(v: number) {\n    this._flags = v;\n  }\n\n  private _depth = 0;\n  public get depth(): number {\n    return this._depth;\n  }\n\n  constructor(childIndex: number, depth: number, parent?: OctreeNode) {\n    this._childIndex = childIndex;\n    this._depth = depth;\n    this._parent = parent;\n    if (parent !== undefined) {\n      parent._childCount++;\n    }\n  }\n}\n", "/** @format */\n\nimport { Color } from '../color/color';\nimport { ColorRgb8 } from '../color/color-rgb8';\nimport { HeapNode } from './heap-node';\nimport { MemoryImage } from './image';\nimport { OctreeNode } from './octree-node';\nimport { PaletteUint8 } from './palette-uint8';\nimport { Pixel } from './pixel';\nimport { Quantizer } from './quantizer';\n\n/**\n * Color quantization using octree,\n * from https://rosettacode.org/wiki/Color_quantization/C\n */\nexport class OctreeQuantizer implements Quantizer {\n  private static readonly _inHeap = 1;\n\n  private readonly _root: OctreeNode;\n\n  private _palette!: PaletteUint8;\n  public get palette(): PaletteUint8 {\n    return this._palette;\n  }\n\n  constructor(image: MemoryImage, numberOfColors = 256) {\n    this._root = new OctreeNode(0, 0);\n    const heap = new HeapNode();\n    for (const p of image) {\n      const r = Math.trunc(p.r);\n      const g = Math.trunc(p.g);\n      const b = Math.trunc(p.b);\n      this.heapAdd(heap, this.nodeInsert(this._root, r, g, b));\n    }\n\n    const nc = numberOfColors + 1;\n    while (heap.n > nc) {\n      this.heapAdd(heap, this.nodeFold(this.popHeap(heap)!)!);\n    }\n\n    for (let i = 1; i < heap.n; i++) {\n      const got = heap.buf[i]!;\n      const c = got.count;\n      got.r = Math.round(got.r / c);\n      got.g = Math.round(got.g / c);\n      got.b = Math.round(got.b / c);\n    }\n\n    const nodes: OctreeNode[] = [];\n    this.getNodes(nodes, this._root);\n\n    this._palette = new PaletteUint8(nodes.length, 3);\n    const l = nodes.length;\n    for (let i = 0; i < l; ++i) {\n      nodes[i].paletteIndex = i;\n      const n = nodes[i];\n      this._palette.setRgb(i, n.r, n.g, n.b);\n    }\n  }\n\n  private nodeInsert(\n    root: OctreeNode,\n    r: number,\n    g: number,\n    b: number\n  ): OctreeNode {\n    let _root = root;\n\n    let depth = 0;\n    for (let bit = 1 << 7; ++depth < 8; bit >>= 1) {\n      const i =\n        ((g & bit) !== 0 ? 1 : 0) * 4 +\n        ((r & bit) !== 0 ? 1 : 0) * 2 +\n        ((b & bit) !== 0 ? 1 : 0);\n      if (_root.children[i] === undefined) {\n        _root.children[i] = new OctreeNode(i, depth, _root);\n      }\n      _root = _root.children[i]!;\n    }\n\n    _root.r += r;\n    _root.g += g;\n    _root.b += b;\n    _root.count++;\n    return _root;\n  }\n\n  private popHeap(h: HeapNode): OctreeNode | undefined {\n    if (h.n <= 1) {\n      return undefined;\n    }\n\n    const ret = h.buf[1];\n    h.buf[1] = h.buf.pop();\n    h.buf[1]!.heapIndex = 1;\n    this.downHeap(h, h.buf[1]!);\n\n    return ret;\n  }\n\n  private heapAdd(h: HeapNode, p: OctreeNode): void {\n    if ((p.flags & OctreeQuantizer._inHeap) !== 0) {\n      this.downHeap(h, p);\n      this.upHeap(h, p);\n      return;\n    }\n\n    p.flags |= OctreeQuantizer._inHeap;\n    p.heapIndex = h.n;\n    h.buf.push(p);\n    this.upHeap(h, p);\n  }\n\n  private downHeap(h: HeapNode, p: OctreeNode): void {\n    let n = p.heapIndex;\n    while (true) {\n      let m = n * 2;\n      if (m >= h.n) {\n        break;\n      }\n      if (m + 1 < h.n && this.compareNode(h.buf[m]!, h.buf[m + 1]!) > 0) {\n        m++;\n      }\n\n      if (this.compareNode(p, h.buf[m]!) <= 0) {\n        break;\n      }\n\n      h.buf[n] = h.buf[m];\n      h.buf[n]!.heapIndex = n;\n      n = m;\n    }\n\n    h.buf[n] = p;\n    p.heapIndex = n;\n  }\n\n  private upHeap(h: HeapNode, p: OctreeNode): void {\n    let n = p.heapIndex;\n    let prev: OctreeNode | undefined = undefined;\n\n    while (n > 1) {\n      prev = h.buf[Math.trunc(n / 2)];\n      if (this.compareNode(p, prev!) >= 0) {\n        break;\n      }\n\n      h.buf[n] = prev;\n      prev!.heapIndex = n;\n      n = Math.trunc(n / 2);\n    }\n    h.buf[n] = p;\n    p.heapIndex = n;\n  }\n\n  private nodeFold(p: OctreeNode): OctreeNode | undefined {\n    if (p.childCount > 0) {\n      return undefined;\n    }\n    const q = p.parent!;\n    q.count += p.count;\n\n    q.r += p.r;\n    q.g += p.g;\n    q.b += p.b;\n    q.childCount--;\n    q.children[p.childIndex] = undefined;\n    return q;\n  }\n\n  private compareNode(a: OctreeNode, b: OctreeNode): number {\n    if (a.childCount < b.childCount) {\n      return -1;\n    }\n    if (a.childCount > b.childCount) {\n      return 1;\n    }\n\n    const ac = a.count >> a.depth;\n    const bc = b.count >> b.depth;\n    return ac < bc ? -1 : ac > bc ? 1 : 0;\n  }\n\n  private getNodes(nodes: OctreeNode[], node: OctreeNode): void {\n    if (node.childCount === 0) {\n      nodes.push(node);\n      return;\n    }\n    for (const n of node.children) {\n      if (n !== undefined) {\n        this.getNodes(nodes, n);\n      }\n    }\n  }\n\n  public getColorIndex(c: Color): number {\n    return this.getColorIndexRgb(\n      Math.trunc(c.r),\n      Math.trunc(c.g),\n      Math.trunc(c.b)\n    );\n  }\n\n  public getColorIndexRgb(r: number, g: number, b: number): number {\n    let root: OctreeNode | undefined = this._root;\n    for (let bit = 1 << 7; bit !== 0; bit >>= 1) {\n      const i =\n        ((g & bit) !== 0 ? 1 : 0) * 4 +\n        ((r & bit) !== 0 ? 1 : 0) * 2 +\n        ((b & bit) !== 0 ? 1 : 0);\n      if (root!.children[i] === undefined) {\n        break;\n      }\n      root = root!.children[i];\n    }\n    return root?.paletteIndex ?? 0;\n  }\n\n  /**\n   * Find the index of the closest color to **c** in the **palette**.\n   */\n  public getQuantizedColor(c: Color): Color {\n    let r = Math.trunc(c.r);\n    let g = Math.trunc(c.g);\n    let b = Math.trunc(c.b);\n    let root: OctreeNode | undefined = this._root;\n\n    for (let bit = 1 << 7; bit !== 0; bit >>= 1) {\n      const i =\n        ((g & bit) !== 0 ? 1 : 0) * 4 +\n        ((r & bit) !== 0 ? 1 : 0) * 2 +\n        ((b & bit) !== 0 ? 1 : 0);\n      if (root!.children[i] === undefined) {\n        break;\n      }\n      root = root!.children[i];\n    }\n\n    r = root!.r;\n    g = root!.g;\n    b = root!.b;\n\n    return new ColorRgb8(r, g, b);\n  }\n\n  /**\n   * Convert the **image** to a palette image.\n   */\n  public getIndexImage(image: MemoryImage): MemoryImage {\n    const target = new MemoryImage({\n      width: image.width,\n      height: image.height,\n      numChannels: 1,\n      palette: this.palette,\n    });\n\n    const imageIt = image[Symbol.iterator]();\n    const targetIt = target[Symbol.iterator]();\n    let imageItRes: IteratorResult<Pixel> | undefined = undefined;\n    let targetItRes: IteratorResult<Pixel> | undefined = undefined;\n    while (\n      (((imageItRes = imageIt.next()), (targetItRes = targetIt.next())),\n      !imageItRes.done && !targetItRes.done)\n    ) {\n      const t = targetItRes.value;\n      t.setChannel(0, this.getColorIndex(imageItRes.value));\n    }\n\n    return target;\n  }\n}\n", "/** @format */\n\nexport enum NoiseType {\n  gaussian,\n  uniform,\n  saltAndPepper,\n  poisson,\n  rice,\n}\n", "/** @format */\n\nexport enum PixelateMode {\n  /**\n   * Use the top-left pixel of a block for the block color.\n   */\n  upperLeft,\n\n  /**\n   * Use the average of the pixels within a block for the block color.\n   */\n  average,\n}\n", "/** @format */\n\nexport enum QuantizeMethod {\n  neuralNet,\n  octree,\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { ArrayUtils } from '../common/array-utils';\nimport { MathUtils } from '../common/math-utils';\nimport { MemoryImage } from '../image/image';\n\nexport interface SeparableKernelApplyOptions {\n  src: MemoryImage;\n  dst: MemoryImage;\n  horizontal?: boolean;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\n/**\n * A kernel object to use with **separableConvolution** filter.\n */\nexport class SeparableKernel {\n  private readonly _coefficients: number[];\n  private readonly _size: number;\n\n  /**\n   * Get the number of coefficients in the kernel.\n   */\n  public get length() {\n    return this._coefficients.length;\n  }\n\n  /**\n   * Create a separable convolution kernel for the given **size**.\n   */\n  constructor(size: number) {\n    this._size = size;\n    this._coefficients = ArrayUtils.fill(2 * size + 1, 0);\n  }\n\n  private reflect(max: number, x: number): number {\n    if (x < 0) {\n      return -x;\n    }\n    if (x >= max) {\n      return max - (x - max) - 1;\n    }\n    return x;\n  }\n\n  private applyCoefficientsLine(\n    src: MemoryImage,\n    dst: MemoryImage,\n    y: number,\n    width: number,\n    horizontal: boolean,\n    maskChannel: Channel,\n    mask?: MemoryImage\n  ): void {\n    for (let x = 0; x < width; x++) {\n      let r = 0;\n      let g = 0;\n      let b = 0;\n      let a = 0;\n\n      for (let j = -this._size, j2 = 0; j <= this._size; ++j, ++j2) {\n        const c = this._coefficients[j2];\n        const gr = this.reflect(width, x + j);\n\n        const sc = horizontal ? src.getPixel(gr, y) : src.getPixel(y, gr);\n\n        r += c * sc.r;\n        g += c * sc.g;\n        b += c * sc.b;\n        a += c * sc.a;\n      }\n\n      const p = horizontal ? dst.getPixel(x, y) : dst.getPixel(y, x);\n\n      const msk = mask?.getPixel(p.x, p.y).getChannelNormalized(maskChannel);\n      if (msk === undefined) {\n        p.setRgba(r, g, b, a);\n      } else {\n        p.r = MathUtils.mix(p.r, r, msk);\n        p.g = MathUtils.mix(p.g, g, msk);\n        p.b = MathUtils.mix(p.b, b, msk);\n        p.a = MathUtils.mix(p.a, a, msk);\n      }\n    }\n  }\n\n  /**\n   * Get a coefficient from the kernel.\n   */\n  public getCoefficient(index: number) {\n    return this._coefficients[index];\n  }\n\n  /**\n   * Set a coefficient in the kernel.\n   */\n  public setCoefficient(index: number, c: number) {\n    this._coefficients[index] = c;\n  }\n\n  /**\n   * Apply the kernel to the **src** image, storing the results in **dst**,\n   * for a single dimension. If **horizontal** is true, the filter will be\n   * applied to the horizontal axis, otherwise it will be applied to the\n   * vertical axis.\n   */\n  public apply(opt: SeparableKernelApplyOptions): void {\n    const horizontal = opt.horizontal ?? true;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (horizontal) {\n      for (let y = 0; y < opt.src.height; ++y) {\n        this.applyCoefficientsLine(\n          opt.src,\n          opt.dst,\n          y,\n          opt.src.width,\n          horizontal,\n          maskChannel,\n          opt.mask\n        );\n      }\n    } else {\n      for (let x = 0; x < opt.src.width; ++x) {\n        this.applyCoefficientsLine(\n          opt.src,\n          opt.dst,\n          x,\n          opt.src.height,\n          horizontal,\n          maskChannel,\n          opt.mask\n        );\n      }\n    }\n  }\n\n  /**\n   * Scale all of the coefficients by **s**.\n   */\n  public scaleCoefficients(s: number): void {\n    for (let i = 0; i < this._coefficients.length; ++i) {\n      this._coefficients[i] *= s;\n    }\n  }\n}\n", "/** @format */\n\nimport { Channel } from '../color/channel';\nimport { Color } from '../color/color';\nimport { ColorRgba8 } from '../color/color-rgba8';\nimport { Interpolation } from '../common/interpolation';\nimport { MathUtils } from '../common/math-utils';\nimport { NeuralQuantizer } from '../image/neural-quantizer';\nimport { OctreeQuantizer } from '../image/octree-quantizer';\nimport { Quantizer } from '../image/quantizer';\nimport { RandomUtils } from '../common/random-utils';\nimport { Draw } from '../draw/draw';\nimport { MemoryImage } from '../image/image';\nimport { DitherKernel, DitherKernels } from './dither-kernel';\nimport { NoiseType } from './noise-type';\nimport { PixelateMode } from './pixelate-mode';\nimport { QuantizeMethod } from './quantize-method';\nimport { SeparableKernel } from './separable-kernel';\nimport { ColorUtils } from '../color/color-utils';\n\ninterface ContrastCache {\n  lastContrast: number;\n  contrast: Uint8Array;\n}\n\nexport interface AdjustColorOptions {\n  image: MemoryImage;\n  blacks?: Color;\n  whites?: Color;\n  mids?: Color;\n  contrast?: number;\n  saturation?: number;\n  brightness?: number;\n  gamma?: number;\n  exposure?: number;\n  hue?: number;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface BillboardOptions {\n  image: MemoryImage;\n  grid?: number;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface BleachBypassOptions {\n  image: MemoryImage;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface BulgeDistortionOptions {\n  image: MemoryImage;\n  centerX?: number;\n  centerY?: number;\n  radius?: number;\n  scale?: number;\n  interpolation?: Interpolation;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface BumpToNormalOptions {\n  image: MemoryImage;\n  strength?: number;\n}\n\nexport interface ChromaticAberrationOptions {\n  image: MemoryImage;\n  shift?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface ColorHalftone {\n  image: MemoryImage;\n  amount?: number;\n  centerX?: number;\n  centerY?: number;\n  angle?: number;\n  size?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface ColorOffsetOptions {\n  image: MemoryImage;\n  red?: number;\n  green?: number;\n  blue?: number;\n  alpha?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface ContrastOptions {\n  image: MemoryImage;\n  contrast: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface ConvolutionOptions {\n  image: MemoryImage;\n  filter: number[];\n  div?: number;\n  offset?: number;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface CopyImageChannelsOptions {\n  image: MemoryImage;\n  from: MemoryImage;\n  scaled?: boolean;\n  red?: Channel;\n  green?: Channel;\n  blue?: Channel;\n  alpha?: Channel;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface DitherImageOptions {\n  image: MemoryImage;\n  quantizer?: Quantizer;\n  kernel?: DitherKernel;\n  serpentine?: boolean;\n}\n\nexport interface DotScreenOptions {\n  image: MemoryImage;\n  angle?: number;\n  size?: number;\n  centerX?: number;\n  centerY?: number;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface DropShadowOptions {\n  image: MemoryImage;\n  hShadow: number;\n  vShadow: number;\n  blur: number;\n  shadowColor?: Color;\n}\n\nexport interface EdgeGlowOptions {\n  image: MemoryImage;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface EmbossOptions {\n  image: MemoryImage;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface GammaOptions {\n  image: MemoryImage;\n  gamma: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface GaussianBlurOptions {\n  image: MemoryImage;\n  radius: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface GrayscaleOptions {\n  image: MemoryImage;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface HdrToLdrOptions {\n  image: MemoryImage;\n  exposure?: number;\n}\n\nexport interface HexagonPixelateOptions {\n  image: MemoryImage;\n  centerX?: number;\n  centerY?: number;\n  size?: number;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface InvertOptions {\n  image: MemoryImage;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface LuminanceThresholdOptions {\n  image: MemoryImage;\n  threshold?: number;\n  outputColor?: boolean;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface MonochromeOptions {\n  image: MemoryImage;\n  color?: Color;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface NoiseOptions {\n  image: MemoryImage;\n  sigma: number;\n  type?: NoiseType;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface NormalizeOptions {\n  image: MemoryImage;\n  min: number;\n  max: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface PixelateOptions {\n  image: MemoryImage;\n  size: number;\n  mode?: PixelateMode;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface QuantizeOptions {\n  image: MemoryImage;\n  numberOfColors?: number;\n  method?: QuantizeMethod;\n  dither?: DitherKernel;\n  ditherSerpentine?: boolean;\n}\n\nexport interface ReinhardToneMapOptions {\n  image: MemoryImage;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface RemapColorsOptions {\n  image: MemoryImage;\n  red?: Channel;\n  green?: Channel;\n  blue?: Channel;\n  alpha?: Channel;\n}\n\nexport interface ScaleRgbaOptions {\n  image: MemoryImage;\n  scale: Color;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface SeparableConvolutionOptions {\n  image: MemoryImage;\n  kernel: SeparableKernel;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface SepiaOptions {\n  image: MemoryImage;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface SketchOptions {\n  image: MemoryImage;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface SmoothOptions {\n  image: MemoryImage;\n  weight: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface SobelOptions {\n  image: MemoryImage;\n  amount?: number;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface StretchDistortionOptions {\n  image: MemoryImage;\n  centerX?: number;\n  centerY?: number;\n  interpolation?: Interpolation;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport interface VignetteOptions {\n  image: MemoryImage;\n  start?: number;\n  end?: number;\n  amount?: number;\n  color?: Color;\n  maskChannel?: Channel;\n  mask?: MemoryImage;\n}\n\nexport abstract class Filter {\n  private static _contrastCache?: ContrastCache;\n  private static readonly _gaussianKernelCache: Map<number, SeparableKernel> =\n    new Map<number, SeparableKernel>();\n\n  /**\n   * Adjust the color of the **image** using various color transformations.\n   *\n   * **blacks** defines the black level of the image, as a color.\n   *\n   * **whites** defines the white level of the image, as a color.\n   *\n   * **mids** defines the mid level of hte image, as a color.\n   *\n   * **contrast** increases (> 1) / decreases (< 1) the contrast of the image by\n   * pushing colors away/toward neutral gray, where at 0 the image is entirely\n   * neutral gray (0 contrast), 1, the image is not adjusted and > 1 the\n   * image increases contrast.\n   *\n   * **saturation** increases (> 1) / decreases (< 1) the saturation of the image\n   * by pushing colors away/toward their grayscale value, where 0 is grayscale\n   * and 1 is the original image, and > 1 the image becomes more saturated.\n   *\n   * **brightness** is a constant scalar of the image colors. At 0 the image\n   * is black, 1 unmodified, and > 1 the image becomes brighter.\n   *\n   * **gamma** is an exponential scalar of the image colors. At < 1 the image\n   * becomes brighter, and > 1 the image becomes darker. A **gamma** of 1/2.2\n   * will convert the image colors to linear color space.\n   *\n   * **exposure** is an exponential scalar of the image as rgb* pow(2, exposure).\n   * At 0, the image is unmodified; as the exposure increases, the image\n   * brightens.\n   *\n   * **hue** shifts the hue component of the image colors in degrees. A **hue** of\n   * 0 will have no affect, and a **hue** of 45 will shift the hue of all colors\n   * by 45 degrees.\n   *\n   * **amount** controls how much affect this filter has on the **image**, where\n   * 0 has no effect and 1 has full effect.\n   *\n   */\n  public static adjustColor(opt: AdjustColorOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n    const contrast =\n      opt.contrast !== undefined\n        ? MathUtils.clamp(opt.contrast, 0, 1)\n        : undefined;\n    const saturation =\n      opt.saturation !== undefined\n        ? MathUtils.clamp(opt.saturation, 0, 1)\n        : undefined;\n    const brightness =\n      opt.brightness !== undefined\n        ? MathUtils.clamp(opt.brightness, 0, 1)\n        : undefined;\n    const gamma =\n      opt.gamma !== undefined ? MathUtils.clamp(opt.gamma, 0, 1000) : undefined;\n    let exposure =\n      opt.exposure !== undefined\n        ? MathUtils.clamp(opt.exposure, 0, 1000)\n        : undefined;\n    const amount = MathUtils.clamp(opt.amount ?? 1, 0, 1000);\n    let hue = opt.hue;\n\n    if (amount === 0) {\n      return opt.image;\n    }\n\n    const degToRad = 0.0174532925;\n    const avgLumR = 0.5;\n    const avgLumG = 0.5;\n    const avgLumB = 0.5;\n    const lumCoeffR = 0.2125;\n    const lumCoeffG = 0.7154;\n    const lumCoeffB = 0.0721;\n\n    const useBlacksWhitesMids =\n      opt.blacks !== undefined ||\n      opt.whites !== undefined ||\n      opt.mids !== undefined;\n    let br = 0;\n    let bg = 0;\n    let bb = 0;\n    let wr = 0;\n    let wg = 0;\n    let wb = 0;\n    let mr = 0;\n    let mg = 0;\n    let mb = 0;\n    if (useBlacksWhitesMids) {\n      br = opt.blacks?.rNormalized ?? 0;\n      bg = opt.blacks?.gNormalized ?? 0;\n      bb = opt.blacks?.bNormalized ?? 0;\n\n      wr = opt.whites?.rNormalized ?? 0;\n      wg = opt.whites?.gNormalized ?? 0;\n      wb = opt.whites?.bNormalized ?? 0;\n\n      mr = opt.mids?.rNormalized ?? 0;\n      mg = opt.mids?.gNormalized ?? 0;\n      mb = opt.mids?.bNormalized ?? 0;\n\n      mr = 1 / (1 + 2 * (mr - 0.5));\n      mg = 1 / (1 + 2 * (mg - 0.5));\n      mb = 1 / (1 + 2 * (mb - 0.5));\n    }\n\n    const invSaturation =\n      saturation !== undefined ? 1 - MathUtils.clamp(saturation, 0, 1) : 0;\n    const invContrast =\n      contrast !== undefined ? 1 - MathUtils.clamp(contrast, 0, 1) : 0;\n\n    if (exposure !== undefined) {\n      exposure = Math.pow(2, exposure);\n    }\n\n    let hueR = 0;\n    let hueG = 0;\n    let hueB = 0;\n    if (hue !== undefined) {\n      hue *= degToRad;\n      const s = Math.sin(hue);\n      const c = Math.cos(hue);\n\n      hueR = (2 * c) / 3.0;\n      hueG = (-Math.sqrt(3.0) * s - c) / 3.0;\n      hueB = (Math.sqrt(3.0) * s - c + 1.0) / 3.0;\n    }\n\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        const or = p.rNormalized;\n        const og = p.gNormalized;\n        const ob = p.bNormalized;\n\n        let r = or;\n        let g = og;\n        let b = ob;\n\n        if (useBlacksWhitesMids) {\n          r = Math.pow((r + br) * wr, mr);\n          g = Math.pow((g + bg) * wg, mg);\n          b = Math.pow((b + bb) * wb, mb);\n        }\n\n        if (brightness !== undefined && brightness !== 1.0) {\n          const tb = MathUtils.clamp(brightness, 0, 1000);\n          r *= tb;\n          g *= tb;\n          b *= tb;\n        }\n\n        if (saturation !== undefined) {\n          const lum = r * lumCoeffR + g * lumCoeffG + b * lumCoeffB;\n\n          r = lum * invSaturation + r * saturation;\n          g = lum * invSaturation + g * saturation;\n          b = lum * invSaturation + b * saturation;\n        }\n\n        if (contrast !== undefined) {\n          r = avgLumR * invContrast + r * contrast;\n          g = avgLumG * invContrast + g * contrast;\n          b = avgLumB * invContrast + b * contrast;\n        }\n\n        if (gamma !== undefined) {\n          r = Math.pow(r, gamma);\n          g = Math.pow(g, gamma);\n          b = Math.pow(b, gamma);\n        }\n\n        if (exposure !== undefined) {\n          r *= exposure;\n          g *= exposure;\n          b *= exposure;\n        }\n\n        if (hue !== undefined && hue !== 0.0) {\n          const hr = r * hueR + g * hueG + b * hueB;\n          const hg = r * hueB + g * hueR + b * hueG;\n          const hb = r * hueG + g * hueB + b * hueR;\n\n          r = hr;\n          g = hg;\n          b = hb;\n        }\n\n        const msk =\n          opt.mask?.getPixel(p.x, p.y).getChannelNormalized(maskChannel) ?? 1;\n        const blend = msk * amount;\n\n        r = MathUtils.mix(or, r, blend);\n        g = MathUtils.mix(og, g, blend);\n        b = MathUtils.mix(ob, b, blend);\n\n        p.rNormalized = r;\n        p.gNormalized = g;\n        p.bNormalized = b;\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Apply the billboard filter to the image.\n   */\n  public static billboard(opt: BillboardOptions): MemoryImage {\n    const grid = opt.grid ?? 10;\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    // Math.pow(0.45, 2);\n    const rs = 0.2025;\n\n    for (const frame of opt.image.frames) {\n      const w = frame.width;\n      const h = frame.height;\n      const aspect = w / h;\n      const stepX = 0.0015625;\n      const stepY = 0.0015625 * aspect;\n      const orig = frame.clone({\n        skipAnimation: true,\n      });\n      for (const p of frame) {\n        const uvX = p.x / (w - 1);\n        const uvY = p.y / (h - 1);\n\n        const offX = Math.floor(uvX / (grid * stepX));\n        const offY = Math.floor(uvY / (grid * stepY));\n\n        const x2 = Math.floor(offX * grid * stepX * (w - 1));\n        const y2 = Math.floor(offY * grid * stepY * (h - 1));\n\n        if (x2 >= w || y2 >= h) {\n          continue;\n        }\n\n        const op = orig.getPixel(x2, y2);\n\n        const prcX = MathUtils.fract(uvX / (grid * stepX));\n        const prcY = MathUtils.fract(uvY / (grid * stepY));\n        const pwX = Math.pow(Math.abs(prcX - 0.5), 2);\n        const pwY = Math.pow(Math.abs(prcY - 0.5), 2);\n\n        let r = op.r / p.maxChannelValue;\n        let g = op.g / p.maxChannelValue;\n        let b = op.b / p.maxChannelValue;\n\n        const gr = MathUtils.smoothStep(rs - 0.1, rs + 0.1, pwX + pwY);\n        const y = (r + g + b) / 3.0;\n\n        const ls = 0.3;\n        const lb = Math.ceil(y / ls);\n        const lf = ls * lb + 0.3;\n\n        r = MathUtils.mix(lf * r, 0.1, gr);\n        g = MathUtils.mix(lf * g, 0.1, gr);\n        b = MathUtils.mix(lf * b, 0.1, gr);\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n\n        p.r = MathUtils.mix(p.r, r * p.maxChannelValue, mx);\n        p.g = MathUtils.mix(p.g, g * p.maxChannelValue, mx);\n        p.b = MathUtils.mix(p.b, b * p.maxChannelValue, mx);\n      }\n    }\n    return opt.image;\n  }\n\n  public static bleachBypass(opt: BleachBypassOptions): MemoryImage {\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const luminanceR = 0.2125;\n    const luminanceG = 0.7154;\n    const luminanceB = 0.0721;\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        const r = p.rNormalized;\n        const g = p.gNormalized;\n        const b = p.bNormalized;\n        const lr = r * luminanceR;\n        const lg = g * luminanceG;\n        const lb = b * luminanceB;\n        const l = lr + lg + lb;\n\n        const mixAmount = MathUtils.clamp((l - 0.45) * 10, 0, 1);\n        const branch1R = 2 * r * l;\n        const branch1G = 2 * g * l;\n        const branch1B = 2 * b * l;\n        const branch2R = 1 - 2 * (1 - r) * (1 - l);\n        const branch2G = 1 - 2 * (1 - g) * (1 - l);\n        const branch2B = 1 - 2 * (1 - b) * (1 - l);\n\n        const msk =\n          opt.mask?.getPixel(p.x, p.y).getChannelNormalized(maskChannel) ?? 1;\n        const mx = msk * amount;\n\n        if (mx !== 1) {\n          const nr =\n            MathUtils.mix(branch1R, branch2R, mixAmount) * p.maxChannelValue;\n          const ng =\n            MathUtils.mix(branch1G, branch2G, mixAmount) * p.maxChannelValue;\n          const nb =\n            MathUtils.mix(branch1B, branch2B, mixAmount) * p.maxChannelValue;\n          p.r = MathUtils.mix(p.r, nr, amount);\n          p.g = MathUtils.mix(p.g, ng, amount);\n          p.b = MathUtils.mix(p.b, nb, amount);\n        } else {\n          p.rNormalized = MathUtils.mix(branch1R, branch2R, mixAmount);\n          p.gNormalized = MathUtils.mix(branch1G, branch2G, mixAmount);\n          p.bNormalized = MathUtils.mix(branch1B, branch2B, mixAmount);\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  public static bulgeDistortion(opt: BulgeDistortionOptions): MemoryImage {\n    const scale = opt.scale ?? 0.5;\n    const interpolation = opt.interpolation ?? Interpolation.nearest;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    for (const frame of opt.image.frames) {\n      const orig = frame.clone({\n        skipAnimation: true,\n      });\n      const w = frame.width;\n      const h = frame.height;\n      const cx = opt.centerX ?? Math.trunc(w / 2);\n      const cy = opt.centerY ?? Math.trunc(h / 2);\n      const rad = opt.radius ?? Math.trunc(Math.min(w, h) / 2);\n      const radSqr = rad * rad;\n      for (const p of frame) {\n        let x = p.x;\n        let y = p.y;\n        const deltaX = cx - x;\n        const deltaY = cy - y;\n        const dist = deltaX * deltaX + deltaY * deltaY;\n        x -= cx;\n        y -= cy;\n        if (dist < radSqr) {\n          const percent = 1 - ((radSqr - dist) / radSqr) * scale;\n          const percentSqr = percent * percent;\n          x *= percentSqr;\n          y *= percentSqr;\n        }\n        x += cx;\n        y += cy;\n\n        const p2 = orig.getPixelInterpolate(x, y, interpolation);\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n\n        if (msk === undefined) {\n          p.set(p2);\n        } else {\n          p.r = MathUtils.mix(p.r, p2.r, msk);\n          p.g = MathUtils.mix(p.g, p2.g, msk);\n          p.b = MathUtils.mix(p.b, p2.b, msk);\n          p.a = MathUtils.mix(p.a, p2.a, msk);\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Generate a normal map from a heightfield bump image.\n   *\n   * The red channel of the **image** is used as an input, 0 represents a low\n   * height and 1 a high value. The optional **strength** parameter allows to set\n   * the strength of the normal image.\n   */\n  public static bumpToNormal(opt: BumpToNormalOptions): MemoryImage {\n    const strength = opt.strength ?? 2;\n\n    const dest = MemoryImage.from(opt.image);\n\n    const mx = opt.image.maxChannelValue;\n    for (const frame of opt.image.frames) {\n      for (let y = 0; y < frame.height; ++y) {\n        for (let x = 0; x < frame.width; ++x) {\n          const height = frame.getPixel(x, y).r / mx;\n          let du =\n            (height -\n              frame.getPixel(x < frame.width - 1 ? x + 1 : x, y).r / mx) *\n            strength;\n          let dv =\n            (height -\n              frame.getPixel(x, y < frame.height - 1 ? y + 1 : y).r / mx) *\n            strength;\n          const z = Math.abs(du) + Math.abs(dv);\n\n          if (z > 1) {\n            du /= z;\n            dv /= z;\n          }\n\n          const dw = Math.sqrt(1 - du * du - dv * dv);\n          const nX = du * 0.5 + 0.5;\n          const nY = dv * 0.5 + 0.5;\n          const nZ = dw;\n\n          dest.frames[frame.frameIndex].setPixelRgb(\n            x,\n            y,\n            nX * mx,\n            nY * mx,\n            nZ * mx\n          );\n        }\n      }\n    }\n\n    return dest;\n  }\n\n  /**\n   * Apply chromatic aberration filter to the image.\n   */\n  public static chromaticAberration(\n    opt: ChromaticAberrationOptions\n  ): MemoryImage {\n    const shift = opt.shift ?? 5;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    for (const frame of opt.image.frames) {\n      const orig = frame.clone({\n        skipAnimation: true,\n      });\n      const w = frame.width - 1;\n      for (const p of frame) {\n        const shiftLeft = MathUtils.clamp(p.x - shift, 0, w);\n        const shiftRight = MathUtils.clamp(p.x + shift, 0, w);\n        const lc = orig.getPixel(shiftLeft, p.y);\n        const rc = orig.getPixel(shiftRight, p.y);\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n\n        if (msk === undefined) {\n          p.r = rc.r;\n          p.b = lc.b;\n        } else {\n          p.r = MathUtils.mix(p.r, rc.r, msk);\n          p.b = MathUtils.mix(p.b, lc.b, msk);\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Apply color halftone filter to the image.\n   */\n  public static colorHalftone(opt: ColorHalftone): MemoryImage {\n    const amount = opt.amount ?? 1;\n    let angle = opt.angle ?? 1;\n    const size = opt.size ?? 5;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    angle *= 0.0174533;\n\n    const pattern = (\n      x: number,\n      y: number,\n      cx: number,\n      cy: number,\n      angle: number\n    ): number => {\n      const scale = 3.14159 / size;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const tx = x - cx;\n      const ty = y - cy;\n      const px = (c * tx - s * ty) * scale;\n      const py = (s * tx + c * ty) * scale;\n      return Math.sin(px) * Math.sin(py) * 4.0;\n    };\n\n    for (const frame of opt.image.frames) {\n      const w = frame.width;\n      const h = frame.height;\n      const cx = opt.centerX ?? Math.trunc(w / 2);\n      const cy = opt.centerY ?? Math.trunc(h / 2);\n      for (const p of frame) {\n        const x = p.x;\n        const y = p.y;\n        let cmyC = 1 - p.rNormalized;\n        let cmyM = 1 - p.gNormalized;\n        let cmyY = 1 - p.bNormalized;\n        let cmyK = Math.min(cmyC, Math.min(cmyM, cmyY));\n        cmyC = (cmyC - cmyK) / (1 - cmyK);\n        cmyM = (cmyM - cmyK) / (1 - cmyK);\n        cmyY = (cmyY - cmyK) / (1 - cmyK);\n        cmyC = MathUtils.clamp(\n          cmyC * 10 - 3 + pattern(x, y, cx, cy, angle + 0.26179),\n          0,\n          1\n        );\n        cmyM = MathUtils.clamp(\n          cmyM * 10 - 3 + pattern(x, y, cx, cy, angle + 1.30899),\n          0,\n          1\n        );\n        cmyY = MathUtils.clamp(\n          cmyY * 10 - 3 + pattern(x, y, cx, cy, angle),\n          0,\n          1\n        );\n        cmyK = MathUtils.clamp(\n          cmyK * 10 - 5 + pattern(x, y, cx, cy, angle + 0.78539),\n          0,\n          1\n        );\n\n        const r = (1 - cmyC - cmyK) * p.maxChannelValue;\n        const g = (1 - cmyM - cmyK) * p.maxChannelValue;\n        const b = (1 - cmyY - cmyK) * p.maxChannelValue;\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n\n        if (mx !== 1) {\n          p.r = MathUtils.mix(p.r, r, mx);\n          p.g = MathUtils.mix(p.g, g, mx);\n          p.b = MathUtils.mix(p.b, b, mx);\n        } else {\n          p.r = r;\n          p.g = g;\n          p.b = b;\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Add the **red**, **green**, **blue** and **alpha** values to the **image** image\n   * colors, a per-channel brightness.\n   */\n  public static colorOffset(opt: ColorOffsetOptions): MemoryImage {\n    const red = opt.red ?? 0;\n    const green = opt.green ?? 0;\n    const blue = opt.blue ?? 0;\n    const alpha = opt.alpha ?? 0;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        if (msk === undefined) {\n          p.r += red;\n          p.g += green;\n          p.b += blue;\n          p.a += alpha;\n        } else {\n          p.r = MathUtils.mix(p.r, p.r + red, msk);\n          p.g = MathUtils.mix(p.g, p.g + green, msk);\n          p.b = MathUtils.mix(p.b, p.b + blue, msk);\n          p.a = MathUtils.mix(p.a, p.a + alpha, msk);\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Set the contrast level for the **image**.\n   *\n   * **contrast** values below 100 will decrees the contrast of the image,\n   * and values above 100 will increase the contrast. A contrast of of 100\n   * will have no affect.\n   */\n  public static contrast(opt: ContrastOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (opt.contrast === 100) {\n      return opt.image;\n    }\n\n    if (\n      Filter._contrastCache === undefined ||\n      opt.contrast !== Filter._contrastCache.lastContrast\n    ) {\n      Filter._contrastCache = {\n        lastContrast: opt.contrast,\n        contrast: new Uint8Array(256),\n      };\n\n      const c = (opt.contrast * opt.contrast) / 10000;\n      for (let i = 0; i < 256; ++i) {\n        Filter._contrastCache.contrast[i] = MathUtils.clampInt255(\n          ((i / 255 - 0.5) * c + 0.5) * 255\n        );\n      }\n    }\n\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const r = Math.trunc(p.r);\n        const g = Math.trunc(p.g);\n        const b = Math.trunc(p.b);\n        if (msk === undefined) {\n          p.r = Filter._contrastCache.contrast[r];\n          p.g = Filter._contrastCache.contrast[g];\n          p.b = Filter._contrastCache.contrast[b];\n        } else {\n          p.r = MathUtils.mix(p.r, Filter._contrastCache.contrast[r], msk);\n          p.g = MathUtils.mix(p.g, Filter._contrastCache.contrast[g], msk);\n          p.b = MathUtils.mix(p.b, Filter._contrastCache.contrast[b], msk);\n        }\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Apply a 3x3 convolution filter to the **image**. **filter** should be a\n   * list of 9 numbers.\n   *\n   * The rgb channels will be divided by **div** and add **offset**, allowing\n   * filters to normalize and offset the filtered pixel value.\n   */\n  public static convolution(opt: ConvolutionOptions): MemoryImage {\n    const div = opt.div ?? 1;\n    const offset = opt.offset ?? 0;\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const tmp = MemoryImage.from(opt.image);\n    for (const frame of opt.image.frames) {\n      const tmpFrame = tmp.frames[frame.frameIndex];\n      for (const c of tmpFrame) {\n        let r = 0;\n        let g = 0;\n        let b = 0;\n        for (let j = 0, fi = 0; j < 3; ++j) {\n          const yv = Math.min(Math.max(c.y - 1 + j, 0), opt.image.height - 1);\n          for (let i = 0; i < 3; ++i, ++fi) {\n            const xv = Math.min(Math.max(c.x - 1 + i, 0), opt.image.width - 1);\n            const c2 = tmpFrame.getPixel(xv, yv);\n            r += c2.r * opt.filter[fi];\n            g += c2.g * opt.filter[fi];\n            b += c2.b * opt.filter[fi];\n          }\n        }\n\n        r = MathUtils.clampInt255(r / div + offset);\n        g = MathUtils.clampInt255(g / div + offset);\n        b = MathUtils.clampInt255(b / div + offset);\n\n        const p = frame.getPixel(c.x, c.y);\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n\n        p.r = MathUtils.mix(p.r, r, mx);\n        p.g = MathUtils.mix(p.g, g, mx);\n        p.b = MathUtils.mix(p.b, b, mx);\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Copy channels from the **from** image to the **image**. If **scaled** is\n   * true, then the **from** image will be scaled to the **image** resolution.\n   */\n  public static copyImageChannels(opt: CopyImageChannelsOptions): MemoryImage {\n    const scaled = opt.scaled ?? false;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const dx = opt.from.width / opt.image.width;\n    const dy = opt.from.height / opt.image.height;\n    const fromPixel = opt.from.getPixel(0, 0);\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        if (scaled) {\n          fromPixel.setPosition(Math.floor(p.x * dx), Math.floor(p.y * dy));\n        } else {\n          fromPixel.setPosition(p.x, p.y);\n        }\n\n        const r =\n          opt.red !== undefined\n            ? fromPixel.getChannelNormalized(opt.red)\n            : p.rNormalized;\n        const g =\n          opt.green !== undefined\n            ? fromPixel.getChannelNormalized(opt.green)\n            : p.gNormalized;\n        const b =\n          opt.blue !== undefined\n            ? fromPixel.getChannelNormalized(opt.blue)\n            : p.bNormalized;\n        const a =\n          opt.alpha !== undefined\n            ? fromPixel.getChannelNormalized(opt.alpha)\n            : p.aNormalized;\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        if (msk === undefined) {\n          p.rNormalized = r;\n          p.gNormalized = g;\n          p.bNormalized = b;\n          p.aNormalized = a;\n        } else {\n          p.rNormalized = MathUtils.mix(p.r, r, msk);\n          p.gNormalized = MathUtils.mix(p.g, g, msk);\n          p.bNormalized = MathUtils.mix(p.b, b, msk);\n          p.aNormalized = MathUtils.mix(p.a, a, msk);\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Dither an image to reduce banding patterns when reducing the number of\n   * colors.\n   */\n  public static ditherImage(opt: DitherImageOptions): MemoryImage {\n    const quantizer = opt.quantizer ?? new NeuralQuantizer(opt.image);\n    const kernel = opt.kernel ?? DitherKernel.floydSteinberg;\n    const serpentine = opt.serpentine ?? false;\n\n    if (kernel === DitherKernel.none) {\n      return quantizer.getIndexImage(opt.image);\n    }\n\n    const ds = DitherKernels[kernel];\n    const height = opt.image.height;\n    const width = opt.image.width;\n\n    let direction = serpentine ? -1 : 1;\n\n    const palette = quantizer.palette;\n    const indexedImage = new MemoryImage({\n      width: width,\n      height: height,\n      numChannels: 1,\n      palette: palette,\n    });\n\n    const pIter = opt.image[Symbol.iterator]();\n    let itRes = pIter.next();\n\n    let index = 0;\n    for (let y = 0; y < height; y++) {\n      if (serpentine) direction *= -1;\n\n      const x0 = direction === 1 ? 0 : width - 1;\n      const x1 = direction === 1 ? width : 0;\n      for (\n        let x = x0;\n        x !== x1;\n        x += direction, ++index, itRes = pIter.next()\n      ) {\n        // Get original color\n        const pc = itRes.value;\n        const r1 = Math.trunc(pc.getChannel(0));\n        const g1 = Math.trunc(pc.getChannel(1));\n        const b1 = Math.trunc(pc.getChannel(2));\n\n        // Get converted color\n        let idx = quantizer.getColorIndexRgb(r1, g1, b1);\n        indexedImage.setPixelRgb(x, y, idx, 0, 0);\n\n        const r2 = palette.get(idx, 0);\n        const g2 = palette.get(idx, 1);\n        const b2 = palette.get(idx, 2);\n\n        const er = r1 - r2;\n        const eg = g1 - g2;\n        const eb = b1 - b2;\n\n        if (er === 0 && eg === 0 && eb === 0) {\n          continue;\n        }\n\n        const i0 = direction === 1 ? 0 : ds.length - 1;\n        const i1 = direction === 1 ? ds.length : 0;\n        for (let i = i0; i !== i1; i += direction) {\n          const x1 = Math.trunc(ds[i][1]);\n          const y1 = Math.trunc(ds[i][2]);\n          if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {\n            const d = ds[i][0];\n            idx = index + x1 + y1 * width;\n            idx *= 4;\n            const p2 = opt.image.getPixel(x1, y1);\n            p2.r = Math.max(0, Math.min(255, Math.trunc(p2.r + er * d)));\n            p2.g = Math.max(0, Math.min(255, Math.trunc(p2.g + er * d)));\n            p2.b = Math.max(0, Math.min(255, Math.trunc(p2.b + er * d)));\n          }\n        }\n      }\n    }\n\n    return indexedImage;\n  }\n\n  /**\n   * Apply the dot screen filter to the image.\n   */\n  public static dotScreen(opt: DotScreenOptions): MemoryImage {\n    let angle = opt.angle ?? 180;\n    const size = opt.size ?? 5.75;\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    angle *= 0.0174533;\n    const s = Math.sin(angle);\n    const c = Math.cos(angle);\n    for (const frame of opt.image.frames) {\n      const w = frame.width - 1;\n      const h = frame.height - 1;\n      const cntX = (opt.centerX ?? Math.trunc(w / 2)) / w;\n      const cntY = (opt.centerY ?? Math.trunc(h / 2)) / h;\n\n      const pattern = (\n        cntX: number,\n        cntY: number,\n        tx: number,\n        ty: number\n      ): number => {\n        const texX = (tx - cntX) * w;\n        const texY = (ty - cntY) * h;\n        const pointX = (c * texX - s * texY) * size;\n        const pointY = (s * texX + c * texY) * size;\n        return Math.sin(pointX) * Math.sin(pointY) * 4;\n      };\n\n      for (const p of frame) {\n        const average = p.luminanceNormalized;\n        const pat = pattern(cntX, cntY, p.x / w, p.y / h);\n        const c = (average * 10 - 5 + pat) * p.maxChannelValue;\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n        p.r = MathUtils.mix(p.r, c, mx);\n        p.g = MathUtils.mix(p.g, c, mx);\n        p.b = MathUtils.mix(p.b, c, mx);\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Create a drop-shadow effect for the image.\n   */\n  public static dropShadow(opt: DropShadowOptions): MemoryImage {\n    const blur = opt.blur >= 0 ? opt.blur : 0;\n    const shadowColor = opt.shadowColor ?? new ColorRgba8(0, 0, 0, 128);\n\n    const shadowWidth = opt.image.width + blur * 2;\n    const shadowHeight = opt.image.height + blur * 2;\n    let shadowOffsetX = -blur;\n    let shadowOffsetY = -blur;\n\n    let newImageWidth = shadowWidth;\n    let newImageHeight = shadowHeight;\n    let imageOffsetX = 0;\n    let imageOffsetY = 0;\n\n    if (shadowOffsetX + opt.hShadow < 0) {\n      imageOffsetX = -(shadowOffsetX + opt.hShadow);\n      shadowOffsetX = -shadowOffsetX;\n      newImageWidth = imageOffsetX;\n    }\n\n    if (shadowOffsetY + opt.vShadow < 0) {\n      imageOffsetY = -(shadowOffsetY + opt.vShadow);\n      shadowOffsetY = -shadowOffsetY;\n      newImageHeight += imageOffsetY;\n    }\n\n    if (shadowWidth + shadowOffsetX + opt.hShadow > newImageWidth) {\n      newImageWidth = shadowWidth + shadowOffsetX + opt.hShadow;\n    }\n\n    if (shadowHeight + shadowOffsetY + opt.vShadow > newImageHeight) {\n      newImageHeight = shadowHeight + shadowOffsetY + opt.vShadow;\n    }\n\n    const dst = new MemoryImage({\n      width: newImageWidth,\n      height: newImageHeight,\n      numChannels: 4,\n    });\n\n    dst.clear(new ColorRgba8(255, 255, 255, 0));\n\n    Draw.compositeImage({\n      dst: dst,\n      src: opt.image,\n      dstX: shadowOffsetX,\n      dstY: shadowOffsetY,\n    });\n\n    Filter.remapColors({\n      image: dst,\n      red: Channel.alpha,\n      green: Channel.alpha,\n      blue: Channel.alpha,\n    });\n\n    Filter.scaleRgba({\n      image: dst,\n      scale: shadowColor,\n    });\n\n    Filter.gaussianBlur({\n      image: dst,\n      radius: blur,\n    });\n\n    Draw.compositeImage({\n      dst: dst,\n      src: opt.image,\n      dstX: imageOffsetX,\n      dstY: imageOffsetY,\n    });\n\n    return dst;\n  }\n\n  /**\n   * Apply the edge glow filter to the image.\n   */\n  public static edgeGlow(opt: EdgeGlowOptions): MemoryImage {\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (amount === 0) {\n      return opt.image;\n    }\n\n    for (const frame of opt.image.frames) {\n      const orig = MemoryImage.from(frame, true);\n      const width = frame.width;\n      const height = frame.height;\n      for (const p of frame) {\n        const ny = MathUtils.clamp(p.y - 1, 0, height - 1);\n        const py = MathUtils.clamp(p.y + 1, 0, height - 1);\n        const nx = MathUtils.clamp(p.x - 1, 0, width - 1);\n        const px = MathUtils.clamp(p.x + 1, 0, width - 1);\n\n        const t1 = orig.getPixel(nx, ny);\n        const t2 = orig.getPixel(p.x, ny);\n        const t3 = orig.getPixel(px, ny);\n        const t4 = orig.getPixel(nx, p.y);\n        const t5 = p;\n        const t6 = orig.getPixel(px, p.y);\n        const t7 = orig.getPixel(nx, py);\n        const t8 = orig.getPixel(p.x, py);\n        const t9 = orig.getPixel(px, py);\n\n        const xxR =\n          t1.rNormalized +\n          2 * t2.rNormalized +\n          t3.rNormalized -\n          t7.rNormalized -\n          2 * t8.rNormalized -\n          t9.rNormalized;\n        const xxG =\n          t1.gNormalized +\n          2 * t2.gNormalized +\n          t3.gNormalized -\n          t7.gNormalized -\n          2 * t8.gNormalized -\n          t9.gNormalized;\n        const xxB =\n          t1.bNormalized +\n          2 * t2.bNormalized +\n          t3.bNormalized -\n          t7.bNormalized -\n          2 * t8.bNormalized -\n          t9.bNormalized;\n\n        const yyR =\n          t1.rNormalized -\n          t3.rNormalized +\n          2 * t4.rNormalized -\n          2 * t6.rNormalized +\n          t7.rNormalized -\n          t9.rNormalized;\n        const yyG =\n          t1.gNormalized -\n          t3.gNormalized +\n          2 * t4.gNormalized -\n          2 * t6.gNormalized +\n          t7.gNormalized -\n          t9.gNormalized;\n        const yyB =\n          t1.bNormalized -\n          t3.bNormalized +\n          2 * t4.bNormalized -\n          2 * t6.bNormalized +\n          t7.bNormalized -\n          t9.bNormalized;\n\n        const rrR = Math.sqrt(xxR * xxR + yyR * yyR);\n        const rrG = Math.sqrt(xxG * xxG + yyG * yyG);\n        const rrB = Math.sqrt(xxB * xxB + yyB * yyB);\n\n        const r = rrR * 2 * t5.rNormalized * p.maxChannelValue;\n        const g = rrG * 2 * t5.gNormalized * p.maxChannelValue;\n        const b = rrB * 2 * t5.bNormalized * p.maxChannelValue;\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n\n        p.r = MathUtils.mix(p.r, r, mx);\n        p.g = MathUtils.mix(p.g, g, mx);\n        p.b = MathUtils.mix(p.b, b, mx);\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Apply an emboss convolution filter.\n   */\n  public static emboss(opt: EmbossOptions): MemoryImage {\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n    const filter = [1.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5];\n    return Filter.convolution({\n      image: opt.image,\n      filter: filter,\n      div: 1,\n      offset: 127,\n      amount: amount,\n      mask: opt.mask,\n      maskChannel: maskChannel,\n    });\n  }\n\n  /**\n   * Apply gamma scaling\n   */\n  public static gamma(opt: GammaOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        if (msk === undefined) {\n          p.rNormalized = Math.pow(p.rNormalized, opt.gamma);\n          p.gNormalized = Math.pow(p.gNormalized, opt.gamma);\n          p.bNormalized = Math.pow(p.bNormalized, opt.gamma);\n        } else {\n          p.rNormalized = MathUtils.mix(\n            p.rNormalized,\n            Math.pow(p.rNormalized, opt.gamma),\n            msk\n          );\n          p.gNormalized = MathUtils.mix(\n            p.gNormalized,\n            Math.pow(p.gNormalized, opt.gamma),\n            msk\n          );\n          p.bNormalized = MathUtils.mix(\n            p.bNormalized,\n            Math.pow(p.bNormalized, opt.gamma),\n            msk\n          );\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Apply gaussian blur to the **image**. **radius** determines how many pixels\n   * away from the current pixel should contribute to the blur, where 0 is no\n   * blur and the larger the **radius**, the stronger the blur.\n   */\n  public static gaussianBlur(opt: GaussianBlurOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (opt.radius <= 0) {\n      return opt.image;\n    }\n\n    let kernel: SeparableKernel | undefined = undefined;\n\n    if (Filter._gaussianKernelCache.has(opt.radius)) {\n      kernel = Filter._gaussianKernelCache.get(opt.radius)!;\n    } else {\n      // Compute coefficients\n      const sigma = (opt.radius * 2) / 3;\n      const s = 2 * sigma * sigma;\n\n      kernel = new SeparableKernel(opt.radius);\n\n      let sum = 0;\n      for (let x = -opt.radius; x <= opt.radius; ++x) {\n        const c = Math.exp(-(x * x) / s);\n        sum += c;\n        kernel.setCoefficient(x + opt.radius, c);\n      }\n      // Normalize the coefficients\n      kernel.scaleCoefficients(1 / sum);\n\n      // Cache the kernel for this radius so we don't have to recompute it\n      // next time.\n      Filter._gaussianKernelCache.set(opt.radius, kernel);\n    }\n\n    return Filter.separableConvolution({\n      image: opt.image,\n      kernel: kernel,\n      mask: opt.mask,\n      maskChannel: maskChannel,\n    });\n  }\n\n  /**\n   * Convert the image to grayscale.\n   */\n  public static grayscale(opt: GrayscaleOptions): MemoryImage {\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    for (const frame of opt.image.frames) {\n      if (frame.hasPalette) {\n        const p = frame.palette!;\n        const numColors = p.numColors;\n        for (let i = 0; i < numColors; ++i) {\n          const l = ColorUtils.getLuminanceRgb(\n            p.getRed(i),\n            p.getGreen(i),\n            p.getBlue(i)\n          );\n          if (amount !== 1) {\n            const r = MathUtils.mix(p.getRed(i), l, amount);\n            const g = MathUtils.mix(p.getGreen(i), l, amount);\n            const b = MathUtils.mix(p.getBlue(i), l, amount);\n            p.setRed(i, r);\n            p.setGreen(i, g);\n            p.setBlue(i, b);\n          } else {\n            p.setRed(i, l);\n            p.setGreen(i, l);\n            p.setBlue(i, l);\n          }\n        }\n      } else {\n        for (const p of frame) {\n          const l = ColorUtils.getLuminanceRgb(p.r, p.g, p.b);\n          const msk = opt.mask\n            ?.getPixel(p.x, p.y)\n            .getChannelNormalized(maskChannel);\n          const mx = (msk ?? 1) * amount;\n          if (mx !== 1) {\n            p.r = MathUtils.mix(p.r, l, mx);\n            p.g = MathUtils.mix(p.g, l, mx);\n            p.b = MathUtils.mix(p.b, l, mx);\n          } else {\n            p.r = l;\n            p.g = l;\n            p.b = l;\n          }\n        }\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Convert a high dynamic range image to a low dynamic range image,\n   * with optional exposure control.\n   */\n  public static hdrToLdr(opt: HdrToLdrOptions): MemoryImage {\n    const knee = (x: number, f: number): number => {\n      return Math.log(x * f + 1.0) / f;\n    };\n\n    const gamma = (h: number, m: number): number => {\n      let x = Math.max(0, h * m);\n      if (x > 1.0) {\n        x = 1 + knee(x - 1, 0.184874);\n      }\n      return Math.pow(x, 0.4545) * 84.66;\n    };\n\n    const image = new MemoryImage({\n      width: opt.image.width,\n      height: opt.image.height,\n      numChannels: opt.image.numChannels,\n    });\n\n    const m =\n      opt.exposure !== undefined\n        ? Math.pow(2, MathUtils.clamp(opt.exposure + 2.47393, -20, 20))\n        : 1;\n\n    const nc = opt.image.numChannels;\n\n    for (let y = 0; y < opt.image.height; ++y) {\n      for (let x = 0; x < opt.image.width; ++x) {\n        const hp = opt.image.getPixel(x, y);\n\n        let r = hp.rNormalized;\n        let g = nc === 1 ? r : hp.gNormalized;\n        let b = nc === 1 ? r : hp.bNormalized;\n\n        if (!isFinite(r) || isNaN(r)) {\n          r = 0;\n        }\n        if (!isFinite(g) || isNaN(g)) {\n          g = 0;\n        }\n        if (!isFinite(b) || isNaN(b)) {\n          b = 0;\n        }\n\n        let ri = 0;\n        let gi = 0;\n        let bi = 0;\n        if (opt.exposure !== undefined) {\n          ri = gamma(r, m);\n          gi = gamma(g, m);\n          bi = gamma(b, m);\n        } else {\n          ri = MathUtils.clamp(r, 0, 1) * 255;\n          gi = MathUtils.clamp(g, 0, 1) * 255;\n          bi = MathUtils.clamp(b, 0, 1) * 255;\n        }\n\n        // Normalize the color\n        const mi = Math.max(ri, Math.max(gi, bi));\n        if (mi > 255) {\n          ri = 255 * (ri / mi);\n          gi = 255 * (gi / mi);\n          bi = 255 * (bi / mi);\n        }\n\n        if (opt.image.numChannels > 3) {\n          let a = hp.a;\n          if (!isFinite(a) || isNaN(a)) {\n            a = 1;\n          }\n          image.setPixelRgba(\n            x,\n            y,\n            MathUtils.clampInt255(ri),\n            MathUtils.clampInt255(gi),\n            MathUtils.clampInt255(bi),\n            MathUtils.clampInt255(a * 255)\n          );\n        } else {\n          image.setPixelRgb(\n            x,\n            y,\n            MathUtils.clampInt255(ri),\n            MathUtils.clampInt255(gi),\n            MathUtils.clampInt255(bi)\n          );\n        }\n      }\n    }\n\n    return image;\n  }\n\n  /**\n   * Apply the hexagon pixelate filter to the image.\n   */\n  public static hexagonPixelate(opt: HexagonPixelateOptions): MemoryImage {\n    const size = opt.size ?? 5;\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    for (const frame of opt.image.frames) {\n      const w = frame.width - 1;\n      const h = frame.height - 1;\n      const cntX = (opt.centerX ?? Math.trunc(frame.width / 2)) / w;\n      const cntY = (opt.centerY ?? Math.trunc(frame.height / 2)) / h;\n      const orig = frame.clone({\n        skipAnimation: true,\n      });\n\n      for (const p of frame) {\n        let texX = (p.x - cntX) / size;\n        let texY = (p.y - cntY) / size;\n        texY /= 0.866025404;\n        texX -= texY * 0.5;\n\n        let ax = 0;\n        let ay = 0;\n        if (texX + texY - Math.floor(texX) - Math.floor(texY) < 1) {\n          ax = Math.floor(texX);\n          ay = Math.floor(texY);\n        } else {\n          ax = Math.ceil(texX);\n          ay = Math.ceil(texY);\n        }\n\n        const bx = Math.ceil(texX);\n        const by = Math.floor(texY);\n        const cx = Math.floor(texX);\n        const cy = Math.ceil(texY);\n\n        const tex2X = texX;\n        const tex2Y = texY;\n        const tex2Z = 1 - texX - texY;\n        const a2x = ax;\n        const a2y = ay;\n        const a2z = 1 - ax - ay;\n        const b2x = bx;\n        const b2y = by;\n        const b2z = 1 - bx - by;\n        const c2x = cx;\n        const c2y = cy;\n        const c2z = 1 - cx - cy;\n\n        const aLen = MathUtils.length3(tex2X - a2x, tex2Y - a2y, tex2Z - a2z);\n        const bLen = MathUtils.length3(tex2X - b2x, tex2Y - b2y, tex2Z - b2z);\n        const cLen = MathUtils.length3(tex2X - c2x, tex2Y - c2y, tex2Z - c2z);\n\n        let choiceX = 0;\n        let choiceY = 0;\n        if (aLen < bLen) {\n          if (aLen < cLen) {\n            choiceX = ax;\n            choiceY = ay;\n          } else {\n            choiceX = cx;\n            choiceY = cy;\n          }\n        } else {\n          if (bLen < cLen) {\n            choiceX = bx;\n            choiceY = by;\n          } else {\n            choiceX = cx;\n            choiceY = cy;\n          }\n        }\n\n        choiceX += choiceY * 0.5;\n        choiceY *= 0.866025404;\n        choiceX *= size / w;\n        choiceY *= size / h;\n\n        const nx = choiceX + cntX / w;\n        const ny = choiceY + cntY / h;\n        const x = MathUtils.clamp(nx * w, 0, w);\n        const y = MathUtils.clamp(ny * h, 0, h);\n        const newColor = orig.getPixel(Math.floor(x), Math.floor(y));\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n\n        p.r = MathUtils.mix(p.r, newColor.r, mx);\n        p.g = MathUtils.mix(p.g, newColor.g, mx);\n        p.b = MathUtils.mix(p.b, newColor.b, mx);\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Invert the colors of the **image**.\n   */\n  public static invert(opt: InvertOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const max = opt.image.maxChannelValue;\n    for (const frame of opt.image.frames) {\n      if (opt.image.hasPalette) {\n        const p = frame.palette!;\n        const numColors = p.numColors;\n        for (let i = 0; i < numColors; ++i) {\n          const r = max - p.getRed(i);\n          const g = max - p.getGreen(i);\n          const b = max - p.getBlue(i);\n          p.setRgb(i, r, g, b);\n        }\n      } else {\n        if (max !== 0) {\n          for (const p of frame) {\n            const msk = opt.mask\n              ?.getPixel(p.x, p.y)\n              .getChannelNormalized(maskChannel);\n\n            if (msk === undefined) {\n              p.r = max - p.r;\n              p.g = max - p.g;\n              p.b = max - p.b;\n            } else {\n              p.r = MathUtils.mix(p.r, max - p.r, msk);\n              p.g = MathUtils.mix(p.g, max - p.g, msk);\n              p.b = MathUtils.mix(p.b, max - p.b, msk);\n            }\n          }\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  public static luminanceThreshold(\n    opt: LuminanceThresholdOptions\n  ): MemoryImage {\n    const threshold = opt.threshold ?? 0.5;\n    const outputColor = opt.outputColor ?? false;\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        const y =\n          0.3 * p.rNormalized + 0.59 * p.gNormalized + 0.11 * p.bNormalized;\n        if (outputColor) {\n          const l = Math.max(0, y - threshold);\n          const sl = Math.sign(l);\n          const msk = opt.mask\n            ?.getPixel(p.x, p.y)\n            .getChannelNormalized(maskChannel);\n          const mx = (msk ?? 1) * amount;\n          p.r = MathUtils.mix(p.r, p.r * sl, mx);\n          p.g = MathUtils.mix(p.g, p.g * sl, mx);\n          p.b *= MathUtils.mix(p.b, p.b * sl, mx);\n        } else {\n          const y2 = y < threshold ? 0 : p.maxChannelValue;\n          const msk = opt.mask\n            ?.getPixel(p.x, p.y)\n            .getChannelNormalized(maskChannel);\n          const mx = (msk ?? 1) * amount;\n          p.r = MathUtils.mix(p.r, y2, mx);\n          p.g = MathUtils.mix(p.g, y2, mx);\n          p.b = MathUtils.mix(p.b, y2, mx);\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Apply the monochrome filter to the **image**.\n   *\n   * **amount** controls the strength of the effect, in the range [0, 1].\n   */\n  public static monochrome(opt: MonochromeOptions): MemoryImage {\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (amount === 0) {\n      return opt.image;\n    }\n\n    const nr = opt.color?.rNormalized ?? 0.45;\n    const ng = opt.color?.gNormalized ?? 0.6;\n    const nb = opt.color?.bNormalized ?? 0.3;\n\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        const y = p.luminanceNormalized;\n\n        const r = y < 0.5 ? 2 * y * nr : 1 - 2 * (1 - y) * (1 - nr);\n        const g = y < 0.5 ? 2 * y * ng : 1 - 2 * (1 - y) * (1 - ng);\n        const b = y < 0.5 ? 2 * y * nb : 1 - 2 * (1 - y) * (1 - nb);\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n        p.r = MathUtils.mix(p.r, r * p.maxChannelValue, mx);\n        p.g = MathUtils.mix(p.g, g * p.maxChannelValue, mx);\n        p.b = MathUtils.mix(p.b, b * p.maxChannelValue, mx);\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Add random noise to pixel values. **sigma** determines how strong the effect\n   * should be. **type** should be one of the following: _NoiseType.gaussian_,\n   * _NoiseType.uniform_, _NoiseType.saltAndPepper_, _NoiseType.poisson_,\n   * or _NoiseType.rice_.\n   */\n  public static noise(opt: NoiseOptions): MemoryImage {\n    const type = opt.type ?? NoiseType.gaussian;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    let nSigma = opt.sigma;\n    let min = 0;\n    let max = 0;\n\n    if (nSigma === 0 && type !== NoiseType.poisson) {\n      return opt.image;\n    }\n\n    if (nSigma < 0 || type === NoiseType.saltAndPepper) {\n      const extremes = opt.image.getColorExtremes();\n      min = extremes.min;\n      max = extremes.max;\n    }\n\n    if (nSigma < 0) {\n      nSigma = (-nSigma * (max - min)) / 100.0;\n    }\n\n    for (const frame of opt.image.frames) {\n      switch (type) {\n        case NoiseType.gaussian:\n          for (const p of frame) {\n            const r = p.r + nSigma * RandomUtils.grand();\n            const g = p.g + nSigma * RandomUtils.grand();\n            const b = p.b + nSigma * RandomUtils.grand();\n            const a = p.a;\n            const msk = opt.mask\n              ?.getPixel(p.x, p.y)\n              .getChannelNormalized(maskChannel);\n            if (msk === undefined) {\n              p.setRgba(r, g, b, a);\n            } else {\n              p.r = MathUtils.mix(p.r, r, msk);\n              p.g = MathUtils.mix(p.g, g, msk);\n              p.b = MathUtils.mix(p.b, b, msk);\n              p.a = MathUtils.mix(p.a, a, msk);\n            }\n          }\n          break;\n        case NoiseType.uniform:\n          for (const p of frame) {\n            const r = p.r + nSigma * RandomUtils.crand();\n            const g = p.g + nSigma * RandomUtils.crand();\n            const b = p.b + nSigma * RandomUtils.crand();\n            const a = p.a;\n            const msk = opt.mask\n              ?.getPixel(p.x, p.y)\n              .getChannelNormalized(maskChannel);\n            if (msk === undefined) {\n              p.setRgba(r, g, b, a);\n            } else {\n              p.r = MathUtils.mix(p.r, r, msk);\n              p.g = MathUtils.mix(p.g, g, msk);\n              p.b = MathUtils.mix(p.b, b, msk);\n              p.a = MathUtils.mix(p.a, a, msk);\n            }\n          }\n          break;\n        case NoiseType.saltAndPepper:\n          if (nSigma < 0) {\n            nSigma = -nSigma;\n          }\n          if (max === min) {\n            min = 0;\n            max = 255;\n          }\n          for (const p of frame) {\n            if (Math.random() * 100 < nSigma) {\n              const r = Math.random() < 0.5 ? max : min;\n              const g = Math.random() < 0.5 ? max : min;\n              const b = Math.random() < 0.5 ? max : min;\n              const a = p.a;\n              const msk = opt.mask\n                ?.getPixel(p.x, p.y)\n                .getChannelNormalized(maskChannel);\n              if (msk === undefined) {\n                p.setRgba(r, g, b, a);\n              } else {\n                p.r = MathUtils.mix(p.r, r, msk);\n                p.g = MathUtils.mix(p.g, g, msk);\n                p.b = MathUtils.mix(p.b, b, msk);\n                p.a = MathUtils.mix(p.a, a, msk);\n              }\n            }\n          }\n          break;\n        case NoiseType.poisson:\n          for (const p of frame) {\n            const r = RandomUtils.prand(p.r);\n            const g = RandomUtils.prand(p.g);\n            const b = RandomUtils.prand(p.b);\n            const a = p.a;\n            const msk = opt.mask\n              ?.getPixel(p.x, p.y)\n              .getChannelNormalized(maskChannel);\n            if (msk === undefined) {\n              p.setRgba(r, g, b, a);\n            } else {\n              p.r = MathUtils.mix(p.r, r, msk);\n              p.g = MathUtils.mix(p.g, g, msk);\n              p.b = MathUtils.mix(p.b, b, msk);\n              p.a = MathUtils.mix(p.a, a, msk);\n            }\n          }\n          break;\n        case NoiseType.rice: {\n          const sqrt2 = Math.sqrt(2);\n          for (const p of frame) {\n            let val0 = p.r / sqrt2;\n            let re = val0 + nSigma * RandomUtils.grand();\n            let im = val0 + nSigma * RandomUtils.grand();\n            let val = Math.sqrt(re * re + im * im);\n            const r = Math.trunc(val);\n\n            val0 = p.g / sqrt2;\n            re = val0 + nSigma * RandomUtils.grand();\n            im = val0 + nSigma * RandomUtils.grand();\n            val = Math.sqrt(re * re + im * im);\n            const g = Math.trunc(val);\n\n            val0 = p.b / sqrt2;\n            re = val0 + nSigma * RandomUtils.grand();\n            im = val0 + nSigma * RandomUtils.grand();\n            val = Math.sqrt(re * re + im * im);\n            const b = Math.trunc(val);\n\n            const a = p.a;\n\n            const msk = opt.mask\n              ?.getPixel(p.x, p.y)\n              .getChannelNormalized(maskChannel);\n            if (msk === undefined) {\n              p.setRgba(r, g, b, a);\n            } else {\n              p.r = MathUtils.mix(p.r, r, msk);\n              p.g = MathUtils.mix(p.g, g, msk);\n              p.b = MathUtils.mix(p.b, b, msk);\n              p.a = MathUtils.mix(p.a, a, msk);\n            }\n          }\n          break;\n        }\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Linearly normalize the colors of the image. All color values will be mapped\n   * to the range **min**, **max** inclusive.\n   */\n  public static normalize(opt: NormalizeOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const a = opt.min < opt.max ? opt.min : opt.max;\n    const b = opt.min < opt.max ? opt.max : opt.min;\n\n    const extremes = opt.image.getColorExtremes();\n    const mn = extremes.min;\n    const mx = extremes.max;\n\n    if (mn === mx) {\n      return opt.image;\n    }\n\n    const fm = mn;\n    const fM = mx;\n\n    if (mn !== a || mx !== b) {\n      for (const frame of opt.image.frames) {\n        for (const p of frame) {\n          const msk = opt.mask\n            ?.getPixel(p.x, p.y)\n            .getChannelNormalized(maskChannel);\n          if (msk === undefined) {\n            p.r = ((p.r - fm) / (fM - fm)) * (b - a) + a;\n            p.g = ((p.g - fm) / (fM - fm)) * (b - a) + a;\n            p.b = ((p.b - fm) / (fM - fm)) * (b - a) + a;\n            p.a = ((p.a - fm) / (fM - fm)) * (b - a) + a;\n          } else {\n            const xr = ((p.r - fm) / (fM - fm)) * (b - a) + a;\n            const xg = ((p.g - fm) / (fM - fm)) * (b - a) + a;\n            const xb = ((p.b - fm) / (fM - fm)) * (b - a) + a;\n            const xa = ((p.a - fm) / (fM - fm)) * (b - a) + a;\n            p.r = MathUtils.mix(p.r, xr, msk);\n            p.g = MathUtils.mix(p.g, xg, msk);\n            p.b = MathUtils.mix(p.b, xb, msk);\n            p.a = MathUtils.mix(p.a, xa, msk);\n          }\n        }\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Pixelate the **image**.\n   *\n   * **size** determines the size of the pixelated blocks.\n   * If **mode** is **upperLeft** then the upper-left corner of the\n   * block will be used for the block color. Otherwise if **mode** is\n   * **average**, the average of all the pixels in the block will be\n   * used for the block color.\n   */\n  public static pixelate(opt: PixelateOptions): MemoryImage {\n    const mode = opt.mode ?? PixelateMode.upperLeft;\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (opt.size <= 1) {\n      return opt.image;\n    }\n\n    for (const frame of opt.image.frames) {\n      const w = frame.width;\n      const h = frame.height;\n      switch (mode) {\n        case PixelateMode.upperLeft:\n          for (const p of frame) {\n            const x2 = Math.trunc(p.x / opt.size) * opt.size;\n            const y2 = Math.trunc(p.y / opt.size) * opt.size;\n            const p2 = frame.getPixel(x2, y2);\n            const msk = opt.mask\n              ?.getPixel(p.x, p.y)\n              .getChannelNormalized(maskChannel);\n            const mx = (msk ?? 1) * amount;\n            if (mx === 1) {\n              p.set(p2);\n            } else {\n              p.r = MathUtils.mix(p.r, p2.r, mx);\n              p.g = MathUtils.mix(p.g, p2.g, mx);\n              p.b = MathUtils.mix(p.b, p2.b, mx);\n              p.a = MathUtils.mix(p.a, p2.a, mx);\n            }\n          }\n          break;\n        case PixelateMode.average:\n          {\n            let r = 0;\n            let g = 0;\n            let b = 0;\n            let a = 0;\n            let lx = -1;\n            let ly = -1;\n            for (const p of frame) {\n              const x2 = Math.trunc(p.x / opt.size) * opt.size;\n              const y2 = Math.trunc(p.y / opt.size) * opt.size;\n              const msk = opt.mask\n                ?.getPixel(p.x, p.y)\n                .getChannelNormalized(maskChannel);\n              const mx = (msk ?? 1) * amount;\n              if (x2 !== lx || y2 <= ly) {\n                lx = x2;\n                ly = y2;\n                r = 0;\n                g = 0;\n                b = 0;\n                a = 0;\n                for (\n                  let by = 0, by2 = y2;\n                  by < opt.size && by2 < h;\n                  ++by, ++by2\n                ) {\n                  for (\n                    let bx = 0, bx2 = x2;\n                    bx < opt.size && bx2 < w;\n                    ++bx, ++bx2\n                  ) {\n                    const p2 = frame.getPixel(bx2, by2);\n                    r += p2.r;\n                    g += p2.g;\n                    b += p2.b;\n                    a += p2.a;\n                  }\n                }\n                const total = opt.size * opt.size;\n                r /= total;\n                g /= total;\n                b /= total;\n                a /= total;\n              }\n\n              p.r = MathUtils.mix(p.r, r, mx);\n              p.g = MathUtils.mix(p.g, g, mx);\n              p.b = MathUtils.mix(p.b, b, mx);\n              p.a = MathUtils.mix(p.a, a, mx);\n            }\n          }\n\n          break;\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Quantize the number of colors in image to 256.\n   */\n  public static quantize(opt: QuantizeOptions): MemoryImage {\n    const numberOfColors = opt.numberOfColors ?? 256;\n    const method = opt.method ?? QuantizeMethod.neuralNet;\n    const dither = opt.dither ?? DitherKernel.none;\n    const ditherSerpentine = opt.ditherSerpentine ?? false;\n\n    let quantizer: Quantizer | undefined = undefined;\n    if (method === QuantizeMethod.octree || numberOfColors < 4) {\n      quantizer = new OctreeQuantizer(opt.image, numberOfColors);\n    } else {\n      quantizer = new NeuralQuantizer(opt.image, numberOfColors);\n    }\n\n    return Filter.ditherImage({\n      image: opt.image,\n      quantizer: quantizer,\n      kernel: dither,\n      serpentine: ditherSerpentine,\n    });\n  }\n\n  /**\n   * Applies Reinhard tone mapping to the hdr image, in-place.\n   */\n  public static reinhardToneMap(opt: ReinhardToneMapOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const yw = [0.212671, 0.71516, 0.072169];\n\n    // Compute world adaptation luminance, _Ywa_\n    let ywa = 0.0;\n    for (const p of opt.image) {\n      const r = p.r;\n      const g = p.g;\n      const b = p.b;\n      const lum = yw[0] * r + yw[1] * g + yw[2] * b;\n      if (lum > 1.0e-4) {\n        ywa += Math.log(lum);\n      }\n    }\n\n    ywa = Math.exp(ywa / (opt.image.width * opt.image.height));\n\n    const invY2 = 1 / (ywa * ywa);\n\n    for (const p of opt.image) {\n      const r = p.r;\n      const g = p.g;\n      const b = p.b;\n\n      const lum = yw[0] * r + yw[1] * g + yw[2] * b;\n\n      const s = (1 + lum * invY2) / (1 + lum);\n\n      const msk = opt.mask\n        ?.getPixel(p.x, p.y)\n        .getChannelNormalized(maskChannel);\n      if (msk === undefined) {\n        p.r = r * s;\n        p.g = g * s;\n        p.b = b * s;\n      } else {\n        p.r = MathUtils.mix(p.r, r * s, msk);\n        p.g = MathUtils.mix(p.g, g * s, msk);\n        p.b = MathUtils.mix(p.b, b * s, msk);\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Remap the color channels of the image.\n   * **red**, **green**, **blue** and **alpha** should be set to one of the following:\n   * _Channel.red_, _Channel.green_, _Channel.blue_, _Channel.alpha_, or\n   * _Channel.luminance_.\n   */\n  public static remapColors(opt: RemapColorsOptions): MemoryImage {\n    const red = opt.red ?? Channel.red;\n    const green = opt.green ?? Channel.green;\n    const blue = opt.blue ?? Channel.blue;\n    const alpha = opt.alpha ?? Channel.alpha;\n\n    const l: number[] = [0, 0, 0, 0, 0];\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        l[0] = p.r;\n        l[1] = p.g;\n        l[2] = p.b;\n        l[3] = p.a;\n        if (\n          red === Channel.luminance ||\n          green === Channel.luminance ||\n          blue === Channel.luminance ||\n          alpha === Channel.luminance\n        ) {\n          l[4] = ColorUtils.getLuminanceRgb(l[0], l[1], l[2]);\n        }\n        p.r = l[red];\n        p.g = l[green];\n        p.b = l[blue];\n        p.a = l[alpha];\n      }\n    }\n    return opt.image;\n  }\n\n  public static scaleRgba(opt: ScaleRgbaOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const dr = opt.scale.rNormalized;\n    const dg = opt.scale.gNormalized;\n    const db = opt.scale.bNormalized;\n    const da = opt.scale.aNormalized;\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        if (msk === undefined) {\n          p.setRgba(p.r * dr, p.g * dg, p.b * db, p.a * da);\n        } else {\n          p.r = MathUtils.mix(p.r, p.r * dr, msk);\n          p.g = MathUtils.mix(p.g, p.g * dg, msk);\n          p.b = MathUtils.mix(p.b, p.b * db, msk);\n          p.a = MathUtils.mix(p.a, p.a * da, msk);\n        }\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Apply a generic separable convolution filter to the **image**, using the\n   * given **kernel**.\n   *\n   * **gaussianBlur** is an example of such a filter.\n   */\n  public static separableConvolution(\n    opt: SeparableConvolutionOptions\n  ): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const tmp = MemoryImage.from(opt.image);\n\n    // Apply the filter horizontally\n    opt.kernel.apply({\n      src: opt.image,\n      dst: tmp,\n      maskChannel: maskChannel,\n      mask: opt.mask,\n    });\n\n    // Apply the filter vertically, applying back to the original image.\n    opt.kernel.apply({\n      src: tmp,\n      dst: opt.image,\n      horizontal: false,\n      maskChannel: maskChannel,\n      mask: opt.mask,\n    });\n\n    return opt.image;\n  }\n\n  /**\n   * Apply sepia tone to the **image**.\n   *\n   * **amount** controls the strength of the effect, in the range [0, 1].\n   */\n  public static sepia(opt: SepiaOptions): MemoryImage {\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (amount === 0) {\n      return opt.image;\n    }\n\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        const r = p.rNormalized;\n        const g = p.gNormalized;\n        const b = p.bNormalized;\n        const y = ColorUtils.getLuminanceRgb(r, g, b);\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n        p.rNormalized = mx * (y + 0.15) + (1 - mx) * r;\n        p.gNormalized = mx * (y + 0.07) + (1 - mx) * g;\n        p.bNormalized = mx * (y - 0.12) + (1 - mx) * b;\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Apply sketch filter to the **image**.\n   *\n   * **amount** controls the strength of the effect, in the range [0, 1].\n   */\n  public static sketch(opt: SketchOptions): MemoryImage {\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (amount === 0) {\n      return opt.image;\n    }\n\n    for (const frame of opt.image.frames) {\n      const width = frame.width;\n      const height = frame.height;\n      const orig = MemoryImage.from(frame, true);\n      for (const p of frame) {\n        const ny = MathUtils.clamp(p.y - 1, 0, height - 1);\n        const py = MathUtils.clamp(p.y + 1, 0, height - 1);\n        const nx = MathUtils.clamp(p.x - 1, 0, width - 1);\n        const px = MathUtils.clamp(p.x + 1, 0, width - 1);\n\n        const bottomLeft = orig.getPixel(nx, py).luminanceNormalized;\n        const topLeft = orig.getPixel(nx, ny).luminanceNormalized;\n        const bottomRight = orig.getPixel(px, py).luminanceNormalized;\n        const topRight = orig.getPixel(px, ny).luminanceNormalized;\n        const left = orig.getPixel(nx, p.y).luminanceNormalized;\n        const right = orig.getPixel(px, p.y).luminanceNormalized;\n        const bottom = orig.getPixel(p.x, py).luminanceNormalized;\n        const top = orig.getPixel(p.x, ny).luminanceNormalized;\n\n        const h =\n          -topLeft - 2 * top - topRight + bottomLeft + 2 * bottom + bottomRight;\n\n        const v =\n          -bottomLeft - 2 * left - topLeft + bottomRight + 2 * right + topRight;\n\n        const mag = 1 - Math.sqrt(h * h + v * v);\n\n        const r = MathUtils.clamp(mag * p.r, 0, p.maxChannelValue);\n        const g = MathUtils.clamp(mag * p.g, 0, p.maxChannelValue);\n        const b = MathUtils.clamp(mag * p.b, 0, p.maxChannelValue);\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n\n        p.r = MathUtils.mix(p.r, r, mx);\n        p.g = MathUtils.mix(p.g, g, mx);\n        p.b = MathUtils.mix(p.b, b, mx);\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Apply a smoothing convolution filter to the **image**.\n   *\n   * **weight** is the weight of the current pixel being filtered. If it's greater\n   * than 1, it will make the image sharper.\n   */\n  public static smooth(opt: SmoothOptions): MemoryImage {\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const filter = [1, 1, 1, 1, opt.weight, 1, 1, 1, 1];\n    return Filter.convolution({\n      image: opt.image,\n      filter: filter,\n      div: opt.weight + 8,\n      offset: 0,\n      mask: opt.mask,\n      maskChannel: maskChannel,\n    });\n  }\n\n  /**\n   * Apply Sobel edge detection filtering to the **image**.\n   */\n  public static sobel(opt: SobelOptions): MemoryImage {\n    const amount = opt.amount ?? 1;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    if (amount === 0) {\n      return opt.image;\n    }\n\n    for (const frame of opt.image.frames) {\n      const orig = MemoryImage.from(frame, true);\n      const width = frame.width;\n      const height = frame.height;\n      for (const p of frame) {\n        const ny = MathUtils.clamp(p.y - 1, 0, height - 1);\n        const py = MathUtils.clamp(p.y + 1, 0, height - 1);\n        const nx = MathUtils.clamp(p.x - 1, 0, width - 1);\n        const px = MathUtils.clamp(p.x + 1, 0, width - 1);\n\n        const bottomLeft = orig.getPixel(nx, py).luminanceNormalized;\n        const topLeft = orig.getPixel(nx, ny).luminanceNormalized;\n        const bottomRight = orig.getPixel(px, py).luminanceNormalized;\n        const topRight = orig.getPixel(px, ny).luminanceNormalized;\n        const left = orig.getPixel(nx, p.y).luminanceNormalized;\n        const right = orig.getPixel(px, p.y).luminanceNormalized;\n        const bottom = orig.getPixel(p.x, py).luminanceNormalized;\n        const top = orig.getPixel(p.x, ny).luminanceNormalized;\n\n        const h =\n          -topLeft - 2 * top - topRight + bottomLeft + 2 * bottom + bottomRight;\n\n        const v =\n          -bottomLeft - 2 * left - topLeft + bottomRight + 2 * right + topRight;\n\n        const mag = Math.sqrt(h * h + v * v) * p.maxChannelValue;\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n        const invMx = 1 - mx;\n\n        p.r = mag * mx + p.r * invMx;\n        p.g = mag * mx + p.g * invMx;\n        p.b = mag * mx + p.b * invMx;\n      }\n    }\n\n    return opt.image;\n  }\n\n  public static stretchDistortion(opt: StretchDistortionOptions): MemoryImage {\n    const interpolation = opt.interpolation ?? Interpolation.nearest;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    for (const frame of opt.image.frames) {\n      const orig = frame.clone({\n        skipAnimation: true,\n      });\n      const w = frame.width - 1;\n      const h = frame.height - 1;\n      const cx = opt.centerX ?? Math.trunc(frame.width / 2);\n      const cy = opt.centerY ?? Math.trunc(frame.height / 2);\n      const nCntX = 2 * (cx / w) - 1;\n      const nCntY = 2 * (cy / h) - 1;\n      for (const p of frame) {\n        let ncX = (p.x / w) * 2 - 1;\n        let ncY = (p.y / h) * 2 - 1;\n        ncX -= nCntX;\n        ncY -= nCntY;\n        const sX = Math.sign(ncX);\n        const sY = Math.sign(ncY);\n        ncX = Math.abs(ncX);\n        ncY = Math.abs(ncY);\n        ncX =\n          (0.5 * ncX + 0.5 * MathUtils.smoothStep(0.25, 0.5, ncX) * ncX) * sX;\n        ncY =\n          (0.5 * ncY + 0.5 * MathUtils.smoothStep(0.25, 0.5, ncY) * ncY) * sY;\n        ncX += nCntX;\n        ncY += nCntY;\n\n        const x = MathUtils.clamp((ncX / 2 + 0.5) * w, 0, w - 1);\n        const y = MathUtils.clamp((ncY / 2 + 0.5) * h, 0, h - 1);\n\n        const p2 = orig.getPixelInterpolate(x, y, interpolation);\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n\n        if (msk === undefined) {\n          p.r = p2.r;\n          p.g = p2.g;\n          p.b = p2.b;\n        } else {\n          p.r = MathUtils.mix(p.r, p2.r, msk);\n          p.g = MathUtils.mix(p.g, p2.g, msk);\n          p.b = MathUtils.mix(p.b, p2.b, msk);\n        }\n      }\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Apply a vignette filter to the **image**.\n   *\n   * **start** is the inner radius from the center of the image, where the fade to\n   * **color** starts to be applied; **end** is the outer radius of the\n   * vignette effect where the **color** is fully applied. The radius values are in\n   * normalized percentage of the image size [0, 1].\n   * **amount** controls the blend of the effect with the original image.\n   */\n  public static vignette(opt: VignetteOptions): MemoryImage {\n    const start = opt.start ?? 0.3;\n    const end = opt.end ?? 0.85;\n    const amount = opt.amount ?? 0.9;\n    const maskChannel = opt.maskChannel ?? Channel.luminance;\n\n    const h = opt.image.height - 1;\n    const w = opt.image.width - 1;\n    const cr = opt.color?.rNormalized ?? 0;\n    const cg = opt.color?.gNormalized ?? 0;\n    const cb = opt.color?.bNormalized ?? 0;\n    const ca = opt.color?.aNormalized ?? 1;\n    const aspect = w / h;\n    for (const frame of opt.image.frames) {\n      for (const p of frame) {\n        const dx = (0.5 - p.x / w) * aspect;\n        const dy = 0.5 - p.y / h;\n\n        let d = Math.sqrt(dx * dx + dy * dy);\n        d = 1 - MathUtils.smoothStep(end, start, d);\n\n        const r = MathUtils.mix(p.rNormalized, cr, d) * p.maxChannelValue;\n        const g = MathUtils.mix(p.gNormalized, cg, d) * p.maxChannelValue;\n        const b = MathUtils.mix(p.bNormalized, cb, d) * p.maxChannelValue;\n        const a = MathUtils.mix(p.aNormalized, ca, d) * p.maxChannelValue;\n\n        const msk = opt.mask\n          ?.getPixel(p.x, p.y)\n          .getChannelNormalized(maskChannel);\n        const mx = (msk ?? 1) * amount;\n\n        p.r = MathUtils.mix(p.r, r, mx);\n        p.g = MathUtils.mix(p.g, g, mx);\n        p.b = MathUtils.mix(p.b, b, mx);\n        p.a = MathUtils.mix(p.a, a, mx);\n      }\n    }\n\n    return opt.image;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { LibError } from '../../error/lib-error';\n\nexport class BmpFileHeader {\n  // Signature: BM\n  public static readonly signature = 0x4d42;\n\n  private readonly _fileLength: number;\n  public get fileLength(): number {\n    return this._fileLength;\n  }\n\n  private _imageOffset: number;\n  public set imageOffset(v: number) {\n    this._imageOffset = v;\n  }\n  public get imageOffset(): number {\n    return this._imageOffset;\n  }\n\n  constructor(b: InputBuffer) {\n    if (!BmpFileHeader.isValidFile(b)) {\n      throw new LibError('Not a bitmap file.');\n    }\n    b.skip(2);\n    this._fileLength = b.readInt32();\n    // Skip reserved space\n    b.skip(4);\n    this._imageOffset = b.readInt32();\n  }\n\n  public static isValidFile(b: InputBuffer): boolean {\n    if (b.length < 2) {\n      return false;\n    }\n    const type = InputBuffer.from(b).readUint16();\n    return type === BmpFileHeader.signature;\n  }\n}\n", "/** @format */\n\nexport enum BmpCompressionMode {\n  none,\n  rle8,\n  rle4,\n  bitfields,\n  jpeg,\n  png,\n  alphaBitfields,\n  reserved7,\n  reserved8,\n  reserved9,\n  reserved10,\n  cmyk,\n  cmykRle8,\n  cmykRle4,\n}\n", "/** @format */\n\nimport { Color } from '../../color/color';\nimport { BitUtils } from '../../common/bit-utils';\nimport { InputBuffer } from '../../common/input-buffer';\nimport { LibError } from '../../error/lib-error';\nimport { PaletteUint8 } from '../../image/palette-uint8';\nimport { DecodeInfo } from '../decode-info';\nimport { BmpCompressionMode } from './bmp-compression-mode';\nimport { BmpFileHeader } from './bmp-file-header';\n\nexport class BmpInfo implements DecodeInfo {\n  private readonly _startPos: number;\n  private _redShift = 0;\n  private _redScale = 0;\n  private _greenShift = 0;\n  private _greenScale = 0;\n  private _blueShift = 0;\n  private _blueScale = 0;\n  private _alphaShift = 0;\n  private _alphaScale = 0;\n\n  private readonly _width: number = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  protected readonly _height: number = 0;\n  public get height(): number {\n    return Math.abs(this._height);\n  }\n\n  private readonly _backgroundColor: Color | undefined = undefined;\n  public get backgroundColor(): Color | undefined {\n    return this._backgroundColor;\n  }\n\n  private readonly _numFrames: number = 1;\n  public get numFrames(): number {\n    return this._numFrames;\n  }\n\n  private readonly _header: BmpFileHeader;\n  public get header(): BmpFileHeader {\n    return this._header;\n  }\n\n  private readonly _headerSize: number;\n  public get headerSize(): number {\n    return this._headerSize;\n  }\n\n  private readonly _planes: number;\n  public get planes(): number {\n    return this._planes;\n  }\n\n  private readonly _bitsPerPixel: number;\n  public get bitsPerPixel(): number {\n    return this._bitsPerPixel;\n  }\n\n  private readonly _compression: BmpCompressionMode;\n  public get compression(): BmpCompressionMode {\n    return this._compression;\n  }\n\n  private readonly _imageSize: number;\n  public get imageSize(): number {\n    return this._imageSize;\n  }\n\n  private readonly _xppm: number;\n  public get xppm(): number {\n    return this._xppm;\n  }\n\n  private readonly _yppm: number;\n  public get yppm(): number {\n    return this._yppm;\n  }\n\n  private readonly _totalColors: number;\n  public get totalColors(): number {\n    return this._totalColors;\n  }\n\n  private readonly _importantColors: number;\n  public get importantColors(): number {\n    return this._importantColors;\n  }\n\n  private _redMask = 0;\n  public get redMask(): number {\n    return this._redMask;\n  }\n\n  private _greenMask = 0;\n  public get greenMask(): number {\n    return this._greenMask;\n  }\n\n  private _blueMask = 0;\n  public get blueMask(): number {\n    return this._blueMask;\n  }\n\n  private _alphaMask = 0;\n  public get alphaMask(): number {\n    return this._alphaMask;\n  }\n\n  private _palette: PaletteUint8 | undefined;\n  public get palette(): PaletteUint8 | undefined {\n    return this._palette;\n  }\n\n  public get readBottomUp(): boolean {\n    return this._height >= 0;\n  }\n\n  public get ignoreAlphaChannel(): boolean {\n    // Gimp and Photoshop ignore the alpha channel for BITMAPINFOHEADER.\n    return (\n      this._headerSize === 40 ||\n      // BITMAPV5HEADER with null alpha mask.\n      (this._headerSize === 124 && this._alphaMask === 0)\n    );\n  }\n\n  constructor(p: InputBuffer, header?: BmpFileHeader) {\n    this._header = header ?? new BmpFileHeader(p);\n    this._startPos = p.offset;\n    this._headerSize = p.readUint32();\n    this._width = p.readInt32();\n    this._height = p.readInt32();\n    this._planes = p.readUint16();\n    this._bitsPerPixel = p.readUint16();\n    this._compression = p.readUint32();\n    this._imageSize = p.readUint32();\n    this._xppm = p.readInt32();\n    this._yppm = p.readInt32();\n    this._totalColors = p.readUint32();\n    this._importantColors = p.readUint32();\n\n    // BMP allows > 4 bit per channel for 16bpp, so we have to scale it\n    // up to 8-bit\n    const maxChannelValue = 255.0;\n\n    if (\n      this._headerSize > 40 ||\n      this._compression === BmpCompressionMode.bitfields ||\n      this._compression === BmpCompressionMode.alphaBitfields\n    ) {\n      this._redMask = p.readUint32();\n      this._redShift = BitUtils.countTrailingZeroBits(this._redMask);\n      const redDepth = this._redMask >> this._redShift;\n      this._redScale = redDepth > 0 ? maxChannelValue / redDepth : 0;\n\n      this._greenMask = p.readUint32();\n      this._greenShift = BitUtils.countTrailingZeroBits(this._greenMask);\n      const greenDepth = this._greenMask >> this._greenShift;\n      this._greenScale = redDepth > 0 ? maxChannelValue / greenDepth : 0;\n\n      this._blueMask = p.readUint32();\n      this._blueShift = BitUtils.countTrailingZeroBits(this._blueMask);\n      const blueDepth = this._blueMask >> this._blueShift;\n      this._blueScale = redDepth > 0 ? maxChannelValue / blueDepth : 0;\n\n      if (\n        this._headerSize > 40 ||\n        this._compression === BmpCompressionMode.alphaBitfields\n      ) {\n        this._alphaMask = p.readUint32();\n        this._alphaShift = BitUtils.countTrailingZeroBits(this._alphaMask);\n        const alphaDepth = this._alphaMask >>> this._alphaShift;\n        this._alphaScale = alphaDepth > 0 ? maxChannelValue / alphaDepth : 0;\n      } else {\n        if (this._bitsPerPixel === 16) {\n          this._alphaMask = 0xff000000;\n          this._alphaShift = 24;\n          this._alphaScale = 1.0;\n        } else {\n          this._alphaMask = 0xff000000;\n          this._alphaShift = 24;\n          this._alphaScale = 1.0;\n        }\n      }\n    } else {\n      if (this._bitsPerPixel === 16) {\n        this._redMask = 0x7c00;\n        this._redShift = 10;\n        const redDepth = this._redMask >> this._redShift;\n        this._redScale = redDepth > 0 ? maxChannelValue / redDepth : 0;\n\n        this._greenMask = 0x03e0;\n        this._greenShift = 5;\n        const greenDepth = this._greenMask >> this._greenShift;\n        this._greenScale = redDepth > 0 ? maxChannelValue / greenDepth : 0;\n\n        this._blueMask = 0x001f;\n        this._blueShift = 0;\n        const blueDepth = this._blueMask >> this._blueShift;\n        this._blueScale = redDepth > 0 ? maxChannelValue / blueDepth : 0;\n\n        this._alphaMask = 0x00000000;\n        this._alphaShift = 0;\n        this._alphaScale = 0.0;\n      } else {\n        this._redMask = 0x00ff0000;\n        this._redShift = 16;\n        this._redScale = 1.0;\n\n        this._greenMask = 0x0000ff00;\n        this._greenShift = 8;\n        this._greenScale = 1.0;\n\n        this._blueMask = 0x000000ff;\n        this._blueShift = 0;\n        this._blueScale = 1.0;\n\n        this._alphaMask = 0xff000000;\n        this._alphaShift = 24;\n        this._alphaScale = 1.0;\n      }\n    }\n\n    const headerRead = p.offset - this._startPos;\n\n    const remainingHeaderBytes = this._headerSize - headerRead;\n    p.skip(remainingHeaderBytes);\n\n    if (this._bitsPerPixel <= 8) {\n      this.readPalette(p);\n    }\n  }\n\n  private readPalette(input: InputBuffer): void {\n    const numColors =\n      this._totalColors === 0 ? 1 << this._bitsPerPixel : this._totalColors;\n    const numChannels = 3;\n    this._palette = new PaletteUint8(numColors, numChannels);\n    for (let i = 0; i < numColors; ++i) {\n      const b = input.readByte();\n      const g = input.readByte();\n      const r = input.readByte();\n      // ignored\n      const a = input.readByte();\n      this._palette.setRgba(i, r, g, b, a);\n    }\n  }\n\n  public decodePixel(\n    input: InputBuffer,\n    pixel: (r: number, g: number, b: number, a: number) => void\n  ): void {\n    if (this._palette !== undefined) {\n      if (this._bitsPerPixel === 1) {\n        const bi = input.readByte();\n        for (let i = 7; i >= 0; --i) {\n          const b = (bi >> i) & 0x1;\n          pixel(b, 0, 0, 0);\n        }\n        return;\n      } else if (this._bitsPerPixel === 2) {\n        const bi = input.readByte();\n        for (let i = 6; i >= 0; i -= 2) {\n          const b = (bi >> i) & 0x2;\n          pixel(b, 0, 0, 0);\n        }\n      } else if (this._bitsPerPixel === 4) {\n        const bi = input.readByte();\n        const b1 = (bi >> 4) & 0xf;\n        pixel(b1, 0, 0, 0);\n        const b2 = bi & 0xf;\n        pixel(b2, 0, 0, 0);\n        return;\n      } else if (this._bitsPerPixel === 8) {\n        const b = input.readByte();\n        pixel(b, 0, 0, 0);\n        return;\n      }\n    }\n\n    if (\n      this._compression === BmpCompressionMode.bitfields &&\n      this._bitsPerPixel === 32\n    ) {\n      const p = input.readUint32();\n      const r = Math.trunc(\n        ((p & this._redMask) >> this._redShift) * this._redScale\n      );\n      const g = Math.trunc(\n        ((p & this._greenMask) >> this._greenShift) * this._greenScale\n      );\n      const b = Math.trunc(\n        ((p & this._blueMask) >> this._blueShift) * this._blueScale\n      );\n      const a = this.ignoreAlphaChannel\n        ? 255\n        : Math.trunc(\n            ((p & this._alphaMask) >> this._alphaShift) * this._alphaScale\n          );\n      pixel(r, g, b, a);\n      return;\n    } else if (\n      this._bitsPerPixel === 32 &&\n      this._compression === BmpCompressionMode.none\n    ) {\n      const b = input.readByte();\n      const g = input.readByte();\n      const r = input.readByte();\n      const a = input.readByte();\n      pixel(r, g, b, this.ignoreAlphaChannel ? 255 : a);\n      return;\n    } else if (this._bitsPerPixel === 24) {\n      const b = input.readByte();\n      const g = input.readByte();\n      const r = input.readByte();\n      pixel(r, g, b, 255);\n      return;\n    } else if (this._bitsPerPixel === 16) {\n      const p = input.readUint16();\n      const r = Math.trunc(\n        ((p & this._redMask) >> this._redShift) * this._redScale\n      );\n      const g = Math.trunc(\n        ((p & this._greenMask) >> this._greenShift) * this._greenScale\n      );\n      const b = Math.trunc(\n        ((p & this._blueMask) >> this._blueShift) * this._blueScale\n      );\n      const a = this.ignoreAlphaChannel\n        ? 255\n        : Math.trunc(\n            ((p & this._alphaMask) >> this._alphaShift) * this._alphaScale\n          );\n      pixel(r, g, b, a);\n      return;\n    } else {\n      throw new LibError(\n        `Unsupported bitsPerPixel (${this._bitsPerPixel}) or compression (${this._compression}).`\n      );\n    }\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { InputBuffer } from '../common/input-buffer';\nimport { MemoryImage } from '../image/image';\nimport { BmpFileHeader } from './bmp/bmp-file-header';\nimport { BmpInfo } from './bmp/bmp-info';\nimport { Decoder } from './decoder';\n\nexport class BmpDecoder implements Decoder {\n  protected _input?: InputBuffer;\n  protected _info?: BmpInfo;\n  protected _forceRgba: boolean;\n\n  public get numFrames(): number {\n    return this._info !== undefined ? this._info.numFrames : 0;\n  }\n\n  constructor(forceRgba = false) {\n    this._forceRgba = forceRgba;\n  }\n\n  /**\n   * Is the given file a valid BMP image?\n   */\n  public isValidFile(bytes: Uint8Array): boolean {\n    return BmpFileHeader.isValidFile(\n      new InputBuffer({\n        buffer: bytes,\n      })\n    );\n  }\n\n  public startDecode(bytes: Uint8Array): BmpInfo | undefined {\n    if (!this.isValidFile(bytes)) {\n      return undefined;\n    }\n    this._input = new InputBuffer({\n      buffer: bytes,\n    });\n    this._info = new BmpInfo(this._input);\n    return this._info;\n  }\n\n  /**\n   * Decode a single frame from the data stat was set with **startDecode**.\n   * If **frame** is out of the range of available frames, undefined is returned.\n   * Non animated image files will only have **frame** 0. An animation frame\n   * is returned, which provides the image, and top-left coordinates of the\n   * image, as animated frames may only occupy a subset of the canvas.\n   */\n  public decodeFrame(_frame: number): MemoryImage | undefined {\n    if (this._input === undefined || this._info === undefined) {\n      return undefined;\n    }\n\n    const inf = this._info;\n    this._input.offset = inf.header.imageOffset;\n\n    const bpp = inf.bitsPerPixel;\n    const rowStride = Math.trunc((inf.width * bpp + 31) / 32) * 4;\n    const nc = this._forceRgba\n      ? 4\n      : bpp === 1 || bpp === 4 || bpp === 8\n      ? 1\n      : bpp === 32\n      ? 4\n      : 3;\n    const format = this._forceRgba\n      ? Format.uint8\n      : bpp === 1\n      ? Format.uint1\n      : bpp === 2\n      ? Format.uint2\n      : bpp === 4\n      ? Format.uint4\n      : bpp === 8\n      ? Format.uint8\n      : bpp === 16\n      ? Format.uint8\n      : bpp === 24\n      ? Format.uint8\n      : bpp === 32\n      ? Format.uint8\n      : Format.uint8;\n    const palette = this._forceRgba ? undefined : inf.palette;\n\n    const image = new MemoryImage({\n      width: inf.width,\n      height: inf.height,\n      format: format,\n      numChannels: nc,\n      palette: palette,\n    });\n\n    for (let y = image.height - 1; y >= 0; --y) {\n      const line = inf.readBottomUp ? y : image.height - 1 - y;\n      const row = this._input.readBytes(rowStride);\n      const w = image.width;\n      let x = 0;\n      const p = image.getPixel(0, line);\n      while (x < w) {\n        inf.decodePixel(row, (r, g, b, a) => {\n          if (x < w) {\n            if (this._forceRgba && inf.palette !== undefined) {\n              const pi = Math.trunc(r);\n              const pr = inf.palette!.getRed(pi);\n              const pg = inf.palette!.getGreen(pi);\n              const pb = inf.palette!.getBlue(pi);\n              const pa = inf.palette!.getAlpha(pi);\n              p.setRgba(pr, pg, pb, pa);\n            } else {\n              p.setRgba(r, g, b, a);\n            }\n            p.next();\n            x++;\n          }\n        });\n      }\n    }\n\n    return image;\n  }\n\n  /**\n   * Decode the file and extract a single image from it. If the file is\n   * animated, the specified **frame** will be decoded. If there was a problem\n   * decoding the file, undefined is returned.\n   */\n  public decode(bytes: Uint8Array, frame?: number): MemoryImage | undefined {\n    if (this.startDecode(bytes) === undefined) {\n      return undefined;\n    }\n    return this.decodeFrame(frame ?? 0);\n  }\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\nimport { OutputBuffer } from '../common/output-buffer';\nimport { MemoryImage } from '../image/image';\nimport { PaletteUint8 } from '../image/palette-uint8';\nimport { BmpCompressionMode } from './bmp/bmp-compression-mode';\nimport { BmpFileHeader } from './bmp/bmp-file-header';\nimport { Encoder } from './encoder';\n\n/**\n * Encode a BMP image.\n */\nexport class BmpEncoder implements Encoder {\n  private _supportsAnimation = false;\n  public get supportsAnimation(): boolean {\n    return this._supportsAnimation;\n  }\n\n  public encode(image: MemoryImage, _singleFrame = false): Uint8Array {\n    const out = new OutputBuffer();\n    let img = image;\n\n    const nc = img.numChannels;\n    let palette = img.palette;\n    const format = img.format;\n\n    if (format === Format.uint1 && nc === 1 && palette === undefined) {\n      // add palette\n      palette = new PaletteUint8(2, 3);\n      palette.setRgb(0, 0, 0, 0);\n      palette.setRgb(1, 255, 255, 255);\n    } else if (format === Format.uint1 && nc === 2) {\n      // => uint2 palette\n      img = img.convert({\n        format: Format.uint2,\n        numChannels: 1,\n        withPalette: true,\n      });\n      palette = img.palette;\n    } else if (format === Format.uint1 && nc === 3 && palette === undefined) {\n      // => uint4 palette\n      img = img.convert({\n        format: Format.uint4,\n        withPalette: true,\n      });\n      palette = img.palette;\n    } else if (format === Format.uint1 && nc === 4) {\n      // => uint8,4 - only 32bpp supports alpha\n      img = img.convert({\n        format: Format.uint8,\n        numChannels: 4,\n      });\n    } else if (format === Format.uint2 && nc === 1 && palette === undefined) {\n      // => uint2 palette\n      img = img.convert({\n        format: Format.uint2,\n        withPalette: true,\n      });\n      palette = img.palette;\n    } else if (format === Format.uint2 && nc === 2) {\n      // => uint8 palette\n      img = img.convert({\n        format: Format.uint8,\n        withPalette: true,\n      });\n      palette = img.palette;\n    } else if (format === Format.uint2 && nc === 3 && palette === undefined) {\n      // => uint8 palette\n      img = img.convert({\n        format: Format.uint8,\n        withPalette: true,\n      });\n      palette = img.palette;\n    } else if (format === Format.uint2 && nc === 4) {\n      // => uint8 palette\n      img = img.convert({\n        format: Format.uint8,\n        withPalette: true,\n      });\n      palette = img.palette;\n    } else if (format === Format.uint4 && nc === 1 && palette === undefined) {\n      // => uint8 palette\n      img = img.convert({\n        format: Format.uint8,\n        withPalette: true,\n      });\n      palette = img.palette;\n    } else if (format === Format.uint4 && nc === 2) {\n      // => uint8,3\n      img = img.convert({\n        format: Format.uint8,\n        numChannels: 3,\n      });\n    } else if (format === Format.uint4 && nc === 3 && palette === undefined) {\n      // => uint8,3\n      img = img.convert({\n        format: Format.uint8,\n        numChannels: 3,\n      });\n    } else if (format === Format.uint4 && nc === 4) {\n      // => uint8,4\n      img = img.convert({\n        format: Format.uint8,\n        numChannels: 4,\n      });\n    } else if (format === Format.uint8 && nc === 1 && palette === undefined) {\n      // => uint8 palette\n      img = img.convert({\n        format: Format.uint8,\n        withPalette: true,\n      });\n    } else if (format === Format.uint8 && nc === 2) {\n      // => uint8,3\n      img = img.convert({\n        format: Format.uint8,\n        numChannels: 3,\n      });\n    } else if (img.isHdrFormat) {\n      // => uint8,[3,4]\n      img = img.convert({\n        format: Format.uint8,\n      });\n    } else if (img.hasPalette && img.numChannels === 4) {\n      img = img.convert({\n        numChannels: 4,\n      });\n    }\n\n    let bpp = img.bitsPerChannel * img.data!.numChannels;\n    if (bpp === 12) {\n      bpp = 16;\n    }\n\n    const compression =\n      bpp > 8 ? BmpCompressionMode.bitfields : BmpCompressionMode.none;\n\n    const imageStride = img.rowStride;\n    const fileStride = Math.trunc((img.width * bpp + 31) / 32) * 4;\n    const rowPaddingSize = fileStride - imageStride;\n    const rowPadding =\n      rowPaddingSize > 0\n        ? new Uint8Array(rowPaddingSize).fill(0xff)\n        : undefined;\n    const imageFileSize = fileStride * img.height;\n    const headerInfoSize = bpp > 8 ? 124 : 40;\n    const headerSize = headerInfoSize + 14;\n    const paletteSize = (img.palette?.numColors ?? 0) * 4;\n    const origImageOffset = headerSize + paletteSize;\n    const imageOffset = origImageOffset;\n    const gapSize = imageOffset - origImageOffset;\n    const fileSize = imageFileSize + headerSize + paletteSize + gapSize;\n\n    const sRgb = 0x73524742;\n\n    out.writeUint16(BmpFileHeader.signature);\n    out.writeUint32(fileSize);\n    // reserved\n    out.writeUint32(0);\n    // offset to image data\n    out.writeUint32(imageOffset);\n    out.writeUint32(headerInfoSize);\n    out.writeUint32(img.width);\n    out.writeUint32(img.height);\n    // planes\n    out.writeUint16(1);\n    // bits per pixel\n    out.writeUint16(bpp);\n    // compression\n    out.writeUint32(compression);\n\n    out.writeUint32(imageFileSize);\n    // hr\n    out.writeUint32(11811);\n    // vr\n    out.writeUint32(11811);\n    // totalColors\n    out.writeUint32(bpp === 8 ? 255 : 0);\n    // importantColors\n    out.writeUint32(bpp === 8 ? 255 : 0);\n\n    if (bpp > 8) {\n      const blueMask = bpp === 16 ? 0xf : 0xff;\n      const greenMask = bpp === 16 ? 0xf0 : 0xff00;\n      const redMask = bpp === 16 ? 0xf00 : 0xff0000;\n      const alphaMask = bpp === 16 ? 0xf000 : 0xff000000;\n\n      // redMask\n      out.writeUint32(redMask);\n      // greenMask\n      out.writeUint32(greenMask);\n      // blueMask\n      out.writeUint32(blueMask);\n      // alphaMask\n      out.writeUint32(alphaMask);\n      // CSType\n      out.writeUint32(sRgb);\n      // endpoints.red.x\n      out.writeUint32(0);\n      // endpoints.red.y\n      out.writeUint32(0);\n      // endpoints.red.z\n      out.writeUint32(0);\n      // endpoints.green.x\n      out.writeUint32(0);\n      // endpoints.green.y\n      out.writeUint32(0);\n      // endpoints.green.z\n      out.writeUint32(0);\n      // endpoints.blue.x\n      out.writeUint32(0);\n      // endpoints.blue.y\n      out.writeUint32(0);\n      // endpoints.blue.z\n      out.writeUint32(0);\n      // gammaRed\n      out.writeUint32(0);\n      // gammaGreen\n      out.writeUint32(0);\n      // gammaBlue\n      out.writeUint32(0);\n      // intent LCS_GM_GRAPHICS\n      out.writeUint32(2);\n      // profileData\n      out.writeUint32(0);\n      // profileSize\n      out.writeUint32(0);\n      // reserved\n      out.writeUint32(0);\n    }\n\n    if (bpp === 1 || bpp === 2 || bpp === 4 || bpp === 8) {\n      if (palette !== undefined) {\n        const l = palette.numColors;\n        for (let pi = 0; pi < l; ++pi) {\n          out.writeByte(Math.trunc(palette.getBlue(pi)));\n          out.writeByte(Math.trunc(palette.getGreen(pi)));\n          out.writeByte(Math.trunc(palette.getRed(pi)));\n          out.writeByte(0);\n        }\n      } else {\n        if (bpp === 1) {\n          out.writeByte(0);\n          out.writeByte(0);\n          out.writeByte(0);\n          out.writeByte(0);\n          out.writeByte(255);\n          out.writeByte(255);\n          out.writeByte(255);\n          out.writeByte(0);\n        } else if (bpp === 2) {\n          for (let pi = 0; pi < 4; ++pi) {\n            const v = pi * 85;\n            out.writeByte(v);\n            out.writeByte(v);\n            out.writeByte(v);\n            out.writeByte(0);\n          }\n        } else if (bpp === 4) {\n          for (let pi = 0; pi < 16; ++pi) {\n            const v = pi * 17;\n            out.writeByte(v);\n            out.writeByte(v);\n            out.writeByte(v);\n            out.writeByte(0);\n          }\n        } else if (bpp === 8) {\n          for (let pi = 0; pi < 256; ++pi) {\n            out.writeByte(pi);\n            out.writeByte(pi);\n            out.writeByte(pi);\n            out.writeByte(0);\n          }\n        }\n      }\n    }\n\n    // image data must be aligned to a 4 byte alignment. Pad the remaining\n    // bytes until the image starts.\n    let gap1 = gapSize;\n    while (gap1-- > 0) {\n      out.writeByte(0);\n    }\n\n    // Write image data\n    if (bpp === 1 || bpp === 2 || bpp === 4 || bpp === 8) {\n      let offset = img.byteLength - imageStride;\n      const h = img.height;\n      for (let y = 0; y < h; ++y) {\n        const bytes =\n          img.buffer !== undefined\n            ? new Uint8Array(img.buffer, offset, imageStride)\n            : new Uint8Array();\n\n        if (bpp === 1) {\n          out.writeBytes(bytes);\n        } else if (bpp === 2) {\n          const l = bytes.length;\n          for (let xi = 0; xi < l; ++xi) {\n            const b = bytes[xi];\n            const left = b >> 4;\n            const right = b & 0x0f;\n            const rb = (right << 4) | left;\n            out.writeByte(rb);\n          }\n        } else if (bpp === 4) {\n          const l = bytes.length;\n          for (let xi = 0; xi < l; ++xi) {\n            const b = bytes[xi];\n            const b1 = b >> 4;\n            const b2 = b & 0x0f;\n            const rb = (b1 << 4) | b2;\n            out.writeByte(rb);\n          }\n        } else {\n          out.writeBytes(bytes);\n        }\n\n        if (rowPadding !== undefined) {\n          out.writeBytes(rowPadding);\n        }\n\n        offset -= imageStride;\n      }\n\n      return out.getBytes();\n    }\n\n    const hasAlpha = img.numChannels === 4;\n    const h = img.height;\n    const w = img.width;\n    if (bpp === 16) {\n      for (let y = h - 1; y >= 0; --y) {\n        for (let x = 0; x < w; ++x) {\n          const p = img.getPixel(x, y);\n          out.writeByte((Math.trunc(p.g) << 4) | Math.trunc(p.b));\n          out.writeByte((Math.trunc(p.a) << 4) | Math.trunc(p.r));\n        }\n        if (rowPadding !== undefined) {\n          out.writeBytes(rowPadding);\n        }\n      }\n    } else {\n      for (let y = h - 1; y >= 0; --y) {\n        for (let x = 0; x < w; ++x) {\n          const p = img.getPixel(x, y);\n          out.writeByte(Math.trunc(p.b));\n          out.writeByte(Math.trunc(p.g));\n          out.writeByte(Math.trunc(p.r));\n          if (hasAlpha) {\n            out.writeByte(Math.trunc(p.a));\n          }\n        }\n        if (rowPadding !== undefined) {\n          out.writeBytes(rowPadding);\n        }\n      }\n    }\n\n    return out.getBytes();\n  }\n}\n", "/** @format */\n\nimport { Color } from '../color/color';\n\n/**\n * Provides information about the image being decoded.\n */\nexport interface DecodeInfo {\n  /**\n   * The width of the image canvas.\n   */\n  get width(): number;\n\n  /**\n   * The height of the image canvas.\n   */\n  get height(): number;\n\n  /**\n   * The suggested background color of the canvas.\n   */\n  get backgroundColor(): Color | undefined;\n\n  /**\n   * The number of frames that can be decoded.\n   */\n  get numFrames(): number;\n}\n", "/** @format */\n\nimport { MemoryImage } from '../image/image';\nimport { DecodeInfo } from './decode-info';\n\n/**\n * Base class for image format decoders.\n *\n * Image pixels are stored as 32-bit unsigned ints, so all formats, regardless\n * of their encoded color resolutions, decode to 32-bit RGBA images. Encoders\n * can reduce the color resolution back down to their required formats.\n *\n * Some image formats support multiple frames, often for encoding animation.\n * In such cases, the **decode** method will decode all of the frames,\n * unless the frame argument is specified for a particular frame to decode.\n * **startDecode** will initiate decoding of the file, and **decodeFrame** will\n * then decode a specific frame from the file, allowing for animations to be\n * decoded one frame at a time. Some formats, such as TIFF, may store multiple\n * frames, but their use of frames is for multiple page documents and not\n * animation. The terms 'animation' and 'frames' simply refer to 'pages' in\n * this case.\n */\nexport interface Decoder {\n  /**\n   * How many frames are available to be decoded. **startDecode** should have\n   * been called first. Non animated image files will have a single frame.\n   */\n  get numFrames(): number;\n\n  /**\n   * A light-weight function to test if the given file is able to be decoded\n   * by this Decoder.\n   */\n  isValidFile(bytes: Uint8Array): boolean;\n\n  /**\n   * Start decoding the data as an animation sequence, but don't actually\n   * process the frames until they are requested with **decodeFrame**.\n   */\n  startDecode(bytes: Uint8Array): DecodeInfo | undefined;\n\n  /**\n   * Decode the file and extract a single image from it. If the file is\n   * animated, and **frame** is specified, that particular frame will be decoded.\n   * Otherwise if the image is animated and **frame** is undefined, the returned\n   * MemoryImage will include all frames. If there was a problem decoding the\n   * MemoryImage, undefined will be returned.\n   */\n  decode(bytes: Uint8Array, frame?: number): MemoryImage | undefined;\n\n  /**\n   * Decode a single frame from the data that was set with **startDecode**.\n   * If **frame** is out of the range of available frames, undefined is returned.\n   * Non animated image files will only have **frame** 0. A MemoryImage\n   * is returned, which provides the image, and top-left coordinates of the\n   * image, as animated frames may only occupy a subset of the canvas.\n   */\n  decodeFrame(frame: number): MemoryImage | undefined;\n}\n", "/** @format */\n\nimport { InputBuffer } from '../common/input-buffer';\nimport { BmpDecoder } from './bmp-decoder';\nimport { BmpInfo } from './bmp/bmp-info';\n\nexport class DibDecoder extends BmpDecoder {\n  constructor(input: InputBuffer, info: BmpInfo, forceRgba = false) {\n    super(forceRgba);\n    this._input = input;\n    this._info = info;\n  }\n}\n", "/** @format */\n\nimport { MemoryImage } from '../image/image';\n\n/**\n * Base class for image format encoders.\n */\nexport interface Encoder {\n  /**\n   * True if the encoder supports animated images; otherwise false.\n   */\n  get supportsAnimation(): boolean;\n\n  /**\n   * Encode an **image** to an image format.\n   * If **singleFrame** is true, only the one MemoryImage will be encoded;\n   * otherwise if image has animation, all frames of the **image** will be\n   * encoded if the encoder supports animation.\n   */\n  encode(image: MemoryImage, singleFrame?: boolean): Uint8Array;\n}\n", "/** @format */\n\nimport { ColorUint8 } from '../../color/color-uint8';\nimport { PaletteUint8 } from '../../image/palette-uint8';\n\nexport class GifColorMap {\n  private readonly _numColors: number;\n  public get numColors(): number {\n    return this._numColors;\n  }\n\n  private readonly _palette: PaletteUint8;\n  public get palette(): PaletteUint8 {\n    return this._palette;\n  }\n\n  private _bitsPerPixel: number;\n  public get bitsPerPixel(): number {\n    return this._bitsPerPixel;\n  }\n\n  private _transparent?: number;\n  public set transparent(v: number | undefined) {\n    this._transparent = v;\n  }\n  public get transparent(): number | undefined {\n    return this._transparent;\n  }\n\n  constructor(numColors: number, palette?: PaletteUint8) {\n    this._numColors = numColors;\n    this._palette = palette ?? new PaletteUint8(numColors, 3);\n    this._bitsPerPixel = GifColorMap.bitSize(numColors);\n  }\n\n  private static bitSize(n: number): number {\n    for (let i = 1; i <= 8; i++) {\n      if (1 << i >= n) {\n        return i;\n      }\n    }\n    return 0;\n  }\n\n  public static from(other: GifColorMap) {\n    const palette = PaletteUint8.from(other._palette);\n    const r = new GifColorMap(other.numColors, palette);\n    r._bitsPerPixel = other._bitsPerPixel;\n    r._transparent = other._transparent;\n    return r;\n  }\n\n  public getColor(index: number): ColorUint8 {\n    const r = this.getRed(index);\n    const g = this.getGreen(index);\n    const b = this.getBlue(index);\n    const a = this.getAlpha(index);\n    return ColorUint8.rgba(r, g, b, a);\n  }\n\n  public setColor(index: number, r: number, g: number, b: number): void {\n    this._palette.setRgb(index, r, g, b);\n  }\n\n  public getRed(color: number): number {\n    return Math.trunc(this._palette.getRed(color));\n  }\n\n  public getGreen(color: number): number {\n    return Math.trunc(this._palette.getGreen(color));\n  }\n\n  public getBlue(color: number): number {\n    return Math.trunc(this._palette.getBlue(color));\n  }\n\n  public getAlpha(color: number): number {\n    return color === this._transparent ? 0 : 255;\n  }\n\n  public getPalette(): PaletteUint8 {\n    if (this._transparent === undefined) {\n      return this._palette;\n    }\n    const p = new PaletteUint8(this._palette.numColors, 4);\n    const l = this._palette.numColors;\n    for (let i = 0; i < l; ++i) {\n      p.setRgba(\n        i,\n        this.getRed(i),\n        this.getGreen(i),\n        this.getBlue(i),\n        this.getAlpha(i)\n      );\n    }\n    return p;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { GifColorMap } from './gif-color-map';\n\nexport class GifImageDesc {\n  private readonly _x: number;\n  public get x(): number {\n    return this._x;\n  }\n\n  private readonly _y: number;\n  public get y(): number {\n    return this._y;\n  }\n\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _interlaced: boolean;\n  public get interlaced(): boolean {\n    return this._interlaced;\n  }\n\n  private _colorMap?: GifColorMap;\n  public get colorMap(): GifColorMap | undefined {\n    return this._colorMap;\n  }\n  public set colorMap(v: GifColorMap | undefined) {\n    this._colorMap = v;\n  }\n\n  private _duration = 80;\n  public set duration(v: number) {\n    this._duration = v;\n  }\n  public get duration(): number {\n    return this._duration;\n  }\n\n  private _clearFrame = true;\n  public set clearFrame(v: boolean) {\n    this._clearFrame = v;\n  }\n  public get clearFrame(): boolean {\n    return this._clearFrame;\n  }\n\n  /**\n   * The position in the file after the ImageDesc for this frame.\n   */\n  protected _inputPosition: number;\n  public get inputPosition(): number {\n    return this._inputPosition;\n  }\n\n  constructor(input: InputBuffer) {\n    this._x = input.readUint16();\n    this._y = input.readUint16();\n    this._width = input.readUint16();\n    this._height = input.readUint16();\n\n    const b = input.readByte();\n    const bitsPerPixel = (b & 0x07) + 1;\n\n    this._interlaced = (b & 0x40) !== 0;\n\n    if ((b & 0x80) !== 0) {\n      this._colorMap = new GifColorMap(1 << bitsPerPixel);\n      for (let i = 0; i < this._colorMap.numColors; ++i) {\n        this._colorMap.setColor(\n          i,\n          input.readByte(),\n          input.readByte(),\n          input.readByte()\n        );\n      }\n    }\n\n    this._inputPosition = input.position;\n  }\n}\n", "/** @format */\n\nimport { Color } from '../../color/color';\nimport { DecodeInfo } from '../decode-info';\nimport { GifColorMap } from './gif-color-map';\nimport { GifImageDesc } from './gif-image-desc';\n\nexport interface GifInfoInitOptions {\n  width?: number;\n  height?: number;\n  backgroundColor?: Color;\n  frames?: Array<GifImageDesc>;\n  colorResolution?: number;\n  globalColorMap?: GifColorMap;\n  isGif89?: boolean;\n}\n\nexport class GifInfo implements DecodeInfo {\n  private _width = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  private _height = 0;\n  public get height(): number {\n    return this._height;\n  }\n\n  private _backgroundColor: Color | undefined = undefined;\n  public get backgroundColor(): Color | undefined {\n    return this._backgroundColor;\n  }\n\n  private _frames: Array<GifImageDesc>;\n  public get frames(): Array<GifImageDesc> {\n    return this._frames;\n  }\n\n  private _colorResolution;\n  public get colorResolution(): number {\n    return this._colorResolution;\n  }\n\n  private _globalColorMap?: GifColorMap;\n  public get globalColorMap(): GifColorMap | undefined {\n    return this._globalColorMap;\n  }\n\n  private _isGif89 = false;\n  public get isGif89(): boolean {\n    return this._isGif89;\n  }\n\n  public get numFrames(): number {\n    return this.frames.length;\n  }\n\n  constructor(opt?: GifInfoInitOptions) {\n    this._width = opt?.width ?? 0;\n    this._height = opt?.height ?? 0;\n    this._backgroundColor = opt?.backgroundColor;\n    this._frames = opt?.frames ?? new Array<GifImageDesc>();\n    this._colorResolution = opt?.colorResolution ?? 0;\n    this._globalColorMap = opt?.globalColorMap;\n    this._isGif89 = opt?.isGif89 ?? false;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../common/input-buffer';\nimport { ArrayUtils } from '../common/array-utils';\nimport { Decoder } from './decoder';\nimport { GifColorMap } from './gif/gif-color-map';\nimport { GifImageDesc } from './gif/gif-image-desc';\nimport { GifInfo } from './gif/gif-info';\nimport { MemoryImage } from '../image/image';\nimport { ColorUint8 } from '../color/color-uint8';\n\n/**\n * A decoder for the GIF image format. This supports both single frame and\n * animated GIF files, and transparency.\n */\nexport class GifDecoder implements Decoder {\n  private static readonly _stampSize: number = 6;\n  private static readonly _gif87Stamp: string = 'GIF87a';\n  private static readonly _gif89Stamp: string = 'GIF89a';\n\n  private static readonly _imageDescRecordType: number = 0x2c;\n  private static readonly _extensionRecordType: number = 0x21;\n  private static readonly _terminateRecordType: number = 0x3b;\n\n  private static readonly _graphicControlExt: number = 0xf9;\n  private static readonly _applicationExt: number = 0xff;\n\n  private static readonly _lzMaxCode: number = 4095;\n  private static readonly _lzBits: number = 12;\n\n  // Impossible code, to signal empty.\n  private static readonly _noSuchCode: number = 4098;\n\n  private static readonly _codeMasks: number[] = [\n    0x0000, 0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,\n    0x01ff, 0x03ff, 0x07ff, 0x0fff,\n  ];\n\n  private static readonly _interlacedOffset: number[] = [0, 4, 2, 1];\n  private static readonly _interlacedJump: number[] = [8, 8, 4, 2];\n\n  private _input?: InputBuffer;\n\n  private _info?: GifInfo;\n\n  private _repeat = 0;\n\n  private _buffer?: Uint8Array;\n\n  private _stack!: Uint8Array;\n\n  private _suffix!: Uint8Array;\n\n  private _prefix?: Uint32Array;\n\n  private _bitsPerPixel = 0;\n\n  private _pixelCount?: number;\n\n  private _currentShiftDWord = 0;\n\n  private _currentShiftState = 0;\n\n  private _stackPtr = 0;\n\n  private _currentCode?: number;\n\n  private _lastCode = 0;\n\n  private _maxCode1 = 0;\n\n  private _runningBits = 0;\n\n  private _runningCode = 0;\n\n  private _eofCode = 0;\n\n  private _clearCode = 0;\n\n  /**\n   * How many frames are available to decode?\n   *\n   * You should have prepared the decoder by either passing the file bytes\n   * to the constructor, or calling getInfo.\n   */\n  public get numFrames(): number {\n    return this._info !== undefined ? this._info.numFrames : 0;\n  }\n\n  constructor(bytes?: Uint8Array) {\n    if (bytes !== undefined) {\n      this.startDecode(bytes);\n    }\n  }\n\n  /**\n   * Routine to trace the Prefixes linked list until we get a prefix which is\n   * not code, but a pixel value (less than ClearCode). Returns that pixel value.\n   * If image is defective, we might loop here forever, so we limit the loops to\n   * the maximum possible if image O.k. - lzMaxCode times.\n   */\n  private static getPrefixChar(\n    prefix: Uint32Array,\n    code: number,\n    clearCode: number\n  ): number {\n    let c = code;\n    let i = 0;\n    while (c > clearCode && i++ <= GifDecoder._lzMaxCode) {\n      if (c > GifDecoder._lzMaxCode) {\n        return GifDecoder._noSuchCode;\n      }\n      c = prefix[c];\n    }\n    return c;\n  }\n\n  private static updateImage(\n    image: MemoryImage,\n    y: number,\n    colorMap: GifColorMap | undefined,\n    line: Uint8Array\n  ): void {\n    if (colorMap !== undefined) {\n      const width = line.length;\n      for (let x = 0; x < width; ++x) {\n        image.setPixelRgb(x, y, line[x], 0, 0);\n      }\n    }\n  }\n\n  private getInfo(): boolean {\n    if (this._input === undefined) {\n      return false;\n    }\n\n    const tag = this._input.readString(GifDecoder._stampSize);\n    if (tag !== GifDecoder._gif87Stamp && tag !== GifDecoder._gif89Stamp) {\n      return false;\n    }\n\n    const width = this._input.readUint16();\n    const height = this._input.readUint16();\n\n    const b = this._input.readByte();\n    const colorResolution = (((b & 0x70) + 1) >> 4) + 1;\n\n    const bitsPerPixel = (b & 0x07) + 1;\n    const backgroundColor = new ColorUint8(\n      new Uint8Array([this._input.readByte()])\n    );\n\n    this._input.skip(1);\n\n    let globalColorMap: GifColorMap | undefined = undefined;\n    // Is there a global color map?\n    if ((b & 0x80) !== 0) {\n      globalColorMap = new GifColorMap(1 << bitsPerPixel);\n\n      // Get the global color map:\n      for (let i = 0; i < globalColorMap.numColors; ++i) {\n        const r = this._input.readByte();\n        const g = this._input.readByte();\n        const b = this._input.readByte();\n        globalColorMap.setColor(i, r, g, b);\n      }\n    }\n\n    const isGif89 = tag === GifDecoder._gif89Stamp;\n\n    this._info = new GifInfo({\n      width: width,\n      height: height,\n      colorResolution: colorResolution,\n      backgroundColor: backgroundColor,\n      globalColorMap: globalColorMap,\n      isGif89: isGif89,\n    });\n\n    return true;\n  }\n\n  private skipImage(): GifImageDesc | undefined {\n    if (this._input === undefined || this._input.isEOS) {\n      return undefined;\n    }\n    const gifImage = new GifImageDesc(this._input);\n    this._input.skip(1);\n    this.skipRemainder();\n    return gifImage;\n  }\n\n  /**\n   * Continue to get the image code in compressed form. This routine should be\n   * called until NULL block is returned.\n   * The block should NOT be freed by the user (not dynamically allocated).\n   */\n  private skipRemainder(): boolean {\n    if (this._input === undefined || this._input.isEOS) {\n      return true;\n    }\n    let b = this._input.readByte();\n    while (b !== 0 && !this._input.isEOS) {\n      this._input.skip(b);\n      if (this._input.isEOS) {\n        return true;\n      }\n      b = this._input.readByte();\n    }\n    return true;\n  }\n\n  private readApplicationExt(input: InputBuffer): void {\n    const blockSize = input.readByte();\n    const tag = input.readString(blockSize);\n    if (tag === 'NETSCAPE2.0') {\n      const b1 = input.readByte();\n      const b2 = input.readByte();\n      if (b1 === 0x03 && b2 === 0x01) {\n        this._repeat = input.readUint16();\n      }\n    } else {\n      this.skipRemainder();\n    }\n  }\n\n  private readGraphicsControlExt(input: InputBuffer): void {\n    /* const blockSize: number = */\n    input.readByte();\n    const b = input.readByte();\n    const duration = input.readUint16();\n    const transparent = input.readByte();\n    /* const endBlock: number = */\n    input.readByte();\n    const disposalMethod = (b >> 2) & 0x7;\n    // const userInput: number = (b >> 1) & 0x1;\n    const transparentFlag = b & 0x1;\n\n    const recordType = input.peekBytes(1).getByte(0);\n    if (recordType === GifDecoder._imageDescRecordType) {\n      input.skip(1);\n      const gifImage = this.skipImage();\n      if (gifImage === undefined) {\n        return;\n      }\n\n      gifImage.duration = duration;\n      gifImage.clearFrame = disposalMethod === 2;\n\n      if (transparentFlag !== 0) {\n        if (\n          gifImage.colorMap === undefined &&\n          this._info!.globalColorMap !== undefined\n        ) {\n          gifImage.colorMap = GifColorMap.from(this._info!.globalColorMap);\n        }\n        if (gifImage.colorMap !== undefined) {\n          gifImage.colorMap.transparent = transparent;\n        }\n      }\n\n      this._info!.frames.push(gifImage);\n    }\n  }\n\n  private getLine(line: Uint8Array): boolean {\n    this._pixelCount = this._pixelCount! - line.length;\n\n    if (!this.decompressLine(line)) {\n      return false;\n    }\n\n    // Flush any remainder blocks.\n    if (this._pixelCount === 0) {\n      this.skipRemainder();\n    }\n\n    return true;\n  }\n\n  /**\n   * The LZ decompression routine:\n   * This version decompress the given gif file into Line of length LineLen.\n   * This routine can be called few times (one per scan line, for example), in\n   * order the complete the whole image.\n   */\n  private decompressLine(line: Uint8Array): boolean {\n    if (this._stackPtr > GifDecoder._lzMaxCode) {\n      return false;\n    }\n\n    const lineLen = line.length;\n    let i = 0;\n\n    if (this._stackPtr !== 0) {\n      // Let pop the stack off before continuing to read the gif file:\n      while (this._stackPtr !== 0 && i < lineLen) {\n        line[i++] = this._stack[--this._stackPtr];\n      }\n    }\n\n    let currentPrefix: number | undefined = undefined;\n\n    // Decode LineLen items.\n    while (i < lineLen) {\n      this._currentCode = this.decompressInput();\n      if (this._currentCode === undefined) {\n        return false;\n      }\n\n      if (this._currentCode === this._eofCode) {\n        // Note however that usually we will not be here as we will stop\n        // decoding as soon as we got all the pixel, or EOF code will\n        // not be read at all, and DGifGetLine/Pixel clean everything.\n        return false;\n      }\n\n      if (this._currentCode === this._clearCode) {\n        // We need to start over again:\n        for (let j = 0; j <= GifDecoder._lzMaxCode; j++) {\n          this._prefix![j] = GifDecoder._noSuchCode;\n        }\n\n        this._runningCode = this._eofCode + 1;\n        this._runningBits = this._bitsPerPixel + 1;\n        this._maxCode1 = 1 << this._runningBits;\n        this._lastCode = GifDecoder._noSuchCode;\n      } else {\n        // Its regular code - if in pixel range simply add it to output\n        // stream, otherwise trace to codes linked list until the prefix\n        // is in pixel range:\n        if (this._currentCode < this._clearCode) {\n          // This is simple - its pixel scalar, so add it to output:\n          line[i++] = this._currentCode;\n        } else {\n          // Its a code to needed to be traced: trace the linked list\n          // until the prefix is a pixel, while pushing the suffix\n          // pixels on our stack. If we done, pop the stack in reverse\n          // (thats what stack is good for!) order to output. */\n          if (this._prefix![this._currentCode] === GifDecoder._noSuchCode) {\n            // Only allowed if CrntCode is exactly the running code:\n            // In that case CrntCode = XXXCode, CrntCode or the\n            // prefix code is last code and the suffix char is\n            // exactly the prefix of last code!\n            if (this._currentCode === this._runningCode - 2) {\n              currentPrefix = this._lastCode;\n              const prefixChar = GifDecoder.getPrefixChar(\n                this._prefix!,\n                this._lastCode,\n                this._clearCode\n              );\n              this._stack[this._stackPtr++] = prefixChar;\n              this._suffix[this._runningCode - 2] = prefixChar;\n            } else {\n              return false;\n            }\n          } else {\n            currentPrefix = this._currentCode;\n          }\n\n          // Now (if image is O.K.) we should not get an noSuchCode\n          // During the trace. As we might loop forever, in case of\n          // defective image, we count the number of loops we trace\n          // and stop if we got lzMaxCode. obviously we can not\n          // loop more than that.\n          let j = 0;\n          while (\n            j++ <= GifDecoder._lzMaxCode &&\n            currentPrefix > this._clearCode &&\n            currentPrefix <= GifDecoder._lzMaxCode\n          ) {\n            this._stack[this._stackPtr++] = this._suffix[currentPrefix];\n            currentPrefix = this._prefix![currentPrefix];\n          }\n\n          if (\n            j >= GifDecoder._lzMaxCode ||\n            currentPrefix > GifDecoder._lzMaxCode\n          ) {\n            return false;\n          }\n\n          // Push the last character on stack:\n          this._stack[this._stackPtr++] = currentPrefix;\n\n          // Now lets pop all the stack into output:\n          while (this._stackPtr !== 0 && i < lineLen) {\n            line[i++] = this._stack[--this._stackPtr];\n          }\n        }\n\n        if (\n          this._lastCode !== GifDecoder._noSuchCode &&\n          this._prefix![this._runningCode - 2] === GifDecoder._noSuchCode\n        ) {\n          this._prefix![this._runningCode - 2] = this._lastCode;\n\n          if (this._currentCode === this._runningCode - 2) {\n            // Only allowed if CrntCode is exactly the running code:\n            // In that case CrntCode = XXXCode, CrntCode or the\n            // prefix code is last code and the suffix char is\n            // exactly the prefix of last code!\n            this._suffix[this._runningCode - 2] = GifDecoder.getPrefixChar(\n              this._prefix!,\n              this._lastCode,\n              this._clearCode\n            );\n          } else {\n            this._suffix[this._runningCode - 2] = GifDecoder.getPrefixChar(\n              this._prefix!,\n              this._currentCode,\n              this._clearCode\n            );\n          }\n        }\n\n        this._lastCode = this._currentCode;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * The LZ decompression input routine:\n   * This routine is responsible for the decompression of the bit stream from\n   * 8 bits (bytes) packets, into the real codes.\n   */\n  private decompressInput(): number | undefined {\n    // The image can't contain more than LZ_BITS per code.\n    if (this._runningBits > GifDecoder._lzBits) {\n      return undefined;\n    }\n\n    while (this._currentShiftState < this._runningBits) {\n      // Needs to get more bytes from input stream for next code:\n      const nextByte = this.bufferedInput()!;\n\n      this._currentShiftDWord |= nextByte << this._currentShiftState;\n      this._currentShiftState += 8;\n    }\n\n    const code: number =\n      this._currentShiftDWord & GifDecoder._codeMasks[this._runningBits];\n\n    this._currentShiftDWord >>= this._runningBits;\n    this._currentShiftState -= this._runningBits;\n\n    // If code cannot fit into RunningBits bits, must raise its size. Note\n    // however that codes above 4095 are used for special signaling.\n    // If we're using lzBits bits already and we're at the max code, just\n    // keep using the table as it is, don't increment Private->RunningCode.\n    if (\n      this._runningCode < GifDecoder._lzMaxCode + 2 &&\n      ++this._runningCode > this._maxCode1 &&\n      this._runningBits < GifDecoder._lzBits\n    ) {\n      this._maxCode1 <<= 1;\n      this._runningBits++;\n    }\n\n    return code;\n  }\n\n  /**\n   * This routines read one gif data block at a time and buffers it internally\n   * so that the decompression routine could access it.\n   * The routine returns the next byte from its internal buffer (or read next\n   * block in if buffer empty) and returns undefined on failure.\n   */\n  private bufferedInput(): number | undefined {\n    let nextByte = 0;\n    if (this._buffer![0] === 0) {\n      // Needs to read the next buffer - this one is empty:\n      this._buffer![0] = this._input!.readByte();\n\n      // There shouldn't be any empty data blocks here as the LZW spec\n      // says the LZW termination code should come first. Therefore we\n      // shouldn't be inside this routine at that point.\n      if (this._buffer![0] === 0) {\n        return undefined;\n      }\n\n      const from = this._input!.readBytes(this._buffer![0]).toUint8Array();\n\n      ArrayUtils.copyRange(from, 0, this._buffer![0], this._buffer!, 1);\n\n      nextByte = this._buffer![1];\n      // We use now the second place as last char read!\n      this._buffer![1] = 2;\n      this._buffer![0]--;\n    } else {\n      nextByte = this._buffer![this._buffer![1]++];\n      this._buffer![0]--;\n    }\n\n    return nextByte;\n  }\n\n  private initDecode(): void {\n    this._buffer = new Uint8Array(256);\n    this._stack = new Uint8Array(GifDecoder._lzMaxCode);\n    this._suffix = new Uint8Array(GifDecoder._lzMaxCode + 1);\n    this._prefix = new Uint32Array(GifDecoder._lzMaxCode + 1);\n  }\n\n  private decodeImage(gifImage: GifImageDesc): MemoryImage | undefined {\n    if (this._input === undefined || this._info === undefined) {\n      return undefined;\n    }\n\n    if (this._buffer === undefined) {\n      this.initDecode();\n    }\n\n    this._bitsPerPixel = this._input.readByte();\n    this._clearCode = 1 << this._bitsPerPixel;\n    this._eofCode = this._clearCode + 1;\n    this._runningCode = this._eofCode + 1;\n    this._runningBits = this._bitsPerPixel + 1;\n    this._maxCode1 = 1 << this._runningBits;\n    this._stackPtr = 0;\n    this._lastCode = GifDecoder._noSuchCode;\n    this._currentShiftState = 0;\n    this._currentShiftDWord = 0;\n    this._buffer![0] = 0;\n    this._prefix!.fill(GifDecoder._noSuchCode, 0, this._prefix!.length);\n\n    const width = gifImage.width;\n    const height = gifImage.height;\n\n    if (\n      gifImage.x + width > this._info.width ||\n      gifImage.y + height > this._info.height\n    ) {\n      return undefined;\n    }\n\n    const colorMap =\n      gifImage.colorMap !== undefined\n        ? gifImage.colorMap!\n        : this._info.globalColorMap!;\n\n    this._pixelCount = width * height;\n\n    const image = new MemoryImage({\n      width: width,\n      height: height,\n      numChannels: 1,\n      palette: colorMap.getPalette(),\n    });\n\n    const line = new Uint8Array(width);\n\n    if (gifImage.interlaced) {\n      const row = gifImage.y;\n      for (let i = 0, j = 0; i < 4; ++i) {\n        for (\n          let y = row + GifDecoder._interlacedOffset[i];\n          y < row + height;\n          y += GifDecoder._interlacedJump[i], ++j\n        ) {\n          if (!this.getLine(line)) {\n            return image;\n          }\n          GifDecoder.updateImage(image, y, colorMap, line);\n        }\n      }\n    } else {\n      for (let y = 0; y < height; ++y) {\n        if (!this.getLine(line)) {\n          return image;\n        }\n        GifDecoder.updateImage(image, y, colorMap, line);\n      }\n    }\n\n    return image;\n  }\n\n  /**\n   * Is the given file a valid Gif image?\n   */\n  public isValidFile(bytes: Uint8Array): boolean {\n    this._input = new InputBuffer({\n      buffer: bytes,\n    });\n    return this.getInfo();\n  }\n\n  /**\n   * Validate the file is a Gif image and get information about it.\n   * If the file is not a valid Gif image, undefined is returned.\n   */\n  public startDecode(bytes: Uint8Array): GifInfo | undefined {\n    this._input = new InputBuffer({\n      buffer: bytes,\n    });\n\n    if (!this.getInfo()) {\n      return undefined;\n    }\n\n    try {\n      while (!this._input.isEOS) {\n        const recordType = this._input.readByte();\n        switch (recordType) {\n          case GifDecoder._imageDescRecordType: {\n            const gifImage = this.skipImage();\n            if (gifImage === undefined) {\n              return this._info;\n            }\n            this._info!.frames.push(gifImage);\n            break;\n          }\n          case GifDecoder._extensionRecordType: {\n            const extCode = this._input.readByte();\n            if (extCode === GifDecoder._applicationExt) {\n              this.readApplicationExt(this._input);\n            } else if (extCode === GifDecoder._graphicControlExt) {\n              this.readGraphicsControlExt(this._input);\n            } else {\n              this.skipRemainder();\n            }\n            break;\n          }\n          case GifDecoder._terminateRecordType: {\n            return this._info;\n          }\n          default:\n            break;\n        }\n      }\n    } catch (error) {\n      // ignore\n    }\n\n    return this._info;\n  }\n\n  public decode(bytes: Uint8Array, frame?: number): MemoryImage | undefined {\n    if (this.startDecode(bytes) === undefined || this._info === undefined) {\n      return undefined;\n    }\n\n    if (this._info.numFrames === 1) {\n      return this.decodeFrame(frame ?? 0);\n    }\n\n    let firstImage: MemoryImage | undefined = undefined;\n    let lastImage: MemoryImage | undefined = undefined;\n    for (let i = 0; i < this._info.numFrames; ++i) {\n      const frame = this._info.frames[i];\n      const image = this.decodeFrame(i);\n      if (image === undefined) {\n        return undefined;\n      }\n\n      // Convert to MS\n      image.frameDuration = frame.duration * 10;\n\n      if (firstImage === undefined || lastImage === undefined) {\n        firstImage = image;\n        lastImage = image;\n        image.loopCount = this._repeat;\n        continue;\n      }\n\n      if (\n        image.width === lastImage.width &&\n        image.height === lastImage.height &&\n        frame.x === 0 &&\n        frame.y === 0 &&\n        frame.clearFrame\n      ) {\n        lastImage = image;\n        firstImage.addFrame(lastImage);\n        continue;\n      }\n\n      if (frame.clearFrame) {\n        const colorMap =\n          frame.colorMap !== undefined\n            ? frame.colorMap\n            : this._info.globalColorMap!;\n\n        lastImage = new MemoryImage({\n          width: lastImage.width,\n          height: lastImage.height,\n          numChannels: 1,\n          palette: colorMap.getPalette(),\n        });\n        lastImage.clear(colorMap.getColor(this._info.backgroundColor!.r));\n      } else {\n        lastImage = MemoryImage.from(lastImage);\n      }\n\n      lastImage.frameDuration = image.frameDuration;\n\n      for (const p of image) {\n        if (p.a !== 0) {\n          lastImage.setPixel(p.x + frame.x, p.y + frame.y, p);\n        }\n      }\n\n      firstImage.addFrame(lastImage);\n    }\n\n    return firstImage;\n  }\n\n  public decodeFrame(frame: number): MemoryImage | undefined {\n    if (this._input === undefined || this._info === undefined) {\n      return undefined;\n    }\n\n    if (frame >= this._info.frames.length || frame < 0) {\n      return undefined;\n    }\n\n    // this._frame = frame;\n    const gifImage = this._info.frames[frame];\n    this._input.offset = gifImage.inputPosition;\n\n    return this.decodeImage(this._info.frames[frame]);\n  }\n}\n", "/** @format */\n\nexport enum QuantizerType {\n  octree,\n  neural,\n}\n", "/** @format */\n\nimport { NeuralQuantizer } from '../image/neural-quantizer';\nimport { OutputBuffer } from '../common/output-buffer';\nimport { StringUtils } from '../common/string-utils';\nimport { Encoder } from './encoder';\nimport { QuantizerType } from '../image/quantizer-type';\nimport { MemoryImage } from '../image/image';\nimport { OctreeQuantizer } from '../image/octree-quantizer';\nimport { Quantizer } from '../image/quantizer';\nimport { Filter } from '../filter/filter';\nimport { LibError } from '../error/lib-error';\nimport { DitherKernel } from '../filter/dither-kernel';\n\nexport interface GifEncoderInitOptions {\n  delay?: number;\n  repeat?: number;\n  samplingFactor?: number;\n  dither?: DitherKernel;\n  ditherSerpentine?: boolean;\n}\n\nexport class GifEncoder implements Encoder {\n  private static readonly _gif89Id = 'GIF89a';\n\n  private static readonly _imageDescRecordType = 0x2c;\n  private static readonly _extensionRecordType = 0x21;\n  private static readonly _terminateRecordType = 0x3b;\n\n  private static readonly _applicationExt = 0xff;\n  private static readonly _graphicControlExt = 0xf9;\n\n  private static readonly _eof = -1;\n  private static readonly _bits = 12;\n  // 80% occupancy\n  private static readonly _hSize = 5003;\n  private static readonly _masks = [\n    0x0000, 0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,\n    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff,\n  ];\n\n  private _delay: number;\n\n  private _repeat: number;\n\n  private _numColors: number;\n\n  private _quantizerType: QuantizerType;\n\n  private _samplingFactor: number;\n\n  private _lastImage?: MemoryImage;\n\n  private _lastImageDuration?: number;\n\n  private _lastColorMap?: Quantizer;\n\n  private _width!: number;\n\n  private _height!: number;\n\n  private _encodedFrames: number;\n\n  private _curAccum = 0;\n\n  private _curBits = 0;\n\n  private _nBits = 0;\n\n  private _initBits = 0;\n\n  private _eofCode = 0;\n\n  private _maxCode = 0;\n\n  private _clearCode = 0;\n\n  private _freeEnt = 0;\n\n  private _clearFlag = false;\n\n  private _block!: Uint8Array;\n\n  private _blockSize = 0;\n\n  private _outputBuffer?: OutputBuffer;\n\n  private _dither: DitherKernel;\n\n  private _ditherSerpentine: boolean;\n\n  /**\n   * Does this encoder support animation?\n   */\n  private readonly _supportsAnimation = true;\n  public get supportsAnimation(): boolean {\n    return this._supportsAnimation;\n  }\n\n  constructor(opt?: GifEncoderInitOptions) {\n    this._delay = opt?.delay ?? 80;\n    this._repeat = opt?.repeat ?? 0;\n    this._numColors = 256;\n    this._quantizerType = QuantizerType.neural;\n    this._samplingFactor = opt?.samplingFactor ?? 10;\n    this._dither = opt?.dither ?? DitherKernel.floydSteinberg;\n    this._ditherSerpentine = opt?.ditherSerpentine ?? false;\n    this._encodedFrames = 0;\n  }\n\n  private addImage(image: MemoryImage, width: number, height: number): void {\n    if (!image.hasPalette) {\n      throw new LibError('GIF can only encode palette images.');\n    }\n\n    const palette = image.palette!;\n    const numColors = palette.numColors;\n\n    const out = this._outputBuffer!;\n\n    // Image desc\n    out.writeByte(GifEncoder._imageDescRecordType);\n    // image position x,y = 0,0\n    out.writeUint16(0);\n    out.writeUint16(0);\n    // image size\n    out.writeUint16(width);\n    out.writeUint16(height);\n\n    const paletteBytes = palette.toUint8Array();\n\n    // Local Color Map\n    // (0x80: Use LCM, 0x07: Palette Size (7 = 8-bit))\n    out.writeByte(0x87);\n\n    const numChannels = palette.numChannels;\n    if (numChannels === 3) {\n      out.writeBytes(paletteBytes);\n    } else if (numChannels === 4) {\n      for (let i = 0, pi = 0; i < numColors; ++i, pi += 4) {\n        out.writeByte(paletteBytes[pi]);\n        out.writeByte(paletteBytes[pi + 1]);\n        out.writeByte(paletteBytes[pi + 2]);\n      }\n    } else if (numChannels === 1 || numChannels === 2) {\n      for (let i = 0, pi = 0; i < numColors; ++i, pi += numChannels) {\n        const g = paletteBytes[pi];\n        out.writeByte(g);\n        out.writeByte(g);\n        out.writeByte(g);\n      }\n    }\n\n    for (let i = numColors; i < 256; ++i) {\n      out.writeByte(0);\n      out.writeByte(0);\n      out.writeByte(0);\n    }\n\n    this.encodeLZW(image);\n  }\n\n  private encodeLZW(image: MemoryImage): void {\n    this._curAccum = 0;\n    this._curBits = 0;\n    this._blockSize = 0;\n    this._block = new Uint8Array(256);\n\n    const initCodeSize = 8;\n    this._outputBuffer!.writeByte(initCodeSize);\n\n    const hTab = new Int32Array(GifEncoder._hSize);\n    const codeTab = new Int32Array(GifEncoder._hSize);\n    const pIter = image[Symbol.iterator]();\n    let pIterRes = pIter.next();\n\n    this._initBits = initCodeSize + 1;\n    this._nBits = this._initBits;\n    this._maxCode = (1 << this._nBits) - 1;\n    this._clearCode = 1 << (this._initBits - 1);\n    this._eofCode = this._clearCode + 1;\n    this._clearFlag = false;\n    this._freeEnt = this._clearCode + 2;\n    let pFinished = false;\n\n    const nextPixel = (): number => {\n      if (pFinished) {\n        return GifEncoder._eof;\n      }\n      const r = Math.trunc(pIterRes.value.index);\n      if (((pIterRes = pIter.next()), pIterRes.done)) {\n        pFinished = true;\n      }\n      return r;\n    };\n\n    let ent = nextPixel();\n\n    let hShift = 0;\n    for (let fCode = GifEncoder._hSize; fCode < 65536; fCode *= 2) {\n      hShift++;\n    }\n    hShift = 8 - hShift;\n\n    const hSizeReg = GifEncoder._hSize;\n    for (let i = 0; i < hSizeReg; ++i) {\n      hTab[i] = -1;\n    }\n\n    this.output(this._clearCode);\n\n    let outerLoop = true;\n    while (outerLoop) {\n      outerLoop = false;\n\n      let c = nextPixel();\n      while (c !== GifEncoder._eof) {\n        const fcode = (c << GifEncoder._bits) + ent;\n        // xor hashing\n        let i = (c << hShift) ^ ent;\n\n        if (hTab[i] === fcode) {\n          ent = codeTab[i];\n          c = nextPixel();\n          continue;\n        } else if (hTab[i] >= 0) {\n          // non-empty slot\n          // secondary hash (after G. Knott)\n          let disp = hSizeReg - i;\n          if (i === 0) {\n            disp = 1;\n          }\n          do {\n            if ((i -= disp) < 0) {\n              i += hSizeReg;\n            }\n\n            if (hTab[i] === fcode) {\n              ent = codeTab[i];\n              outerLoop = true;\n              break;\n            }\n          } while (hTab[i] >= 0);\n          if (outerLoop) {\n            break;\n          }\n        }\n\n        this.output(ent);\n        ent = c;\n\n        if (this._freeEnt < 1 << GifEncoder._bits) {\n          // code -> hashtable\n          codeTab[i] = this._freeEnt++;\n          hTab[i] = fcode;\n        } else {\n          for (let i = 0; i < GifEncoder._hSize; ++i) {\n            hTab[i] = -1;\n          }\n          this._freeEnt = this._clearCode + 2;\n          this._clearFlag = true;\n          this.output(this._clearCode);\n        }\n\n        c = nextPixel();\n      }\n    }\n\n    this.output(ent);\n    this.output(this._eofCode);\n\n    this._outputBuffer!.writeByte(0);\n  }\n\n  private output(code: number | undefined): void {\n    this._curAccum &= GifEncoder._masks[this._curBits];\n\n    if (this._curBits > 0) {\n      this._curAccum |= code! << this._curBits;\n    } else {\n      this._curAccum = code!;\n    }\n\n    this._curBits += this._nBits;\n\n    while (this._curBits >= 8) {\n      this.addToBlock(this._curAccum & 0xff);\n      this._curAccum >>= 8;\n      this._curBits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (this._freeEnt > this._maxCode || this._clearFlag) {\n      if (this._clearFlag) {\n        this._nBits = this._initBits;\n        this._maxCode = (1 << this._nBits) - 1;\n        this._clearFlag = false;\n      } else {\n        ++this._nBits;\n        if (this._nBits === GifEncoder._bits) {\n          this._maxCode = 1 << GifEncoder._bits;\n        } else {\n          this._maxCode = (1 << this._nBits) - 1;\n        }\n      }\n    }\n\n    if (code === this._eofCode) {\n      // At EOF, write the rest of the buffer.\n      while (this._curBits > 0) {\n        this.addToBlock(this._curAccum & 0xff);\n        this._curAccum >>= 8;\n        this._curBits -= 8;\n      }\n      this.writeBlock();\n    }\n  }\n\n  private writeBlock(): void {\n    if (this._blockSize > 0) {\n      this._outputBuffer!.writeByte(this._blockSize);\n      this._outputBuffer!.writeBytes(this._block, this._blockSize);\n      this._blockSize = 0;\n    }\n  }\n\n  private addToBlock(c: number): void {\n    this._block[this._blockSize++] = c;\n    if (this._blockSize >= 254) {\n      this.writeBlock();\n    }\n  }\n\n  private writeApplicationExt(): void {\n    this._outputBuffer!.writeByte(GifEncoder._extensionRecordType);\n    this._outputBuffer!.writeByte(GifEncoder._applicationExt);\n    // Data block size\n    this._outputBuffer!.writeByte(11);\n    const appCodeUnits = StringUtils.getCodePoints('NETSCAPE2.0');\n    // App identifier\n    this._outputBuffer!.writeBytes(appCodeUnits);\n    this._outputBuffer!.writeBytes(new Uint8Array([0x03, 0x01]));\n    // Loop count\n    this._outputBuffer!.writeUint16(this._repeat);\n    // Block terminator\n    this._outputBuffer!.writeByte(0);\n  }\n\n  private writeGraphicsCtrlExt(image: MemoryImage): void {\n    this._outputBuffer!.writeByte(GifEncoder._extensionRecordType);\n    this._outputBuffer!.writeByte(GifEncoder._graphicControlExt);\n    // data block size\n    this._outputBuffer!.writeByte(4);\n\n    let transparentIndex = 0;\n    let hasTransparency = 0;\n    const palette = image.palette!;\n    const nc = palette.numChannels;\n    const pa = nc - 1;\n    if (nc === 4 || nc === 2) {\n      const p = palette.toUint8Array();\n      const l = palette.numColors;\n      for (let i = 0, pi = pa; i < l; ++i, pi += nc) {\n        const a = p[pi];\n        if (a === 0) {\n          hasTransparency = 1;\n          transparentIndex = i;\n          break;\n        }\n      }\n    }\n\n    // dispose: 0 = no action, 2 = clear\n    const dispose = 2;\n\n    // 1:3 reserved\n    const fields =\n      0 |\n      // 4:6 disposal\n      (dispose << 2) |\n      // 7   user input - 0 = none\n      0 |\n      // 8   transparency flag\n      hasTransparency;\n\n    // packed fields\n    this._outputBuffer!.writeByte(fields);\n\n    // delay x 1/100 sec\n    this._outputBuffer!.writeUint16(this._lastImageDuration ?? this._delay);\n    // transparent color index\n    this._outputBuffer!.writeByte(transparentIndex);\n    // block terminator\n    this._outputBuffer!.writeByte(0);\n  }\n\n  // GIF header and Logical Screen Descriptor\n  private writeHeader(width: number, height: number): void {\n    const idCodeUnits = StringUtils.getCodePoints(GifEncoder._gif89Id);\n    this._outputBuffer!.writeBytes(idCodeUnits);\n    this._outputBuffer!.writeUint16(width);\n    this._outputBuffer!.writeUint16(height);\n    // global color map parameters (not being used).\n    this._outputBuffer!.writeByte(0);\n    // Background color index.\n    this._outputBuffer!.writeByte(0);\n    // Aspect\n    this._outputBuffer!.writeByte(0);\n  }\n\n  /**\n   * Encode the images that were added with **addFrame**.\n   * After this has been called (returning the finishes GIF),\n   * calling **addFrame** for a new animation or image is safe again.\n   *\n   * **addFrame** will not encode the first image passed and after that\n   * always encode the previous image. Hence, the last image needs to be\n   * encoded here.\n   */\n  private finish(): Uint8Array | undefined {\n    let bytes: Uint8Array | undefined = undefined;\n    if (this._outputBuffer === undefined) {\n      return bytes;\n    }\n\n    if (this._encodedFrames === 0) {\n      this.writeHeader(this._width, this._height);\n      this.writeApplicationExt();\n    } else {\n      this.writeGraphicsCtrlExt(this._lastImage!);\n    }\n\n    this.addImage(this._lastImage!, this._width, this._height);\n\n    this._outputBuffer.writeByte(GifEncoder._terminateRecordType);\n\n    this._lastImage = undefined;\n    this._lastColorMap = undefined;\n    this._encodedFrames = 0;\n\n    bytes = this._outputBuffer.getBytes();\n    this._outputBuffer = undefined;\n    return bytes;\n  }\n\n  /**\n   * This adds the frame passed to **image**.\n   * After the last frame has been added, **finish** is required to be called.\n   * Optional frame **duration** is in 1/100 sec.\n   * */\n  public addFrame(image: MemoryImage, duration?: number): void {\n    if (this._outputBuffer === undefined) {\n      this._outputBuffer = new OutputBuffer();\n\n      if (!image.hasPalette) {\n        if (this._quantizerType === QuantizerType.neural) {\n          this._lastColorMap = new NeuralQuantizer(\n            image,\n            this._numColors,\n            this._samplingFactor\n          );\n        } else {\n          this._lastColorMap = new OctreeQuantizer(image, this._numColors);\n        }\n\n        this._lastImage = Filter.ditherImage({\n          image: image,\n          quantizer: this._lastColorMap,\n          kernel: this._dither,\n          serpentine: this._ditherSerpentine,\n        });\n      } else {\n        this._lastImage = image;\n      }\n\n      this._lastImageDuration = duration;\n\n      this._width = image.width;\n      this._height = image.height;\n      return;\n    }\n\n    if (this._encodedFrames === 0) {\n      this.writeHeader(this._width, this._height);\n      this.writeApplicationExt();\n    }\n\n    this.writeGraphicsCtrlExt(this._lastImage!);\n\n    this.addImage(this._lastImage!, this._width, this._height);\n    this._encodedFrames++;\n\n    if (!image.hasPalette) {\n      if (this._quantizerType === QuantizerType.neural) {\n        this._lastColorMap = new NeuralQuantizer(\n          image,\n          this._numColors,\n          this._samplingFactor\n        );\n      } else {\n        this._lastColorMap = new OctreeQuantizer(image, this._numColors);\n      }\n\n      this._lastImage = Filter.ditherImage({\n        image: image,\n        quantizer: this._lastColorMap!,\n        kernel: this._dither,\n        serpentine: this._ditherSerpentine,\n      });\n    } else {\n      this._lastImage = image;\n    }\n\n    this._lastImageDuration = duration;\n  }\n\n  /**\n   * Encode a single frame image.\n   */\n  public encode(image: MemoryImage, singleFrame = false): Uint8Array {\n    if (!image.hasAnimation || singleFrame) {\n      this.addFrame(image);\n      return this.finish()!;\n    }\n\n    this._repeat = image.loopCount;\n    for (const f of image.frames) {\n      // Convert ms to 1/100 sec.\n      this.addFrame(f, Math.trunc(f.frameDuration / 10));\n    }\n    return this.finish()!;\n  }\n}\n", "/** @format */\n\nimport { BmpInfo } from '../bmp/bmp-info';\n\nexport class IcoBmpInfo extends BmpInfo {\n  public get height(): number {\n    return Math.floor(this._height / 2);\n  }\n\n  public get ignoreAlphaChannel(): boolean {\n    return this.headerSize === 40 && this.bitsPerPixel === 32\n      ? false\n      : super.ignoreAlphaChannel;\n  }\n}\n", "/** @format */\n\nexport interface IcoInfoImageInitOptions {\n  width: number;\n  height: number;\n  colorPalette: number;\n  bytesSize: number;\n  bytesOffset: number;\n  colorPlanes: number;\n  bitsPerPixel: number;\n}\n\nexport class IcoInfoImage {\n  private readonly _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _colorPalette: number;\n  public get colorPalette(): number {\n    return this._colorPalette;\n  }\n\n  private readonly _bytesSize: number;\n  public get bytesSize(): number {\n    return this._bytesSize;\n  }\n\n  private readonly _bytesOffset: number;\n  public get bytesOffset(): number {\n    return this._bytesOffset;\n  }\n\n  private readonly _colorPlanes: number;\n  public get colorPlanes(): number {\n    return this._colorPlanes;\n  }\n\n  private readonly _bitsPerPixel: number;\n  public get bitsPerPixel(): number {\n    return this._bitsPerPixel;\n  }\n\n  constructor(opt: IcoInfoImageInitOptions) {\n    this._width = opt.width;\n    this._height = opt.height;\n    this._colorPalette = opt.colorPalette;\n    this._bytesSize = opt.bytesSize;\n    this._bytesOffset = opt.bytesOffset;\n    this._colorPlanes = opt.colorPlanes;\n    this._bitsPerPixel = opt.bitsPerPixel;\n  }\n}\n", "/** @format */\n\nexport enum IcoType {\n  invalid,\n  ico,\n  cur,\n}\n\nexport const IcoTypeLength = 3;\n", "/** @format */\n\nimport { Color } from '../../color/color';\nimport { ArrayUtils } from '../../common/array-utils';\nimport { InputBuffer } from '../../common/input-buffer';\nimport { DecodeInfo } from '../decode-info';\nimport { IcoInfoImage } from './ico-info-image';\nimport { IcoType, IcoTypeLength } from './ico-type';\n\nexport class IcoInfo implements DecodeInfo {\n  private _width = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  private _height = 0;\n  public get height(): number {\n    return this._height;\n  }\n\n  private readonly _type: IcoType;\n  public get type(): IcoType {\n    return this._type;\n  }\n\n  private readonly _numFrames: number;\n  public get numFrames(): number {\n    return this._numFrames;\n  }\n\n  private _backgroundColor: Color | undefined = undefined;\n  public get backgroundColor(): Color | undefined {\n    return this._backgroundColor;\n  }\n\n  private readonly _images: IcoInfoImage[];\n  public get images(): IcoInfoImage[] {\n    return this._images;\n  }\n\n  constructor(type: number, numFrames: number, images: IcoInfoImage[]) {\n    this._type = type;\n    this._numFrames = numFrames;\n    this._images = images;\n  }\n\n  public static read(input: InputBuffer): IcoInfo | undefined {\n    if (input.readUint16() !== 0) {\n      return undefined;\n    }\n    const t = input.readUint16();\n    if (t >= IcoTypeLength) {\n      return undefined;\n    }\n    const type = t as IcoType;\n    if (type === IcoType.cur) {\n      // CUR format not yet supported.\n      return undefined;\n    }\n\n    const imageCount = input.readUint16();\n\n    const images = ArrayUtils.generate<IcoInfoImage>(\n      imageCount,\n      (_) =>\n        new IcoInfoImage({\n          width: input.readByte(),\n          height: input.readByte(),\n          colorPalette: input.readByte(),\n          // ignore 1 byte\n          colorPlanes: (input.skip(1), input).readUint16(),\n          bitsPerPixel: input.readUint16(),\n          bytesSize: input.readUint32(),\n          bytesOffset: input.readUint32(),\n        })\n    );\n\n    return new IcoInfo(type, imageCount, images);\n  }\n}\n", "/** @format */\n\nexport enum PngFilterType {\n  none,\n  sub,\n  up,\n  average,\n  paeth,\n}\n", "/** @format */\n\nexport enum PngColorType {\n  grayscale = 0,\n  rgb = 2,\n  indexed = 3,\n  grayscaleAlpha = 4,\n  rgba = 6,\n}\n", "/** @format */\n\nimport { deflate } from 'uzip';\nimport { Crc32 } from '../common/crc32';\nimport { OutputBuffer } from '../common/output-buffer';\nimport { StringUtils } from '../common/string-utils';\nimport { CompressionLevel } from '../common/typings';\nimport { Encoder } from './encoder';\nimport { Quantizer } from '../image/quantizer';\nimport { PngFilterType } from './png/png-filter-type';\nimport { MemoryImage } from '../image/image';\nimport { Format } from '../color/format';\nimport { NeuralQuantizer } from '../image/neural-quantizer';\nimport { PngColorType } from './png/png-color-type';\nimport { Palette } from '../image/palette';\nimport { IccProfile } from '../image/icc-profile';\n\nexport interface PngEncoderInitOptions {\n  filter?: PngFilterType;\n  level?: CompressionLevel;\n}\n\n/**\n * Encode an image to the PNG format.\n */\nexport class PngEncoder implements Encoder {\n  private _globalQuantizer: Quantizer | undefined;\n\n  private _filter: PngFilterType;\n\n  private _level: number;\n\n  private _repeat = 0;\n\n  private _frames = 0;\n\n  private _sequenceNumber = 0;\n\n  private _isAnimated = false;\n\n  private _output: OutputBuffer | undefined;\n\n  /**\n   * Does this encoder support animation?\n   */\n  private _supportsAnimation = true;\n  public get supportsAnimation() {\n    return this._supportsAnimation;\n  }\n\n  constructor(opt?: PngEncoderInitOptions) {\n    this._filter = opt?.filter ?? PngFilterType.paeth;\n    this._level = opt?.level ?? 6;\n  }\n\n  /**\n   * Return the CRC of the bytes\n   */\n  private static crc(type: string, bytes: Uint8Array): number {\n    const typeCodeUnits = StringUtils.getCodePoints(type);\n    const crc = Crc32.getChecksum({\n      buffer: typeCodeUnits,\n    });\n    return Crc32.getChecksum({\n      buffer: bytes,\n      baseCrc: crc,\n    });\n  }\n\n  private static writeChunk(\n    out: OutputBuffer,\n    type: string,\n    chunk: Uint8Array\n  ): void {\n    out.writeUint32(chunk.length);\n    const typeCodeUnits = StringUtils.getCodePoints(type);\n    out.writeBytes(typeCodeUnits);\n    out.writeBytes(chunk);\n    const crc = PngEncoder.crc(type, chunk);\n    out.writeUint32(crc);\n  }\n\n  private static write(\n    bpc: number,\n    row: Uint8Array,\n    ri: number,\n    out: Uint8Array,\n    oi: number\n  ): number {\n    let _bpc = bpc;\n    let _oi = oi;\n    _bpc--;\n    while (_bpc >= 0) {\n      out[_oi++] = row[ri + _bpc];\n      _bpc--;\n    }\n    return _oi;\n  }\n\n  private static filterSub(\n    row: Uint8Array,\n    bpc: number,\n    bpp: number,\n    out: Uint8Array,\n    oi: number\n  ): number {\n    let _oi = oi;\n    out[_oi++] = PngFilterType.sub;\n    for (let x = 0; x < bpp; x += bpc) {\n      _oi = PngEncoder.write(bpc, row, x, out, _oi);\n    }\n    const l = row.length;\n    for (let x = bpp; x < l; x += bpc) {\n      for (let c = 0, c2 = bpc - 1; c < bpc; ++c, --c2) {\n        out[_oi++] = (row[x + c2] - row[x + c2 - bpp]) & 0xff;\n      }\n    }\n    return _oi;\n  }\n\n  private static filterUp(\n    row: Uint8Array,\n    bpc: number,\n    out: Uint8Array,\n    oi: number,\n    prevRow?: Uint8Array\n  ): number {\n    let _oi = oi;\n    out[_oi++] = PngFilterType.up;\n    const l = row.length;\n    for (let x = 0; x < l; x += bpc) {\n      for (let c = 0, c2 = bpc - 1; c < bpc; ++c, --c2) {\n        const b = prevRow !== undefined ? prevRow[x + c2] : 0;\n        out[_oi++] = (row[x + c2] - b) & 0xff;\n      }\n    }\n    return _oi;\n  }\n\n  private static filterAverage(\n    row: Uint8Array,\n    bpc: number,\n    bpp: number,\n    out: Uint8Array,\n    oi: number,\n    prevRow?: Uint8Array\n  ): number {\n    let _oi = oi;\n    out[_oi++] = PngFilterType.average;\n    const l = row.length;\n    for (let x = 0; x < l; x += bpc) {\n      for (let c = 0, c2 = bpc - 1; c < bpc; ++c, --c2) {\n        const x2 = x + c2;\n        const p1 = x2 < bpp ? 0 : row[x2 - bpp];\n        const p2 = prevRow === undefined ? 0 : prevRow[x2];\n        const p3 = row[x2];\n        out[_oi++] = p3 - ((p1 + p2) >> 1);\n      }\n    }\n    return _oi;\n  }\n\n  private static paethPredictor(a: number, b: number, c: number): number {\n    const p = a + b - c;\n    const pa = p > a ? p - a : a - p;\n    const pb = p > b ? p - b : b - p;\n    const pc = p > c ? p - c : c - p;\n    if (pa <= pb && pa <= pc) {\n      return a;\n    } else if (pb <= pc) {\n      return b;\n    }\n    return c;\n  }\n\n  private static filterPaeth(\n    row: Uint8Array,\n    bpc: number,\n    bpp: number,\n    out: Uint8Array,\n    oi: number,\n    prevRow?: Uint8Array\n  ): number {\n    let _oi = oi;\n    out[_oi++] = PngFilterType.paeth;\n    const l = row.length;\n    for (let x = 0; x < l; x += bpc) {\n      for (let c = 0, c2 = bpc - 1; c < bpc; ++c, --c2) {\n        const x2 = x + c2;\n        const p0 = x2 < bpp ? 0 : row[x2 - bpp];\n        const p1 = prevRow === undefined ? 0 : prevRow[x2];\n        const p2 = x2 < bpp || prevRow === undefined ? 0 : prevRow[x2 - bpp];\n        const p = row[x2];\n        const pi = PngEncoder.paethPredictor(p0, p1, p2);\n        out[_oi++] = (p - pi) & 0xff;\n      }\n    }\n    return _oi;\n  }\n\n  private static filterNone(\n    rowBytes: Uint8Array,\n    bpc: number,\n    out: Uint8Array,\n    oi: number\n  ): number {\n    let _oi = oi;\n    out[_oi++] = PngFilterType.none;\n    if (bpc === 1) {\n      const l = rowBytes.length;\n      for (let i = 0; i < l; ++i) {\n        out[_oi++] = rowBytes[i];\n      }\n    } else {\n      const l = rowBytes.length;\n      for (let i = 0; i < l; i += bpc) {\n        _oi = PngEncoder.write(bpc, rowBytes, i, out, _oi);\n      }\n    }\n    return _oi;\n  }\n\n  private static numChannels(image: MemoryImage): number {\n    return image.hasPalette ? 1 : image.numChannels;\n  }\n\n  private writeHeader(image: MemoryImage): void {\n    // PNG file signature\n    this._output!.writeBytes(\n      new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a])\n    );\n\n    // IHDR chunk\n    const chunk = new OutputBuffer({\n      bigEndian: true,\n    });\n\n    // width\n    chunk.writeUint32(image.width);\n    // height\n    chunk.writeUint32(image.height);\n    // bit depth\n    chunk.writeByte(image.bitsPerChannel);\n    chunk.writeByte(\n      image.hasPalette\n        ? PngColorType.indexed\n        : image.numChannels === 1\n        ? PngColorType.grayscale\n        : image.numChannels === 2\n        ? PngColorType.grayscaleAlpha\n        : image.numChannels === 3\n        ? PngColorType.rgb\n        : PngColorType.rgba\n    );\n    // compression method: 0:deflate\n    chunk.writeByte(0);\n    // filter method: 0:adaptive\n    chunk.writeByte(0);\n    // interlace method: 0:no interlace\n    chunk.writeByte(0);\n    PngEncoder.writeChunk(this._output!, 'IHDR', chunk.getBytes());\n  }\n\n  private writeICCPChunk(iccp: IccProfile): void {\n    const chunk = new OutputBuffer({\n      bigEndian: true,\n    });\n\n    // name\n    const nameCodeUnits = StringUtils.getCodePoints(iccp.name);\n    chunk.writeBytes(nameCodeUnits);\n    chunk.writeByte(0);\n\n    // compression (0 - deflate)\n    chunk.writeByte(0);\n\n    // profile data\n    chunk.writeBytes(iccp.compressed());\n\n    PngEncoder.writeChunk(this._output!, 'iCCP', chunk.getBytes());\n  }\n\n  private writeAnimationControlChunk(): void {\n    const chunk = new OutputBuffer({\n      bigEndian: true,\n    });\n    // Number of frames\n    chunk.writeUint32(this._frames);\n    // Loop count\n    chunk.writeUint32(this._repeat);\n    PngEncoder.writeChunk(this._output!, 'acTL', chunk.getBytes());\n  }\n\n  private writeFrameControlChunk(image: MemoryImage): void {\n    const chunk = new OutputBuffer({\n      bigEndian: true,\n    });\n\n    chunk.writeUint32(this._sequenceNumber);\n    chunk.writeUint32(image.width);\n    chunk.writeUint32(image.height);\n    // xOffset\n    chunk.writeUint32(0);\n    // yOffset\n    chunk.writeUint32(0);\n    chunk.writeUint16(image.frameDuration);\n    // delay denominator\n    chunk.writeUint16(1000);\n    // dispose method 0: APNG_DISPOSE_OP_NONE\n    chunk.writeByte(1);\n    // blend method 0: APNG_BLEND_OP_SOURCE\n    chunk.writeByte(0);\n    PngEncoder.writeChunk(this._output!, 'fcTL', chunk.getBytes());\n  }\n\n  private writePalette(palette: Palette): void {\n    if (\n      palette.format === Format.uint8 &&\n      palette.numChannels === 3 &&\n      palette.numColors === 256\n    ) {\n      PngEncoder.writeChunk(this._output!, 'PLTE', palette.toUint8Array());\n    } else {\n      const chunk = new OutputBuffer({\n        size: palette.numColors * 3,\n        bigEndian: true,\n      });\n      const nc = palette.numColors;\n      for (let i = 0; i < nc; ++i) {\n        chunk.writeByte(Math.trunc(palette.getRed(i)));\n        chunk.writeByte(Math.trunc(palette.getGreen(i)));\n        chunk.writeByte(Math.trunc(palette.getBlue(i)));\n      }\n      PngEncoder.writeChunk(this._output!, 'PLTE', chunk.getBytes());\n    }\n\n    if (palette.numChannels === 4) {\n      const chunk = new OutputBuffer({\n        size: palette.numColors,\n        bigEndian: true,\n      });\n      const nc = palette.numColors;\n      for (let i = 0; i < nc; ++i) {\n        const a = Math.trunc(palette.getAlpha(i));\n        chunk.writeByte(a);\n      }\n      PngEncoder.writeChunk(this._output!, 'tRNS', chunk.getBytes());\n    }\n  }\n\n  private writeTextChunk(keyword: string, text: string): void {\n    const chunk = new OutputBuffer({\n      bigEndian: true,\n    });\n    const keywordBytes = StringUtils.getCodePoints(keyword);\n    const textBytes = StringUtils.getCodePoints(text);\n    chunk.writeBytes(keywordBytes);\n    chunk.writeByte(0);\n    chunk.writeBytes(textBytes);\n    PngEncoder.writeChunk(this._output!, 'tEXt', chunk.getBytes());\n  }\n\n  private filter(image: MemoryImage, out: Uint8Array): void {\n    let oi = 0;\n    const filter = image.hasPalette ? PngFilterType.none : this._filter;\n    const buffer = image.buffer;\n    const rowStride = image.data!.rowStride;\n    const nc = PngEncoder.numChannels(image);\n    const bpp = (nc * image.bitsPerChannel + 7) >> 3;\n    const bpc = (image.bitsPerChannel + 7) >> 3;\n\n    let rowOffset = 0;\n    let prevRow: Uint8Array | undefined = undefined;\n    for (let y = 0; y < image.height; ++y) {\n      const rowBytes =\n        buffer !== undefined\n          ? new Uint8Array(buffer, rowOffset, rowStride)\n          : new Uint8Array();\n      rowOffset += rowStride;\n\n      switch (filter) {\n        case PngFilterType.sub:\n          oi = PngEncoder.filterSub(rowBytes, bpc, bpp, out, oi);\n          break;\n        case PngFilterType.up:\n          oi = PngEncoder.filterUp(rowBytes, bpc, out, oi, prevRow);\n          break;\n        case PngFilterType.average:\n          oi = PngEncoder.filterAverage(rowBytes, bpc, bpp, out, oi, prevRow);\n          break;\n        case PngFilterType.paeth:\n          oi = PngEncoder.filterPaeth(rowBytes, bpc, bpp, out, oi, prevRow);\n          break;\n        default:\n          oi = PngEncoder.filterNone(rowBytes, bpc, out, oi);\n          break;\n      }\n      prevRow = rowBytes;\n    }\n  }\n\n  public addFrame(image: MemoryImage): void {\n    let _image = image;\n    // PNG can't encode HDR formats, and can only encode formats with fewer\n    // than 8 bits if they have a palette. In the case of incompatible\n    // formats, convert them to uint8.\n    if (\n      (_image.isHdrFormat && _image.format !== Format.uint16) ||\n      (_image.bitsPerChannel < 8 &&\n        !_image.hasPalette &&\n        _image.numChannels > 1)\n    ) {\n      _image = _image.convert({\n        format: Format.uint8,\n      });\n    }\n\n    if (this._output === undefined) {\n      this._output = new OutputBuffer({\n        bigEndian: true,\n      });\n\n      this.writeHeader(_image);\n\n      if (_image.iccProfile !== undefined) {\n        this.writeICCPChunk(_image.iccProfile);\n      }\n\n      if (_image.hasPalette) {\n        if (this._globalQuantizer !== undefined) {\n          this.writePalette(this._globalQuantizer!.palette);\n        } else {\n          this.writePalette(_image.palette!);\n        }\n      }\n\n      if (this._isAnimated) {\n        this.writeAnimationControlChunk();\n      }\n    }\n\n    const nc = PngEncoder.numChannels(_image);\n\n    const channelBytes = _image.format === Format.uint16 ? 2 : 1;\n\n    // Include room for the filter bytes (1 byte per row).\n    const filteredImage = new Uint8Array(\n      _image.width * _image.height * nc * channelBytes + image.height\n    );\n\n    this.filter(_image, filteredImage);\n\n    const compressed = deflate(filteredImage, {\n      level: this._level,\n    });\n\n    if (_image.textData !== undefined) {\n      for (const [key, value] of _image.textData) {\n        this.writeTextChunk(key, value);\n      }\n    }\n\n    if (this._isAnimated) {\n      this.writeFrameControlChunk(_image);\n      this._sequenceNumber++;\n    }\n\n    if (this._sequenceNumber <= 1) {\n      PngEncoder.writeChunk(this._output, 'IDAT', compressed);\n    } else {\n      // fdAT chunk\n      const fdat = new OutputBuffer({\n        bigEndian: true,\n      });\n      fdat.writeUint32(this._sequenceNumber);\n      fdat.writeBytes(compressed);\n      PngEncoder.writeChunk(this._output, 'fdAT', fdat.getBytes());\n\n      this._sequenceNumber++;\n    }\n  }\n\n  public finish(): Uint8Array | undefined {\n    let bytes: Uint8Array | undefined = undefined;\n    if (this._output === undefined) {\n      return bytes;\n    }\n\n    PngEncoder.writeChunk(this._output, 'IEND', new Uint8Array());\n\n    this._sequenceNumber = 0;\n\n    bytes = this._output.getBytes();\n    this._output = undefined;\n    return bytes;\n  }\n\n  /**\n   * Encode **image** to the PNG format.\n   */\n  public encode(image: MemoryImage, singleFrame = false): Uint8Array {\n    if (!image.hasAnimation || singleFrame) {\n      this._isAnimated = false;\n      this.addFrame(image);\n    } else {\n      this._isAnimated = true;\n      this._frames = image.frames.length;\n      this._repeat = image.loopCount;\n\n      if (image.hasPalette) {\n        const q = new NeuralQuantizer(image);\n        this._globalQuantizer = q;\n        for (const frame of image.frames) {\n          if (frame !== image) {\n            q.addImage(frame);\n          }\n        }\n      }\n\n      for (const frame of image.frames) {\n        if (this._globalQuantizer !== undefined) {\n          const newImage = this._globalQuantizer.getIndexImage(frame);\n          this.addFrame(newImage);\n        } else {\n          this.addFrame(frame);\n        }\n      }\n    }\n    return this.finish()!;\n  }\n}\n", "/** @format */\n\nimport { OutputBuffer } from '../common/output-buffer';\nimport { LibError } from '../error/lib-error';\nimport { MemoryImage } from '../image/image';\nimport { Encoder } from './encoder';\nimport { PngEncoder } from './png-encoder';\n\nexport abstract class WinEncoder implements Encoder {\n  protected _type = 0;\n  public get type(): number {\n    return this._type;\n  }\n\n  private _supportsAnimation = true;\n  get supportsAnimation(): boolean {\n    return this._supportsAnimation;\n  }\n\n  protected colorPlanesOrXHotSpot(_index: number): number {\n    return 0;\n  }\n\n  protected bitsPerPixelOrYHotSpot(_index: number): number {\n    return 0;\n  }\n\n  public encode(image: MemoryImage, singleFrame = false): Uint8Array {\n    if (image.hasAnimation && !singleFrame) {\n      return this.encodeImages(image.frames);\n    } else {\n      return this.encodeImages([image]);\n    }\n  }\n\n  public encodeImages(images: MemoryImage[]): Uint8Array {\n    const count = images.length;\n\n    const out = new OutputBuffer();\n\n    // header\n    out.writeUint16(0);\n    // type: ICO => 1; CUR => 2\n    out.writeUint16(this._type);\n    out.writeUint16(count);\n\n    // file header with image directory byte size\n    let offset = 6 + count * 16;\n\n    const imageDataList: Uint8Array[] = [];\n\n    let i = 0;\n    for (const img of images) {\n      if (img.width > 256 || img.height > 256) {\n        throw new LibError('ICO and CUR support only sizes until 256');\n      }\n\n      // image width in pixels\n      out.writeByte(img.width);\n      // image height in pixels\n      out.writeByte(img.height);\n      // Color count, should be 0 if more than 256 colors\n      out.writeByte(0);\n      // Reserved\n      out.writeByte(0);\n      out.writeUint16(this.colorPlanesOrXHotSpot(i));\n      out.writeUint16(this.bitsPerPixelOrYHotSpot(i));\n\n      // Use png instead of bmp encoded data, it's supported since Windows Vista\n      const data: Uint8Array = new PngEncoder().encode(img);\n\n      // size of the image's data in bytes\n      out.writeUint32(data.length);\n      // offset of data from the beginning of the file\n      out.writeUint32(offset);\n\n      // add the size of bytes to get the new begin of the next image\n      offset += data.length;\n      i++;\n      imageDataList.push(data);\n    }\n\n    for (const imageData of imageDataList) {\n      out.writeBytes(imageData);\n    }\n\n    return out.getBytes();\n  }\n}\n", "/** @format */\n\nimport { WinEncoder } from './win-encoder';\n\nexport class IcoEncoder extends WinEncoder {\n  protected _type = 1;\n\n  protected colorPlanesOrXHotSpot(_index: number): number {\n    return 0;\n  }\n\n  protected bitsPerPixelOrYHotSpot(_index: number): number {\n    return 32;\n  }\n}\n", "/** @format */\n\nexport class JpegComponentData {\n  private _hSamples: number;\n  public get hSamples(): number {\n    return this._hSamples;\n  }\n\n  private _maxHSamples: number;\n  public get maxHSamples(): number {\n    return this._maxHSamples;\n  }\n\n  private _vSamples: number;\n  public get vSamples(): number {\n    return this._vSamples;\n  }\n\n  private _maxVSamples: number;\n  public get maxVSamples(): number {\n    return this._maxVSamples;\n  }\n\n  private _lines: Array<Uint8Array | undefined>;\n  public get lines(): Array<Uint8Array | undefined> {\n    return this._lines;\n  }\n\n  private _hScaleShift: number;\n  public get hScaleShift(): number {\n    return this._hScaleShift;\n  }\n\n  private _vScaleShift: number;\n  public get vScaleShift(): number {\n    return this._vScaleShift;\n  }\n\n  constructor(\n    hSamples: number,\n    maxHSamples: number,\n    vSamples: number,\n    maxVSamples: number,\n    lines: Array<Uint8Array | undefined>\n  ) {\n    this._hSamples = hSamples;\n    this._maxHSamples = maxHSamples;\n    this._vSamples = vSamples;\n    this._maxVSamples = maxVSamples;\n    this._lines = lines;\n    this._hScaleShift = this._hSamples === 1 && this._maxHSamples === 2 ? 1 : 0;\n    this._vScaleShift = this._vSamples === 1 && this._maxVSamples === 2 ? 1 : 0;\n  }\n}\n", "/** @format */\n\nexport class JpegAdobe {\n  private _version: number;\n  public get version(): number {\n    return this._version;\n  }\n\n  private _flags0: number;\n  public get flags0(): number {\n    return this._flags0;\n  }\n\n  private _flags1: number;\n  public get flags1(): number {\n    return this._flags1;\n  }\n\n  private _transformCode: number;\n  public get transformCode(): number {\n    return this._transformCode;\n  }\n\n  constructor(\n    version: number,\n    flags0: number,\n    flags1: number,\n    transformCode: number\n  ) {\n    this._version = version;\n    this._flags0 = flags0;\n    this._flags1 = flags1;\n    this._transformCode = transformCode;\n  }\n}\n", "/** @format */\n\nimport { HuffmanNode } from './huffman-node';\n\nexport class JpegComponent {\n  private readonly _quantizationTableList: Array<Int16Array | undefined>;\n\n  private readonly _quantizationIndex: number;\n\n  private readonly _hSamples: number;\n  public get hSamples(): number {\n    return this._hSamples;\n  }\n\n  private readonly _vSamples: number;\n  public get vSamples(): number {\n    return this._vSamples;\n  }\n\n  private _blocks: Array<Array<Int32Array>> = new Array<Array<Int32Array>>();\n  public get blocks(): Array<Array<Int32Array>> {\n    return this._blocks;\n  }\n\n  private _blocksPerLine = 0;\n  public get blocksPerLine(): number {\n    return this._blocksPerLine;\n  }\n\n  private _blocksPerColumn = 0;\n  public get blocksPerColumn(): number {\n    return this._blocksPerColumn;\n  }\n\n  private _huffmanTableDC: Array<HuffmanNode | undefined> = [];\n  public set huffmanTableDC(v: Array<HuffmanNode | undefined>) {\n    this._huffmanTableDC = v;\n  }\n  public get huffmanTableDC(): Array<HuffmanNode | undefined> {\n    return this._huffmanTableDC;\n  }\n\n  private _huffmanTableAC: Array<HuffmanNode | undefined> = [];\n  public set huffmanTableAC(v: Array<HuffmanNode | undefined>) {\n    this._huffmanTableAC = v;\n  }\n  public get huffmanTableAC(): Array<HuffmanNode | undefined> {\n    return this._huffmanTableAC;\n  }\n\n  private _pred = 0;\n  public set pred(v: number) {\n    this._pred = v;\n  }\n  public get pred(): number {\n    return this._pred;\n  }\n\n  public get quantizationTable(): Int16Array | undefined {\n    return this._quantizationTableList[this._quantizationIndex];\n  }\n\n  constructor(\n    hSamples: number,\n    vSamples: number,\n    quantizationTableList: Array<Int16Array | undefined>,\n    quantizationIndex: number\n  ) {\n    this._hSamples = hSamples;\n    this._vSamples = vSamples;\n    this._quantizationTableList = quantizationTableList;\n    this._quantizationIndex = quantizationIndex;\n  }\n\n  public setBlocks(\n    blocks: Array<Array<Int32Array>>,\n    blocksPerLine: number,\n    blocksPerColumn: number\n  ) {\n    this._blocks = blocks;\n    this._blocksPerLine = blocksPerLine;\n    this._blocksPerColumn = blocksPerColumn;\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../../common/array-utils';\nimport { JpegComponent } from './jpeg-component';\n\nexport class JpegFrame {\n  private readonly _components: Map<number, JpegComponent>;\n  public get components(): Map<number, JpegComponent> {\n    return this._components;\n  }\n\n  private readonly _componentsOrder: Array<number>;\n  public get componentsOrder(): Array<number> {\n    return this._componentsOrder;\n  }\n\n  private _extended: boolean;\n  public get extended(): boolean {\n    return this._extended;\n  }\n\n  private _progressive: boolean;\n  public get progressive(): boolean {\n    return this._progressive;\n  }\n\n  private _precision: number;\n  public get precision(): number {\n    return this._precision;\n  }\n\n  private _scanLines: number;\n  public get scanLines(): number {\n    return this._scanLines;\n  }\n\n  private _samplesPerLine: number;\n  public get samplesPerLine(): number {\n    return this._samplesPerLine;\n  }\n\n  private _maxHSamples = 0;\n  public get maxHSamples(): number {\n    return this._maxHSamples;\n  }\n\n  private _maxVSamples = 0;\n  public get maxVSamples(): number {\n    return this._maxVSamples;\n  }\n\n  private _mcusPerLine = 0;\n  public get mcusPerLine(): number {\n    return this._mcusPerLine;\n  }\n\n  private _mcusPerColumn = 0;\n  public get mcusPerColumn(): number {\n    return this._mcusPerColumn;\n  }\n\n  constructor(\n    components: Map<number, JpegComponent>,\n    componentsOrder: Array<number>,\n    extended: boolean,\n    progressive: boolean,\n    precision: number,\n    scanLines: number,\n    samplesPerLine: number\n  ) {\n    this._components = components;\n    this._componentsOrder = componentsOrder;\n    this._extended = extended;\n    this._progressive = progressive;\n    this._precision = precision;\n    this._scanLines = scanLines;\n    this._samplesPerLine = samplesPerLine;\n  }\n\n  public prepare(): void {\n    for (const [_, component] of this._components) {\n      this._maxHSamples = Math.max(this._maxHSamples, component.hSamples);\n      this._maxVSamples = Math.max(this._maxVSamples, component.vSamples);\n    }\n\n    this._mcusPerLine = Math.ceil(this._samplesPerLine / 8 / this._maxHSamples);\n    this._mcusPerColumn = Math.ceil(this._scanLines / 8 / this._maxVSamples);\n\n    for (const [_, component] of this._components) {\n      const blocksPerLine = Math.ceil(\n        (Math.ceil(this._samplesPerLine / 8) * component.hSamples) /\n          this._maxHSamples\n      );\n      const blocksPerColumn = Math.ceil(\n        (Math.ceil(this._scanLines / 8) * component.vSamples) / this.maxVSamples\n      );\n      const blocksPerLineForMcu = this._mcusPerLine * component.hSamples;\n      const blocksPerColumnForMcu = this._mcusPerColumn * component.vSamples;\n\n      const blocks = ArrayUtils.generate<Int32Array[]>(\n        blocksPerColumnForMcu,\n        (_) =>\n          ArrayUtils.generate<Int32Array>(\n            blocksPerLineForMcu,\n            (_) => new Int32Array(64)\n          )\n      );\n\n      component.setBlocks(blocks, blocksPerLine, blocksPerColumn);\n    }\n  }\n}\n", "/** @format */\n\nimport { HuffmanNode } from './huffman-node';\n\nexport class JpegHuffman {\n  private readonly _children: Array<HuffmanNode | undefined> = [];\n  public get children(): Array<HuffmanNode | undefined> {\n    return this._children;\n  }\n\n  private _index = 0;\n  public get index(): number {\n    return this._index;\n  }\n\n  public incrementIndex() {\n    this._index++;\n  }\n}\n", "/** @format */\n\nimport { Color } from '../../color/color';\nimport { DecodeInfo } from '../decode-info';\n\nexport class JpegInfo implements DecodeInfo {\n  private _width = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  private _height = 0;\n  public get height(): number {\n    return this._height;\n  }\n\n  private _numFrames = 1;\n  public get numFrames(): number {\n    return this._numFrames;\n  }\n\n  private _backgroundColor: Color | undefined = undefined;\n  public get backgroundColor(): Color | undefined {\n    return this._backgroundColor;\n  }\n\n  public setSize(width: number, height: number) {\n    this._width = width;\n    this._height = height;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\n\nexport class JpegJfif {\n  private _thumbWidth: number;\n  public get thumbWidth(): number {\n    return this._thumbWidth;\n  }\n\n  private _thumbHeight: number;\n  public get thumbHeight(): number {\n    return this._thumbHeight;\n  }\n\n  private _majorVersion: number;\n  public get majorVersion(): number {\n    return this._majorVersion;\n  }\n\n  private _minorVersion: number;\n  public get minorVersion(): number {\n    return this._minorVersion;\n  }\n\n  private _densityUnits: number;\n  public get densityUnits(): number {\n    return this._densityUnits;\n  }\n\n  private _xDensity: number;\n  public get xDensity(): number {\n    return this._xDensity;\n  }\n\n  private _yDensity: number;\n  public get yDensity(): number {\n    return this._yDensity;\n  }\n\n  private _thumbData: InputBuffer;\n  public get thumbData(): InputBuffer {\n    return this._thumbData;\n  }\n\n  constructor(\n    thumbWidth: number,\n    thumbHeight: number,\n    majorVersion: number,\n    minorVersion: number,\n    densityUnits: number,\n    xDensity: number,\n    yDensity: number,\n    thumbData: InputBuffer\n  ) {\n    this._thumbWidth = thumbWidth;\n    this._thumbHeight = thumbHeight;\n    this._majorVersion = majorVersion;\n    this._minorVersion = minorVersion;\n    this._densityUnits = densityUnits;\n    this._xDensity = xDensity;\n    this._yDensity = yDensity;\n    this._thumbData = thumbData;\n  }\n}\n", "/** @format */\n\nimport { MathUtils } from '../../common/math-utils';\nimport { LibError } from '../../error/lib-error';\nimport { ExifData } from '../../exif/exif-data';\nimport { MemoryImage } from '../../image/image';\nimport { JpegComponentData } from './jpeg-component-data';\nimport { JpegData } from './jpeg-data';\n\nexport abstract class JpegQuantize {\n  private static readonly _dctClipOffset = 256;\n  private static readonly _dctClipLength = 768;\n  private static readonly _dctClip = JpegQuantize.createDctClip();\n\n  private static createDctClip(): Uint8Array {\n    const result = new Uint8Array(JpegQuantize._dctClipLength);\n    let i = 0;\n    for (i = -256; i < 0; ++i) {\n      result[JpegQuantize._dctClipOffset + i] = 0;\n    }\n    for (i = 0; i < 256; ++i) {\n      result[JpegQuantize._dctClipOffset + i] = i;\n    }\n    for (i = 256; i < 512; ++i) {\n      result[JpegQuantize._dctClipOffset + i] = 255;\n    }\n    return result;\n  }\n\n  // Quantize the coefficients and apply IDCT.\n  //\n  // A port of poppler's IDCT method which in turn is taken from:\n  // Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n  // \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\n  // IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989, 988-991.\n  public static quantizeAndInverse(\n    quantizationTable: Int16Array,\n    coefBlock: Int32Array,\n    dataOut: Uint8Array,\n    dataIn: Int32Array\n  ): void {\n    const p = dataIn;\n\n    // IDCT constants (20.12 fixed point format)\n    // cos(pi/16)*4096\n    const cos1 = 4017;\n    // sin(pi/16)*4096\n    const sin1 = 799;\n    // cos(3*pi/16)*4096\n    const cos3 = 3406;\n    // sin(3*pi/16)*4096\n    const sin3 = 2276;\n    // cos(6*pi/16)*4096\n    const cos6 = 1567;\n    // sin(6*pi/16)*4096\n    const sin6 = 3784;\n    // sqrt(2)*4096\n    const sqrt2 = 5793;\n    // sqrt(2) / 2\n    const sqrt102 = 2896;\n\n    // de-quantize\n    for (let i = 0; i < 64; i++) {\n      p[i] = coefBlock[i] * quantizationTable[i];\n    }\n\n    // inverse DCT on rows\n    let row = 0;\n    for (let i = 0; i < 8; ++i, row += 8) {\n      // check for all-zero AC coefficients\n      if (\n        p[1 + row] === 0 &&\n        p[2 + row] === 0 &&\n        p[3 + row] === 0 &&\n        p[4 + row] === 0 &&\n        p[5 + row] === 0 &&\n        p[6 + row] === 0 &&\n        p[7 + row] === 0\n      ) {\n        const t = (sqrt2 * p[0 + row] + 512) >> 10;\n        p[row + 0] = t;\n        p[row + 1] = t;\n        p[row + 2] = t;\n        p[row + 3] = t;\n        p[row + 4] = t;\n        p[row + 5] = t;\n        p[row + 6] = t;\n        p[row + 7] = t;\n        continue;\n      }\n\n      // stage 4\n      let v0 = (sqrt2 * p[0 + row] + 128) >> 8;\n      let v1 = (sqrt2 * p[4 + row] + 128) >> 8;\n      let v2 = p[2 + row];\n      let v3 = p[6 + row];\n      let v4 = (sqrt102 * (p[1 + row] - p[7 + row]) + 128) >> 8;\n      let v7 = (sqrt102 * (p[1 + row] + p[7 + row]) + 128) >> 8;\n      let v5 = p[3 + row] << 4;\n      let v6 = p[5 + row] << 4;\n\n      // stage 3\n      let t = (v0 - v1 + 1) >> 1;\n      v0 = (v0 + v1 + 1) >> 1;\n      v1 = t;\n      t = (v2 * sin6 + v3 * cos6 + 128) >> 8;\n      v2 = (v2 * cos6 - v3 * sin6 + 128) >> 8;\n      v3 = t;\n      t = (v4 - v6 + 1) >> 1;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = t;\n      t = (v7 + v5 + 1) >> 1;\n      v5 = (v7 - v5 + 1) >> 1;\n      v7 = t;\n\n      // stage 2\n      t = (v0 - v3 + 1) >> 1;\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = t;\n      t = (v1 - v2 + 1) >> 1;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = t;\n      t = (v4 * sin3 + v7 * cos3 + 2048) >> 12;\n      v4 = (v4 * cos3 - v7 * sin3 + 2048) >> 12;\n      v7 = t;\n      t = (v5 * sin1 + v6 * cos1 + 2048) >> 12;\n      v5 = (v5 * cos1 - v6 * sin1 + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p[0 + row] = v0 + v7;\n      p[7 + row] = v0 - v7;\n      p[1 + row] = v1 + v6;\n      p[6 + row] = v1 - v6;\n      p[2 + row] = v2 + v5;\n      p[5 + row] = v2 - v5;\n      p[3 + row] = v3 + v4;\n      p[4 + row] = v3 - v4;\n    }\n\n    // inverse DCT on columns\n    for (let i = 0; i < 8; ++i) {\n      const col = i;\n\n      // check for all-zero AC coefficients\n      if (\n        p[1 * 8 + col] === 0 &&\n        p[2 * 8 + col] === 0 &&\n        p[3 * 8 + col] === 0 &&\n        p[4 * 8 + col] === 0 &&\n        p[5 * 8 + col] === 0 &&\n        p[6 * 8 + col] === 0 &&\n        p[7 * 8 + col] === 0\n      ) {\n        const t = (sqrt2 * dataIn[i] + 8192) >> 14;\n        p[0 * 8 + col] = t;\n        p[1 * 8 + col] = t;\n        p[2 * 8 + col] = t;\n        p[3 * 8 + col] = t;\n        p[4 * 8 + col] = t;\n        p[5 * 8 + col] = t;\n        p[6 * 8 + col] = t;\n        p[7 * 8 + col] = t;\n        continue;\n      }\n\n      // stage 4\n      let v0 = (sqrt2 * p[0 * 8 + col] + 2048) >> 12;\n      let v1 = (sqrt2 * p[4 * 8 + col] + 2048) >> 12;\n      let v2 = p[2 * 8 + col];\n      let v3 = p[6 * 8 + col];\n      let v4 = (sqrt102 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048) >> 12;\n      let v7 = (sqrt102 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048) >> 12;\n      let v5 = p[3 * 8 + col];\n      let v6 = p[5 * 8 + col];\n\n      // stage 3\n      let t = (v0 - v1 + 1) >> 1;\n      v0 = (v0 + v1 + 1) >> 1;\n      v1 = t;\n      t = (v2 * sin6 + v3 * cos6 + 2048) >> 12;\n      v2 = (v2 * cos6 - v3 * sin6 + 2048) >> 12;\n      v3 = t;\n      t = (v4 - v6 + 1) >> 1;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = t;\n      t = (v7 + v5 + 1) >> 1;\n      v5 = (v7 - v5 + 1) >> 1;\n      v7 = t;\n\n      // stage 2\n      t = (v0 - v3 + 1) >> 1;\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = t;\n      t = (v1 - v2 + 1) >> 1;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = t;\n      t = (v4 * sin3 + v7 * cos3 + 2048) >> 12;\n      v4 = (v4 * cos3 - v7 * sin3 + 2048) >> 12;\n      v7 = t;\n      t = (v5 * sin1 + v6 * cos1 + 2048) >> 12;\n      v5 = (v5 * cos1 - v6 * sin1 + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p[0 * 8 + col] = v0 + v7;\n      p[7 * 8 + col] = v0 - v7;\n      p[1 * 8 + col] = v1 + v6;\n      p[6 * 8 + col] = v1 - v6;\n      p[2 * 8 + col] = v2 + v5;\n      p[5 * 8 + col] = v2 - v5;\n      p[3 * 8 + col] = v3 + v4;\n      p[4 * 8 + col] = v3 - v4;\n    }\n\n    // convert to 8-bit integers\n    for (let i = 0; i < 64; ++i) {\n      dataOut[i] =\n        JpegQuantize._dctClip[\n          JpegQuantize._dctClipOffset + 128 + ((p[i] + 8) >> 4)\n        ];\n    }\n  }\n\n  public static getImageFromJpeg(jpeg: JpegData): MemoryImage {\n    const orientation = jpeg.exifData.imageIfd.hasOrientation\n      ? jpeg.exifData.imageIfd.orientation!\n      : 0;\n\n    const w = jpeg.width!;\n    const h = jpeg.height!;\n    const flipWidthHeight = orientation >= 5 && orientation <= 8;\n    const width = flipWidthHeight ? h : w;\n    const height = flipWidthHeight ? w : h;\n\n    const image = new MemoryImage({\n      width: width,\n      height: height,\n    });\n\n    // Copy exif data, except for ORIENTATION which we're baking.\n    image.exifData = ExifData.from(jpeg.exifData);\n    image.exifData.imageIfd.orientation = undefined;\n\n    let component1: JpegComponentData | undefined = undefined;\n    let component2: JpegComponentData | undefined = undefined;\n    let component3: JpegComponentData | undefined = undefined;\n    let component4: JpegComponentData | undefined = undefined;\n    let component1Line: Uint8Array | undefined = undefined;\n    let component2Line: Uint8Array | undefined = undefined;\n    let component3Line: Uint8Array | undefined = undefined;\n    let component4Line: Uint8Array | undefined = undefined;\n    let colorTransform = false;\n\n    const h1 = h - 1;\n    const w1 = w - 1;\n\n    switch (jpeg.components.length) {\n      case 1:\n        {\n          component1 = jpeg.components[0];\n          const lines = component1.lines;\n          const hShift1 = component1.hScaleShift;\n          const vShift1 = component1.vScaleShift;\n          for (let y = 0; y < h; y++) {\n            const y1 = y >> vShift1;\n            component1Line = lines[y1];\n            for (let x = 0; x < w; x++) {\n              const x1 = x >> hShift1;\n              const cy = component1Line![x1];\n\n              if (orientation === 2) {\n                image.setPixelRgb(w1 - x, y, cy, cy, cy);\n              } else if (orientation === 3) {\n                image.setPixelRgb(w1 - x, h1 - y, cy, cy, cy);\n              } else if (orientation === 4) {\n                image.setPixelRgb(x, h1 - y, cy, cy, cy);\n              } else if (orientation === 5) {\n                image.setPixelRgb(y, x, cy, cy, cy);\n              } else if (orientation === 6) {\n                image.setPixelRgb(h1 - y, x, cy, cy, cy);\n              } else if (orientation === 7) {\n                image.setPixelRgb(h1 - y, w1 - x, cy, cy, cy);\n              } else if (orientation === 8) {\n                image.setPixelRgb(y, w1 - x, cy, cy, cy);\n              } else {\n                image.setPixelRgb(x, y, cy, cy, cy);\n              }\n            }\n          }\n        }\n        break;\n      case 2:\n        // {\n        //   // PDF might compress two component data in custom color-space\n        //   component1 = jpeg.components[0];\n        //   component2 = jpeg.components[1];\n        //   const hShift1 = component1.hScaleShift;\n        //   const vShift1 = component1.vScaleShift;\n        //   const hShift2 = component2.hScaleShift;\n        //   const vShift2 = component2.vScaleShift;\n\n        //   for (let y = 0; y < h; ++y) {\n        //     const y1 = y >> vShift1;\n        //     const y2 = y >> vShift2;\n        //     component1Line = component1.lines[y1];\n        //     component2Line = component2.lines[y2];\n\n        //     for (let x = 0; x < w; ++x) {\n        //       const x1 = x >> hShift1;\n        //       const x2 = x >> hShift2;\n\n        //       let cy = component1Line![x1];\n        //       // data[offset++] = cy;\n\n        //       cy = component2Line![x2];\n        //       // data[offset++] = cy;\n        //     }\n        //   }\n        // }\n        break;\n      case 3:\n        {\n          // The default transform for three components is true\n          colorTransform = true;\n\n          component1 = jpeg.components[0];\n          component2 = jpeg.components[1];\n          component3 = jpeg.components[2];\n\n          const lines1 = component1.lines;\n          const lines2 = component2.lines;\n          const lines3 = component3.lines;\n\n          const hShift1 = component1.hScaleShift;\n          const vShift1 = component1.vScaleShift;\n          const hShift2 = component2.hScaleShift;\n          const vShift2 = component2.vScaleShift;\n          const hShift3 = component3.hScaleShift;\n          const vShift3 = component3.vScaleShift;\n\n          for (let y = 0; y < h; y++) {\n            const y1 = y >> vShift1;\n            const y2 = y >> vShift2;\n            const y3 = y >> vShift3;\n\n            component1Line = lines1[y1];\n            component2Line = lines2[y2];\n            component3Line = lines3[y3];\n\n            for (let x = 0; x < w; x++) {\n              const x1 = x >> hShift1;\n              const x2 = x >> hShift2;\n              const x3 = x >> hShift3;\n\n              const cy = component1Line![x1] << 8;\n              const cb = component2Line![x2] - 128;\n              const cr = component3Line![x3] - 128;\n\n              let r = cy + 359 * cr + 128;\n              let g = cy - 88 * cb - 183 * cr + 128;\n              let b = cy + 454 * cb + 128;\n              r = MathUtils.clampInt255(r >> 8);\n              g = MathUtils.clampInt255(g >> 8);\n              b = MathUtils.clampInt255(b >> 8);\n\n              if (orientation === 2) {\n                image.setPixelRgb(w1 - x, y, r, g, b);\n              } else if (orientation === 3) {\n                image.setPixelRgb(w1 - x, h1 - y, r, g, b);\n              } else if (orientation === 4) {\n                image.setPixelRgb(x, h1 - y, r, g, b);\n              } else if (orientation === 5) {\n                image.setPixelRgb(y, x, r, g, b);\n              } else if (orientation === 6) {\n                image.setPixelRgb(h1 - y, x, r, g, b);\n              } else if (orientation === 7) {\n                image.setPixelRgb(h1 - y, w1 - x, r, g, b);\n              } else if (orientation === 8) {\n                image.setPixelRgb(y, w1 - x, r, g, b);\n              } else {\n                image.setPixelRgb(x, y, r, g, b);\n              }\n            }\n          }\n        }\n        break;\n      case 4:\n        {\n          if (jpeg.adobe === undefined) {\n            throw new LibError('Unsupported color mode (4 components)');\n          }\n          // The default transform for four components is false\n          colorTransform = false;\n          // The adobe transform marker overrides any previous setting\n          if (jpeg.adobe!.transformCode !== 0) {\n            colorTransform = true;\n          }\n\n          component1 = jpeg.components[0];\n          component2 = jpeg.components[1];\n          component3 = jpeg.components[2];\n          component4 = jpeg.components[3];\n\n          const lines1 = component1.lines;\n          const lines2 = component2.lines;\n          const lines3 = component3.lines;\n          const lines4 = component4.lines;\n\n          const hShift1 = component1.hScaleShift;\n          const vShift1 = component1.vScaleShift;\n          const hShift2 = component2.hScaleShift;\n          const vShift2 = component2.vScaleShift;\n          const hShift3 = component3.hScaleShift;\n          const vShift3 = component3.vScaleShift;\n          const hShift4 = component4.hScaleShift;\n          const vShift4 = component4.vScaleShift;\n\n          for (let y = 0; y < jpeg.height!; y++) {\n            const y1 = y >> vShift1;\n            const y2 = y >> vShift2;\n            const y3 = y >> vShift3;\n            const y4 = y >> vShift4;\n            component1Line = lines1[y1];\n            component2Line = lines2[y2];\n            component3Line = lines3[y3];\n            component4Line = lines4[y4];\n            for (let x = 0; x < jpeg.width!; x++) {\n              const x1 = x >> hShift1;\n              const x2 = x >> hShift2;\n              const x3 = x >> hShift3;\n              const x4 = x >> hShift4;\n              let cc = 0;\n              let cm = 0;\n              let cy = 0;\n              let ck = 0;\n              if (!colorTransform) {\n                cc = component1Line![x1];\n                cm = component2Line![x2];\n                cy = component3Line![x3];\n                ck = component4Line![x4];\n              } else {\n                cy = component1Line![x1];\n                const cb = component2Line![x2];\n                const cr = component3Line![x3];\n                ck = component4Line![x4];\n\n                cc = 255 - MathUtils.clampInt255(cy + 1.402 * (cr - 128));\n                cm =\n                  255 -\n                  MathUtils.clampInt255(\n                    cy - 0.3441363 * (cb - 128) - 0.71413636 * (cr - 128)\n                  );\n                cy = 255 - MathUtils.clampInt255(cy + 1.772 * (cb - 128));\n              }\n              const r = (cc * ck) >> 8;\n              const g = (cm * ck) >> 8;\n              const b = (cy * ck) >> 8;\n\n              if (orientation === 2) {\n                image.setPixelRgb(w1 - x, y, r, g, b);\n              } else if (orientation === 3) {\n                image.setPixelRgb(w1 - x, h1 - y, r, g, b);\n              } else if (orientation === 4) {\n                image.setPixelRgb(x, h1 - y, r, g, b);\n              } else if (orientation === 5) {\n                image.setPixelRgb(y, x, r, g, b);\n              } else if (orientation === 6) {\n                image.setPixelRgb(h1 - y, x, r, g, b);\n              } else if (orientation === 7) {\n                image.setPixelRgb(h1 - y, w1 - x, r, g, b);\n              } else if (orientation === 8) {\n                image.setPixelRgb(y, w1 - x, r, g, b);\n              } else {\n                image.setPixelRgb(x, y, r, g, b);\n              }\n            }\n          }\n        }\n        break;\n      default:\n        throw new LibError('Unsupported color mode');\n    }\n\n    return image;\n  }\n}\n", "/** @format */\n\nexport abstract class HuffmanNode {}\n", "/** @format */\n\nimport { HuffmanNode } from './huffman-node';\n\nexport class HuffmanParent extends HuffmanNode {\n  private readonly _children: Array<HuffmanNode | undefined>;\n  public get children(): Array<HuffmanNode | undefined> {\n    return this._children;\n  }\n\n  constructor(children: Array<HuffmanNode | undefined>) {\n    super();\n    this._children = children;\n  }\n}\n", "/** @format */\n\nimport { HuffmanNode } from './huffman-node';\n\nexport class HuffmanValue extends HuffmanNode {\n  private readonly _value: number;\n  public get value(): number {\n    return this._value;\n  }\n\n  constructor(value: number) {\n    super();\n    this._value = value;\n  }\n}\n", "/** @format */\n\nexport enum JpegMarker {\n  sof0 = 0xc0,\n  sof1 = 0xc1,\n  sof2 = 0xc2,\n  sof3 = 0xc3,\n  sof5 = 0xc5,\n  sof6 = 0xc6,\n  sof7 = 0xc7,\n\n  jpg = 0xc8,\n  sof9 = 0xc9,\n  sof10 = 0xca,\n  sof11 = 0xcb,\n\n  sof13 = 0xcd,\n  sof14 = 0xce,\n  sof15 = 0xcf,\n\n  dht = 0xc4,\n\n  dac = 0xcc,\n\n  rst0 = 0xd0,\n  rst1 = 0xd1,\n  rst2 = 0xd2,\n  rst3 = 0xd3,\n  rst4 = 0xd4,\n  rst5 = 0xd5,\n  rst6 = 0xd6,\n  rst7 = 0xd7,\n\n  soi = 0xd8,\n  eoi = 0xd9,\n  sos = 0xda,\n  dqt = 0xdb,\n  dnl = 0xdc,\n  dri = 0xdd,\n  dhp = 0xde,\n  exp = 0xdf,\n\n  // JFIF, JFXX, CIFF, AVI1, Ocad\n  app0 = 0xe0,\n  // EXIF, ExtendedXMP, XMP, QVCI, FLIR\n  app1 = 0xe1,\n  // ICC_Profile, FPXR, MPF, PreviewImage\n  app2 = 0xe2,\n  // Meta, Stim, PreviewImage\n  app3 = 0xe3,\n  // Scalado, FPXR, PreviewImage\n  app4 = 0xe4,\n  // RMETA, PreviewImage\n  app5 = 0xe5,\n  // EPPIM, NITF, HP_TDHD, GoPro\n  app6 = 0xe6,\n  // Pentax, Qualcomm\n  app7 = 0xe7,\n  // SPIFF\n  app8 = 0xe8,\n  // MediaJukebox\n  app9 = 0xe9,\n  // Comment\n  app10 = 0xea,\n  // Jpeg-HDR\n  app11 = 0xeb,\n  // PictureInfo, Ducky\n  app12 = 0xec,\n  // Photoshop, Adobe_CM\n  app13 = 0xed,\n  // ADOBE\n  app14 = 0xee,\n  // GraphicConverter\n  app15 = 0xef,\n\n  jpg0 = 0xf0,\n  jpg13 = 0xfd,\n  com = 0xfe,\n\n  tem = 0x01,\n\n  error = 0x100,\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { LibError } from '../../error/lib-error';\nimport { HuffmanNode } from './huffman-node';\nimport { HuffmanParent } from './huffman-parent';\nimport { HuffmanValue } from './huffman-value';\nimport { JpegComponent } from './jpeg-component';\nimport { JpegData } from './jpeg-data';\nimport { JpegFrame } from './jpeg-frame';\nimport { JpegMarker } from './jpeg-marker';\n\nexport type DecodeFunction = (\n  component: JpegComponent,\n  block: Int32Array\n) => void;\n\nexport class JpegScan {\n  private _input: InputBuffer;\n  public get input(): InputBuffer {\n    return this._input;\n  }\n\n  private _frame: JpegFrame;\n  public get frame(): JpegFrame {\n    return this._frame;\n  }\n\n  private _precision: number;\n  public get precision(): number {\n    return this._precision;\n  }\n\n  private _samplesPerLine: number;\n  public get samplesPerLine(): number {\n    return this._samplesPerLine;\n  }\n\n  private _scanLines: number;\n  public get scanLines(): number {\n    return this._scanLines;\n  }\n\n  private _mcusPerLine: number;\n  public get mcusPerLine(): number {\n    return this._mcusPerLine;\n  }\n\n  private _progressive: boolean;\n  public get progressive(): boolean {\n    return this._progressive;\n  }\n\n  private _maxH: number;\n  public get maxH(): number {\n    return this._maxH;\n  }\n\n  private _maxV: number;\n  public get maxV(): number {\n    return this._maxV;\n  }\n\n  private _components: Array<JpegComponent>;\n  public get components(): Array<JpegComponent> {\n    return this._components;\n  }\n\n  private _resetInterval?: number;\n  public get resetInterval(): number | undefined {\n    return this._resetInterval;\n  }\n\n  private _spectralStart: number;\n  public get spectralStart(): number {\n    return this._spectralStart;\n  }\n\n  private _spectralEnd: number;\n  public get spectralEnd(): number {\n    return this._spectralEnd;\n  }\n\n  private _successivePrev: number;\n  public get successivePrev(): number {\n    return this._successivePrev;\n  }\n\n  private _successive: number;\n  public get successive(): number {\n    return this._successive;\n  }\n\n  private _bitsData = 0;\n  public get bitsData(): number {\n    return this._bitsData;\n  }\n\n  private _bitsCount = 0;\n  public get bitsCount(): number {\n    return this._bitsCount;\n  }\n\n  private _eobrun = 0;\n  public get eobrun(): number {\n    return this._eobrun;\n  }\n\n  private _successiveACState = 0;\n  public get successiveACState(): number {\n    return this._successiveACState;\n  }\n\n  private _successiveACNextValue = 0;\n  public get successiveACNextValue(): number {\n    return this._successiveACNextValue;\n  }\n\n  constructor(\n    input: InputBuffer,\n    frame: JpegFrame,\n    components: Array<JpegComponent>,\n    spectralStart: number,\n    spectralEnd: number,\n    successivePrev: number,\n    successive: number,\n    resetInterval?: number\n  ) {\n    this._input = input;\n    this._frame = frame;\n    this._precision = frame.precision;\n    this._samplesPerLine = frame.samplesPerLine;\n    this._scanLines = frame.scanLines;\n    this._mcusPerLine = frame.mcusPerLine;\n    this._progressive = frame.progressive;\n    this._maxH = frame.maxHSamples;\n    this._maxV = frame.maxVSamples;\n    this._components = components;\n    this._resetInterval = resetInterval;\n    this._spectralStart = spectralStart;\n    this._spectralEnd = spectralEnd;\n    this._successivePrev = successivePrev;\n    this._successive = successive;\n  }\n\n  private readBit(): number | undefined {\n    if (this.bitsCount > 0) {\n      this._bitsCount--;\n      return (this._bitsData >> this._bitsCount) & 1;\n    }\n\n    if (this._input.isEOS) {\n      return undefined;\n    }\n\n    this._bitsData = this._input.readByte();\n    if (this._bitsData === 0xff) {\n      const nextByte = this.input.readByte();\n      if (nextByte !== 0) {\n        const marker = ((this._bitsData << 8) | nextByte).toString(16);\n        throw new LibError(`unexpected marker: ${marker}`);\n      }\n    }\n\n    this._bitsCount = 7;\n    return (this._bitsData >> 7) & 1;\n  }\n\n  private decodeHuffman(\n    tree: Array<HuffmanNode | undefined>\n  ): number | undefined {\n    let node: HuffmanNode | undefined = new HuffmanParent(tree);\n    let bit: number | undefined = undefined;\n    while ((bit = this.readBit()) !== undefined) {\n      if (node instanceof HuffmanParent) {\n        node = node.children[bit];\n      }\n      if (node instanceof HuffmanValue) {\n        return node.value;\n      }\n    }\n    return undefined;\n  }\n\n  private receive(length: number): number | undefined {\n    let n = 0;\n    let len = length;\n    while (len > 0) {\n      const bit = this.readBit();\n      if (bit === undefined) {\n        return undefined;\n      }\n      n = (n << 1) | bit;\n      len--;\n    }\n    return n;\n  }\n\n  private receiveAndExtend(length: number | undefined): number {\n    if (length === 1) {\n      return this.readBit() === 1 ? 1 : -1;\n    }\n    const n = this.receive(length!)!;\n    if (n >= 1 << ((length ?? 0) - 1)) {\n      return n;\n    }\n    return n + (-1 << (length ?? 0)) + 1;\n  }\n\n  private decodeBaseline(component: JpegComponent, zz: Int32Array): void {\n    const t = this.decodeHuffman(component.huffmanTableDC);\n    const diff = t === 0 ? 0 : this.receiveAndExtend(t);\n    component.pred += diff;\n    zz[0] = component.pred;\n\n    let k = 1;\n    while (k < 64) {\n      const rs = this.decodeHuffman(component.huffmanTableAC)!;\n      let s = rs & 15;\n      const r = rs >> 4;\n      if (s === 0) {\n        if (r < 15) {\n          break;\n        }\n        k += 16;\n        continue;\n      }\n\n      k += r;\n\n      s = this.receiveAndExtend(s);\n\n      const z = JpegData.dctZigZag[k];\n      zz[z] = s;\n      k++;\n    }\n  }\n\n  private decodeDCFirst(component: JpegComponent, zz: Int32Array): void {\n    const t = this.decodeHuffman(component.huffmanTableDC);\n    const diff = t === 0 ? 0 : this.receiveAndExtend(t) << this._successive;\n    component.pred += diff;\n    zz[0] = component.pred;\n  }\n\n  private decodeDCSuccessive(_: JpegComponent, zz: Int32Array): void {\n    zz[0] |= this.readBit()! << this._successive;\n  }\n\n  private decodeACFirst(component: JpegComponent, zz: Int32Array): void {\n    if (this._eobrun > 0) {\n      this._eobrun--;\n      return;\n    }\n    let k = this._spectralStart;\n    const e = this._spectralEnd;\n    while (k <= e) {\n      const rs = this.decodeHuffman(component.huffmanTableAC)!;\n      const s = rs & 15;\n      const r = rs >> 4;\n      if (s === 0) {\n        if (r < 15) {\n          this._eobrun = this.receive(r)! + (1 << r) - 1;\n          break;\n        }\n        k += 16;\n        continue;\n      }\n      k += r;\n      const z = JpegData.dctZigZag[k];\n      zz[z] = this.receiveAndExtend(s) * (1 << this._successive);\n      k++;\n    }\n  }\n\n  private decodeACSuccessive(component: JpegComponent, zz: Int32Array): void {\n    let k = this._spectralStart;\n    const e = this._spectralEnd;\n    let s = 0;\n    let r = 0;\n    while (k <= e) {\n      const z = JpegData.dctZigZag[k];\n      switch (this._successiveACState) {\n        case 0: {\n          // Initial state\n          const rs = this.decodeHuffman(component.huffmanTableAC);\n          if (rs === undefined) {\n            throw new LibError('Invalid progressive encoding');\n          }\n          s = rs & 15;\n          r = rs >> 4;\n          if (s === 0) {\n            if (r < 15) {\n              this._eobrun = this.receive(r)! + (1 << r);\n              this._successiveACState = 4;\n            } else {\n              r = 16;\n              this._successiveACState = 1;\n            }\n          } else {\n            if (s !== 1) {\n              throw new LibError('invalid ACn encoding');\n            }\n            this._successiveACNextValue = this.receiveAndExtend(s);\n            this._successiveACState = r !== 0 ? 2 : 3;\n          }\n          continue;\n        }\n        case 1:\n        case 2: {\n          // Skipping r zero items\n          if (zz[z] !== 0) {\n            zz[z] += this.readBit()! << this._successive;\n          } else {\n            r--;\n            if (r === 0) {\n              this._successiveACState = this._successiveACState === 2 ? 3 : 0;\n            }\n          }\n          break;\n        }\n        case 3: {\n          // Set value for a zero item\n          if (zz[z] !== 0) {\n            zz[z] += this.readBit()! << this._successive;\n          } else {\n            zz[z] = this._successiveACNextValue << this._successive;\n            this._successiveACState = 0;\n          }\n          break;\n        }\n        case 4: {\n          // Eob\n          if (zz[z] !== 0) {\n            zz[z] += this.readBit()! << this._successive;\n          }\n          break;\n        }\n      }\n      k++;\n    }\n    if (this._successiveACState === 4) {\n      this._eobrun--;\n      if (this._eobrun === 0) {\n        this._successiveACState = 0;\n      }\n    }\n  }\n\n  private decodeMcu(\n    component: JpegComponent,\n    decodeFn: DecodeFunction,\n    mcu: number,\n    row: number,\n    col: number\n  ): void {\n    const mcuRow = Math.floor(mcu / this._mcusPerLine);\n    const mcuCol = mcu % this._mcusPerLine;\n    const blockRow = mcuRow * component.vSamples + row;\n    const blockCol = mcuCol * component.hSamples + col;\n    if (blockRow >= component.blocks.length) {\n      return;\n    }\n    const numCols = component.blocks[blockRow].length;\n    if (blockCol >= numCols) {\n      return;\n    }\n    decodeFn.call(this, component, component.blocks[blockRow][blockCol]);\n  }\n\n  private decodeBlock(\n    component: JpegComponent,\n    decodeFn: DecodeFunction,\n    mcu: number\n  ): void {\n    const blockRow = Math.floor(mcu / component.blocksPerLine);\n    const blockCol = mcu % component.blocksPerLine;\n    decodeFn.call(this, component, component.blocks[blockRow][blockCol]);\n  }\n\n  public decode(): void {\n    const componentsLength = this._components.length;\n    let component: JpegComponent | undefined = undefined;\n    let decodeFn: DecodeFunction | undefined = undefined;\n    if (this._progressive) {\n      if (this._spectralStart === 0) {\n        decodeFn =\n          this._successivePrev === 0\n            ? this.decodeDCFirst\n            : this.decodeDCSuccessive;\n      } else {\n        decodeFn =\n          this._successivePrev === 0\n            ? this.decodeACFirst\n            : this.decodeACSuccessive;\n      }\n    } else {\n      decodeFn = this.decodeBaseline;\n    }\n\n    let mcu = 0;\n\n    let mcuExpected: number | undefined = undefined;\n    if (componentsLength === 1) {\n      mcuExpected =\n        this._components[0].blocksPerLine * this._components[0].blocksPerColumn;\n    } else {\n      mcuExpected = this._mcusPerLine * this._frame.mcusPerColumn;\n    }\n\n    if (this._resetInterval === undefined || this._resetInterval === 0) {\n      this._resetInterval = mcuExpected;\n    }\n\n    let h: number | undefined = undefined;\n    let v: number | undefined = undefined;\n    while (mcu < mcuExpected) {\n      // Reset interval stuff\n      for (let i = 0; i < componentsLength; i++) {\n        this._components[i].pred = 0;\n      }\n      this._eobrun = 0;\n\n      if (componentsLength === 1) {\n        component = this._components[0];\n        for (let n = 0; n < this._resetInterval; n++) {\n          this.decodeBlock(component, decodeFn, mcu);\n          mcu++;\n        }\n      } else {\n        for (let n = 0; n < this._resetInterval; n++) {\n          for (let i = 0; i < componentsLength; i++) {\n            component = this.components[i];\n            h = component.hSamples;\n            v = component.vSamples;\n            for (let j = 0; j < v; j++) {\n              for (let k = 0; k < h; k++) {\n                this.decodeMcu(component, decodeFn, mcu, j, k);\n              }\n            }\n          }\n          mcu++;\n        }\n      }\n\n      // Find marker\n      this._bitsCount = 0;\n      const m1 = this._input.getByte(0);\n      const m2 = this._input.getByte(1);\n      if (m1 === 0xff) {\n        if (m2 >= JpegMarker.rst0 && m2 <= JpegMarker.rst7) {\n          this._input.skip(2);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { LibError } from '../../error/lib-error';\nimport { JpegComponentData } from './jpeg-component-data';\nimport { JpegAdobe } from './jpeg-adobe';\nimport { JpegComponent } from './jpeg-component';\nimport { JpegFrame } from './jpeg-frame';\nimport { JpegHuffman } from './jpeg-huffman';\nimport { JpegInfo } from './jpeg-info';\nimport { JpegJfif } from './jpeg-jfif';\nimport { JpegQuantize } from './jpeg-quantize';\nimport { JpegScan } from './jpeg-scan';\nimport { ExifData } from '../../exif/exif-data';\nimport { ArrayUtils } from '../../common/array-utils';\nimport { JpegMarker } from './jpeg-marker';\nimport { MemoryImage } from '../../image/image';\nimport { HuffmanNode } from './huffman-node';\nimport { HuffmanValue } from './huffman-value';\nimport { HuffmanParent } from './huffman-parent';\n\nexport class JpegData {\n  public static readonly dctZigZag = [\n    0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36,\n    29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61,\n    54, 47, 55, 62, 63,\n    // extra entries for safety in decoder\n    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,\n  ];\n\n  // The basic DCT block is 8x8 samples\n  public static readonly dctSize = 8;\n  // DCTSIZE squared; # of elements in a block\n  public static readonly dctSize2 = 64;\n  // Quantization tables are 0..3\n  public static readonly numQuantizationTables = 4;\n  // Huffman tables are numbered 0..3\n  public static readonly numHuffmanTables = 4;\n  // Arith-coding tables are numbered 0..15\n  public static readonly numArithTables = 16;\n  // JPEG limit on # of components in one scan\n  public static readonly maxCompsInScan = 4;\n  // JPEG limit on sampling factors\n  public static readonly maxSamplingFactor = 4;\n\n  private _input!: InputBuffer;\n  public get input(): InputBuffer {\n    return this._input;\n  }\n\n  private _jfif!: JpegJfif;\n  public get jfif(): JpegJfif {\n    return this._jfif;\n  }\n\n  private _adobe!: JpegAdobe;\n  public get adobe(): JpegAdobe {\n    return this._adobe;\n  }\n\n  private _frame?: JpegFrame;\n  public get frame(): JpegFrame | undefined {\n    return this._frame;\n  }\n\n  private _resetInterval!: number;\n  public get resetInterval(): number {\n    return this._resetInterval;\n  }\n\n  private _comment?: string;\n  public get comment(): string | undefined {\n    return this._comment;\n  }\n\n  private readonly _exifData: ExifData = new ExifData();\n  public get exifData(): ExifData {\n    return this._exifData;\n  }\n\n  private readonly _quantizationTables = ArrayUtils.fill<\n    Int16Array | undefined\n  >(JpegData.numQuantizationTables, undefined);\n  public get quantizationTables(): Array<Int16Array | undefined> {\n    return this._quantizationTables;\n  }\n\n  private readonly _frames = new Array<JpegFrame | undefined>();\n  public get frames(): Array<JpegFrame | undefined> {\n    return this._frames;\n  }\n\n  private readonly _huffmanTablesAC: Array<\n    Array<HuffmanNode | undefined> | undefined\n  > = [];\n  public get huffmanTablesAC(): Array<\n    Array<HuffmanNode | undefined> | undefined\n  > {\n    return this._huffmanTablesAC;\n  }\n\n  private readonly _huffmanTablesDC: Array<\n    Array<HuffmanNode | undefined> | undefined\n  > = [];\n  public get huffmanTablesDC(): Array<\n    Array<HuffmanNode | undefined> | undefined\n  > {\n    return this._huffmanTablesDC;\n  }\n\n  private readonly _components = new Array<JpegComponentData>();\n  public get components(): Array<JpegComponentData> {\n    return this._components;\n  }\n\n  public get width(): number {\n    return this._frame!.samplesPerLine;\n  }\n\n  public get height(): number {\n    return this._frame!.scanLines;\n  }\n\n  private readMarkers(): void {\n    let marker = this.nextMarker();\n    if (marker !== JpegMarker.soi) {\n      // SOI (Start of Image)\n      throw new LibError('Start Of Image marker not found.');\n    }\n\n    marker = this.nextMarker();\n    while (marker !== JpegMarker.eoi && !this._input.isEOS) {\n      const block = this.readBlock();\n      switch (marker) {\n        case JpegMarker.app0:\n        case JpegMarker.app1:\n        case JpegMarker.app2:\n        case JpegMarker.app3:\n        case JpegMarker.app4:\n        case JpegMarker.app5:\n        case JpegMarker.app6:\n        case JpegMarker.app7:\n        case JpegMarker.app8:\n        case JpegMarker.app9:\n        case JpegMarker.app10:\n        case JpegMarker.app11:\n        case JpegMarker.app12:\n        case JpegMarker.app13:\n        case JpegMarker.app14:\n        case JpegMarker.app15:\n        case JpegMarker.com:\n          this.readAppData(marker, block);\n          break;\n\n        // DQT (Define Quantization Tables)\n        case JpegMarker.dqt:\n          this.readDQT(block);\n          break;\n\n        // SOF0 (Start of Frame, Baseline DCT)\n        case JpegMarker.sof0:\n        // SOF1 (Start of Frame, Extended DCT)\n        // falls through\n        case JpegMarker.sof1:\n        // SOF2 (Start of Frame, Progressive DCT)\n        // falls through\n        case JpegMarker.sof2:\n          this.readFrame(marker, block);\n          break;\n\n        case JpegMarker.sof3:\n        case JpegMarker.sof5:\n        case JpegMarker.sof6:\n        case JpegMarker.sof7:\n        case JpegMarker.jpg:\n        case JpegMarker.sof9:\n        case JpegMarker.sof10:\n        case JpegMarker.sof11:\n        case JpegMarker.sof13:\n        case JpegMarker.sof14:\n        case JpegMarker.sof15:\n          throw new LibError(`Unhandled frame type ${marker.toString(16)}`);\n\n        // DHT (Define Huffman Tables)\n        case JpegMarker.dht:\n          this.readDHT(block);\n          break;\n\n        // DRI (Define Restart Interval)\n        case JpegMarker.dri:\n          this.readDRI(block);\n          break;\n\n        // SOS (Start of Scan)\n        case JpegMarker.sos:\n          this.readSOS(block);\n          break;\n\n        // Fill bytes\n        case 0xff:\n          if (this._input.getByte(0) !== 0xff) {\n            this._input.skip(-1);\n          }\n          break;\n\n        default:\n          if (\n            this._input.getByte(-3) === 0xff &&\n            this._input.getByte(-2) >= 0xc0 &&\n            this._input.getByte(-2) <= 0xfe\n          ) {\n            // Could be incorrect encoding -- last 0xFF byte of the previous\n            // block was eaten by the encoder\n            this._input.skip(-3);\n            break;\n          }\n\n          if (marker !== 0) {\n            throw new LibError(`Unknown JPEG marker ${marker.toString(16)}`);\n          }\n          break;\n      }\n\n      marker = this.nextMarker();\n    }\n  }\n\n  private skipBlock(): void {\n    const length = this._input.readUint16();\n    if (length < 2) {\n      throw new LibError('Invalid Block');\n    }\n    this._input.skip(length - 2);\n  }\n\n  public validate(bytes: Uint8Array): boolean {\n    this._input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n\n    // Some other formats have embedded jpeg, or jpeg-like data.\n    // Only validate if the image starts with the StartOfImage tag.\n    const soiCheck = this._input.peekBytes(2);\n    if (soiCheck.getByte(0) !== 0xff || soiCheck.getByte(1) !== 0xd8) {\n      return false;\n    }\n\n    let marker = this.nextMarker();\n    if (marker !== JpegMarker.soi) {\n      return false;\n    }\n\n    let hasSOF = false;\n    let hasSOS = false;\n\n    marker = this.nextMarker();\n    while (marker !== JpegMarker.eoi && !this._input.isEOS) {\n      // EOI (End of image)\n      const sectionByteSize = this._input.readUint16();\n      if (sectionByteSize < 2) {\n        // Jpeg section consists of more than 2 bytes at least\n        // return success only when SOF and SOS have already found (as a jpeg without EOF)\n        break;\n      }\n\n      this._input.skip(sectionByteSize - 2);\n\n      switch (marker) {\n        // SOF0 (Start of Frame, Baseline DCT)\n        case JpegMarker.sof0:\n        // SOF1 (Start of Frame, Extended DCT)\n        // falls through\n        case JpegMarker.sof1:\n        // SOF2 (Start of Frame, Progressive DCT)\n        // falls through\n        case JpegMarker.sof2:\n          hasSOF = true;\n          break;\n        // SOS (Start of Scan)\n        case JpegMarker.sos:\n          hasSOS = true;\n          break;\n        default:\n      }\n\n      marker = this.nextMarker();\n    }\n\n    return hasSOF && hasSOS;\n  }\n\n  public readInfo(bytes: Uint8Array): JpegInfo | undefined {\n    this._input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n\n    let marker = this.nextMarker();\n    if (marker !== JpegMarker.soi) {\n      return undefined;\n    }\n\n    const info = new JpegInfo();\n\n    let hasSOF = false;\n    let hasSOS = false;\n\n    marker = this.nextMarker();\n    while (marker !== JpegMarker.eoi && !this._input.isEOS) {\n      // EOI (End of image)\n      switch (marker) {\n        // SOF0 (Start of Frame, Baseline DCT)\n        case JpegMarker.sof0:\n        // SOF1 (Start of Frame, Extended DCT)\n        // falls through\n        case JpegMarker.sof1:\n        // SOF2 (Start of Frame, Progressive DCT)\n        // falls through\n        case JpegMarker.sof2:\n          hasSOF = true;\n          this.readFrame(marker, this.readBlock());\n          break;\n        // SOS (Start of Scan)\n        case JpegMarker.sos:\n          hasSOS = true;\n          this.skipBlock();\n          break;\n        default:\n          this.skipBlock();\n          break;\n      }\n\n      marker = this.nextMarker();\n    }\n\n    if (this._frame !== undefined) {\n      info.setSize(this._frame.samplesPerLine, this._frame.scanLines);\n      this._frame = undefined;\n    }\n\n    this.frames.length = 0;\n\n    return hasSOF && hasSOS ? info : undefined;\n  }\n\n  public read(bytes: Uint8Array): void {\n    this._input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n\n    this.readMarkers();\n\n    if (this._frames.length !== 1) {\n      throw new LibError('Only single frame JPEGs supported');\n    }\n\n    if (this._frame !== undefined) {\n      for (let i = 0; i < this._frame.componentsOrder.length; ++i) {\n        const component = this._frame.components.get(\n          this._frame.componentsOrder[i]\n        );\n        if (component !== undefined) {\n          this.components.push(\n            new JpegComponentData(\n              component.hSamples,\n              this._frame.maxHSamples,\n              component.vSamples,\n              this._frame.maxVSamples,\n              JpegData.buildComponentData(component)\n            )\n          );\n        }\n      }\n    }\n  }\n\n  getImage(): MemoryImage {\n    return JpegQuantize.getImageFromJpeg(this);\n  }\n\n  private static buildHuffmanTable(\n    codeLengths: Uint8Array,\n    values: Uint8Array\n  ): Array<HuffmanNode | undefined> {\n    let k = 0;\n    const code = new Array<JpegHuffman>();\n    let length = 16;\n\n    while (length > 0 && codeLengths[length - 1] === 0) {\n      length--;\n    }\n\n    code.push(new JpegHuffman());\n\n    let p: JpegHuffman = code[0];\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < codeLengths[i]; j++) {\n        p = code.pop()!;\n        if (p.children.length <= p.index) {\n          p.children.length = p.index + 1;\n        }\n        p.children[p.index] = new HuffmanValue(values[k]);\n        while (p.index > 0) {\n          p = code.pop()!;\n        }\n        p.incrementIndex();\n        code.push(p);\n        while (code.length <= i) {\n          const q = new JpegHuffman();\n          code.push(q);\n          if (p.children.length <= p.index) {\n            p.children.length = p.index + 1;\n          }\n          p.children[p.index] = new HuffmanParent(q.children);\n          p = q;\n        }\n        k++;\n      }\n\n      if (i + 1 < length) {\n        // P here points to last code\n        const q = new JpegHuffman();\n        code.push(q);\n        if (p.children.length <= p.index) {\n          p.children.length = p.index + 1;\n        }\n        p.children[p.index] = new HuffmanParent(q.children);\n        p = q;\n      }\n    }\n\n    return code[0].children;\n  }\n\n  private static buildComponentData(\n    component: JpegComponent\n  ): Array<Uint8Array | undefined> {\n    const blocksPerLine = component.blocksPerLine;\n    const blocksPerColumn = component.blocksPerColumn;\n    const samplesPerLine = blocksPerLine << 3;\n    const R = new Int32Array(64);\n    const r = new Uint8Array(64);\n    const lines = ArrayUtils.fill<Uint8Array | undefined>(\n      blocksPerColumn * 8,\n      undefined\n    );\n\n    let l = 0;\n    for (let blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      const scanLine = blockRow << 3;\n      for (let i = 0; i < 8; i++) {\n        lines[l++] = new Uint8Array(samplesPerLine);\n      }\n\n      for (let blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        JpegQuantize.quantizeAndInverse(\n          component.quantizationTable!,\n          component.blocks[blockRow][blockCol],\n          r,\n          R\n        );\n\n        let offset = 0;\n        const sample = blockCol << 3;\n        for (let j = 0; j < 8; j++) {\n          const line = lines[scanLine + j];\n          for (let i = 0; i < 8; i++) {\n            line![sample + i] = r[offset++];\n          }\n        }\n      }\n    }\n\n    return lines;\n  }\n\n  public static toFix(val: number): number {\n    const fixedPoint = 20;\n    const one = 1 << fixedPoint;\n    return Math.trunc(val * one) & 0xffffffff;\n  }\n\n  private readBlock(): InputBuffer {\n    const length = this._input.readUint16();\n    if (length < 2) {\n      throw new LibError('Invalid Block');\n    }\n    return this._input.readBytes(length - 2);\n  }\n\n  private nextMarker(): number {\n    let c = 0;\n    if (this._input.isEOS) {\n      return c;\n    }\n\n    do {\n      do {\n        c = this._input.readByte();\n      } while (c !== 0xff && !this._input.isEOS);\n\n      if (this._input.isEOS) {\n        return c;\n      }\n\n      do {\n        c = this._input.readByte();\n      } while (c === 0xff && !this._input.isEOS);\n    } while (c === 0 && !this._input.isEOS);\n\n    return c;\n  }\n\n  private readExifData(block: InputBuffer): void {\n    // Exif Header\n    // Exif\\0\\0\n    const exifSignature = 0x45786966;\n    const signature = block.readUint32();\n    if (signature !== exifSignature) {\n      return;\n    }\n    if (block.readUint16() !== 0) {\n      return;\n    }\n\n    this.exifData.read(block);\n  }\n\n  private readAppData(marker: number, block: InputBuffer): void {\n    const appData = block;\n\n    if (marker === JpegMarker.app0) {\n      // 'JFIF\\0'\n      if (\n        appData.getByte(0) === 0x4a &&\n        appData.getByte(1) === 0x46 &&\n        appData.getByte(2) === 0x49 &&\n        appData.getByte(3) === 0x46 &&\n        appData.getByte(4) === 0\n      ) {\n        const majorVersion = appData.getByte(5);\n        const minorVersion = appData.getByte(6);\n        const densityUnits = appData.getByte(7);\n        const xDensity = (appData.getByte(8) << 8) | appData.getByte(9);\n        const yDensity = (appData.getByte(10) << 8) | appData.getByte(11);\n        const thumbWidth = appData.getByte(12);\n        const thumbHeight = appData.getByte(13);\n\n        const thumbSize = 3 * thumbWidth * thumbHeight;\n        const thumbData = appData.subarray(14 + thumbSize, undefined, 14);\n\n        this._jfif = new JpegJfif(\n          thumbWidth,\n          thumbHeight,\n          majorVersion,\n          minorVersion,\n          densityUnits,\n          xDensity,\n          yDensity,\n          thumbData\n        );\n      }\n    } else if (marker === JpegMarker.app1) {\n      // 'EXIF\\0'\n      this.readExifData(appData);\n    } else if (marker === JpegMarker.app14) {\n      // 'Adobe\\0'\n      if (\n        appData.getByte(0) === 0x41 &&\n        appData.getByte(1) === 0x64 &&\n        appData.getByte(2) === 0x6f &&\n        appData.getByte(3) === 0x62 &&\n        appData.getByte(4) === 0x65 &&\n        appData.getByte(5) === 0\n      ) {\n        const version = appData.getByte(6);\n        const flags0 = (appData.getByte(7) << 8) | appData.getByte(8);\n        const flags1 = (appData.getByte(9) << 8) | appData.getByte(10);\n        const transformCode = appData.getByte(11);\n        this._adobe = new JpegAdobe(version, flags0, flags1, transformCode);\n      }\n    } else if (marker === JpegMarker.com) {\n      // Comment\n      try {\n        this._comment = appData.readStringUtf8();\n      } catch (_) {\n        // ReadString without 0x00 terminator causes exception. Technically\n        // bad data, but no reason to abort the rest of the image decoding.\n      }\n    }\n  }\n\n  private readDQT(block: InputBuffer): void {\n    while (!block.isEOS) {\n      let n = block.readByte();\n      const prec = n >> 4;\n      n &= 0x0f;\n\n      if (n >= JpegData.numQuantizationTables) {\n        throw new LibError('Invalid number of quantization tables');\n      }\n\n      if (this._quantizationTables[n] === undefined) {\n        this._quantizationTables[n] = new Int16Array(64);\n      }\n\n      const tableData = this._quantizationTables[n];\n      if (tableData !== undefined) {\n        for (let i = 0; i < JpegData.dctSize2; i++) {\n          const tmp: number =\n            prec !== 0 ? block.readUint16() : block.readByte();\n          tableData[JpegData.dctZigZag[i]] = tmp;\n        }\n      }\n    }\n\n    if (!block.isEOS) {\n      throw new LibError('Bad length for DQT block');\n    }\n  }\n\n  private readFrame(marker: number, block: InputBuffer): void {\n    if (this._frame !== undefined) {\n      throw new LibError('Duplicate JPG frame data found.');\n    }\n\n    const extended = marker === JpegMarker.sof1;\n    const progressive = marker === JpegMarker.sof2;\n    const precision = block.readByte();\n    const scanLines = block.readUint16();\n    const samplesPerLine = block.readUint16();\n\n    const numComponents = block.readByte();\n    const components = new Map<number, JpegComponent>();\n    const componentsOrder = new Array<number>();\n    for (let i = 0; i < numComponents; i++) {\n      const componentId = block.readByte();\n      const x = block.readByte();\n      const h = (x >> 4) & 15;\n      const v = x & 15;\n      const qId = block.readByte();\n      componentsOrder.push(componentId);\n      const component = new JpegComponent(h, v, this._quantizationTables, qId);\n      components.set(componentId, component);\n    }\n\n    this._frame = new JpegFrame(\n      components,\n      componentsOrder,\n      extended,\n      progressive,\n      precision,\n      scanLines,\n      samplesPerLine\n    );\n\n    this._frame.prepare();\n\n    this.frames.push(this._frame);\n  }\n\n  private readDHT(block: InputBuffer): void {\n    while (!block.isEOS) {\n      let index = block.readByte();\n\n      const bits = new Uint8Array(16);\n      let count = 0;\n      for (let j = 0; j < 16; j++) {\n        bits[j] = block.readByte();\n        count += bits[j];\n      }\n\n      const huffmanValues = block.readBytes(count).toUint8Array();\n\n      let ht: Array<Array<HuffmanNode | undefined> | undefined> = [];\n      if ((index & 0x10) !== 0) {\n        // AC table definition\n        index -= 0x10;\n        ht = this._huffmanTablesAC;\n      } else {\n        // DC table definition\n        ht = this._huffmanTablesDC;\n      }\n\n      if (ht.length <= index) {\n        ht.length = index + 1;\n      }\n\n      ht[index] = JpegData.buildHuffmanTable(bits, huffmanValues);\n    }\n  }\n\n  private readDRI(block: InputBuffer): void {\n    this._resetInterval = block.readUint16();\n  }\n\n  private readSOS(block: InputBuffer): void {\n    const n = block.readByte();\n    if (n < 1 || n > JpegData.maxCompsInScan) {\n      throw new LibError('Invalid SOS block');\n    }\n\n    const components = new Array<JpegComponent>();\n    for (let i = 0; i < n; i++) {\n      const id = block.readByte();\n      const c = block.readByte();\n\n      if (!this._frame!.components.has(id)) {\n        throw new LibError('Invalid Component in SOS block');\n      }\n      const component = this._frame!.components.get(id);\n      if (component !== undefined) {\n        const dcTableNumber = (c >> 4) & 15;\n        const acTableNumber = c & 15;\n        if (dcTableNumber < this._huffmanTablesDC.length) {\n          component.huffmanTableDC = this._huffmanTablesDC[dcTableNumber]!;\n        }\n        if (acTableNumber < this._huffmanTablesAC.length) {\n          component.huffmanTableAC = this._huffmanTablesAC[acTableNumber]!;\n        }\n        components.push(component);\n      }\n    }\n\n    const spectralStart = block.readByte();\n    const spectralEnd = block.readByte();\n    const successiveApproximation = block.readByte();\n\n    const ah = (successiveApproximation >> 4) & 15;\n    const al = successiveApproximation & 15;\n\n    const scan = new JpegScan(\n      this._input,\n      this._frame!,\n      components,\n      spectralStart,\n      spectralEnd,\n      ah,\n      al,\n      this._resetInterval\n    );\n    scan.decode();\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../common/input-buffer';\nimport { LibError } from '../error/lib-error';\nimport { MemoryImage } from '../image/image';\nimport { Decoder } from './decoder';\nimport { JpegData } from './jpeg/jpeg-data';\nimport { JpegInfo } from './jpeg/jpeg-info';\n\n/**\n * Decode a jpeg encoded image.\n */\nexport class JpegDecoder implements Decoder {\n  private _input?: InputBuffer;\n  private _info?: JpegInfo;\n\n  public get numFrames(): number {\n    return this._info !== undefined ? this._info.numFrames : 0;\n  }\n\n  /**\n   * Is the given file a valid JPEG image?\n   */\n  public isValidFile(bytes: Uint8Array): boolean {\n    return new JpegData().validate(bytes);\n  }\n\n  public startDecode(bytes: Uint8Array): JpegInfo | undefined {\n    this._input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n    this._info = new JpegData().readInfo(bytes);\n    return this._info;\n  }\n\n  public decodeFrame(_: number): MemoryImage | undefined {\n    if (this._input === undefined) {\n      return undefined;\n    }\n\n    const jpeg = new JpegData();\n    jpeg.read(this._input.buffer);\n    if (jpeg.frames.length !== 1) {\n      throw new LibError('Only single frame JPEGs supported.');\n    }\n\n    return jpeg.getImage();\n  }\n\n  public decode(bytes: Uint8Array, _frame?: number): MemoryImage | undefined {\n    const jpeg = new JpegData();\n    jpeg.read(bytes);\n\n    if (jpeg.frames.length !== 1) {\n      throw new LibError('Only single frame JPEGs supported.');\n    }\n\n    return jpeg.getImage();\n  }\n}\n", "/** @format */\n\nimport { ArrayUtils } from '../common/array-utils';\nimport { MathUtils } from '../common/math-utils';\nimport { OutputBuffer } from '../common/output-buffer';\nimport { ExifData } from '../exif/exif-data';\nimport { MemoryImage } from '../image/image';\nimport { Encoder } from './encoder';\nimport { JpegMarker } from './jpeg/jpeg-marker';\n\n/**\n * Encode an image to the JPEG format.\n */\nexport class JpegEncoder implements Encoder {\n  private static readonly _zigzag: number[] = [\n    0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25,\n    30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54,\n    20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48,\n    49, 57, 58, 62, 63,\n  ];\n\n  private static readonly _stdDcLuminanceNrCodes: number[] = [\n    0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,\n  ];\n\n  private static readonly _stdDcLuminanceValues: number[] = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n  ];\n\n  private static readonly _stdAcLuminanceNrCodes: number[] = [\n    0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d,\n  ];\n\n  private static readonly _stdAcLuminanceValues: number[] = [\n    0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06,\n    0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,\n    0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72,\n    0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,\n    0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45,\n    0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,\n    0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75,\n    0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,\n    0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,\n    0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,\n    0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9,\n    0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,\n    0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4,\n    0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,\n  ];\n\n  private static readonly _stdDcChrominanceNrCodes: number[] = [\n    0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n  ];\n\n  private static readonly _stdDcChrominanceValues: number[] = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n  ];\n\n  private static readonly _stdAcChrominanceNrCodes: number[] = [\n    0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77,\n  ];\n\n  private static readonly _stdAcChrominanceValues: number[] = [\n    0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41,\n    0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,\n    0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1,\n    0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,\n    0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44,\n    0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,\n    0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74,\n    0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n    0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a,\n    0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,\n    0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,\n    0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,\n    0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4,\n    0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,\n  ];\n\n  private readonly _tableY = new Uint8Array(64);\n  private readonly _tableUv = new Uint8Array(64);\n  private readonly _fdTableY = new Float32Array(64);\n  private readonly _fdTableUv = new Float32Array(64);\n\n  private readonly _bitCode = ArrayUtils.fill<number[] | undefined>(\n    65535,\n    undefined\n  );\n  private readonly _category = ArrayUtils.fill<number | undefined>(\n    65535,\n    undefined\n  );\n  private readonly _outputfDCTQuant = ArrayUtils.fill<number | undefined>(\n    64,\n    undefined\n  );\n  private readonly _du = ArrayUtils.fill<number | undefined>(64, undefined);\n\n  private readonly _ydu: Float32Array = new Float32Array(64);\n  private readonly _udu: Float32Array = new Float32Array(64);\n  private readonly _vdu: Float32Array = new Float32Array(64);\n  private readonly _tableRgbYuv: Int32Array = new Int32Array(2048);\n\n  private _ydcHuffman: Array<Array<number> | undefined> | undefined;\n  private _uvdcHuffman: Array<Array<number> | undefined> | undefined;\n  private _yacHuffman!: Array<Array<number> | undefined>;\n  private _uvacHuffman!: Array<Array<number> | undefined>;\n\n  private _currentQuality?: number;\n\n  private _byteNew = 0;\n  private _bytePos = 7;\n\n  private _supportsAnimation = false;\n  public get supportsAnimation(): boolean {\n    return this._supportsAnimation;\n  }\n\n  constructor(quality = 100) {\n    this.initHuffmanTable();\n    this.initCategoryNumber();\n    this.initRgbYuvTable();\n    this.setQuality(quality);\n  }\n\n  private static computeHuffmanTable(\n    nrcodes: number[],\n    stdTable: number[]\n  ): Array<Array<number> | undefined> {\n    let codeValue = 0;\n    let posInTable = 0;\n    const ht = new Array<Array<number> | undefined>();\n    for (let k = 1; k <= 16; k++) {\n      for (let j = 1; j <= nrcodes[k]; j++) {\n        const index = stdTable[posInTable];\n        if (ht.length <= index) {\n          ht.length = index + 1;\n        }\n        ht[index] = [codeValue, k];\n        posInTable++;\n        codeValue++;\n      }\n      codeValue *= 2;\n    }\n    return ht;\n  }\n\n  private static writeMarker(fp: OutputBuffer, marker: number): void {\n    fp.writeByte(0xff);\n    fp.writeByte(marker & 0xff);\n  }\n\n  private static writeAPP0(out: OutputBuffer): void {\n    JpegEncoder.writeMarker(out, JpegMarker.app0);\n    // Length\n    out.writeUint16(16);\n    // J\n    out.writeByte(0x4a);\n    // F\n    out.writeByte(0x46);\n    // I\n    out.writeByte(0x49);\n    // F\n    out.writeByte(0x46);\n    // '\\0'\n    out.writeByte(0);\n    // versionhi\n    out.writeByte(1);\n    // versionlo\n    out.writeByte(1);\n    // xyunits\n    out.writeByte(0);\n    // xdensity\n    out.writeUint16(1);\n    // ydensity\n    out.writeUint16(1);\n    // thumbnwidth\n    out.writeByte(0);\n    // thumbnheight\n    out.writeByte(0);\n  }\n\n  private static writeAPP1(out: OutputBuffer, exif: ExifData): void {\n    if (exif.isEmpty) {\n      return;\n    }\n\n    const exifData = new OutputBuffer();\n    exif.write(exifData);\n    const exifBytes = exifData.getBytes();\n\n    this.writeMarker(out, JpegMarker.app1);\n    // Signature: Exif\\0\\0\n    const exifSignature = 0x45786966;\n    out.writeUint16(exifBytes.length + 8);\n    out.writeUint32(exifSignature);\n    out.writeUint16(0);\n    out.writeBytes(exifBytes);\n  }\n\n  private static writeSOF0(\n    out: OutputBuffer,\n    width: number,\n    height: number\n  ): void {\n    JpegEncoder.writeMarker(out, JpegMarker.sof0);\n    // Length, truecolor YUV JPG\n    out.writeUint16(17);\n    // Precision\n    out.writeByte(8);\n    out.writeUint16(height);\n    out.writeUint16(width);\n    // nrofcomponents\n    out.writeByte(3);\n    // IdY\n    out.writeByte(1);\n    // HVY\n    out.writeByte(0x11);\n    // QTY\n    out.writeByte(0);\n    // IdU\n    out.writeByte(2);\n    // HVU\n    out.writeByte(0x11);\n    // QTU\n    out.writeByte(1);\n    // IdV\n    out.writeByte(3);\n    // HVV\n    out.writeByte(0x11);\n    // QTV\n    out.writeByte(1);\n  }\n\n  private static writeSOS(out: OutputBuffer): void {\n    JpegEncoder.writeMarker(out, JpegMarker.sos);\n    // Length\n    out.writeUint16(12);\n    // Nrofcomponents\n    out.writeByte(3);\n    // IdY\n    out.writeByte(1);\n    // HTY\n    out.writeByte(0);\n    // IdU\n    out.writeByte(2);\n    // HTU\n    out.writeByte(0x11);\n    // IdV\n    out.writeByte(3);\n    // HTV\n    out.writeByte(0x11);\n    // Ss\n    out.writeByte(0);\n    // Se\n    out.writeByte(0x3f);\n    // Bf\n    out.writeByte(0);\n  }\n\n  private static writeDHT(out: OutputBuffer): void {\n    JpegEncoder.writeMarker(out, JpegMarker.dht);\n    // Length\n    out.writeUint16(0x01a2);\n\n    // HTYDCinfo\n    out.writeByte(0);\n    for (let i = 0; i < 16; i++) {\n      out.writeByte(JpegEncoder._stdDcLuminanceNrCodes[i + 1]);\n    }\n    for (let j = 0; j <= 11; j++) {\n      out.writeByte(JpegEncoder._stdDcLuminanceValues[j]);\n    }\n\n    // HTYACinfo\n    out.writeByte(0x10);\n    for (let k = 0; k < 16; k++) {\n      out.writeByte(JpegEncoder._stdAcLuminanceNrCodes[k + 1]);\n    }\n    for (let l = 0; l <= 161; l++) {\n      out.writeByte(JpegEncoder._stdAcLuminanceValues[l]);\n    }\n\n    // HTUDCinfo\n    out.writeByte(1);\n    for (let m = 0; m < 16; m++) {\n      out.writeByte(JpegEncoder._stdDcChrominanceNrCodes[m + 1]);\n    }\n    for (let n = 0; n <= 11; n++) {\n      out.writeByte(JpegEncoder._stdDcChrominanceValues[n]);\n    }\n\n    // HTUACinfo\n    out.writeByte(0x11);\n    for (let o = 0; o < 16; o++) {\n      out.writeByte(JpegEncoder._stdAcChrominanceNrCodes[o + 1]);\n    }\n    for (let p = 0; p <= 161; p++) {\n      out.writeByte(JpegEncoder._stdAcChrominanceValues[p]);\n    }\n  }\n\n  private initHuffmanTable(): void {\n    this._ydcHuffman = JpegEncoder.computeHuffmanTable(\n      JpegEncoder._stdDcLuminanceNrCodes,\n      JpegEncoder._stdDcLuminanceValues\n    );\n    this._uvdcHuffman = JpegEncoder.computeHuffmanTable(\n      JpegEncoder._stdDcChrominanceNrCodes,\n      JpegEncoder._stdDcChrominanceValues\n    );\n    this._yacHuffman = JpegEncoder.computeHuffmanTable(\n      JpegEncoder._stdAcLuminanceNrCodes,\n      JpegEncoder._stdAcLuminanceValues\n    );\n    this._uvacHuffman = JpegEncoder.computeHuffmanTable(\n      JpegEncoder._stdAcChrominanceNrCodes,\n      JpegEncoder._stdAcChrominanceValues\n    );\n  }\n\n  private initCategoryNumber(): void {\n    let nrLower = 1;\n    let nrUpper = 2;\n    for (let cat = 1; cat <= 15; cat++) {\n      // Positive numbers\n      for (let nr = nrLower; nr < nrUpper; nr++) {\n        this._category[32767 + nr] = cat;\n        this._bitCode[32767 + nr] = [nr, cat];\n      }\n      // Negative numbers\n      for (let nrneg = -(nrUpper - 1); nrneg <= -nrLower; nrneg++) {\n        this._category[32767 + nrneg] = cat;\n        this._bitCode[32767 + nrneg] = [nrUpper - 1 + nrneg, cat];\n      }\n      nrLower <<= 1;\n      nrUpper <<= 1;\n    }\n  }\n\n  private initRgbYuvTable(): void {\n    for (let i = 0; i < 256; i++) {\n      this._tableRgbYuv[i] = 19595 * i;\n      this._tableRgbYuv[i + 256] = 38470 * i;\n      this._tableRgbYuv[i + 512] = 7471 * i + 0x8000;\n      this._tableRgbYuv[i + 768] = -11059 * i;\n      this._tableRgbYuv[i + 1024] = -21709 * i;\n      this._tableRgbYuv[i + 1280] = 32768 * i + 0x807fff;\n      this._tableRgbYuv[i + 1536] = -27439 * i;\n      this._tableRgbYuv[i + 1792] = -5329 * i;\n    }\n  }\n\n  private setQuality(quality: number): void {\n    const q = MathUtils.clampInt(quality, 1, 100);\n\n    if (this._currentQuality === q) {\n      // Don't re-calc if unchanged\n      return;\n    }\n\n    let sf = 0;\n    if (q < 50) {\n      sf = Math.floor(5000 / q);\n    } else {\n      sf = Math.floor(200 - q * 2);\n    }\n\n    this.initQuantTables(sf);\n    this._currentQuality = q;\n  }\n\n  private initQuantTables(sf: number): void {\n    const yqt: number[] = [\n      16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13,\n      16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56,\n      68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103,\n      121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99,\n    ];\n\n    for (let i = 0; i < 64; i++) {\n      let t = Math.floor((yqt[i] * sf + 50) / 100);\n      if (t < 1) {\n        t = 1;\n      } else if (t > 255) {\n        t = 255;\n      }\n      this._tableY[JpegEncoder._zigzag[i]] = t;\n    }\n\n    const uvqt: number[] = [\n      17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26,\n      56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\n      99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\n      99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\n    ];\n\n    for (let j = 0; j < 64; j++) {\n      let u = Math.floor((uvqt[j] * sf + 50) / 100);\n      if (u < 1) {\n        u = 1;\n      } else if (u > 255) {\n        u = 255;\n      }\n      this._tableUv[JpegEncoder._zigzag[j]] = u;\n    }\n\n    const aasf: number[] = [\n      1.0, 1.387039845, 1.306562965, 1.175875602, 1.0, 0.785694958, 0.5411961,\n      0.275899379,\n    ];\n\n    let k = 0;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        this._fdTableY[k] =\n          1 /\n          (this._tableY[JpegEncoder._zigzag[k]] * aasf[row] * aasf[col] * 8.0);\n        this._fdTableUv[k] =\n          1 /\n          (this._tableUv[JpegEncoder._zigzag[k]] * aasf[row] * aasf[col] * 8.0);\n        k++;\n      }\n    }\n  }\n\n  // DCT & quantization core\n  private fDCTQuant(\n    data: Float32Array,\n    fdtbl: Float32Array\n  ): Array<number | undefined> {\n    // Pass 1: process rows.\n    let dataOff = 0;\n    for (let i = 0; i < 8; ++i) {\n      const d0 = data[dataOff];\n      const d1 = data[dataOff + 1];\n      const d2 = data[dataOff + 2];\n      const d3 = data[dataOff + 3];\n      const d4 = data[dataOff + 4];\n      const d5 = data[dataOff + 5];\n      const d6 = data[dataOff + 6];\n      const d7 = data[dataOff + 7];\n\n      const tmp0 = d0 + d7;\n      const tmp7 = d0 - d7;\n      const tmp1 = d1 + d6;\n      const tmp6 = d1 - d6;\n      const tmp2 = d2 + d5;\n      const tmp5 = d2 - d5;\n      const tmp3 = d3 + d4;\n      const tmp4 = d3 - d4;\n\n      // Even part\n      // Phase 2\n      let tmp10 = tmp0 + tmp3;\n      const tmp13 = tmp0 - tmp3;\n      let tmp11 = tmp1 + tmp2;\n      let tmp12 = tmp1 - tmp2;\n\n      // Phase 3\n      data[dataOff] = tmp10 + tmp11;\n      data[dataOff + 4] = tmp10 - tmp11;\n\n      // C4\n      const z1 = (tmp12 + tmp13) * 0.707106781;\n      // Phase 5\n      data[dataOff + 2] = tmp13 + z1;\n      data[dataOff + 6] = tmp13 - z1;\n\n      // Odd part\n      // Phase 2\n      tmp10 = tmp4 + tmp5;\n      tmp11 = tmp5 + tmp6;\n      tmp12 = tmp6 + tmp7;\n\n      // The rotator is modified from fig 4-8 to avoid extra negations.\n      // c6\n      const z5 = (tmp10 - tmp12) * 0.382683433;\n      // c2 - c6\n      const z2 = 0.5411961 * tmp10 + z5;\n      // c2 + c6\n      const z4 = 1.306562965 * tmp12 + z5;\n      // c4\n      const z3 = tmp11 * 0.707106781;\n\n      // Phase 5\n      const z11 = tmp7 + z3;\n      const z13 = tmp7 - z3;\n\n      // Phase 6\n      data[dataOff + 5] = z13 + z2;\n      data[dataOff + 3] = z13 - z2;\n      data[dataOff + 1] = z11 + z4;\n      data[dataOff + 7] = z11 - z4;\n\n      // Advance pointer to next row\n      dataOff += 8;\n    }\n\n    // Pass 2: process columns.\n    dataOff = 0;\n    for (let i = 0; i < 8; ++i) {\n      const d0 = data[dataOff];\n      const d1 = data[dataOff + 8];\n      const d2 = data[dataOff + 16];\n      const d3 = data[dataOff + 24];\n      const d4 = data[dataOff + 32];\n      const d5 = data[dataOff + 40];\n      const d6 = data[dataOff + 48];\n      const d7 = data[dataOff + 56];\n\n      const tmp0p2 = d0 + d7;\n      const tmp7p2 = d0 - d7;\n      const tmp1p2 = d1 + d6;\n      const tmp6p2 = d1 - d6;\n      const tmp2p2 = d2 + d5;\n      const tmp5p2 = d2 - d5;\n      const tmp3p2 = d3 + d4;\n      const tmp4p2 = d3 - d4;\n\n      // Even part\n      // Phase 2\n      let tmp10p2 = tmp0p2 + tmp3p2;\n      const tmp13p2 = tmp0p2 - tmp3p2;\n      let tmp11p2 = tmp1p2 + tmp2p2;\n      let tmp12p2 = tmp1p2 - tmp2p2;\n\n      // Phase 3\n      data[dataOff] = tmp10p2 + tmp11p2;\n      data[dataOff + 32] = tmp10p2 - tmp11p2;\n\n      // c4\n      const z1p2 = (tmp12p2 + tmp13p2) * 0.707106781;\n      // Phase 5\n      data[dataOff + 16] = tmp13p2 + z1p2;\n      data[dataOff + 48] = tmp13p2 - z1p2;\n\n      // Odd part\n      // Phase 2\n      tmp10p2 = tmp4p2 + tmp5p2;\n      tmp11p2 = tmp5p2 + tmp6p2;\n      tmp12p2 = tmp6p2 + tmp7p2;\n\n      // The rotator is modified from fig 4-8 to avoid extra negations.\n      // c6\n      const z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;\n      // c2 - c6\n      const z2p2 = 0.5411961 * tmp10p2 + z5p2;\n      // c2 + c6\n      const z4p2 = 1.306562965 * tmp12p2 + z5p2;\n      // c4\n      const z3p2 = tmp11p2 * 0.707106781;\n      // Phase 5\n      const z11p2 = tmp7p2 + z3p2;\n      const z13p2 = tmp7p2 - z3p2;\n\n      // Phase 6\n      data[dataOff + 40] = z13p2 + z2p2;\n      data[dataOff + 24] = z13p2 - z2p2;\n      data[dataOff + 8] = z11p2 + z4p2;\n      data[dataOff + 56] = z11p2 - z4p2;\n\n      // Advance pointer to next column\n      dataOff++;\n    }\n\n    // Quantize/descale the coefficients\n    for (let i = 0; i < 64; ++i) {\n      // Apply the quantization and scaling factor & Round to nearest integer\n      const fDCTQuant = data[i] * fdtbl[i];\n      this._outputfDCTQuant[i] =\n        fDCTQuant > 0.0\n          ? Math.trunc(fDCTQuant + 0.5)\n          : Math.trunc(fDCTQuant - 0.5);\n    }\n\n    return this._outputfDCTQuant;\n  }\n\n  private writeDQT(out: OutputBuffer): void {\n    JpegEncoder.writeMarker(out, JpegMarker.dqt);\n    // Length\n    out.writeUint16(132);\n    out.writeByte(0);\n    for (let i = 0; i < 64; i++) {\n      out.writeByte(this._tableY[i]);\n    }\n    out.writeByte(1);\n    for (let j = 0; j < 64; j++) {\n      out.writeByte(this._tableUv[j]);\n    }\n  }\n\n  private writeBits(out: OutputBuffer, bits: number[]): void {\n    const value = bits[0];\n    let posval = bits[1] - 1;\n    while (posval >= 0) {\n      if ((value & (1 << posval)) !== 0) {\n        this._byteNew |= 1 << this._bytePos;\n      }\n      posval--;\n      this._bytePos--;\n      if (this._bytePos < 0) {\n        if (this._byteNew === 0xff) {\n          out.writeByte(0xff);\n          out.writeByte(0);\n        } else {\n          out.writeByte(this._byteNew);\n        }\n        this._bytePos = 7;\n        this._byteNew = 0;\n      }\n    }\n  }\n\n  private resetBits(): void {\n    this._byteNew = 0;\n    this._bytePos = 7;\n  }\n\n  private processDU(\n    out: OutputBuffer,\n    cdu: Float32Array,\n    fdtbl: Float32Array,\n    dc: number,\n    htac: Array<number[] | undefined>,\n    htdc?: Array<number[] | undefined>\n  ): number | undefined {\n    const eob = htac[0x00];\n    const m16Zeroes = htac[0xf0];\n    const I16 = 16;\n    const I63 = 63;\n    const I64 = 64;\n    const duDct = this.fDCTQuant(cdu, fdtbl);\n    let _dc = dc;\n    let pos = 0;\n\n    // ZigZag reorder\n    for (let j = 0; j < I64; ++j) {\n      this._du[JpegEncoder._zigzag[j]] = duDct[j];\n    }\n\n    const diff = this._du[0]! - _dc;\n    _dc = this._du[0]!;\n    // Encode DC\n    if (diff === 0) {\n      // Diff might be 0\n      this.writeBits(out, htdc![0]!);\n    } else {\n      pos = 32767 + diff;\n      this.writeBits(out, htdc![this._category[pos]!]!);\n      this.writeBits(out, this._bitCode[pos]!);\n    }\n\n    // Encode ACs\n    let end0pos = 63;\n    // eslint-disable-next-line no-empty\n    for (; end0pos > 0 && this._du[end0pos] === 0; end0pos--) {}\n    //End0pos = first element in reverse order !=0\n    if (end0pos === 0) {\n      this.writeBits(out, eob!);\n      return _dc;\n    }\n\n    let i = 1;\n    while (i <= end0pos) {\n      const startpos = i;\n      // eslint-disable-next-line no-empty\n      for (; this._du[i] === 0 && i <= end0pos; ++i) {}\n\n      let nrzeroes = i - startpos;\n      if (nrzeroes >= I16) {\n        const lng = nrzeroes >> 4;\n        for (let nrmarker = 1; nrmarker <= lng; ++nrmarker) {\n          this.writeBits(out, m16Zeroes!);\n        }\n        nrzeroes &= 0xf;\n      }\n      pos = 32767 + this._du[i]!;\n      this.writeBits(out, htac[(nrzeroes << 4) + this._category[pos]!]!);\n      this.writeBits(out, this._bitCode[pos]!);\n      i++;\n    }\n\n    if (end0pos !== I63) {\n      this.writeBits(out, eob!);\n    }\n\n    return _dc;\n  }\n\n  public encode(image: MemoryImage, _singleFrame = false): Uint8Array {\n    const fp = new OutputBuffer({\n      bigEndian: true,\n    });\n\n    // Add JPEG headers\n    JpegEncoder.writeMarker(fp, JpegMarker.soi);\n    JpegEncoder.writeAPP0(fp);\n    JpegEncoder.writeAPP1(fp, image.exifData);\n    this.writeDQT(fp);\n    JpegEncoder.writeSOF0(fp, image.width, image.height);\n    JpegEncoder.writeDHT(fp);\n    JpegEncoder.writeSOS(fp);\n\n    // Encode 8x8 macroblocks\n    let dcy: number | undefined = 0;\n    let dcu: number | undefined = 0;\n    let dcv: number | undefined = 0;\n\n    this.resetBits();\n\n    const width = image.width;\n    const height = image.height;\n\n    let y = 0;\n    while (y < height) {\n      let x = 0;\n      while (x < width) {\n        for (let pos = 0; pos < 64; pos++) {\n          // / 8\n          const row = pos >> 3;\n          // % 8\n          const col = pos & 7;\n\n          let yy = y + row;\n          let xx = x + col;\n\n          if (yy >= height) {\n            // padding bottom\n            yy -= y + 1 + row - height;\n          }\n\n          if (xx >= width) {\n            // padding right\n            xx -= x + col - width + 1;\n          }\n\n          const p = image.getPixel(xx, yy);\n          const r = Math.trunc(p.r);\n          const g = Math.trunc(p.g);\n          const b = Math.trunc(p.b);\n\n          // calculate YUV values\n          this._ydu[pos] =\n            ((this._tableRgbYuv[r] +\n              this._tableRgbYuv[g + 256] +\n              this._tableRgbYuv[b + 512]) >>\n              16) -\n            128.0;\n\n          this._udu[pos] =\n            ((this._tableRgbYuv[r + 768] +\n              this._tableRgbYuv[g + 1024] +\n              this._tableRgbYuv[b + 1280]) >>\n              16) -\n            128.0;\n\n          this._vdu[pos] =\n            ((this._tableRgbYuv[r + 1280] +\n              this._tableRgbYuv[g + 1536] +\n              this._tableRgbYuv[b + 1792]) >>\n              16) -\n            128.0;\n        }\n\n        dcy = this.processDU(\n          fp,\n          this._ydu,\n          this._fdTableY,\n          dcy!,\n          this._yacHuffman,\n          this._ydcHuffman\n        );\n        dcu = this.processDU(\n          fp,\n          this._udu,\n          this._fdTableUv,\n          dcu!,\n          this._uvacHuffman,\n          this._uvdcHuffman\n        );\n        dcv = this.processDU(\n          fp,\n          this._vdu,\n          this._fdTableUv,\n          dcv!,\n          this._uvacHuffman,\n          this._uvdcHuffman\n        );\n\n        x += 8;\n      }\n\n      y += 8;\n    }\n\n    // Do the bit alignment of the EOI marker\n    if (this._bytePos >= 0) {\n      const fillBits = [(1 << (this._bytePos + 1)) - 1, this._bytePos + 1];\n      this.writeBits(fp, fillBits);\n    }\n\n    JpegEncoder.writeMarker(fp, JpegMarker.eoi);\n\n    return fp.getBytes();\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { OutputBuffer } from '../../common/output-buffer';\nimport { ExifData } from '../../exif/exif-data';\nimport { JpegMarker } from './jpeg-marker';\n\nexport class JpegUtils {\n  // Exif\\0\\0\n  private static readonly _exifSignature = 0x45786966;\n\n  private readExifData(block: InputBuffer | undefined): ExifData | undefined {\n    if (block === undefined) {\n      return undefined;\n    }\n\n    // Exif Header\n    const signature = block.readUint32();\n    if (signature !== JpegUtils._exifSignature) {\n      return undefined;\n    }\n    if (block.readUint16() !== 0) {\n      return undefined;\n    }\n\n    return ExifData.fromInputBuffer(block);\n  }\n\n  private writeAPP1(out: OutputBuffer, exif: ExifData): void {\n    if (exif.isEmpty) {\n      return;\n    }\n\n    const exifData = new OutputBuffer();\n    exif.write(exifData);\n    const exifBytes = exifData.getBytes();\n\n    out.writeUint16(exifBytes.length + 8);\n    out.writeUint32(JpegUtils._exifSignature);\n    out.writeUint16(0);\n    out.writeBytes(exifBytes);\n  }\n\n  private readBlock(input: InputBuffer): InputBuffer | undefined {\n    const length = input.readUint16();\n    if (length < 2) {\n      return undefined;\n    }\n    return input.readBytes(length - 2);\n  }\n\n  private skipBlock(input: InputBuffer, output?: OutputBuffer): boolean {\n    const length = input.readUint16();\n    output?.writeUint16(length);\n    if (length < 2) {\n      return false;\n    }\n    if (output !== undefined) {\n      output.writeBuffer(input.readBytes(length - 2));\n    } else {\n      input.skip(length - 2);\n    }\n    return true;\n  }\n\n  private nextMarker(input: InputBuffer, output?: OutputBuffer): number {\n    let c = 0;\n    if (input.isEOS) {\n      return c;\n    }\n\n    do {\n      do {\n        c = input.readByte();\n        output?.writeByte(c);\n      } while (c !== 0xff && !input.isEOS);\n\n      if (input.isEOS) {\n        return c;\n      }\n\n      do {\n        c = input.readByte();\n        output?.writeByte(c);\n      } while (c === 0xff && !input.isEOS);\n    } while (c === 0 && !input.isEOS);\n\n    return c;\n  }\n\n  public decodeExif(data: Uint8Array): ExifData | undefined {\n    const input = new InputBuffer({\n      buffer: data,\n      bigEndian: true,\n    });\n\n    // Some other formats have embedded jpeg, or jpeg-like data.\n    // Only validate if the image starts with the StartOfImage tag.\n    const soiCheck = input.peekBytes(2);\n    if (soiCheck.getByte(0) !== 0xff || soiCheck.getByte(1) !== 0xd8) {\n      return undefined;\n    }\n\n    let marker = this.nextMarker(input);\n    if (marker !== JpegMarker.soi) {\n      return undefined;\n    }\n\n    let exif: ExifData | undefined = undefined;\n    marker = this.nextMarker(input);\n    while (marker !== JpegMarker.eoi && !input.isEOS) {\n      switch (marker) {\n        case JpegMarker.app1:\n          exif = this.readExifData(this.readBlock(input));\n          if (exif !== undefined) {\n            return exif;\n          }\n          break;\n        default:\n          this.skipBlock(input);\n          break;\n      }\n      marker = this.nextMarker(input);\n    }\n\n    return undefined;\n  }\n\n  public injectExif(exif: ExifData, data: Uint8Array): Uint8Array | undefined {\n    const input = new InputBuffer({\n      buffer: data,\n      bigEndian: true,\n    });\n\n    // Some other formats have embedded jpeg, or jpeg-like data.\n    // Only validate if the image starts with the StartOfImage tag.\n    const soiCheck = input.peekBytes(2);\n    if (soiCheck.getByte(0) !== 0xff || soiCheck.getByte(1) !== 0xd8) {\n      return undefined;\n    }\n\n    const output = new OutputBuffer({\n      size: data.length,\n      bigEndian: true,\n    });\n\n    let marker = this.nextMarker(input, output);\n    if (marker !== JpegMarker.soi) {\n      return undefined;\n    }\n\n    // Check to see if the JPEG file has an EXIF block\n    let hasExifBlock = false;\n    const startOffset = input.offset;\n    marker = this.nextMarker(input);\n    while (!hasExifBlock && marker !== JpegMarker.eoi && !input.isEOS) {\n      if (marker === JpegMarker.app1) {\n        const block = this.readBlock(input);\n        const signature = block?.readUint32();\n        if (signature === JpegUtils._exifSignature) {\n          hasExifBlock = true;\n          break;\n        }\n      } else {\n        this.skipBlock(input);\n      }\n      marker = this.nextMarker(input);\n    }\n\n    input.offset = startOffset;\n\n    // If the JPEG file does not have an EXIF block, add a new one.\n    if (!hasExifBlock) {\n      this.writeAPP1(output, exif);\n      // No need to parse the remaining individual blocks, just write out\n      // the remainder of the file.\n      output.writeBuffer(input.readBytes(input.length));\n      return output.getBytes();\n    }\n\n    marker = this.nextMarker(input, output);\n    while (marker !== JpegMarker.eoi && !input.isEOS) {\n      if (marker === JpegMarker.app1) {\n        const saveOffset = input.offset;\n        // block length\n        input.skip(2);\n        const signature = input.readUint32();\n        input.offset = saveOffset;\n        if (signature === JpegUtils._exifSignature) {\n          this.skipBlock(input);\n          this.writeAPP1(output, exif);\n          // No need to parse the remaining individual blocks, just write out\n          // the remainder of the file.\n          output.writeBuffer(input.readBytes(input.length));\n          return output.getBytes();\n        }\n      }\n      this.skipBlock(input, output);\n      marker = this.nextMarker(input, output);\n    }\n\n    return output.getBytes();\n  }\n}\n", "/** @format */\n\nexport enum PngBlendMode {\n  /**\n   * No alpha blending should be done when drawing this frame (replace pixels in canvas).\n   */\n  source,\n\n  /**\n   * * Alpha blending should be used when drawing this frame (composited over\n   * the current canvas image).\n   */\n  over,\n}\n", "/** @format */\n\nexport enum PngDisposeMode {\n  none,\n  background,\n  previous,\n}\n", "/** @format */\n\nimport { PngBlendMode } from './png-blend-mode';\nimport { PngDisposeMode } from './png-dispose-mode';\n\nexport interface PngFrameInitOptions {\n  sequenceNumber?: number;\n  width?: number;\n  height?: number;\n  xOffset?: number;\n  yOffset?: number;\n  delayNum?: number;\n  delayDen?: number;\n  dispose?: number;\n  blend?: number;\n}\n\n// Decodes a frame from a PNG animation.\nexport class PngFrame {\n  private readonly _fdat: number[] = [];\n  public get fdat(): number[] {\n    return this._fdat;\n  }\n\n  private _sequenceNumber: number;\n  public get sequenceNumber(): number {\n    return this._sequenceNumber;\n  }\n\n  private _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private _xOffset: number;\n  public get xOffset(): number {\n    return this._xOffset;\n  }\n\n  private _yOffset: number;\n  public get yOffset(): number {\n    return this._yOffset;\n  }\n\n  private _delayNum: number;\n  public get delayNum(): number {\n    return this._delayNum;\n  }\n\n  private _delayDen: number;\n  public get delayDen(): number {\n    return this._delayDen;\n  }\n\n  private _dispose: PngDisposeMode;\n  public get dispose(): PngDisposeMode {\n    return this._dispose;\n  }\n\n  private _blend: PngBlendMode;\n  public get blend(): PngBlendMode {\n    return this._blend;\n  }\n\n  public get delay() {\n    if (this._delayNum === undefined || this._delayDen === undefined) {\n      return 0;\n    }\n    if (this._delayDen === 0) {\n      return 0;\n    }\n    return this._delayNum / this._delayDen;\n  }\n\n  constructor(opt: PngFrameInitOptions) {\n    this._sequenceNumber = opt?.sequenceNumber ?? 0;\n    this._width = opt?.width ?? 0;\n    this._height = opt?.height ?? 0;\n    this._xOffset = opt?.xOffset ?? 0;\n    this._yOffset = opt?.yOffset ?? 0;\n    this._delayNum = opt?.delayNum ?? 0;\n    this._delayDen = opt?.delayDen ?? 0;\n    this._dispose = opt?.dispose ?? PngDisposeMode.none;\n    this._blend = opt?.blend ?? PngBlendMode.source;\n  }\n}\n", "/** @format */\n\nimport { Color } from '../../color/color';\nimport { DecodeInfo } from '../decode-info';\nimport { PngColorType } from './png-color-type';\nimport { PngFrame } from './png-frame';\n\nexport interface PngInfoInitOptions {\n  width?: number;\n  height?: number;\n  bits?: number;\n  colorType?: number;\n  compressionMethod?: number;\n  filterMethod?: number;\n  interlaceMethod?: number;\n}\n\nexport class PngInfo implements DecodeInfo {\n  private _width = 0;\n  public get width(): number {\n    return this._width;\n  }\n  public set width(v: number) {\n    this._width = v;\n  }\n\n  private _height = 0;\n  public set height(v: number) {\n    this._height = v;\n  }\n  public get height(): number {\n    return this._height;\n  }\n\n  private _backgroundColor: Color | undefined = undefined;\n  public get backgroundColor(): Color | undefined {\n    return this._backgroundColor;\n  }\n  public set backgroundColor(v: Color | undefined) {\n    this._backgroundColor = v;\n  }\n\n  private _numFrames = 1;\n  public get numFrames(): number {\n    return this._numFrames;\n  }\n  public set numFrames(v: number) {\n    this._numFrames = v;\n  }\n\n  private _bits: number;\n  public get bits(): number {\n    return this._bits;\n  }\n  public set bits(v: number) {\n    this._bits = v;\n  }\n\n  private _colorType: PngColorType | undefined;\n  public get colorType(): PngColorType | undefined {\n    return this._colorType;\n  }\n  public set colorType(v: PngColorType | undefined) {\n    this._colorType = v;\n  }\n\n  private _compressionMethod: number;\n  public get compressionMethod(): number {\n    return this._compressionMethod;\n  }\n  public set compressionMethod(v: number) {\n    this._compressionMethod = v;\n  }\n\n  private _filterMethod: number;\n  public get filterMethod(): number {\n    return this._filterMethod;\n  }\n  public set filterMethod(v: number) {\n    this._filterMethod = v;\n  }\n\n  private _interlaceMethod: number;\n  public get interlaceMethod(): number {\n    return this._interlaceMethod;\n  }\n  public set interlaceMethod(v: number) {\n    this._interlaceMethod = v;\n  }\n\n  private _palette?: Uint8Array;\n  public get palette(): Uint8Array | undefined {\n    return this._palette;\n  }\n  public set palette(v: Uint8Array | undefined) {\n    this._palette = v;\n  }\n\n  private _transparency?: Uint8Array;\n  public get transparency(): Uint8Array | undefined {\n    return this._transparency;\n  }\n  public set transparency(v: Uint8Array | undefined) {\n    this._transparency = v;\n  }\n\n  private _gamma?: number;\n  public get gamma(): number | undefined {\n    return this._gamma;\n  }\n  public set gamma(v: number | undefined) {\n    this._gamma = v;\n  }\n\n  private _iccpName = '';\n  public get iccpName(): string {\n    return this._iccpName;\n  }\n  public set iccpName(v: string) {\n    this._iccpName = v;\n  }\n\n  private _iccpCompression = 0;\n  public get iccpCompression(): number {\n    return this._iccpCompression;\n  }\n  public set iccpCompression(v: number) {\n    this._iccpCompression = v;\n  }\n\n  private _iccpData?: Uint8Array;\n  public get iccpData(): Uint8Array | undefined {\n    return this._iccpData;\n  }\n  public set iccpData(v: Uint8Array | undefined) {\n    this._iccpData = v;\n  }\n\n  private _textData: Map<string, string> = new Map<string, string>();\n  public get textData(): Map<string, string> {\n    return this._textData;\n  }\n\n  private _repeat = 0;\n  public get repeat(): number {\n    return this._repeat;\n  }\n  public set repeat(v: number) {\n    this._repeat = v;\n  }\n\n  private readonly _idat: number[] = [];\n  public get idat(): number[] {\n    return this._idat;\n  }\n\n  private readonly _frames: PngFrame[] = [];\n  public get frames(): PngFrame[] {\n    return this._frames;\n  }\n\n  public get isAnimated(): boolean {\n    return this._frames.length > 0;\n  }\n\n  constructor(opt?: PngInfoInitOptions) {\n    this._width = opt?.width ?? 0;\n    this._height = opt?.height ?? 0;\n    this._bits = opt?.bits ?? 0;\n    this._colorType = opt?.colorType;\n    this._compressionMethod = opt?.compressionMethod ?? 0;\n    this._filterMethod = opt?.filterMethod ?? 0;\n    this._interlaceMethod = opt?.interlaceMethod ?? 0;\n  }\n}\n", "/** @format */\n\nexport enum TgaImageType {\n  none,\n  palette,\n  rgb,\n  gray,\n  reserved4,\n  reserved5,\n  reserved6,\n  reserved7,\n  reserved8,\n  paletteRle,\n  rgbRle,\n  grayRle,\n}\n\nexport const TgaImageTypeLength = 12;\n", "/** @format */\n\nimport { Color } from '../../color/color';\nimport { InputBuffer } from '../../common/input-buffer';\nimport { DecodeInfo } from '../decode-info';\nimport { TgaImageType, TgaImageTypeLength } from './tga-image-type';\n\nexport interface TgaInfoInitOptions {\n  width?: number;\n  height?: number;\n  imageOffset?: number;\n  bitsPerPixel?: number;\n}\n\nexport class TgaInfo implements DecodeInfo {\n  /**\n   * The number of frames that can be decoded.\n   */\n  private readonly _numFrames: number = 1;\n  public get numFrames(): number {\n    return this._numFrames;\n  }\n\n  private readonly _backgroundColor: Color | undefined = undefined;\n  public get backgroundColor(): Color | undefined {\n    return this._backgroundColor;\n  }\n\n  private _idLength = 0;\n  public get idLength(): number {\n    return this._idLength;\n  }\n\n  private _colorMapType = 0;\n  public get colorMapType(): number {\n    return this._colorMapType;\n  }\n\n  private _imageType: TgaImageType = TgaImageType.none;\n  public get imageType(): TgaImageType {\n    return this._imageType;\n  }\n\n  private _colorMapOrigin = 0;\n  public get colorMapOrigin(): number {\n    return this._colorMapOrigin;\n  }\n\n  private _colorMapLength = 0;\n  public get colorMapLength(): number {\n    return this._colorMapLength;\n  }\n\n  private _colorMapDepth = 0;\n  public get colorMapDepth(): number {\n    return this._colorMapDepth;\n  }\n\n  private _offsetX = 0;\n  public get offsetX(): number {\n    return this._offsetX;\n  }\n\n  private _offsetY = 0;\n  public get offsetY(): number {\n    return this._offsetY;\n  }\n\n  private _width = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  protected _height = 0;\n  public get height(): number {\n    return this._height;\n  }\n\n  protected _pixelDepth = 0;\n  public get pixelDepth(): number {\n    return this._pixelDepth;\n  }\n\n  protected _flags = 0;\n  public get flags(): number {\n    return this._flags;\n  }\n\n  protected _colorMap: Uint8Array | undefined;\n  public get colorMap(): Uint8Array | undefined {\n    return this._colorMap;\n  }\n  public set colorMap(v: Uint8Array | undefined) {\n    this._colorMap = v;\n  }\n\n  protected _screenOrigin = 0;\n  public get screenOrigin(): number {\n    return this._screenOrigin;\n  }\n\n  /**\n   *  Offset in the input file the image data starts at.\n   */\n  private _imageOffset = 0;\n  public get imageOffset(): number {\n    return this._imageOffset;\n  }\n  public set imageOffset(v: number) {\n    this._imageOffset = v;\n  }\n\n  public get hasColorMap(): boolean {\n    return (\n      this._imageType === TgaImageType.palette ||\n      this._imageType === TgaImageType.paletteRle\n    );\n  }\n\n  public read(header: InputBuffer): void {\n    if (header.length < 18) {\n      return;\n    }\n    // 0\n    this._idLength = header.readByte();\n    // 1\n    this._colorMapType = header.readByte();\n    const it = header.readByte();\n    // 2\n    this._imageType =\n      it < TgaImageTypeLength ? (it as TgaImageType) : TgaImageType.none;\n    // 3\n    this._colorMapOrigin = header.readUint16();\n    // 5\n    this._colorMapLength = header.readUint16();\n    // 7\n    this._colorMapDepth = header.readByte();\n    // 8\n    this._offsetX = header.readUint16();\n    // 10\n    this._offsetY = header.readUint16();\n    // 12\n    this._width = header.readUint16();\n    // 14\n    this._height = header.readUint16();\n    // 16\n    this._pixelDepth = header.readByte();\n    // 17\n    this._flags = header.readByte();\n    this._screenOrigin = (this._flags & 0x30) >> 4;\n  }\n\n  public isValid(): boolean {\n    if (\n      this._pixelDepth !== 8 &&\n      this._pixelDepth !== 16 &&\n      this._pixelDepth !== 24 &&\n      this._pixelDepth !== 32\n    ) {\n      return false;\n    }\n\n    if (this.hasColorMap) {\n      if (this._colorMapLength > 256 || this._colorMapType !== 1) {\n        return false;\n      }\n      if (\n        this._colorMapDepth !== 16 &&\n        this._colorMapDepth !== 24 &&\n        this._colorMapDepth !== 32\n      ) {\n        return false;\n      }\n    } else if (this._colorMapType === 1) {\n      return false;\n    }\n\n    return true;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../common/input-buffer';\nimport { MemoryImage } from '../image/image';\nimport { Palette } from '../image/palette';\nimport { Decoder } from './decoder';\nimport { TgaImageType } from './tga/tga-image-type';\nimport { TgaInfo } from './tga/tga-info';\n\n/**\n * Decode a TGA image. This only supports the 24-bit and 32-bit uncompressed format.\n */\nexport class TgaDecoder implements Decoder {\n  private _input: InputBuffer | undefined = undefined;\n  private _info: TgaInfo | undefined = undefined;\n\n  public get numFrames(): number {\n    return this._info !== undefined ? 1 : 0;\n  }\n\n  private decodeColorMap(colorMap: Uint8Array, palette: Palette): void {\n    if (this._info === undefined || this._input === undefined) {\n      return;\n    }\n\n    const cm = new InputBuffer({\n      buffer: colorMap,\n    });\n\n    if (this._info.colorMapDepth === 16) {\n      const color = this._input.readUint16();\n      const r = (color & 0x7c00) >> 7;\n      const g = (color & 0x3e0) >> 2;\n      const b = (color & 0x1f) << 3;\n      const a = (color & 0x8000) !== 0 ? 0 : 255;\n      for (let i = 0; i < this._info.colorMapLength; ++i) {\n        palette.setRed(i, r);\n        palette.setGreen(i, g);\n        palette.setBlue(i, b);\n        palette.setAlpha(i, a);\n      }\n    } else {\n      const hasAlpha = this._info.colorMapDepth === 32;\n      for (let i = 0; i < this._info.colorMapLength; ++i) {\n        const b = cm.readByte();\n        const g = cm.readByte();\n        const r = cm.readByte();\n        const a = hasAlpha ? cm.readByte() : 255;\n        palette.setRed(i, r);\n        palette.setGreen(i, g);\n        palette.setBlue(i, b);\n        palette.setAlpha(i, a);\n      }\n    }\n  }\n\n  private decodeRle(): MemoryImage | undefined {\n    if (this._info === undefined || this._input === undefined) {\n      return undefined;\n    }\n\n    const bpp = this._info.pixelDepth;\n    const hasAlpha = bpp === 16 || bpp === 32;\n    const image = new MemoryImage({\n      width: this._info.width,\n      height: this._info.height,\n      numChannels: hasAlpha ? 4 : 3,\n      withPalette: this._info.hasColorMap,\n    });\n\n    const rleBit = 0x80;\n    const rleMask = 0x7f;\n\n    if (image.palette !== undefined && this._info.colorMap !== undefined) {\n      this.decodeColorMap(this._info.colorMap, image.palette);\n    }\n\n    const w = image.width;\n    const h = image.height;\n    let y = h - 1;\n    let x = 0;\n    while (!this._input.isEOS && y >= 0) {\n      const c = this._input.readByte();\n      const count = (c & rleMask) + 1;\n\n      if ((c & rleBit) !== 0) {\n        if (bpp === 8) {\n          const r = this._input.readByte();\n          for (let i = 0; i < count; ++i) {\n            image.setPixelR(x++, y, r);\n            if (x >= w) {\n              x = 0;\n              y--;\n              if (y < 0) {\n                break;\n              }\n            }\n          }\n        } else if (bpp === 16) {\n          const color = this._input.readUint16();\n          const r = (color & 0x7c00) >> 7;\n          const g = (color & 0x3e0) >> 2;\n          const b = (color & 0x1f) << 3;\n          const a = (color & 0x8000) !== 0 ? 0 : 255;\n          for (let i = 0; i < count; ++i) {\n            image.setPixelRgba(x++, y, r, g, b, a);\n            if (x >= w) {\n              x = 0;\n              y--;\n              if (y < 0) {\n                break;\n              }\n            }\n          }\n        } else {\n          const b = this._input.readByte();\n          const g = this._input.readByte();\n          const r = this._input.readByte();\n          const a = hasAlpha ? this._input.readByte() : 255;\n          for (let i = 0; i < count; ++i) {\n            image.setPixelRgba(x++, y, r, g, b, a);\n            if (x >= w) {\n              x = 0;\n              y--;\n              if (y < 0) {\n                break;\n              }\n            }\n          }\n        }\n      } else {\n        if (bpp === 8) {\n          for (let i = 0; i < count; ++i) {\n            const r = this._input.readByte();\n            image.setPixelR(x++, y, r);\n            if (x >= w) {\n              x = 0;\n              y--;\n              if (y < 0) {\n                break;\n              }\n            }\n          }\n        } else if (bpp === 16) {\n          for (let i = 0; i < count; ++i) {\n            const color = this._input.readUint16();\n            const r = (color & 0x7c00) >> 7;\n            const g = (color & 0x3e0) >> 2;\n            const b = (color & 0x1f) << 3;\n            const a = (color & 0x8000) !== 0 ? 0 : 255;\n            image.setPixelRgba(x++, y, r, g, b, a);\n            if (this._input.isEOS) {\n              break;\n            }\n            if (x >= w) {\n              x = 0;\n              y--;\n              if (y < 0) {\n                break;\n              }\n            }\n          }\n        } else {\n          for (let i = 0; i < count; ++i) {\n            const b = this._input.readByte();\n            const g = this._input.readByte();\n            const r = this._input.readByte();\n            const a = hasAlpha ? this._input.readByte() : 255;\n            image.setPixelRgba(x++, y, r, g, b, a);\n            if (x >= w) {\n              x = 0;\n              y--;\n              if (y < 0) {\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      if (x >= w) {\n        x = 0;\n        y--;\n        if (y < 0) {\n          break;\n        }\n      }\n    }\n\n    return image;\n  }\n\n  private decodeRgb(): MemoryImage | undefined {\n    if (this._info === undefined || this._input === undefined) {\n      return undefined;\n    }\n\n    this._input.offset = this._info.imageOffset;\n\n    const bpp = this._info.pixelDepth;\n    const hasAlpha =\n      bpp === 16 ||\n      bpp === 32 ||\n      (this._info.hasColorMap &&\n        (this._info.colorMapDepth === 16 || this._info.colorMapDepth === 32));\n\n    const image = new MemoryImage({\n      width: this._info.width,\n      height: this._info.height,\n      numChannels: hasAlpha ? 4 : 3,\n      withPalette: this._info.hasColorMap,\n    });\n\n    if (this._info.hasColorMap) {\n      this.decodeColorMap(this._info.colorMap!, image.palette!);\n    }\n\n    if (bpp === 8) {\n      for (let y = image.height - 1; y >= 0; --y) {\n        for (let x = 0; x < image.width; ++x) {\n          const index = this._input.readByte();\n          image.setPixelR(x, y, index);\n        }\n      }\n    } else if (bpp === 16) {\n      for (let y = image.height - 1; y >= 0; --y) {\n        for (let x = 0; x < image.width; ++x) {\n          const color = this._input.readUint16();\n          const r = (color & 0x7c00) >> 7;\n          const g = (color & 0x3e0) >> 2;\n          const b = (color & 0x1f) << 3;\n          const a = (color & 0x8000) !== 0 ? 0 : 255;\n          image.setPixelRgba(x, y, r, g, b, a);\n        }\n      }\n    } else {\n      for (let y = image.height - 1; y >= 0; --y) {\n        for (let x = 0; x < image.width; ++x) {\n          const b = this._input.readByte();\n          const g = this._input.readByte();\n          const r = this._input.readByte();\n          const a = hasAlpha ? this._input.readByte() : 255;\n          image.setPixelRgba(x, y, r, g, b, a);\n        }\n      }\n    }\n\n    return image;\n  }\n\n  /**\n   * Is the given file a valid TGA image?\n   */\n  public isValidFile(bytes: Uint8Array): boolean {\n    const input = new InputBuffer({\n      buffer: bytes,\n    });\n\n    this._info = new TgaInfo();\n    this._info.read(input);\n    return this._info.isValid();\n  }\n\n  public startDecode(bytes: Uint8Array): TgaInfo | undefined {\n    this._info = new TgaInfo();\n    this._input = new InputBuffer({ buffer: bytes });\n\n    const header = this._input.readBytes(18);\n    this._info.read(header);\n    if (!this._info.isValid()) {\n      return undefined;\n    }\n\n    this._input.skip(this._info.idLength);\n\n    // Decode colormap\n    if (this._info.hasColorMap) {\n      const size = this._info.colorMapLength * (this._info.colorMapDepth >> 3);\n      this._info.colorMap = this._input.readBytes(size).toUint8Array();\n    }\n\n    this._info.imageOffset = this._input.offset;\n\n    return this._info;\n  }\n\n  public decode(bytes: Uint8Array, frame?: number): MemoryImage | undefined {\n    if (this.startDecode(bytes) === undefined) {\n      return undefined;\n    }\n\n    return this.decodeFrame(frame ?? 0);\n  }\n\n  public decodeFrame(_frame: number): MemoryImage | undefined {\n    if (this._info === undefined || this._input === undefined) {\n      return undefined;\n    }\n\n    if (this._info.imageType === TgaImageType.rgb) {\n      return this.decodeRgb();\n    } else if (\n      this._info.imageType === TgaImageType.rgbRle ||\n      this._info.imageType === TgaImageType.paletteRle\n    ) {\n      return this.decodeRle();\n    } else if (this._info.imageType === TgaImageType.palette) {\n      return this.decodeRgb();\n    }\n\n    return undefined;\n  }\n}\n", "/** @format */\n\nimport { OutputBuffer } from '../common/output-buffer';\nimport { MemoryImage } from '../image/image';\nimport { Encoder } from './encoder';\n\n/**\n * Encode a TGA image. This only supports the 24-bit uncompressed format.\n */\nexport class TgaEncoder implements Encoder {\n  private _supportsAnimation = false;\n  public get supportsAnimation(): boolean {\n    return this._supportsAnimation;\n  }\n\n  public encode(image: MemoryImage, _singleFrame = false): Uint8Array {\n    const out = new OutputBuffer({\n      bigEndian: true,\n    });\n\n    const header = new Uint8Array(18);\n    header.fill(0);\n\n    header[2] = 2;\n    header[12] = image.width & 0xff;\n    header[13] = (image.width >> 8) & 0xff;\n    header[14] = image.height & 0xff;\n    header[15] = (image.height >> 8) & 0xff;\n    const nc = image.palette?.numChannels ?? image.numChannels;\n    header[16] = nc === 3 ? 24 : 32;\n\n    out.writeBytes(header);\n\n    if (nc === 4) {\n      for (let y = image.height - 1; y >= 0; --y) {\n        for (let x = 0; x < image.width; ++x) {\n          const c = image.getPixel(x, y);\n          out.writeByte(Math.trunc(c.b));\n          out.writeByte(Math.trunc(c.g));\n          out.writeByte(Math.trunc(c.r));\n          out.writeByte(Math.trunc(c.a));\n        }\n      }\n    } else {\n      for (let y = image.height - 1; y >= 0; --y) {\n        for (let x = 0; x < image.width; ++x) {\n          const c = image.getPixel(x, y);\n          out.writeByte(Math.trunc(c.b));\n          out.writeByte(Math.trunc(c.g));\n          out.writeByte(Math.trunc(c.r));\n        }\n      }\n    }\n\n    return out.getBytes();\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\n\nexport class TiffBitReader {\n  private static readonly _bitMask = [0, 1, 3, 7, 15, 31, 63, 127, 255];\n\n  private _bitBuffer = 0;\n\n  private _bitPosition = 0;\n\n  private _input: InputBuffer;\n\n  constructor(input: InputBuffer) {\n    this._input = input;\n  }\n\n  /**\n   * Read a number of bits from the input stream.\n   */\n  public readBits(numBits: number): number {\n    let nBits = numBits;\n    if (nBits === 0) {\n      return 0;\n    }\n\n    if (this._bitPosition === 0) {\n      this._bitPosition = 8;\n      this._bitBuffer = this._input.readByte();\n    }\n\n    let value = 0;\n\n    while (nBits > this._bitPosition) {\n      value =\n        (value << this._bitPosition) +\n        (this._bitBuffer & TiffBitReader._bitMask[this._bitPosition]);\n      nBits -= this._bitPosition;\n      this._bitPosition = 8;\n      this._bitBuffer = this._input.readByte();\n    }\n\n    if (nBits > 0) {\n      if (this._bitPosition === 0) {\n        this._bitPosition = 8;\n        this._bitBuffer = this._input.readByte();\n      }\n\n      value =\n        (value << nBits) +\n        ((this._bitBuffer >> (this._bitPosition - nBits)) &\n          TiffBitReader._bitMask[nBits]);\n\n      this._bitPosition -= nBits;\n    }\n\n    return value;\n  }\n\n  public readByte() {\n    return this.readBits(8);\n  }\n\n  /**\n   *  Flush the rest of the bits in the buffer so the next read starts at the next byte.\n   */\n  public flushByte() {\n    return (this._bitPosition = 0);\n  }\n}\n", "/** @format */\n\nexport enum TiffCompression {\n  none = 1,\n  ccittRle = 2,\n  ccittFax3 = 3,\n  ccittFax4 = 4,\n  lzw = 5,\n  oldJpeg = 6,\n  jpeg = 7,\n  next = 32766,\n  ccittRlew = 32771,\n  packBits = 32773,\n  thunderScan = 32809,\n  it8ctpad = 32895,\n  tt8lw = 32896,\n  it8mp = 32897,\n  it8bl = 32898,\n  pixarFilm = 32908,\n  pixarLog = 32909,\n  deflate = 32946,\n  zip = 8,\n  dcs = 32947,\n  jbig = 34661,\n  sgiLog = 34676,\n  sgiLog24 = 34677,\n  jp2000 = 34712,\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { LibError } from '../../error/lib-error';\nimport { ExifImageTags } from '../../exif/exif-tag';\nimport { IfdValueType, IfdValueTypeSize } from '../../exif/ifd-value-type';\nimport { IfdAsciiValue } from '../../exif/ifd-value/ifd-ascii-value';\nimport { IfdByteValue } from '../../exif/ifd-value/ifd-byte-value';\nimport { IfdDoubleValue } from '../../exif/ifd-value/ifd-double-value';\nimport { IfdLongValue } from '../../exif/ifd-value/ifd-long-value';\nimport { IfdRationalValue } from '../../exif/ifd-value/ifd-rational-value';\nimport { IfdSByteValue } from '../../exif/ifd-value/ifd-sbyte-value';\nimport { IfdSingleValue } from '../../exif/ifd-value/ifd-single-value';\nimport { IfdSLongValue } from '../../exif/ifd-value/ifd-slong-value';\nimport { IfdSRationalValue } from '../../exif/ifd-value/ifd-srational-value';\nimport { IfdSShortValue } from '../../exif/ifd-value/ifd-sshort-value';\nimport { IfdValue } from '../../exif/ifd-value/ifd-value';\nimport { TiffImage } from './tiff-image';\n\nexport interface TiffEntryInitOptions {\n  tag: number;\n  type: number;\n  count: number;\n  p: InputBuffer;\n  valueOffset: number;\n}\n\nexport class TiffEntry {\n  private _tag: number;\n  public get tag(): number {\n    return this._tag;\n  }\n\n  private _type: IfdValueType;\n  public get type(): IfdValueType {\n    return this._type;\n  }\n\n  private _count: number;\n  public get count(): number {\n    return this._count;\n  }\n\n  private _valueOffset: number;\n  public get valueOffset(): number {\n    return this._valueOffset;\n  }\n\n  private _value: IfdValue | undefined;\n  public get value(): IfdValue | undefined {\n    return this._value;\n  }\n\n  private _p: InputBuffer;\n  public get p(): InputBuffer {\n    return this._p;\n  }\n\n  public get isValid(): boolean {\n    return this._type !== IfdValueType.none;\n  }\n\n  public get typeSize(): number {\n    return this.isValid ? IfdValueTypeSize[this._type] : 0;\n  }\n\n  public get isString(): boolean {\n    return this._type === IfdValueType.ascii;\n  }\n\n  constructor(opt: TiffEntryInitOptions) {\n    this._tag = opt.tag;\n    this._type = opt.type;\n    this._count = opt.count;\n    this._p = opt.p;\n    this._valueOffset = opt.valueOffset;\n  }\n\n  public read(): IfdValue | undefined {\n    if (this._value !== undefined) {\n      return this._value;\n    }\n\n    this._p.offset = this._valueOffset;\n    const data = this.p.readBytes(this._count * this.typeSize);\n    switch (this._type) {\n      case IfdValueType.byte:\n        return (this._value = IfdByteValue.data(data, this._count));\n      case IfdValueType.ascii:\n        return (this._value = IfdAsciiValue.data(data, this._count));\n      case IfdValueType.undefined:\n        return (this._value = IfdByteValue.data(data, this._count));\n      case IfdValueType.short:\n        return (this._value = IfdSShortValue.data(data, this._count));\n      case IfdValueType.long:\n        return (this._value = IfdLongValue.data(data, this._count));\n      case IfdValueType.rational:\n        return (this._value = IfdRationalValue.data(data, this._count));\n      case IfdValueType.single:\n        return (this._value = IfdSingleValue.data(data, this._count));\n      case IfdValueType.double:\n        return (this._value = IfdDoubleValue.data(data, this._count));\n      case IfdValueType.sByte:\n        return (this._value = IfdSByteValue.data(data, this._count));\n      case IfdValueType.sShort:\n        return (this._value = IfdSShortValue.data(data, this._count));\n      case IfdValueType.sLong:\n        return (this._value = IfdSLongValue.data(data, this._count));\n      case IfdValueType.sRational:\n        return (this._value = IfdSRationalValue.data(data, this._count));\n      default:\n      case IfdValueType.none:\n        return undefined;\n    }\n  }\n\n  public toString(): string {\n    const exifTag = ExifImageTags.get(this._tag);\n    if (exifTag !== undefined) {\n      return `${exifTag.name}: ${this._type} ${this._count}`;\n    }\n    return `${this.constructor.name} (<${this._tag}>: ${this._type} ${this._count})`;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { LibError } from '../../error/lib-error';\n\nexport interface TiffFaxDecoderInitOptions {\n  fillOrder: number;\n  width: number;\n  height: number;\n}\n\nexport class TiffFaxDecoder {\n  private static readonly _table1: number[] = [\n    // 0 bits are left in first byte - SHOULD NOT HAPPEN\n    0x00,\n    // 1 bits are left in first byte\n    0x01,\n    // 2 bits are left in first byte\n    0x03,\n    // 3 bits are left in first byte\n    0x07,\n    // 4 bits are left in first byte\n    0x0f,\n    // 5 bits are left in first byte\n    0x1f,\n    // 6 bits are left in first byte\n    0x3f,\n    // 7 bits are left in first byte\n    0x7f,\n    // 8 bits are left in first byte\n    0xff,\n  ];\n\n  private static readonly _table2: number[] = [\n    // 0\n    0x00,\n    // 1\n    0x80,\n    // 2\n    0xc0,\n    // 3\n    0xe0,\n    // 4\n    0xf0,\n    // 5\n    0xf8,\n    // 6\n    0xfc,\n    // 7\n    0xfe,\n    // 8\n    0xff,\n  ];\n\n  /**\n   * Table to be used when **fillOrder** = 2, for flipping bytes.\n   */\n  private static readonly _flipTable: number[] = [\n    0, -128, 64, -64, 32, -96, 96, -32, 16, -112, 80, -48, 48, -80, 112, -16, 8,\n    -120, 72, -56, 40, -88, 104, -24, 24, -104, 88, -40, 56, -72, 120, -8, 4,\n    -124, 68, -60, 36, -92, 100, -28, 20, -108, 84, -44, 52, -76, 116, -12, 12,\n    -116, 76, -52, 44, -84, 108, -20, 28, -100, 92, -36, 60, -68, 124, -4, 2,\n    -126, 66, -62, 34, -94, 98, -30, 18, -110, 82, -46, 50, -78, 114, -14, 10,\n    -118, 74, -54, 42, -86, 106, -22, 26, -102, 90, -38, 58, -70, 122, -6, 6,\n    -122, 70, -58, 38, -90, 102, -26, 22, -106, 86, -42, 54, -74, 118, -10, 14,\n    -114, 78, -50, 46, -82, 110, -18, 30, -98, 94, -34, 62, -66, 126, -2, 1,\n    -127, 65, -63, 33, -95, 97, -31, 17, -111, 81, -47, 49, -79, 113, -15, 9,\n    -119, 73, -55, 41, -87, 105, -23, 25, -103, 89, -39, 57, -71, 121, -7, 5,\n    -123, 69, -59, 37, -91, 101, -27, 21, -107, 85, -43, 53, -75, 117, -11, 13,\n    -115, 77, -51, 45, -83, 109, -19, 29, -99, 93, -35, 61, -67, 125, -3, 3,\n    -125, 67, -61, 35, -93, 99, -29, 19, -109, 83, -45, 51, -77, 115, -13, 11,\n    -117, 75, -53, 43, -85, 107, -21, 27, -101, 91, -37, 59, -69, 123, -5, 7,\n    -121, 71, -57, 39, -89, 103, -25, 23, -105, 87, -41, 55, -73, 119, -9, 15,\n    -113, 79, -49, 47, -81, 111, -17, 31, -97, 95, -33, 63, -65, 127, -1,\n  ];\n\n  /**\n   * The main 10 bit white runs lookup table\n   */\n  private static readonly _white: number[] = [\n    // 0 - 7\n    6430, 6400, 6400, 6400, 3225, 3225, 3225, 3225,\n    // 8 - 15\n    944, 944, 944, 944, 976, 976, 976, 976,\n    // 16 - 23\n    1456, 1456, 1456, 1456, 1488, 1488, 1488, 1488,\n    // 24 - 31\n    718, 718, 718, 718, 718, 718, 718, 718,\n    // 32 - 39\n    750, 750, 750, 750, 750, 750, 750, 750,\n    // 40 - 47\n    1520, 1520, 1520, 1520, 1552, 1552, 1552, 1552,\n    // 48 - 55\n    428, 428, 428, 428, 428, 428, 428, 428,\n    // 56 - 63\n    428, 428, 428, 428, 428, 428, 428, 428,\n    // 64 - 71\n    654, 654, 654, 654, 654, 654, 654, 654,\n    // 72 - 79\n    1072, 1072, 1072, 1072, 1104, 1104, 1104, 1104,\n    // 80 - 87\n    1136, 1136, 1136, 1136, 1168, 1168, 1168, 1168,\n    // 88 - 95\n    1200, 1200, 1200, 1200, 1232, 1232, 1232, 1232,\n    // 96 - 103\n    622, 622, 622, 622, 622, 622, 622, 622,\n    // 104 - 111\n    1008, 1008, 1008, 1008, 1040, 1040, 1040, 1040,\n    // 112 - 119\n    44, 44, 44, 44, 44, 44, 44, 44,\n    // 120 - 127\n    44, 44, 44, 44, 44, 44, 44, 44,\n    // 128 - 135\n    396, 396, 396, 396, 396, 396, 396, 396,\n    // 136 - 143\n    396, 396, 396, 396, 396, 396, 396, 396,\n    // 144 - 151\n    1712, 1712, 1712, 1712, 1744, 1744, 1744, 1744,\n    // 152 - 159\n    846, 846, 846, 846, 846, 846, 846, 846,\n    // 160 - 167\n    1264, 1264, 1264, 1264, 1296, 1296, 1296, 1296,\n    // 168 - 175\n    1328, 1328, 1328, 1328, 1360, 1360, 1360, 1360,\n    // 176 - 183\n    1392, 1392, 1392, 1392, 1424, 1424, 1424, 1424,\n    // 184 - 191\n    686, 686, 686, 686, 686, 686, 686, 686,\n    // 192 - 199\n    910, 910, 910, 910, 910, 910, 910, 910,\n    // 200 - 207\n    1968, 1968, 1968, 1968, 2000, 2000, 2000, 2000,\n    // 208 - 215\n    2032, 2032, 2032, 2032, 16, 16, 16, 16,\n    // 216 - 223\n    10257, 10257, 10257, 10257, 12305, 12305, 12305, 12305,\n    // 224 - 231\n    330, 330, 330, 330, 330, 330, 330, 330,\n    // 232 - 239\n    330, 330, 330, 330, 330, 330, 330, 330,\n    // 240 - 247\n    330, 330, 330, 330, 330, 330, 330, 330,\n    // 248 - 255\n    330, 330, 330, 330, 330, 330, 330, 330,\n    // 256 - 263\n    362, 362, 362, 362, 362, 362, 362, 362,\n    // 264 - 271\n    362, 362, 362, 362, 362, 362, 362, 362,\n    // 272 - 279\n    362, 362, 362, 362, 362, 362, 362, 362,\n    // 280 - 287\n    362, 362, 362, 362, 362, 362, 362, 362,\n    // 288 - 295\n    878, 878, 878, 878, 878, 878, 878, 878,\n    // 296 - 303\n    1904, 1904, 1904, 1904, 1936, 1936, 1936, 1936,\n    // 304 - 311\n    -18413, -18413, -16365, -16365, -14317, -14317, -10221, -10221,\n    // 312 - 319\n    590, 590, 590, 590, 590, 590, 590, 590,\n    // 320 - 327\n    782, 782, 782, 782, 782, 782, 782, 782,\n    // 328 - 335\n    1584, 1584, 1584, 1584, 1616, 1616, 1616, 1616,\n    // 336 - 343\n    1648, 1648, 1648, 1648, 1680, 1680, 1680, 1680,\n    // 344 - 351\n    814, 814, 814, 814, 814, 814, 814, 814,\n    // 352 - 359\n    1776, 1776, 1776, 1776, 1808, 1808, 1808, 1808,\n    // 360 - 367\n    1840, 1840, 1840, 1840, 1872, 1872, 1872, 1872,\n    // 368 - 375\n    6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157,\n    // 376 - 383\n    6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157,\n    // 384 - 391\n    -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275,\n    // 392 - 399\n    -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275,\n    // 400 - 407\n    14353, 14353, 14353, 14353, 16401, 16401, 16401, 16401,\n    // 408 - 415\n    22547, 22547, 24595, 24595, 20497, 20497, 20497, 20497,\n    // 416 - 423\n    18449, 18449, 18449, 18449, 26643, 26643, 28691, 28691,\n    // 424 - 431\n    30739, 30739, -32749, -32749, -30701, -30701, -28653, -28653,\n    // 432 - 439\n    -26605, -26605, -24557, -24557, -22509, -22509, -20461, -20461,\n    // 440 - 447\n    8207, 8207, 8207, 8207, 8207, 8207, 8207, 8207,\n    // 448 - 455\n    72, 72, 72, 72, 72, 72, 72, 72,\n    // 456 - 463\n    72, 72, 72, 72, 72, 72, 72, 72,\n    // 464 - 471\n    72, 72, 72, 72, 72, 72, 72, 72,\n    // 472 - 479\n    72, 72, 72, 72, 72, 72, 72, 72,\n    // 480 - 487\n    72, 72, 72, 72, 72, 72, 72, 72,\n    // 488 - 495\n    72, 72, 72, 72, 72, 72, 72, 72,\n    // 496 - 503\n    72, 72, 72, 72, 72, 72, 72, 72,\n    // 504 - 511\n    72, 72, 72, 72, 72, 72, 72, 72,\n    // 512 - 519\n    104, 104, 104, 104, 104, 104, 104, 104,\n    // 520 - 527\n    104, 104, 104, 104, 104, 104, 104, 104,\n    // 528 - 535\n    104, 104, 104, 104, 104, 104, 104, 104,\n    // 536 - 543\n    104, 104, 104, 104, 104, 104, 104, 104,\n    // 544 - 551\n    104, 104, 104, 104, 104, 104, 104, 104,\n    // 552 - 559\n    104, 104, 104, 104, 104, 104, 104, 104,\n    // 560 - 567\n    104, 104, 104, 104, 104, 104, 104, 104,\n    // 568 - 575\n    104, 104, 104, 104, 104, 104, 104, 104,\n    // 576 - 583\n    4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,\n    // 584 - 591\n    4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,\n    // 592 - 599\n    4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,\n    // 600 - 607\n    4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,\n    // 608 - 615\n    266, 266, 266, 266, 266, 266, 266, 266,\n    // 616 - 623\n    266, 266, 266, 266, 266, 266, 266, 266,\n    // 624 - 631\n    266, 266, 266, 266, 266, 266, 266, 266,\n    // 632 - 639\n    266, 266, 266, 266, 266, 266, 266, 266,\n    // 640 - 647\n    298, 298, 298, 298, 298, 298, 298, 298,\n    // 648 - 655\n    298, 298, 298, 298, 298, 298, 298, 298,\n    // 656 - 663\n    298, 298, 298, 298, 298, 298, 298, 298,\n    // 664 - 671\n    298, 298, 298, 298, 298, 298, 298, 298,\n    // 672 - 679\n    524, 524, 524, 524, 524, 524, 524, 524,\n    // 680 - 687\n    524, 524, 524, 524, 524, 524, 524, 524,\n    // 688 - 695\n    556, 556, 556, 556, 556, 556, 556, 556,\n    // 696 - 703\n    556, 556, 556, 556, 556, 556, 556, 556,\n    // 704 - 711\n    136, 136, 136, 136, 136, 136, 136, 136,\n    // 712 - 719\n    136, 136, 136, 136, 136, 136, 136, 136,\n    // 720 - 727\n    136, 136, 136, 136, 136, 136, 136, 136,\n    // 728 - 735\n    136, 136, 136, 136, 136, 136, 136, 136,\n    // 736 - 743\n    136, 136, 136, 136, 136, 136, 136, 136,\n    // 744 - 751\n    136, 136, 136, 136, 136, 136, 136, 136,\n    // 752 - 759\n    136, 136, 136, 136, 136, 136, 136, 136,\n    // 760 - 767\n    136, 136, 136, 136, 136, 136, 136, 136,\n    // 768 - 775\n    168, 168, 168, 168, 168, 168, 168, 168,\n    // 776 - 783\n    168, 168, 168, 168, 168, 168, 168, 168,\n    // 784 - 791\n    168, 168, 168, 168, 168, 168, 168, 168,\n    // 792 - 799\n    168, 168, 168, 168, 168, 168, 168, 168,\n    // 800 - 807\n    168, 168, 168, 168, 168, 168, 168, 168,\n    // 808 - 815\n    168, 168, 168, 168, 168, 168, 168, 168,\n    // 816 - 823\n    168, 168, 168, 168, 168, 168, 168, 168,\n    // 824 - 831\n    168, 168, 168, 168, 168, 168, 168, 168,\n    // 832 - 839\n    460, 460, 460, 460, 460, 460, 460, 460,\n    // 840 - 847\n    460, 460, 460, 460, 460, 460, 460, 460,\n    // 848 - 855\n    492, 492, 492, 492, 492, 492, 492, 492,\n    // 856 - 863\n    492, 492, 492, 492, 492, 492, 492, 492,\n    // 864 - 871\n    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,\n    // 872 - 879\n    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,\n    // 880 - 887\n    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,\n    // 888 - 895\n    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,\n    // 896 - 903\n    200, 200, 200, 200, 200, 200, 200, 200,\n    // 904 - 911\n    200, 200, 200, 200, 200, 200, 200, 200,\n    // 912 - 919\n    200, 200, 200, 200, 200, 200, 200, 200,\n    // 920 - 927\n    200, 200, 200, 200, 200, 200, 200, 200,\n    // 928 - 935\n    200, 200, 200, 200, 200, 200, 200, 200,\n    // 936 - 943\n    200, 200, 200, 200, 200, 200, 200, 200,\n    // 944 - 951\n    200, 200, 200, 200, 200, 200, 200, 200,\n    // 952 - 959\n    200, 200, 200, 200, 200, 200, 200, 200,\n    // 960 - 967\n    232, 232, 232, 232, 232, 232, 232, 232,\n    // 968 - 975\n    232, 232, 232, 232, 232, 232, 232, 232,\n    // 976 - 983\n    232, 232, 232, 232, 232, 232, 232, 232,\n    // 984 - 991\n    232, 232, 232, 232, 232, 232, 232, 232,\n    // 992 - 999\n    232, 232, 232, 232, 232, 232, 232, 232,\n    // 1000 - 1007\n    232, 232, 232, 232, 232, 232, 232, 232,\n    // 1008 - 1015\n    232, 232, 232, 232, 232, 232, 232, 232,\n    // 1016 - 1023\n    232, 232, 232, 232, 232, 232, 232, 232,\n  ];\n\n  /**\n   * Additional make up codes for both White and Black runs\n   */\n  private static readonly _additionalMakeup: number[] = [\n    28679, 28679, 31752, -32759, -31735, -30711, -29687, -28663, 29703, 29703,\n    30727, 30727, -27639, -26615, -25591, -24567,\n  ];\n\n  /**\n   * Initial black run look up table, uses the first 4 bits of a code\n   */\n  private static readonly _initBlack: number[] = [\n    // 0 - 7\n    3226, 6412, 200, 168, 38, 38, 134, 134,\n    // 8 - 15\n    100, 100, 100, 100, 68, 68, 68, 68,\n  ];\n\n  private static readonly _twoBitBlack: number[] = [292, 260, 226, 226];\n\n  /**\n   * Main black run table, using the last 9 bits of possible 13 bit code\n   */\n  private static readonly _black: number[] = [\n    // 0 - 7\n    62, 62, 30, 30, 0, 0, 0, 0,\n    // 8 - 15\n    0, 0, 0, 0, 0, 0, 0, 0,\n    // 16 - 23\n    0, 0, 0, 0, 0, 0, 0, 0,\n    // 24 - 31\n    0, 0, 0, 0, 0, 0, 0, 0,\n    // 32 - 39\n    3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225,\n    // 40 - 47\n    3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225,\n    // 48 - 55\n    3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225,\n    // 56 - 63\n    3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225,\n    // 64 - 71\n    588, 588, 588, 588, 588, 588, 588, 588,\n    // 72 - 79\n    1680, 1680, 20499, 22547, 24595, 26643, 1776, 1776,\n    // 80 - 87\n    1808, 1808, -24557, -22509, -20461, -18413, 1904, 1904,\n    // 88 - 95\n    1936, 1936, -16365, -14317, 782, 782, 782, 782,\n    // 96 - 103\n    814, 814, 814, 814, -12269, -10221, 10257, 10257,\n    // 104 - 111\n    12305, 12305, 14353, 14353, 16403, 18451, 1712, 1712,\n    // 112 - 119\n    1744, 1744, 28691, 30739, -32749, -30701, -28653, -26605,\n    // 120 - 127\n    2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,\n    // 128 - 135\n    424, 424, 424, 424, 424, 424, 424, 424,\n    // 136 - 143\n    424, 424, 424, 424, 424, 424, 424, 424,\n    // 144 - 151\n    424, 424, 424, 424, 424, 424, 424, 424,\n    // 152 - 159\n    424, 424, 424, 424, 424, 424, 424, 424,\n    // 160 - 167\n    750, 750, 750, 750, 1616, 1616, 1648, 1648,\n    // 168 - 175\n    1424, 1424, 1456, 1456, 1488, 1488, 1520, 1520,\n    // 176 - 183\n    1840, 1840, 1872, 1872, 1968, 1968, 8209, 8209,\n    // 184 - 191\n    524, 524, 524, 524, 524, 524, 524, 524,\n    // 192 - 199\n    556, 556, 556, 556, 556, 556, 556, 556,\n    // 200 - 207\n    1552, 1552, 1584, 1584, 2000, 2000, 2032, 2032,\n    // 208 - 215\n    976, 976, 1008, 1008, 1040, 1040, 1072, 1072,\n    // 216 - 223\n    1296, 1296, 1328, 1328, 718, 718, 718, 718,\n    // 224 - 231\n    456, 456, 456, 456, 456, 456, 456, 456,\n    // 232 - 239\n    456, 456, 456, 456, 456, 456, 456, 456,\n    // 240 - 247\n    456, 456, 456, 456, 456, 456, 456, 456,\n    // 248 - 255\n    456, 456, 456, 456, 456, 456, 456, 456,\n    // 256 - 263\n    326, 326, 326, 326, 326, 326, 326, 326,\n    // 264 - 271\n    326, 326, 326, 326, 326, 326, 326, 326,\n    // 272 - 279\n    326, 326, 326, 326, 326, 326, 326, 326,\n    // 280 - 287\n    326, 326, 326, 326, 326, 326, 326, 326,\n    // 288 - 295\n    326, 326, 326, 326, 326, 326, 326, 326,\n    // 296 - 303\n    326, 326, 326, 326, 326, 326, 326, 326,\n    // 304 - 311\n    326, 326, 326, 326, 326, 326, 326, 326,\n    // 312 - 319\n    326, 326, 326, 326, 326, 326, 326, 326,\n    // 320 - 327\n    358, 358, 358, 358, 358, 358, 358, 358,\n    // 328 - 335\n    358, 358, 358, 358, 358, 358, 358, 358,\n    // 336 - 343\n    358, 358, 358, 358, 358, 358, 358, 358,\n    // 344 - 351\n    358, 358, 358, 358, 358, 358, 358, 358,\n    // 352 - 359\n    358, 358, 358, 358, 358, 358, 358, 358,\n    // 360 - 367\n    358, 358, 358, 358, 358, 358, 358, 358,\n    // 368 - 375\n    358, 358, 358, 358, 358, 358, 358, 358,\n    // 376 - 383\n    358, 358, 358, 358, 358, 358, 358, 358,\n    // 384 - 391\n    490, 490, 490, 490, 490, 490, 490, 490,\n    // 392 - 399\n    490, 490, 490, 490, 490, 490, 490, 490,\n    // 400 - 407\n    4113, 4113, 6161, 6161, 848, 848, 880, 880,\n    // 408 - 415\n    912, 912, 944, 944, 622, 622, 622, 622,\n    // 416 - 423\n    654, 654, 654, 654, 1104, 1104, 1136, 1136,\n    // 424 - 431\n    1168, 1168, 1200, 1200, 1232, 1232, 1264, 1264,\n    // 432 - 439\n    686, 686, 686, 686, 1360, 1360, 1392, 1392,\n    // 440 - 447\n    12, 12, 12, 12, 12, 12, 12, 12,\n    // 448 - 455\n    390, 390, 390, 390, 390, 390, 390, 390,\n    // 456 - 463\n    390, 390, 390, 390, 390, 390, 390, 390,\n    // 464 - 471\n    390, 390, 390, 390, 390, 390, 390, 390,\n    // 472 - 479\n    390, 390, 390, 390, 390, 390, 390, 390,\n    // 480 - 487\n    390, 390, 390, 390, 390, 390, 390, 390,\n    // 488 - 495\n    390, 390, 390, 390, 390, 390, 390, 390,\n    // 496 - 503\n    390, 390, 390, 390, 390, 390, 390, 390,\n    // 504 - 511\n    390, 390, 390, 390, 390, 390, 390, 390,\n  ];\n\n  private static readonly _twoDCodes: number[] = [\n    // 0 - 7\n    80, 88, 23, 71, 30, 30, 62, 62,\n    // 8 - 15\n    4, 4, 4, 4, 4, 4, 4, 4,\n    // 16 - 23\n    11, 11, 11, 11, 11, 11, 11, 11,\n    // 24 - 31\n    11, 11, 11, 11, 11, 11, 11, 11,\n    // 32 - 39\n    35, 35, 35, 35, 35, 35, 35, 35,\n    // 40 - 47\n    35, 35, 35, 35, 35, 35, 35, 35,\n    // 48 - 55\n    51, 51, 51, 51, 51, 51, 51, 51,\n    // 56 - 63\n    51, 51, 51, 51, 51, 51, 51, 51,\n    // 64 - 71\n    41, 41, 41, 41, 41, 41, 41, 41,\n    // 72 - 79\n    41, 41, 41, 41, 41, 41, 41, 41,\n    // 80 - 87\n    41, 41, 41, 41, 41, 41, 41, 41,\n    // 88 - 95\n    41, 41, 41, 41, 41, 41, 41, 41,\n    // 96 - 103\n    41, 41, 41, 41, 41, 41, 41, 41,\n    // 104 - 111\n    41, 41, 41, 41, 41, 41, 41, 41,\n    // 112 - 119\n    41, 41, 41, 41, 41, 41, 41, 41,\n    // 120 - 127\n    41, 41, 41, 41, 41, 41, 41, 41,\n  ];\n\n  private _width: number;\n  public get width(): number {\n    return this._width;\n  }\n\n  private _height: number;\n  public get height(): number {\n    return this._height;\n  }\n\n  private _fillOrder: number;\n  public get fillOrder(): number {\n    return this._fillOrder;\n  }\n\n  // Data structures needed to store changing elements for the previous\n  // and the current scanline\n  private _changingElemSize = 0;\n  private _prevChangingElements?: Array<number>;\n  private _currChangingElements?: Array<number>;\n  private _data!: InputBuffer;\n  private _bitPointer = 0;\n  private _bytePointer = 0;\n\n  // Element at which to start search in getNextChangingElement\n  private _lastChangingElement = 0;\n  private _compression = 2;\n\n  // Variables set by T4Options\n  private _uncompressedMode = 0;\n  private _fillBits = 0;\n  private _oneD = 0;\n\n  constructor(opt: TiffFaxDecoderInitOptions) {\n    this._fillOrder = opt.fillOrder;\n    this._width = opt.width;\n    this._height = opt.height;\n    this._prevChangingElements = new Array<number>(this._width);\n    this._prevChangingElements.fill(0);\n    this._currChangingElements = new Array<number>(this._width);\n    this._currChangingElements.fill(0);\n  }\n\n  private nextNBits(bitsToGet: number): number {\n    let b = 0;\n    let next = 0;\n    let next2next = 0;\n    const l = this._data.length - 1;\n    const bp = this._bytePointer;\n\n    if (this._fillOrder === 1) {\n      b = this._data.getByte(bp);\n\n      if (bp === l) {\n        next = 0x00;\n        next2next = 0x00;\n      } else if (bp + 1 === l) {\n        next = this._data.getByte(bp + 1);\n        next2next = 0x00;\n      } else {\n        next = this._data.getByte(bp + 1);\n        next2next = this._data.getByte(bp + 2);\n      }\n    } else if (this._fillOrder === 2) {\n      b = TiffFaxDecoder._flipTable[this._data.getByte(bp) & 0xff];\n\n      if (bp === l) {\n        next = 0x00;\n        next2next = 0x00;\n      } else if (bp + 1 === l) {\n        next = TiffFaxDecoder._flipTable[this._data.getByte(bp + 1) & 0xff];\n        next2next = 0x00;\n      } else {\n        next = TiffFaxDecoder._flipTable[this._data.getByte(bp + 1) & 0xff];\n        next2next =\n          TiffFaxDecoder._flipTable[this._data.getByte(bp + 2) & 0xff];\n      }\n    } else {\n      throw new LibError('TIFFFaxDecoder7');\n    }\n\n    const bitsLeft = 8 - this._bitPointer;\n    let bitsFromNextByte = bitsToGet - bitsLeft;\n    let bitsFromNext2NextByte = 0;\n    if (bitsFromNextByte > 8) {\n      bitsFromNext2NextByte = bitsFromNextByte - 8;\n      bitsFromNextByte = 8;\n    }\n\n    this._bytePointer = this._bytePointer! + 1;\n\n    const i1 = (b & TiffFaxDecoder._table1[bitsLeft]) << (bitsToGet - bitsLeft);\n    let i2 =\n      (next & TiffFaxDecoder._table2[bitsFromNextByte]) >>\n      (8 - bitsFromNextByte);\n\n    let i3 = 0;\n    if (bitsFromNext2NextByte !== 0) {\n      i2 <<= bitsFromNext2NextByte;\n      i3 =\n        (next2next & TiffFaxDecoder._table2[bitsFromNext2NextByte]) >>\n        (8 - bitsFromNext2NextByte);\n      i2 |= i3;\n      this._bytePointer += 1;\n      this._bitPointer = bitsFromNext2NextByte;\n    } else {\n      if (bitsFromNextByte === 8) {\n        this._bitPointer = 0;\n        this._bytePointer += 1;\n      } else {\n        this._bitPointer = bitsFromNextByte;\n      }\n    }\n\n    return i1 | i2;\n  }\n\n  private nextLesserThan8Bits(bitsToGet: number): number {\n    let b = 0;\n    let next = 0;\n    const l = this._data.length - 1;\n    const bp = this._bytePointer;\n\n    if (this._fillOrder === 1) {\n      b = this._data.getByte(bp);\n      if (bp === l) {\n        next = 0x00;\n      } else {\n        next = this._data.getByte(bp + 1);\n      }\n    } else if (this._fillOrder === 2) {\n      b = TiffFaxDecoder._flipTable[this._data.getByte(bp) & 0xff];\n      if (bp === l) {\n        next = 0x00;\n      } else {\n        next = TiffFaxDecoder._flipTable[this._data.getByte(bp + 1) & 0xff];\n      }\n    } else {\n      throw new LibError('TIFFFaxDecoder7');\n    }\n\n    const bitsLeft = 8 - this._bitPointer;\n    const bitsFromNextByte = bitsToGet - bitsLeft;\n\n    const shift = bitsLeft - bitsToGet;\n    let i1 = 0;\n    let i2 = 0;\n    if (shift >= 0) {\n      i1 = (b & TiffFaxDecoder._table1[bitsLeft]) >> shift;\n      this._bitPointer += bitsToGet;\n      if (this._bitPointer === 8) {\n        this._bitPointer = 0;\n        this._bytePointer += 1;\n      }\n    } else {\n      i1 = (b & TiffFaxDecoder._table1[bitsLeft]) << -shift;\n      i2 =\n        (next & TiffFaxDecoder._table2[bitsFromNextByte]) >>\n        (8 - bitsFromNextByte);\n\n      i1 |= i2;\n      this._bytePointer += 1;\n      this._bitPointer = bitsFromNextByte;\n    }\n\n    return i1;\n  }\n\n  /**\n   * Move pointer backwards by given amount of bits\n   */\n  private updatePointer(bitsToMoveBack: number): void {\n    const i = this._bitPointer - bitsToMoveBack;\n\n    if (i < 0) {\n      this._bytePointer -= 1;\n      this._bitPointer = 8 + i;\n    } else {\n      this._bitPointer = i;\n    }\n  }\n\n  /**\n   * Move to the next byte boundary\n   */\n  private advancePointer(): boolean {\n    if (this._bitPointer !== 0) {\n      this._bytePointer += 1;\n      this._bitPointer = 0;\n    }\n\n    return true;\n  }\n\n  private setToBlack(\n    buffer: InputBuffer,\n    lineOffset: number,\n    bitOffset: number,\n    numBits: number\n  ): void {\n    let bitNum = 8 * lineOffset + bitOffset;\n    const lastBit = bitNum + numBits;\n\n    let byteNum = bitNum >> 3;\n\n    // Handle bits in first byte\n    const shift = bitNum & 0x7;\n    if (shift > 0) {\n      let maskVal = 1 << (7 - shift);\n      let val = buffer.getByte(byteNum);\n      while (maskVal > 0 && bitNum < lastBit) {\n        val |= maskVal;\n        maskVal >>= 1;\n        ++bitNum;\n      }\n      buffer.setByte(byteNum, val);\n    }\n\n    // Fill in 8 bits at a time\n    byteNum = bitNum >> 3;\n    while (bitNum < lastBit - 7) {\n      buffer.setByte(byteNum++, 255);\n      bitNum += 8;\n    }\n\n    // Fill in remaining bits\n    while (bitNum < lastBit) {\n      byteNum = bitNum >> 3;\n      buffer.setByte(\n        byteNum,\n        buffer.getByte(byteNum) | (1 << (7 - (bitNum & 0x7)))\n      );\n      ++bitNum;\n    }\n  }\n\n  private decodeNextScanline(\n    buffer: InputBuffer,\n    lineOffset: number,\n    bitOffset: number\n  ): void {\n    let offset = bitOffset;\n    let bits = 0;\n    let code = 0;\n    let isT = 0;\n    let current = 0;\n    let entry = 0;\n    let twoBits = 0;\n    let isWhite = true;\n\n    // Initialize starting of the changing elements array\n    this._changingElemSize = 0;\n\n    // While scanline not complete\n    while (offset < this._width) {\n      while (isWhite) {\n        // White run\n        current = this.nextNBits(10);\n        entry = TiffFaxDecoder._white[current];\n\n        // Get the 3 fields from the entry\n        isT = entry & 0x0001;\n        bits = (entry >> 1) & 0x0f;\n\n        if (bits === 12) {\n          // Additional Make up code\n          // Get the next 2 bits\n          twoBits = this.nextLesserThan8Bits(2);\n          // Consolidate the 2 bits and last 2 bits into 4 bits\n          current = ((current << 2) & 0x000c) | twoBits;\n          entry = TiffFaxDecoder._additionalMakeup[current];\n          // 3 bits 0000 0111\n          bits = (entry >> 1) & 0x07;\n          // 12 bits\n          code = (entry >> 4) & 0x0fff;\n          // Skip white run\n          offset += code;\n\n          this.updatePointer(4 - bits);\n        } else if (bits === 0) {\n          // ERROR\n          throw new LibError('TIFFFaxDecoder0');\n        } else if (bits === 15) {\n          // EOL\n          throw new LibError('TIFFFaxDecoder1');\n        } else {\n          // 11 bits - 0000 0111 1111 1111 = 0x07ff\n          code = (entry >> 5) & 0x07ff;\n          offset += code;\n\n          this.updatePointer(10 - bits);\n          if (isT === 0) {\n            isWhite = false;\n            this._currChangingElements![this._changingElemSize++] = offset;\n          }\n        }\n      }\n\n      // Check whether this run completed one width, if so\n      // advance to next byte boundary for compression = 2.\n      if (offset === this._width) {\n        if (this._compression === 2) {\n          this.advancePointer();\n        }\n        break;\n      }\n\n      while (isWhite === false) {\n        // Black run\n        current = this.nextLesserThan8Bits(4);\n        entry = TiffFaxDecoder._initBlack[current];\n\n        // Get the 3 fields from the entry\n        isT = entry & 0x0001;\n        bits = (entry >> 1) & 0x000f;\n        code = (entry >> 5) & 0x07ff;\n\n        if (code === 100) {\n          current = this.nextNBits(9);\n          entry = TiffFaxDecoder._black[current];\n\n          // Get the 3 fields from the entry\n          isT = entry & 0x0001;\n          bits = (entry >> 1) & 0x000f;\n          code = (entry >> 5) & 0x07ff;\n\n          if (bits === 12) {\n            // Additional makeup codes\n            this.updatePointer(5);\n            current = this.nextLesserThan8Bits(4);\n            entry = TiffFaxDecoder._additionalMakeup[current];\n            // 3 bits 0000 0111\n            bits = (entry >> 1) & 0x07;\n            // 12 bits\n            code = (entry >> 4) & 0x0fff;\n\n            this.setToBlack(buffer, lineOffset, offset, code);\n            offset += code;\n\n            this.updatePointer(4 - bits);\n          } else if (bits === 15) {\n            // EOL code\n            throw new LibError('TIFFFaxDecoder2');\n          } else {\n            this.setToBlack(buffer, lineOffset, offset, code);\n            offset += code;\n\n            this.updatePointer(9 - bits);\n            if (isT === 0) {\n              isWhite = true;\n              this._currChangingElements![this._changingElemSize++] = offset;\n            }\n          }\n        } else if (code === 200) {\n          // Is a Terminating code\n          current = this.nextLesserThan8Bits(2);\n          entry = TiffFaxDecoder._twoBitBlack[current];\n          code = (entry >> 5) & 0x07ff;\n          bits = (entry >> 1) & 0x0f;\n\n          this.setToBlack(buffer, lineOffset, offset, code);\n          offset += code;\n\n          this.updatePointer(2 - bits);\n          isWhite = true;\n          this._currChangingElements![this._changingElemSize++] = offset;\n        } else {\n          // Is a Terminating code\n          this.setToBlack(buffer, lineOffset, offset, code);\n          offset += code;\n\n          this.updatePointer(4 - bits);\n          isWhite = true;\n          this._currChangingElements![this._changingElemSize++] = offset;\n        }\n      }\n\n      // Check whether this run completed one width\n      if (offset === this._width) {\n        if (this._compression === 2) {\n          this.advancePointer();\n        }\n        break;\n      }\n    }\n\n    this._currChangingElements![this._changingElemSize++] = offset;\n  }\n\n  private readEOL(): number {\n    if (this._fillBits === 0) {\n      if (this.nextNBits(12) !== 1) {\n        throw new LibError('TIFFFaxDecoder6');\n      }\n    } else if (this._fillBits === 1) {\n      // First EOL code word xxxx 0000 0000 0001 will occur\n      // As many fill bits will be present as required to make\n      // the EOL code of 12 bits end on a byte boundary.\n      const bitsLeft = 8 - this._bitPointer;\n\n      if (this.nextNBits(bitsLeft) !== 0) {\n        throw new LibError('TIFFFaxDecoder8');\n      }\n\n      // If the number of bitsLeft is less than 8, then to have a 12\n      // bit EOL sequence, two more bytes are certainly going to be\n      // required. The first of them has to be all zeros, so ensure\n      // that.\n      if (bitsLeft < 4) {\n        if (this.nextNBits(8) !== 0) {\n          throw new LibError('TIFFFaxDecoder8');\n        }\n      }\n\n      // There might be a random number of fill bytes with 0s, so\n      // loop till the EOL of 0000 0001 is found, as long as all\n      // the bytes preceding it are 0's.\n      let n = 0;\n      while ((n = this.nextNBits(8)) !== 1) {\n        // If not all zeros\n        if (n !== 0) {\n          throw new LibError('TIFFFaxDecoder8');\n        }\n      }\n    }\n\n    // If one dimensional encoding mode, then always return 1\n    if (this._oneD === 0) {\n      return 1;\n    } else {\n      // Otherwise for 2D encoding mode,\n      // The next one bit signifies 1D/2D encoding of next line.\n      return this.nextLesserThan8Bits(1);\n    }\n  }\n\n  private getNextChangingElement(\n    a0: number | undefined,\n    isWhite: boolean,\n    ret: Array<number | undefined>\n  ): void {\n    // Local copies of instance variables\n    const pce = this._prevChangingElements;\n    const ces = this._changingElemSize;\n\n    // If the previous match was at an odd element, we still\n    // have to search the preceeding element.\n    // int start = lastChangingElement & ~0x1;\n    let start =\n      this._lastChangingElement > 0 ? this._lastChangingElement - 1 : 0;\n    if (isWhite) {\n      // Search even numbered elements\n      start &= ~0x1;\n    } else {\n      // Search odd numbered elements\n      start |= 0x1;\n    }\n\n    let i = start;\n    for (; i < ces; i += 2) {\n      const temp = pce![i]!;\n      if (temp > a0!) {\n        this._lastChangingElement = i;\n        ret[0] = temp;\n        break;\n      }\n    }\n\n    if (i + 1 < ces) {\n      ret[1] = pce![i + 1];\n    }\n  }\n\n  /**\n   * Returns run length\n   */\n  private decodeWhiteCodeWord(): number {\n    let current = 0;\n    let entry = 0;\n    let bits = 0;\n    let isT = 0;\n    let twoBits = 0;\n    let code = -1;\n    let runLength = 0;\n    let isWhite = true;\n\n    while (isWhite) {\n      current = this.nextNBits(10);\n      entry = TiffFaxDecoder._white[current];\n\n      // Get the 3 fields from the entry\n      isT = entry & 0x0001;\n      bits = (entry >> 1) & 0x0f;\n\n      if (bits === 12) {\n        // Additional Make up code\n        // Get the next 2 bits\n        twoBits = this.nextLesserThan8Bits(2);\n        // Consolidate the 2 new bits and last 2 bits into 4 bits\n        current = ((current << 2) & 0x000c) | twoBits;\n        entry = TiffFaxDecoder._additionalMakeup[current];\n        // 3 bits 0000 0111\n        bits = (entry >> 1) & 0x07;\n        // 12 bits\n        code = (entry >> 4) & 0x0fff;\n        runLength += code;\n        this.updatePointer(4 - bits);\n      } else if (bits === 0) {\n        // ERROR\n        throw new LibError('TIFFFaxDecoder0');\n      } else if (bits === 15) {\n        // EOL\n        throw new LibError('TIFFFaxDecoder1');\n      } else {\n        // 11 bits - 0000 0111 1111 1111 = 0x07ff\n        code = (entry >> 5) & 0x07ff;\n        runLength += code;\n        this.updatePointer(10 - bits);\n        if (isT === 0) {\n          isWhite = false;\n        }\n      }\n    }\n\n    return runLength;\n  }\n\n  /**\n   * Returns run length\n   */\n  private decodeBlackCodeWord() {\n    let current = 0;\n    let entry = 0;\n    let bits = 0;\n    let isT = 0;\n    let code = -1;\n    let runLength = 0;\n    let isWhite = false;\n\n    while (!isWhite) {\n      current = this.nextLesserThan8Bits(4);\n      entry = TiffFaxDecoder._initBlack[current];\n\n      // Get the 3 fields from the entry\n      isT = entry & 0x0001;\n      bits = (entry >> 1) & 0x000f;\n      code = (entry >> 5) & 0x07ff;\n\n      if (code === 100) {\n        current = this.nextNBits(9);\n        entry = TiffFaxDecoder._black[current];\n\n        // Get the 3 fields from the entry\n        isT = entry & 0x0001;\n        bits = (entry >> 1) & 0x000f;\n        code = (entry >> 5) & 0x07ff;\n\n        if (bits === 12) {\n          // Additional makeup codes\n          this.updatePointer(5);\n          current = this.nextLesserThan8Bits(4);\n          entry = TiffFaxDecoder._additionalMakeup[current];\n          // 3 bits 0000 0111\n          bits = (entry >> 1) & 0x07;\n          // 12 bits\n          code = (entry >> 4) & 0x0fff;\n          runLength += code;\n\n          this.updatePointer(4 - bits);\n        } else if (bits === 15) {\n          // EOL code\n          throw new LibError('TIFFFaxDecoder2');\n        } else {\n          runLength += code;\n          this.updatePointer(9 - bits);\n          if (isT === 0) {\n            isWhite = true;\n          }\n        }\n      } else if (code === 200) {\n        // Is a Terminating code\n        current = this.nextLesserThan8Bits(2);\n        entry = TiffFaxDecoder._twoBitBlack[current];\n        code = (entry >> 5) & 0x07ff;\n        runLength += code;\n        bits = (entry >> 1) & 0x0f;\n        this.updatePointer(2 - bits);\n        isWhite = true;\n      } else {\n        // Is a Terminating code\n        runLength += code;\n        this.updatePointer(4 - bits);\n        isWhite = true;\n      }\n    }\n\n    return runLength;\n  }\n\n  /**\n   * One-dimensional decoding methods\n   */\n  public decode1D(\n    out: InputBuffer,\n    compData: InputBuffer,\n    startX: number,\n    height: number\n  ): void {\n    this._data = compData;\n    this._bitPointer = 0;\n    this._bytePointer = 0;\n\n    let lineOffset = 0;\n    const scanlineStride = Math.trunc((this._width + 7) / 8);\n\n    for (let i = 0; i < height; i++) {\n      this.decodeNextScanline(out, lineOffset, startX);\n      lineOffset += scanlineStride;\n    }\n  }\n\n  /**\n   * Two-dimensional decoding methods\n   */\n  public decode2D(\n    out: InputBuffer,\n    compData: InputBuffer,\n    startX: number,\n    height: number,\n    tiffT4Options: number\n  ): void {\n    this._data = compData;\n    this._compression = 3;\n\n    this._bitPointer = 0;\n    this._bytePointer = 0;\n\n    const scanlineStride = Math.trunc((this._width + 7) / 8);\n\n    let a0 = 0;\n    let a1 = 0;\n    let entry = 0;\n    let code = 0;\n    let bits = 0;\n    let isWhite = false;\n    let currIndex = 0;\n    let temp: Array<number> | undefined = undefined;\n\n    const b = new Array<number>(2);\n    b.fill(0);\n\n    // fillBits - dealt with this in readEOL\n    // 1D/2D encoding - dealt with this in readEOL\n\n    // uncompressedMode - haven't dealt with this yet.\n    this._oneD = tiffT4Options & 0x01;\n    this._uncompressedMode = (tiffT4Options & 0x02) >> 1;\n    this._fillBits = (tiffT4Options & 0x04) >> 2;\n\n    // The data must start with an EOL code\n    if (this.readEOL() !== 1) {\n      throw new LibError('TIFFFaxDecoder3');\n    }\n\n    let lineOffset = 0;\n    let bitOffset = 0;\n\n    // Then the 1D encoded scanline data will occur, changing elements\n    // array gets set.\n    this.decodeNextScanline(out, lineOffset, startX);\n    lineOffset += scanlineStride;\n\n    for (let lines = 1; lines < height; lines++) {\n      // Every line must begin with an EOL followed by a bit which\n      // indicates whether the following scanline is 1D or 2D encoded.\n      if (this.readEOL() === 0) {\n        // 2D encoded scanline follows\n\n        // Initialize previous scanlines changing elements, and\n        // initialize current scanline's changing elements array\n        temp = this._prevChangingElements;\n        this._prevChangingElements = this._currChangingElements;\n        this._currChangingElements = temp;\n        currIndex = 0;\n\n        // a0 has to be set just before the start of this scanline.\n        a0 = -1;\n        isWhite = true;\n        bitOffset = startX;\n\n        this._lastChangingElement = 0;\n\n        while (bitOffset < this._width) {\n          // Get the next changing element\n          this.getNextChangingElement(a0, isWhite, b);\n\n          const b1 = b[0];\n          const b2 = b[1];\n\n          // Get the next seven bits\n          entry = this.nextLesserThan8Bits(7);\n\n          // Run these through the 2DCodes table\n          entry = TiffFaxDecoder._twoDCodes[entry] & 0xff;\n\n          // Get the code and the number of bits used up\n          code = (entry & 0x78) >> 3;\n          bits = entry & 0x07;\n\n          if (code === 0) {\n            if (!isWhite) {\n              this.setToBlack(out, lineOffset, bitOffset, b2 - bitOffset);\n            }\n            a0 = b2;\n            bitOffset = a0;\n\n            // Set pointer to consume the correct number of bits.\n            this.updatePointer(7 - bits);\n          } else if (code === 1) {\n            // Horizontal\n            this.updatePointer(7 - bits);\n\n            // identify the next 2 codes.\n            let number = 0;\n            if (isWhite) {\n              number = this.decodeWhiteCodeWord();\n              bitOffset += number;\n              this._currChangingElements![currIndex++] = bitOffset;\n\n              number = this.decodeBlackCodeWord();\n              this.setToBlack(out, lineOffset, bitOffset, number);\n              bitOffset += number;\n              this._currChangingElements![currIndex++] = bitOffset;\n            } else {\n              number = this.decodeBlackCodeWord();\n              this.setToBlack(out, lineOffset, bitOffset, number);\n              bitOffset += number;\n              this._currChangingElements![currIndex++] = bitOffset;\n\n              number = this.decodeWhiteCodeWord();\n              bitOffset += number;\n              this._currChangingElements![currIndex++] = bitOffset;\n            }\n\n            a0 = bitOffset;\n          } else if (code <= 8) {\n            // Vertical\n            a1 = b1 + (code - 5);\n\n            this._currChangingElements![currIndex++] = a1;\n\n            // We write the current color till a1 - 1 pos,\n            // since a1 is where the next color starts\n            if (!isWhite) {\n              this.setToBlack(out, lineOffset, bitOffset, a1 - bitOffset);\n            }\n            a0 = a1;\n            bitOffset = a0;\n            isWhite = !isWhite;\n\n            this.updatePointer(7 - bits);\n          } else {\n            throw new LibError('TIFFFaxDecoder4');\n          }\n        }\n\n        // Add the changing element beyond the current scanline for the\n        // other color too\n        this._currChangingElements![currIndex++] = bitOffset;\n        this._changingElemSize = currIndex;\n      } else {\n        // 1D encoded scanline follows\n        this.decodeNextScanline(out, lineOffset, startX);\n      }\n\n      lineOffset += scanlineStride;\n    }\n  }\n\n  public decodeT6(\n    out: InputBuffer,\n    compData: InputBuffer,\n    startX: number,\n    height: number,\n    tiffT6Options: number\n  ): void {\n    this._data = compData;\n    this._compression = 4;\n\n    this._bitPointer = 0;\n    this._bytePointer = 0;\n\n    const scanlineStride = Math.trunc((this._width + 7) / 8);\n\n    let a0 = 0;\n    let a1 = 0;\n    let b1 = 0;\n    let b2 = 0;\n    let entry = 0;\n    let code = 0;\n    let bits = 0;\n    let isWhite = false;\n    let currIndex = 0;\n    let temp: Array<number> | undefined = undefined;\n\n    // Return values from getNextChangingElement\n    const b = new Array<number>(2);\n    b.fill(0);\n\n    this._uncompressedMode = (tiffT6Options & 0x02) >> 1;\n\n    // Local cached reference\n    let cce = this._currChangingElements!;\n\n    // Assume invisible preceding row of all white pixels and insert\n    // both black and white changing elements beyond the end of this\n    // imaginary scanline.\n    this._changingElemSize = 0;\n    cce[this._changingElemSize++] = this._width;\n    cce[this._changingElemSize++] = this._width;\n\n    let lineOffset = 0;\n    let bitOffset = 0;\n\n    for (let lines = 0; lines < height; lines++) {\n      // a0 has to be set just before the start of the scanline.\n      a0 = -1;\n      isWhite = true;\n\n      // Assign the changing elements of the previous scanline to\n      // prevChangingElems and start putting this new scanline's\n      // changing elements into the currChangingElems.\n      temp = this._prevChangingElements;\n      this._prevChangingElements = this._currChangingElements;\n      cce = (this._currChangingElements = temp)!;\n      currIndex = 0;\n\n      // Start decoding the scanline at startX in the raster\n      bitOffset = startX;\n\n      // Reset search start position for getNextChangingElement\n      this._lastChangingElement = 0;\n\n      // Till one whole scanline is decoded\n      while (bitOffset < this._width) {\n        // Get the next changing element\n        this.getNextChangingElement(a0, isWhite, b);\n        b1 = b[0];\n        b2 = b[1];\n\n        // Get the next seven bits\n        entry = this.nextLesserThan8Bits(7);\n        // Run these through the 2DCodes table\n        entry = TiffFaxDecoder._twoDCodes[entry] & 0xff;\n\n        // Get the code and the number of bits used up\n        code = (entry & 0x78) >> 3;\n        bits = entry & 0x07;\n\n        if (code === 0) {\n          // Pass\n          // We always assume WhiteIsZero format for fax.\n          if (!isWhite) {\n            this.setToBlack(out, lineOffset, bitOffset, b2! - bitOffset);\n          }\n          a0 = b2;\n          bitOffset = a0;\n\n          // Set pointer to only consume the correct number of bits.\n          this.updatePointer(7 - bits);\n        } else if (code === 1) {\n          // Horizontal\n          // Set pointer to only consume the correct number of bits.\n          this.updatePointer(7 - bits);\n\n          // identify the next 2 alternating color codes.\n          let number = 0;\n          if (isWhite) {\n            // Following are white and black runs\n            number = this.decodeWhiteCodeWord();\n            bitOffset += number;\n            cce[currIndex++] = bitOffset;\n\n            number = this.decodeBlackCodeWord();\n            this.setToBlack(out, lineOffset, bitOffset, number);\n            bitOffset += number;\n            cce[currIndex++] = bitOffset;\n          } else {\n            // First a black run and then a white run follows\n            number = this.decodeBlackCodeWord();\n            this.setToBlack(out, lineOffset, bitOffset, number);\n            bitOffset += number;\n            cce[currIndex++] = bitOffset;\n\n            number = this.decodeWhiteCodeWord();\n            bitOffset += number;\n            cce[currIndex++] = bitOffset;\n          }\n\n          a0 = bitOffset;\n        } else if (code <= 8) {\n          // Vertical\n          a1 = b1 + (code - 5);\n          cce[currIndex++] = a1;\n\n          // We write the current color till a1 - 1 pos,\n          // since a1 is where the next color starts\n          if (!isWhite) {\n            this.setToBlack(out, lineOffset, bitOffset, a1 - bitOffset);\n          }\n          a0 = a1;\n          bitOffset = a0;\n          isWhite = !isWhite;\n\n          this.updatePointer(7 - bits);\n        } else if (code === 11) {\n          if (this.nextLesserThan8Bits(3) !== 7) {\n            throw new LibError('TIFFFaxDecoder5');\n          }\n\n          let zeros = 0;\n          let exit = false;\n\n          while (!exit) {\n            while (this.nextLesserThan8Bits(1) !== 1) {\n              zeros++;\n            }\n\n            if (zeros > 5) {\n              // Exit code\n\n              // Zeros before exit code\n              zeros -= 6;\n\n              if (!isWhite && zeros > 0) {\n                cce[currIndex++] = bitOffset;\n              }\n\n              // Zeros before the exit code\n              bitOffset += zeros;\n              if (zeros > 0) {\n                // Some zeros have been written\n                isWhite = true;\n              }\n\n              // Read in the bit which specifies the color of\n              // the following run\n              if (this.nextLesserThan8Bits(1) === 0) {\n                if (!isWhite) {\n                  cce[currIndex++] = bitOffset;\n                }\n                isWhite = true;\n              } else {\n                if (isWhite) {\n                  cce[currIndex++] = bitOffset;\n                }\n                isWhite = false;\n              }\n\n              exit = true;\n            }\n\n            if (zeros === 5) {\n              if (!isWhite) {\n                cce[currIndex++] = bitOffset;\n              }\n              bitOffset += zeros;\n\n              // Last thing written was white\n              isWhite = true;\n            } else {\n              bitOffset += zeros;\n\n              cce[currIndex++] = bitOffset;\n              this.setToBlack(out, lineOffset, bitOffset, 1);\n              ++bitOffset;\n\n              // Last thing written was black\n              isWhite = false;\n            }\n          }\n        } else {\n          throw new LibError(`TIFFFaxDecoder5 ${code}`);\n        }\n      }\n\n      // Add the changing element beyond the current scanline for the\n      // other color too\n      cce[currIndex++] = bitOffset;\n\n      // Number of changing elements in this scanline.\n      this._changingElemSize = currIndex;\n\n      lineOffset += scanlineStride;\n    }\n  }\n}\n", "/** @format */\n\nexport enum TiffFormat {\n  invalid,\n  uint,\n  int,\n  float,\n}\n", "/** @format */\n\nexport enum TiffImageType {\n  bilevel,\n  gray4bit,\n  gray,\n  grayAlpha,\n  palette,\n  rgb,\n  rgba,\n  yCbCrSub,\n  generic,\n  invalid,\n}\n", "/** @format */\n\nimport { InputBuffer } from '../../common/input-buffer';\nimport { LibError } from '../../error/lib-error';\n\nexport class LzwDecoder {\n  private static readonly _lzMaxCode = 4095;\n  private static readonly _noSuchCode = 4098;\n  private static readonly _andTable: number[] = [511, 1023, 2047, 4095];\n\n  private readonly _buffer = new Uint8Array(4096);\n\n  private _bitsToGet = 9;\n  private _bytePointer = 0;\n  private _nextData = 0;\n  private _nextBits = 0;\n  private _data!: Uint8Array;\n  private _dataLength!: number;\n  private _out!: Uint8Array;\n  private _outPointer!: number;\n  private _table!: Uint8Array;\n  private _prefix!: Uint32Array;\n  private _tableIndex?: number;\n  private _bufferLength!: number;\n\n  private addString(string: number, newString: number): void {\n    this._table[this._tableIndex!] = newString;\n    this._prefix[this._tableIndex!] = string;\n    this._tableIndex = this._tableIndex! + 1;\n\n    if (this._tableIndex === 511) {\n      this._bitsToGet = 10;\n    } else if (this._tableIndex === 1023) {\n      this._bitsToGet = 11;\n    } else if (this._tableIndex === 2047) {\n      this._bitsToGet = 12;\n    }\n  }\n\n  private getString(code: number): void {\n    this._bufferLength = 0;\n    let c = code;\n    this._buffer[this._bufferLength++] = this._table[c];\n    c = this._prefix[c];\n    while (c !== LzwDecoder._noSuchCode) {\n      this._buffer[this._bufferLength++] = this._table[c];\n      c = this._prefix[c];\n    }\n  }\n\n  /**\n   * Returns the next 9, 10, 11 or 12 bits\n   */\n  private getNextCode(): number {\n    if (this._bytePointer >= this._dataLength) {\n      return 257;\n    }\n\n    while (this._nextBits < this._bitsToGet) {\n      if (this._bytePointer >= this._dataLength) {\n        return 257;\n      }\n      this._nextData =\n        ((this._nextData << 8) + this._data[this._bytePointer++]) & 0xffffffff;\n      this._nextBits += 8;\n    }\n\n    this._nextBits -= this._bitsToGet;\n    const code =\n      (this._nextData >> this._nextBits) &\n      LzwDecoder._andTable[this._bitsToGet - 9];\n\n    return code;\n  }\n\n  /**\n   * Initialize the string table.\n   */\n  private initializeStringTable(): void {\n    this._table = new Uint8Array(LzwDecoder._lzMaxCode + 1);\n    this._prefix = new Uint32Array(LzwDecoder._lzMaxCode + 1);\n    this._prefix.fill(LzwDecoder._noSuchCode, 0, this._prefix.length);\n\n    for (let i = 0; i < 256; i++) {\n      this._table[i] = i;\n    }\n\n    this._bitsToGet = 9;\n\n    this._tableIndex = 258;\n  }\n\n  public decode(p: InputBuffer, out: Uint8Array): void {\n    this._out = out;\n    const outLen = out.length;\n    this._outPointer = 0;\n    this._data = p.buffer;\n    this._dataLength = this._data.length;\n    this._bytePointer = p.offset;\n\n    if (this._data[0] === 0x00 && this._data[1] === 0x01) {\n      throw new LibError('Invalid LZW Data');\n    }\n\n    this.initializeStringTable();\n\n    this._nextData = 0;\n    this._nextBits = 0;\n\n    let oldCode = 0;\n\n    let code = this.getNextCode();\n    while (code !== 257 && this._outPointer < outLen) {\n      if (code === 256) {\n        this.initializeStringTable();\n        code = this.getNextCode();\n        this._bufferLength = 0;\n        if (code === 257) {\n          break;\n        }\n\n        this._out[this._outPointer++] = code;\n        oldCode = code;\n      } else {\n        if (code < this._tableIndex!) {\n          this.getString(code);\n          for (let i = this._bufferLength - 1; i >= 0; --i) {\n            this._out[this._outPointer++] = this._buffer[i];\n          }\n          this.addString(oldCode, this._buffer[this._bufferLength - 1]);\n          oldCode = code;\n        } else {\n          this.getString(oldCode);\n          for (let i = this._bufferLength - 1; i >= 0; --i) {\n            this._out[this._outPointer++] = this._buffer[i];\n          }\n          this._out[this._outPointer++] = this._buffer[this._bufferLength - 1];\n          this.addString(oldCode, this._buffer[this._bufferLength - 1]);\n\n          oldCode = code;\n        }\n      }\n\n      code = this.getNextCode();\n    }\n  }\n}\n", "/** @format */\n\nexport enum TiffPhotometricType {\n  // 0\n  whiteIsZero,\n  // 1\n  blackIsZero,\n  // 2\n  rgb,\n  // 3\n  palette,\n  // 4\n  transparencyMask,\n  // 5\n  cmyk,\n  // 6\n  yCbCr,\n  // 7\n  reserved7,\n  // 8\n  cieLab,\n  // 9\n  iccLab,\n  // 10\n  ituLab,\n  // 32844\n  logL,\n  // 32845\n  logLuv,\n  // 32803\n  colorFilterArray,\n  // 34892\n  linearRaw,\n  // 51177\n  depth,\n  unknown,\n}\n\nexport const TiffPhotometricTypeLength = 17;\n", "/** @format */\n\nimport { inflate } from 'uzip';\nimport { ColorUtils } from '../../color/color-utils';\nimport { Format } from '../../color/format';\nimport { ArrayUtils } from '../../common/array-utils';\nimport { BitUtils } from '../../common/bit-utils';\nimport { Float16 } from '../../common/float16';\nimport { InputBuffer } from '../../common/input-buffer';\nimport { LibError } from '../../error/lib-error';\nimport { ExifTagNameToID } from '../../exif/exif-tag';\nimport { IfdValueType, IfdValueTypeSize } from '../../exif/ifd-value-type';\nimport { MemoryImage } from '../../image/image';\nimport { JpegDecoder } from '../jpeg-decoder';\nimport { TiffBitReader } from './tiff-bit-reader';\nimport { TiffCompression } from './tiff-compression';\nimport { TiffEntry } from './tiff-entry';\nimport { TiffFaxDecoder } from './tiff-fax-decoder';\nimport { TiffFormat } from './tiff-format';\nimport { TiffImageType } from './tiff-image-type';\nimport { LzwDecoder } from './tiff-lzw-decoder';\nimport {\n  TiffPhotometricType,\n  TiffPhotometricTypeLength,\n} from './tiff-photometric-type';\n\nexport class TiffImage {\n  private readonly _tags: Map<number, TiffEntry> = new Map<number, TiffEntry>();\n  public get tags(): Map<number, TiffEntry> {\n    return this._tags;\n  }\n\n  private readonly _width: number = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  private readonly _height: number = 0;\n  public get height(): number {\n    return this._height;\n  }\n\n  private _photometricType: TiffPhotometricType = TiffPhotometricType.unknown;\n  public get photometricType(): TiffPhotometricType {\n    return this._photometricType;\n  }\n\n  private _compression = 1;\n  public get compression(): number {\n    return this._compression;\n  }\n\n  private _bitsPerSample = 1;\n  public get bitsPerSample(): number {\n    return this._bitsPerSample;\n  }\n\n  private _samplesPerPixel = 1;\n  public get samplesPerPixel(): number {\n    return this._samplesPerPixel;\n  }\n\n  private _sampleFormat: TiffFormat = TiffFormat.uint;\n  public get sampleFormat(): TiffFormat {\n    return this._sampleFormat;\n  }\n\n  private _imageType: TiffImageType = TiffImageType.invalid;\n  public get imageType(): TiffImageType {\n    return this._imageType;\n  }\n\n  private _isWhiteZero = false;\n  public get isWhiteZero(): boolean {\n    return this._isWhiteZero;\n  }\n\n  private _predictor = 1;\n  public get predictor(): number {\n    return this._predictor;\n  }\n\n  private _chromaSubH = 0;\n  public get chromaSubH(): number {\n    return this._chromaSubH;\n  }\n\n  private _chromaSubV = 0;\n  public get chromaSubV(): number {\n    return this._chromaSubV;\n  }\n\n  private _tiled = false;\n  public get tiled(): boolean {\n    return this._tiled;\n  }\n\n  private _tileWidth = 0;\n  public get tileWidth(): number {\n    return this._tileWidth;\n  }\n\n  private _tileHeight = 0;\n  public get tileHeight(): number {\n    return this._tileHeight;\n  }\n\n  private _tileOffsets: number[] | undefined;\n  public get tileOffsets(): number[] | undefined {\n    return this._tileOffsets;\n  }\n\n  private _tileByteCounts: number[] | undefined;\n  public get tileByteCounts(): number[] | undefined {\n    return this._tileByteCounts;\n  }\n\n  private _tilesX = 0;\n  public get tilesX(): number {\n    return this._tilesX;\n  }\n\n  private _tilesY = 0;\n  public get tilesY(): number {\n    return this._tilesY;\n  }\n\n  private _tileSize: number | undefined;\n  public get tileSize(): number | undefined {\n    return this._tileSize;\n  }\n\n  private _fillOrder = 1;\n  public get fillOrder(): number {\n    return this._fillOrder;\n  }\n\n  private _t4Options = 0;\n  public get t4Options(): number {\n    return this._t4Options;\n  }\n\n  private _t6Options = 0;\n  public get t6Options(): number {\n    return this._t6Options;\n  }\n\n  private _extraSamples: number | undefined;\n  public get extraSamples(): number | undefined {\n    return this._extraSamples;\n  }\n\n  private _colorMapSamples = 0;\n  public get colorMapSamples(): number {\n    return this._colorMapSamples;\n  }\n\n  private _colorMap: Uint16Array | undefined;\n  public get colorMap(): Uint16Array | undefined {\n    return this._colorMap;\n  }\n\n  // Starting index in the [colorMap] for the red channel.\n  private _colorMapRed = 0;\n\n  // Starting index in the [colorMap] for the green channel.\n  private _colorMapGreen = 0;\n\n  // Starting index in the [colorMap] for the blue channel.\n  private _colorMapBlue = 0;\n\n  public get isValid(): boolean {\n    return this._width !== 0 && this._height !== 0;\n  }\n\n  constructor(p: InputBuffer) {\n    const p3 = InputBuffer.from(p);\n\n    const numDirEntries = p.readUint16();\n    for (let i = 0; i < numDirEntries; ++i) {\n      const tag = p.readUint16();\n      const ti = p.readUint16();\n      const type = ti as IfdValueType;\n      const typeSize = IfdValueTypeSize[ti];\n      const count = p.readUint32();\n      let valueOffset = 0;\n      // The value for the tag is either stored in another location,\n      // or within the tag itself (if the size fits in 4 bytes).\n      // We're not reading the data here, just storing offsets.\n      if (count * typeSize > 4) {\n        valueOffset = p.readUint32();\n      } else {\n        valueOffset = p.offset;\n        p.skip(4);\n      }\n\n      const entry = new TiffEntry({\n        tag: tag,\n        type: type,\n        count: count,\n        p: p3,\n        valueOffset: valueOffset,\n      });\n\n      this._tags.set(entry.tag, entry);\n\n      if (tag === ExifTagNameToID.get('ImageWidth')) {\n        this._width = entry.read()?.toInt() ?? 0;\n      } else if (tag === ExifTagNameToID.get('ImageLength')) {\n        this._height = entry.read()?.toInt() ?? 0;\n      } else if (tag === ExifTagNameToID.get('PhotometricInterpretation')) {\n        const v = entry.read();\n        if (v === undefined) {\n          this._photometricType = TiffPhotometricType.unknown;\n        } else {\n          const pt = v.toInt();\n          if (pt < TiffPhotometricTypeLength) {\n            this._photometricType = pt as TiffPhotometricType;\n          } else {\n            this._photometricType = TiffPhotometricType.unknown;\n          }\n        }\n      } else if (tag === ExifTagNameToID.get('Compression')) {\n        this._compression = entry.read()?.toInt() ?? 0;\n      } else if (tag === ExifTagNameToID.get('BitsPerSample')) {\n        this._bitsPerSample = entry.read()?.toInt() ?? 0;\n      } else if (tag === ExifTagNameToID.get('SamplesPerPixel')) {\n        this._samplesPerPixel = entry.read()?.toInt() ?? 0;\n      } else if (tag === ExifTagNameToID.get('Predictor')) {\n        this._predictor = entry.read()?.toInt() ?? 0;\n      } else if (tag === ExifTagNameToID.get('SampleFormat')) {\n        const v = entry.read()?.toInt() ?? 0;\n        this._sampleFormat = v as TiffFormat;\n      } else if (tag === ExifTagNameToID.get('ColorMap')) {\n        const v = entry.read();\n        if (v !== undefined) {\n          this._colorMap = new Uint16Array(v.toData().buffer);\n          this._colorMapRed = 0;\n          this._colorMapGreen = Math.trunc(this._colorMap.length / 3);\n          this._colorMapBlue = this._colorMapGreen * 2;\n        }\n      }\n    }\n\n    if (\n      this._colorMap !== undefined &&\n      this._photometricType === TiffPhotometricType.palette\n    ) {\n      // Only support RGB palettes.\n      this._colorMapSamples = 3;\n      this._samplesPerPixel = 1;\n    }\n\n    if (this._width === 0 || this._height === 0) {\n      return;\n    }\n\n    if (this._colorMap !== undefined && this._bitsPerSample === 8) {\n      const cm = this._colorMap;\n      const len = cm.length;\n      for (let i = 0; i < len; ++i) {\n        cm[i] >>= 8;\n      }\n    }\n\n    if (this._photometricType === TiffPhotometricType.whiteIsZero) {\n      this._isWhiteZero = true;\n    }\n\n    if (this.hasTag(ExifTagNameToID.get('TileOffsets')!)) {\n      this._tiled = true;\n      // Image is in tiled format\n      this._tileWidth = this.readTag(ExifTagNameToID.get('TileWidth')!);\n      this._tileHeight = this.readTag(ExifTagNameToID.get('TileLength')!);\n      this._tileOffsets = this.readTagList(ExifTagNameToID.get('TileOffsets')!);\n      this._tileByteCounts = this.readTagList(\n        ExifTagNameToID.get('TileByteCounts')!\n      );\n    } else {\n      this._tiled = false;\n\n      this._tileWidth = this.readTag(\n        ExifTagNameToID.get('TileWidth')!,\n        this._width\n      );\n      if (!this.hasTag(ExifTagNameToID.get('RowsPerStrip')!)) {\n        this._tileHeight = this.readTag(\n          ExifTagNameToID.get('TileLength')!,\n          this._height\n        );\n      } else {\n        const l = this.readTag(ExifTagNameToID.get('RowsPerStrip')!);\n        let infinity = 1;\n        infinity = (infinity << 32) - 1;\n        if (l === infinity) {\n          // 2^32 - 1 (effectively infinity, entire image is 1 strip)\n          this._tileHeight = this._height;\n        } else {\n          this._tileHeight = l;\n        }\n      }\n\n      this._tileOffsets = this.readTagList(\n        ExifTagNameToID.get('StripOffsets')!\n      );\n      this._tileByteCounts = this.readTagList(\n        ExifTagNameToID.get('StripByteCounts')!\n      );\n    }\n\n    // Calculate number of tiles and the tileSize in bytes\n    this._tilesX = Math.trunc(\n      (this._width + this._tileWidth - 1) / this._tileWidth\n    );\n    this._tilesY = Math.trunc(\n      (this._height + this._tileHeight - 1) / this._tileHeight\n    );\n    this._tileSize = this._tileWidth * this._tileHeight * this._samplesPerPixel;\n\n    this._fillOrder = this.readTag(ExifTagNameToID.get('FillOrder')!, 1);\n    this._t4Options = this.readTag(ExifTagNameToID.get('T4Options')!);\n    this._t6Options = this.readTag(ExifTagNameToID.get('T6Options')!);\n    this._extraSamples = this.readTag(ExifTagNameToID.get('ExtraSamples')!);\n\n    // Determine which kind of image we are dealing with.\n    switch (this._photometricType) {\n      case TiffPhotometricType.whiteIsZero:\n      case TiffPhotometricType.blackIsZero:\n        if (this._bitsPerSample === 1 && this._samplesPerPixel === 1) {\n          this._imageType = TiffImageType.bilevel;\n        } else if (this._bitsPerSample === 4 && this._samplesPerPixel === 1) {\n          this._imageType = TiffImageType.gray4bit;\n        } else if (this._bitsPerSample % 8 === 0) {\n          if (this._samplesPerPixel === 1) {\n            this._imageType = TiffImageType.gray;\n          } else if (this._samplesPerPixel === 2) {\n            this._imageType = TiffImageType.grayAlpha;\n          } else {\n            this._imageType = TiffImageType.generic;\n          }\n        }\n        break;\n      case TiffPhotometricType.rgb:\n        if (this._bitsPerSample % 8 === 0) {\n          if (this._samplesPerPixel === 3) {\n            this._imageType = TiffImageType.rgb;\n          } else if (this._samplesPerPixel === 4) {\n            this._imageType = TiffImageType.rgba;\n          } else {\n            this._imageType = TiffImageType.generic;\n          }\n        }\n        break;\n      case TiffPhotometricType.palette:\n        if (\n          this._samplesPerPixel === 1 &&\n          this._colorMap !== undefined &&\n          (this._bitsPerSample === 4 ||\n            this._bitsPerSample === 8 ||\n            this._bitsPerSample === 16)\n        ) {\n          this._imageType = TiffImageType.palette;\n        }\n        break;\n      case TiffPhotometricType.transparencyMask:\n        // Transparency mask\n        if (this._bitsPerSample === 1 && this._samplesPerPixel === 1) {\n          this._imageType = TiffImageType.bilevel;\n        }\n        break;\n      case TiffPhotometricType.yCbCr:\n        if (\n          this._compression === TiffCompression.jpeg &&\n          this._bitsPerSample === 8 &&\n          this._samplesPerPixel === 3\n        ) {\n          this._imageType = TiffImageType.rgb;\n        } else {\n          if (this.hasTag(ExifTagNameToID.get('YCbCrSubSampling')!)) {\n            const s = ExifTagNameToID.get('YCbCrSubSampling')!;\n            const v = this._tags.get(s)!.read()!;\n            this._chromaSubH = v.toInt();\n            this._chromaSubV = v.toInt(1);\n          } else {\n            this._chromaSubH = 2;\n            this._chromaSubV = 2;\n          }\n\n          if (this._chromaSubH * this._chromaSubV === 1) {\n            this._imageType = TiffImageType.generic;\n          } else if (this._bitsPerSample === 8 && this._samplesPerPixel === 3) {\n            this._imageType = TiffImageType.yCbCrSub;\n          }\n        }\n        break;\n      default:\n        // Other including CMYK, CIE L*a*b*, unknown.\n        if (this._bitsPerSample % 8 === 0) {\n          this._imageType = TiffImageType.generic;\n        }\n        break;\n    }\n  }\n\n  private readTag(type: number, defaultValue = 0): number {\n    if (!this.hasTag(type)) {\n      return defaultValue;\n    }\n    return this._tags.get(type)!.read()?.toInt() ?? 0;\n  }\n\n  private readTagList(type: number): number[] | undefined {\n    if (!this.hasTag(type)) {\n      return undefined;\n    }\n    const tag = this._tags.get(type)!;\n    const value = tag.read()!;\n    return ArrayUtils.generate<number>(tag.count, (i) => value.toInt(i));\n  }\n\n  private decodeBilevelTile(\n    p: InputBuffer,\n    image: MemoryImage,\n    tileX: number,\n    tileY: number\n  ): void {\n    const tileIndex = tileY * this._tilesX + tileX;\n    p.offset = this._tileOffsets![tileIndex];\n\n    const outX = tileX * this._tileWidth;\n    const outY = tileY * this._tileHeight;\n\n    const byteCount = this._tileByteCounts![tileIndex];\n\n    let byteData: InputBuffer | undefined = undefined;\n    if (this._compression === TiffCompression.packBits) {\n      // Since the decompressed data will still be packed\n      // 8 pixels into 1 byte, calculate bytesInThisTile\n      let bytesInThisTile = 0;\n      if (this._tileWidth % 8 === 0) {\n        bytesInThisTile = Math.trunc(this._tileWidth / 8) * this._tileHeight;\n      } else {\n        bytesInThisTile =\n          (Math.trunc(this._tileWidth / 8) + 1) * this._tileHeight;\n      }\n      byteData = new InputBuffer({\n        buffer: new Uint8Array(this._tileWidth * this._tileHeight),\n      });\n      this.decodePackBits(p, bytesInThisTile, byteData.buffer);\n    } else if (this._compression === TiffCompression.lzw) {\n      byteData = new InputBuffer({\n        buffer: new Uint8Array(this._tileWidth * this._tileHeight),\n      });\n\n      const decoder = new LzwDecoder();\n      decoder.decode(InputBuffer.from(p, 0, byteCount), byteData.buffer);\n\n      // Horizontal Differencing Predictor\n      if (this._predictor === 2) {\n        let count = 0;\n        for (let j = 0; j < this._height; j++) {\n          count = this._samplesPerPixel * (j * this._width + 1);\n          for (\n            let i = this._samplesPerPixel;\n            i < this._width * this._samplesPerPixel;\n            i++\n          ) {\n            const b =\n              byteData.getByte(count) +\n              byteData.getByte(count - this._samplesPerPixel);\n            byteData.setByte(count, b);\n            count++;\n          }\n        }\n      }\n    } else if (this._compression === TiffCompression.ccittRle) {\n      byteData = new InputBuffer({\n        buffer: new Uint8Array(this._tileWidth * this._tileHeight),\n      });\n      try {\n        const decoder = new TiffFaxDecoder({\n          fillOrder: this._fillOrder,\n          width: this._tileWidth,\n          height: this._tileHeight,\n        });\n        decoder.decode1D(byteData, p, 0, this._tileHeight);\n      } catch (_) {\n        // skip\n      }\n    } else if (this._compression === TiffCompression.ccittFax3) {\n      byteData = new InputBuffer({\n        buffer: new Uint8Array(this._tileWidth * this._tileHeight),\n      });\n      try {\n        const decoder = new TiffFaxDecoder({\n          fillOrder: this._fillOrder,\n          width: this._tileWidth,\n          height: this._tileHeight,\n        });\n        decoder.decode2D(byteData, p, 0, this._tileHeight, this._t4Options);\n      } catch (_) {\n        // skip\n      }\n    } else if (this._compression === TiffCompression.ccittFax4) {\n      byteData = new InputBuffer({\n        buffer: new Uint8Array(this._tileWidth * this._tileHeight),\n      });\n      try {\n        const decoder = new TiffFaxDecoder({\n          fillOrder: this._fillOrder,\n          width: this._tileWidth,\n          height: this._tileHeight,\n        });\n        decoder.decodeT6(byteData, p, 0, this._tileHeight, this._t6Options);\n      } catch (_) {\n        // skip\n      }\n    } else if (this._compression === TiffCompression.zip) {\n      const data = p.toUint8Array(0, byteCount);\n      const outData = inflate(data);\n      byteData = new InputBuffer({\n        buffer: outData,\n      });\n    } else if (this._compression === TiffCompression.deflate) {\n      const data = p.toUint8Array(0, byteCount);\n      const outData = inflate(data);\n      byteData = new InputBuffer({\n        buffer: outData,\n      });\n    } else if (this._compression === TiffCompression.none) {\n      byteData = p;\n    } else {\n      throw new LibError(`Unsupported Compression Type: ${this._compression}`);\n    }\n\n    const br = new TiffBitReader(byteData);\n    const mx = image.maxChannelValue;\n    const black = this._isWhiteZero ? mx : 0;\n    const white = this._isWhiteZero ? 0 : mx;\n\n    for (let y = 0, py = outY; y < this._tileHeight; ++y, ++py) {\n      for (let x = 0, px = outX; x < this._tileWidth; ++x, ++px) {\n        if (py >= image.height || px >= image.width) break;\n        if (br.readBits(1) === 0) {\n          image.setPixelRgb(px, py, black, 0, 0);\n        } else {\n          image.setPixelRgb(px, py, white, 0, 0);\n        }\n      }\n      br.flushByte();\n    }\n  }\n\n  private decodeTile(\n    p: InputBuffer,\n    image: MemoryImage,\n    tileX: number,\n    tileY: number\n  ): void {\n    // Read the data, uncompressing as needed. There are four cases:\n    // bilevel, palette-RGB, 4-bit grayscale, and everything else.\n    if (this._imageType === TiffImageType.bilevel) {\n      this.decodeBilevelTile(p, image, tileX, tileY);\n      return;\n    }\n\n    const tileIndex = tileY * this._tilesX + tileX;\n    p.offset = this._tileOffsets![tileIndex];\n\n    const outX = tileX * this._tileWidth;\n    const outY = tileY * this._tileHeight;\n\n    const byteCount = this._tileByteCounts![tileIndex];\n    let bytesInThisTile =\n      this._tileWidth * this._tileHeight * this._samplesPerPixel;\n    if (this._bitsPerSample === 16) {\n      bytesInThisTile *= 2;\n    } else if (this._bitsPerSample === 32) {\n      bytesInThisTile *= 4;\n    }\n\n    let byteData: InputBuffer | undefined = undefined;\n    if (\n      this._bitsPerSample === 8 ||\n      this._bitsPerSample === 16 ||\n      this._bitsPerSample === 32 ||\n      this._bitsPerSample === 64\n    ) {\n      if (this._compression === TiffCompression.none) {\n        byteData = p;\n      } else if (this._compression === TiffCompression.lzw) {\n        byteData = new InputBuffer({\n          buffer: new Uint8Array(bytesInThisTile),\n        });\n        const decoder = new LzwDecoder();\n        try {\n          decoder.decode(InputBuffer.from(p, 0, byteCount), byteData.buffer);\n        } catch (e) {\n          // ignore\n        }\n        // Horizontal Differencing Predictor\n        if (this._predictor === 2) {\n          let count = 0;\n          for (let j = 0; j < this._tileHeight; j++) {\n            count = this._samplesPerPixel * (j * this._tileWidth + 1);\n            const len = this._tileWidth * this._samplesPerPixel;\n            for (let i = this._samplesPerPixel; i < len; i++) {\n              byteData.setByte(\n                count,\n                byteData.getByte(count) +\n                  byteData.getByte(count - this._samplesPerPixel)\n              );\n              count++;\n            }\n          }\n        }\n      } else if (this._compression === TiffCompression.packBits) {\n        byteData = new InputBuffer({\n          buffer: new Uint8Array(bytesInThisTile),\n        });\n        this.decodePackBits(p, bytesInThisTile, byteData.buffer);\n      } else if (this._compression === TiffCompression.deflate) {\n        const data = p.toUint8Array(0, byteCount);\n        const outData = inflate(data);\n        byteData = new InputBuffer({\n          buffer: outData,\n        });\n      } else if (this._compression === TiffCompression.zip) {\n        const data = p.toUint8Array(0, byteCount);\n        const outData = inflate(data);\n        byteData = new InputBuffer({\n          buffer: outData,\n        });\n      } else if (this._compression === TiffCompression.oldJpeg) {\n        const data = p.toUint8Array(0, byteCount);\n        const tile = new JpegDecoder().decode(data);\n        if (tile !== undefined) {\n          this.jpegToImage(\n            tile,\n            image,\n            outX,\n            outY,\n            this._tileWidth,\n            this._tileHeight\n          );\n        }\n        return;\n      } else {\n        throw new LibError(\n          `Unsupported Compression Type: ${this._compression}`\n        );\n      }\n\n      for (\n        let y = 0, py = outY;\n        y < this._tileHeight && py < this._height;\n        ++y, ++py\n      ) {\n        for (\n          let x = 0, px = outX;\n          x < this._tileWidth && px < this._width;\n          ++x, ++px\n        ) {\n          if (this._samplesPerPixel === 1) {\n            if (this._sampleFormat === TiffFormat.float) {\n              let sample = 0;\n              if (this._bitsPerSample === 32) {\n                sample = byteData.readFloat32();\n              } else if (this._bitsPerSample === 64) {\n                sample = byteData.readFloat64();\n              } else if (this._bitsPerSample === 16) {\n                sample = Float16.float16ToDouble(byteData.readUint16());\n              }\n              image.setPixelR(px, py, sample);\n            } else {\n              let sample = 0;\n              if (this._bitsPerSample === 8) {\n                sample =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt8()\n                    : byteData.readByte();\n              } else if (this._bitsPerSample === 16) {\n                sample =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt16()\n                    : byteData.readUint16();\n              } else if (this._bitsPerSample === 32) {\n                sample =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt32()\n                    : byteData.readUint32();\n              }\n\n              if (this._photometricType === TiffPhotometricType.whiteIsZero) {\n                const mx = Math.trunc(image.maxChannelValue);\n                sample = mx - sample;\n              }\n\n              image.setPixelR(px, py, sample);\n            }\n          } else if (this._samplesPerPixel === 2) {\n            let gray = 0;\n            let alpha = 0;\n            if (this._bitsPerSample === 8) {\n              gray =\n                this._sampleFormat === TiffFormat.int\n                  ? byteData.readInt8()\n                  : byteData.readByte();\n              alpha =\n                this._sampleFormat === TiffFormat.int\n                  ? byteData.readInt8()\n                  : byteData.readByte();\n            } else if (this._bitsPerSample === 16) {\n              gray =\n                this._sampleFormat === TiffFormat.int\n                  ? byteData.readInt16()\n                  : byteData.readUint16();\n              alpha =\n                this._sampleFormat === TiffFormat.int\n                  ? byteData.readInt16()\n                  : byteData.readUint16();\n            } else if (this._bitsPerSample === 32) {\n              gray =\n                this._sampleFormat === TiffFormat.int\n                  ? byteData.readInt32()\n                  : byteData.readUint32();\n              alpha =\n                this._sampleFormat === TiffFormat.int\n                  ? byteData.readInt32()\n                  : byteData.readUint32();\n            }\n\n            image.setPixelRgb(px, py, gray, alpha, 0);\n          } else if (this._samplesPerPixel === 3) {\n            if (this._sampleFormat === TiffFormat.float) {\n              let r = 0.0;\n              let g = 0.0;\n              let b = 0.0;\n              if (this._bitsPerSample === 32) {\n                r = byteData.readFloat32();\n                g = byteData.readFloat32();\n                b = byteData.readFloat32();\n              } else if (this._bitsPerSample === 64) {\n                r = byteData.readFloat64();\n                g = byteData.readFloat64();\n                b = byteData.readFloat64();\n              } else if (this._bitsPerSample === 16) {\n                r = Float16.float16ToDouble(byteData.readUint16());\n                g = Float16.float16ToDouble(byteData.readUint16());\n                b = Float16.float16ToDouble(byteData.readUint16());\n              }\n              image.setPixelRgb(px, py, r, g, b);\n            } else {\n              let r = 0;\n              let g = 0;\n              let b = 0;\n              if (this._bitsPerSample === 8) {\n                r =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt8()\n                    : byteData.readByte();\n                g =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt8()\n                    : byteData.readByte();\n                b =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt8()\n                    : byteData.readByte();\n              } else if (this._bitsPerSample === 16) {\n                r =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt16()\n                    : byteData.readUint16();\n                g =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt16()\n                    : byteData.readUint16();\n                b =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt16()\n                    : byteData.readUint16();\n              } else if (this._bitsPerSample === 32) {\n                r =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt32()\n                    : byteData.readUint32();\n                g =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt32()\n                    : byteData.readUint32();\n                b =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt32()\n                    : byteData.readUint32();\n              }\n\n              image.setPixelRgb(px, py, r, g, b);\n            }\n          } else if (this._samplesPerPixel >= 4) {\n            if (this._sampleFormat === TiffFormat.float) {\n              let r = 0.0;\n              let g = 0.0;\n              let b = 0.0;\n              let a = 0.0;\n              if (this._bitsPerSample === 32) {\n                r = byteData.readFloat32();\n                g = byteData.readFloat32();\n                b = byteData.readFloat32();\n                a = byteData.readFloat32();\n              } else if (this._bitsPerSample === 64) {\n                r = byteData.readFloat64();\n                g = byteData.readFloat64();\n                b = byteData.readFloat64();\n                a = byteData.readFloat64();\n              } else if (this._bitsPerSample === 16) {\n                r = Float16.float16ToDouble(byteData.readUint16());\n                g = Float16.float16ToDouble(byteData.readUint16());\n                b = Float16.float16ToDouble(byteData.readUint16());\n                a = Float16.float16ToDouble(byteData.readUint16());\n              }\n              image.setPixelRgba(px, py, r, g, b, a);\n            } else {\n              let r = 0;\n              let g = 0;\n              let b = 0;\n              let a = 0;\n              if (this._bitsPerSample === 8) {\n                r =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt8()\n                    : byteData.readByte();\n                g =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt8()\n                    : byteData.readByte();\n                b =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt8()\n                    : byteData.readByte();\n                a =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt8()\n                    : byteData.readByte();\n              } else if (this._bitsPerSample === 16) {\n                r =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt16()\n                    : byteData.readUint16();\n                g =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt16()\n                    : byteData.readUint16();\n                b =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt16()\n                    : byteData.readUint16();\n                a =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt16()\n                    : byteData.readUint16();\n              } else if (this._bitsPerSample === 32) {\n                r =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt32()\n                    : byteData.readUint32();\n                g =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt32()\n                    : byteData.readUint32();\n                b =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt32()\n                    : byteData.readUint32();\n                a =\n                  this._sampleFormat === TiffFormat.int\n                    ? byteData.readInt32()\n                    : byteData.readUint32();\n              }\n\n              if (this._photometricType === TiffPhotometricType.cmyk) {\n                const rgba = ColorUtils.cmykToRgb(r, g, b, a);\n                r = rgba[0];\n                g = rgba[1];\n                b = rgba[2];\n                a = Math.trunc(image.maxChannelValue);\n              }\n\n              image.setPixelRgba(px, py, r, g, b, a);\n            }\n          }\n        }\n      }\n    } else {\n      throw new LibError(`Unsupported bitsPerSample: ${this._bitsPerSample}`);\n    }\n  }\n\n  private jpegToImage(\n    tile: MemoryImage,\n    image: MemoryImage,\n    outX: number,\n    outY: number,\n    tileWidth: number,\n    tileHeight: number\n  ): void {\n    const width = tileWidth;\n    const height = tileHeight;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        image.setPixel(x + outX, y + outY, tile.getPixel(x, y));\n      }\n    }\n  }\n\n  /**\n   * Uncompress packbits compressed image data.\n   */\n  private decodePackBits(\n    data: InputBuffer,\n    arraySize: number,\n    dst: Uint8Array\n  ): void {\n    let srcCount = 0;\n    let dstCount = 0;\n\n    while (dstCount < arraySize) {\n      const b = BitUtils.uint8ToInt8(data.getByte(srcCount++));\n      if (b >= 0 && b <= 127) {\n        // literal run packet\n        for (let i = 0; i < b + 1; ++i) {\n          dst[dstCount++] = data.getByte(srcCount++);\n        }\n      } else if (b <= -1 && b >= -127) {\n        // 2 byte encoded run packet\n        const repeat = data.getByte(srcCount++);\n        for (let i = 0; i < -b + 1; ++i) {\n          dst[dstCount++] = repeat;\n        }\n      } else {\n        // no-op packet. Do nothing\n        srcCount++;\n      }\n    }\n  }\n\n  public decode(p: InputBuffer): MemoryImage {\n    const isFloat = this._sampleFormat === TiffFormat.float;\n    const isInt = this._sampleFormat === TiffFormat.int;\n    const format =\n      this._bitsPerSample === 1\n        ? Format.uint1\n        : this._bitsPerSample === 2\n        ? Format.uint2\n        : this._bitsPerSample === 4\n        ? Format.uint4\n        : isFloat && this._bitsPerSample === 16\n        ? Format.float16\n        : isFloat && this._bitsPerSample === 32\n        ? Format.float32\n        : isFloat && this._bitsPerSample === 64\n        ? Format.float64\n        : isInt && this._bitsPerSample === 8\n        ? Format.int8\n        : isInt && this._bitsPerSample === 16\n        ? Format.int16\n        : isInt && this._bitsPerSample === 32\n        ? Format.int32\n        : this._bitsPerSample === 16\n        ? Format.uint16\n        : this._bitsPerSample === 32\n        ? Format.uint32\n        : Format.uint8;\n    const hasPalette =\n      this._colorMap !== undefined &&\n      this._photometricType === TiffPhotometricType.palette;\n    const numChannels = hasPalette ? 3 : this._samplesPerPixel;\n\n    const image = new MemoryImage({\n      width: this._width,\n      height: this._height,\n      format: format,\n      numChannels: numChannels,\n      withPalette: hasPalette,\n    });\n\n    if (hasPalette) {\n      const p = image.palette!;\n      const cm = this._colorMap!;\n      const numChannels = 3;\n      // Only support RGB palettes\n      const numColors = Math.trunc(cm.length / numChannels);\n      for (let i = 0; i < numColors; ++i) {\n        p.setRgb(\n          i,\n          cm[this._colorMapRed + i],\n          cm[this._colorMapGreen + i],\n          cm[this._colorMapBlue + i]\n        );\n      }\n    }\n\n    for (let tileY = 0, ti = 0; tileY < this._tilesY; ++tileY) {\n      for (let tileX = 0; tileX < this._tilesX; ++tileX, ++ti) {\n        this.decodeTile(p, image, tileX, tileY);\n      }\n    }\n\n    return image;\n  }\n\n  public hasTag(tag: number): boolean {\n    return this._tags.has(tag);\n  }\n}\n", "/** @format */\n\nimport { Color } from '../../color/color';\nimport { DecodeInfo } from '../decode-info';\nimport { TiffImage } from './tiff-image';\n\nexport interface TiffInfoInitOptions {\n  bigEndian: boolean;\n  signature: number;\n  ifdOffset: number;\n  images: TiffImage[];\n}\n\nexport class TiffInfo implements DecodeInfo {\n  private _bigEndian: boolean;\n  public get bigEndian(): boolean {\n    return this._bigEndian;\n  }\n\n  private _signature: number;\n  public get signature(): number {\n    return this._signature;\n  }\n\n  private _ifdOffset: number;\n  public get ifdOffset(): number {\n    return this._ifdOffset;\n  }\n\n  private _images: TiffImage[] = [];\n  public get images(): TiffImage[] {\n    return this._images;\n  }\n\n  private _width = 0;\n  public get width(): number {\n    return this._width;\n  }\n\n  private _height = 0;\n  public get height(): number {\n    return this._height;\n  }\n\n  private _backgroundColor: Color | undefined = undefined;\n  public get backgroundColor(): Color | undefined {\n    throw this._backgroundColor;\n  }\n\n  public get numFrames(): number {\n    return this._images.length;\n  }\n\n  constructor(opt: TiffInfoInitOptions) {\n    this._bigEndian = opt.bigEndian;\n    this._signature = opt.signature;\n    this._ifdOffset = opt.ifdOffset;\n    this._images = opt.images;\n    if (this._images.length > 0) {\n      this._width = this._images[0].width;\n      this._height = this._images[0].height;\n    }\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../common/input-buffer';\nimport { ExifData } from '../exif/exif-data';\nimport { FrameType } from '../image/frame-type';\nimport { MemoryImage } from '../image/image';\nimport { Decoder } from './decoder';\nimport { TiffImage } from './tiff/tiff-image';\nimport { TiffInfo } from './tiff/tiff-info';\n\nexport class TiffDecoder implements Decoder {\n  private static readonly _tiffSignature = 42;\n  private static readonly _tiffLittleEndian = 0x4949;\n  private static readonly _tiffBigEndian = 0x4d4d;\n\n  private _input!: InputBuffer;\n\n  private _info: TiffInfo | undefined = undefined;\n  public get info(): TiffInfo | undefined {\n    return this._info;\n  }\n\n  private _exifData: ExifData | undefined = undefined;\n  public get exifData(): ExifData | undefined {\n    return this._exifData;\n  }\n\n  /**\n   * How many frames are available to be decoded. **startDecode** should have been called first.\n   * Non animated image files will have a single frame.\n   */\n  public get numFrames(): number {\n    return this._info !== undefined ? this._info.images.length : 0;\n  }\n\n  /**\n   * Read the TIFF header and IFD blocks.\n   */\n  private readHeader(p: InputBuffer): TiffInfo | undefined {\n    const byteOrder = p.readUint16();\n    if (\n      byteOrder !== TiffDecoder._tiffLittleEndian &&\n      byteOrder !== TiffDecoder._tiffBigEndian\n    ) {\n      return undefined;\n    }\n\n    let bigEndian = false;\n    if (byteOrder === TiffDecoder._tiffBigEndian) {\n      p.bigEndian = true;\n      bigEndian = true;\n    } else {\n      p.bigEndian = false;\n      bigEndian = false;\n    }\n\n    let signature = 0;\n    signature = p.readUint16();\n    if (signature !== TiffDecoder._tiffSignature) {\n      return undefined;\n    }\n\n    let offset = p.readUint32();\n    const ifdOffset = offset;\n\n    const p2 = InputBuffer.from(p);\n    p2.offset = offset;\n\n    const images: TiffImage[] = [];\n    while (offset !== 0) {\n      let img: TiffImage | undefined = undefined;\n      try {\n        img = new TiffImage(p2);\n        if (!img.isValid) {\n          break;\n        }\n      } catch (error) {\n        break;\n      }\n      images.push(img);\n\n      offset = p2.readUint32();\n      if (offset !== 0) {\n        p2.offset = offset;\n      }\n    }\n\n    return images.length > 0\n      ? new TiffInfo({\n          bigEndian: bigEndian,\n          signature: signature,\n          ifdOffset: ifdOffset,\n          images: images,\n        })\n      : undefined;\n  }\n\n  /**\n   * Is the given file a valid TIFF image?\n   */\n  public isValidFile(bytes: Uint8Array): boolean {\n    const buffer = new InputBuffer({\n      buffer: bytes,\n    });\n    return this.readHeader(buffer) !== undefined;\n  }\n\n  /**\n   * Validate the file is a TIFF image and get information about it.\n   * If the file is not a valid TIFF image, undefined is returned.\n   */\n  public startDecode(bytes: Uint8Array): TiffInfo | undefined {\n    this._input = new InputBuffer({\n      buffer: bytes,\n    });\n    this._info = this.readHeader(this._input);\n    if (this.info !== undefined) {\n      const buffer = new InputBuffer({\n        buffer: bytes,\n      });\n      this._exifData = ExifData.fromInputBuffer(buffer);\n    }\n    return this._info;\n  }\n\n  /**\n   * Decode a single frame from the data stat was set with **startDecode**.\n   * If **frame** is out of the range of available frames, undefined is returned.\n   * Non animated image files will only have **frame** 0.\n   */\n  public decodeFrame(frame: number): MemoryImage | undefined {\n    if (this._info === undefined) {\n      return undefined;\n    }\n\n    const image = this._info.images[frame].decode(this._input);\n    if (this._exifData !== undefined) {\n      image.exifData = this._exifData;\n    }\n    return image;\n  }\n\n  /**\n   * Decode the file and extract a single image from it. If the file is\n   * animated, the specified **frame** will be decoded. If there was a problem\n   * decoding the file, undefined is returned.\n   */\n  public decode(bytes: Uint8Array, frame?: number): MemoryImage | undefined {\n    this._input = new InputBuffer({\n      buffer: bytes,\n    });\n\n    this._info = this.readHeader(this._input);\n    if (this._info === undefined) {\n      return undefined;\n    }\n\n    const len = this.numFrames;\n    if (len === 1 || frame !== undefined) {\n      return this.decodeFrame(frame ?? 0);\n    }\n\n    const image = this.decodeFrame(0);\n    if (image === undefined) {\n      return undefined;\n    }\n    image.exifData = ExifData.fromInputBuffer(\n      new InputBuffer({\n        buffer: bytes,\n      })\n    );\n    image.frameType = FrameType.page;\n\n    for (let i = 1; i < len; ++i) {\n      const frame = this.decodeFrame(i);\n      image.addFrame(frame);\n    }\n\n    return image;\n  }\n}\n", "/** @format */\n\nimport { Format, FormatType } from '../color/format';\nimport { OutputBuffer } from '../common/output-buffer';\nimport { LibError } from '../error/lib-error';\nimport { ExifData } from '../exif/exif-data';\nimport { IfdUndefinedValue } from '../exif/ifd-value/ifd-undefined-value';\nimport { MemoryImage } from '../image/image';\nimport { Encoder } from './encoder';\nimport { TiffCompression } from './tiff/tiff-compression';\nimport { TiffFormat } from './tiff/tiff-format';\nimport { TiffPhotometricType } from './tiff/tiff-photometric-type';\n\n/**\n * Encode a MemoryImage to the TIFF format.\n */\nexport class TiffEncoder implements Encoder {\n  private _supportsAnimation = false;\n  public get supportsAnimation(): boolean {\n    return this._supportsAnimation;\n  }\n\n  private getSampleFormat(image: MemoryImage): number {\n    switch (image.formatType) {\n      case FormatType.uint:\n        return TiffFormat.uint;\n      case FormatType.int:\n        return TiffFormat.int;\n      case FormatType.float:\n        return TiffFormat.float;\n    }\n    throw new LibError('Unknown TIFF format type.');\n  }\n\n  public encode(image: MemoryImage, _singleFrame = false): Uint8Array {\n    let img = image;\n\n    const out = new OutputBuffer();\n\n    // TIFF is really just an EXIF structure (or, really, EXIF is just a TIFF\n    // structure).\n\n    const exif = new ExifData();\n    if (img.exifData.size > 0) {\n      exif.imageIfd.copyFrom(img.exifData.imageIfd);\n    }\n\n    // TODO: support encoding HDR images to TIFF.\n    if (img.isHdrFormat) {\n      img = img.convert({\n        format: Format.uint8,\n      });\n    }\n\n    const type =\n      img.numChannels === 1\n        ? TiffPhotometricType.blackIsZero\n        : img.hasPalette\n        ? TiffPhotometricType.palette\n        : TiffPhotometricType.rgb;\n\n    const nc = img.numChannels;\n\n    const ifd0 = exif.imageIfd;\n    ifd0.setValue('ImageWidth', img.width);\n    ifd0.setValue('ImageHeight', img.height);\n    ifd0.setValue('BitsPerSample', img.bitsPerChannel);\n    ifd0.setValue('SampleFormat', this.getSampleFormat(img));\n    ifd0.setValue('SamplesPerPixel', img.hasPalette ? 1 : nc);\n    ifd0.setValue('Compression', TiffCompression.none);\n    ifd0.setValue('PhotometricInterpretation', type);\n    ifd0.setValue('RowsPerStrip', img.height);\n    ifd0.setValue('PlanarConfiguration', 1);\n    ifd0.setValue('TileWidth', img.width);\n    ifd0.setValue('TileLength', img.height);\n    ifd0.setValue('StripByteCounts', img.byteLength);\n    ifd0.setValue('StripOffsets', new IfdUndefinedValue(img.toUint8Array()));\n\n    if (img.hasPalette) {\n      const p = img.palette!;\n      // Only support RGB palettes\n      const numCh = 3;\n      const numC = p.numColors;\n      const colorMap = new Uint16Array(numC * numCh);\n      for (let c = 0, ci = 0; c < numCh; ++c) {\n        for (let i = 0; i < numC; ++i) {\n          colorMap[ci++] = Math.trunc(p.get(i, c)) << 8;\n        }\n      }\n\n      ifd0.setValue('ColorMap', colorMap);\n    }\n\n    exif.write(out);\n\n    return out.getBytes();\n  }\n}\n", "/** @format */\n\nexport enum IccProfileCompression {\n  none,\n  deflate,\n}\n", "/** @format */\n\nimport { inflate, deflate } from 'uzip';\nimport { ArrayUtils } from '../common/array-utils';\nimport { IccProfileCompression } from './icc-profile-compression';\n\n/**\n * ICC Profile data stored with an image.\n */\nexport class IccProfile {\n  private _name: string;\n  public get name(): string {\n    return this._name;\n  }\n\n  private _compression: IccProfileCompression;\n  public get compression(): IccProfileCompression {\n    return this._compression;\n  }\n\n  private _data: Uint8Array;\n  public get data(): Uint8Array {\n    return this._data;\n  }\n\n  constructor(\n    name: string,\n    compression: IccProfileCompression,\n    data: Uint8Array\n  ) {\n    this._name = name;\n    this._compression = compression;\n    this._data = data;\n  }\n\n  public static from(other: IccProfile) {\n    return new IccProfile(\n      other._name,\n      other._compression,\n      ArrayUtils.copyUint8(other._data)\n    );\n  }\n\n  /**\n   * Returns the compressed data of the ICC Profile, compressing the stored data as necessary.\n   */\n  public compressed(): Uint8Array {\n    if (this._compression === IccProfileCompression.deflate) {\n      return this._data;\n    }\n    this._data = deflate(this._data);\n    this._compression = IccProfileCompression.deflate;\n    return this._data;\n  }\n\n  /**\n   * Returns the uncompressed data of the ICC Profile, decompressing the stored data as necessary.\n   */\n  public decompressed(): Uint8Array {\n    if (this._compression === IccProfileCompression.deflate) {\n      return this._data;\n    }\n    this._data = inflate(this._data);\n    this._compression = IccProfileCompression.none;\n    return this._data;\n  }\n\n  public clone(): IccProfile {\n    return IccProfile.from(this);\n  }\n}\n", "/** @format */\n\nimport { ChannelOrder } from '../color/channel-order';\nimport { Color } from '../color/color';\nimport { Format, FormatType } from '../color/format';\nimport { Palette } from './palette';\nimport { Pixel } from './pixel';\n\nexport interface MemoryImageData extends Iterable<Pixel> {\n  get width(): number;\n\n  get height(): number;\n\n  get numChannels(): number;\n\n  /**\n   * The channel **Format** of the image.\n   */\n  get format(): Format;\n\n  /**\n   * Whether the image has uint, int, or float data.\n   */\n  get formatType(): FormatType;\n\n  /**\n   * True if the image format is \"high dynamic range.\" HDR formats include:\n   * float16, float32, float64, int8, int16, and int32.\n   */\n  get isHdrFormat(): boolean;\n\n  /**\n   * True if the image format is \"low dynamic range.\" LDR formats include:\n   * uint1, uint2, uint4, and uint8.\n   */\n  get isLdrFormat(): boolean;\n\n  /**\n   * The number of bits per color channel. Can be 1, 2, 4, 8, 16, 32, or 64.\n   */\n  get bitsPerChannel(): number;\n\n  /**\n   * The maximum value of a pixel channel, based on the **format** of the image.\n   * If the image has a **palette**, this will be the maximum value of a palette\n   * color channel. Float format images will have a **maxChannelValue** of 1,\n   * though they can have values above that.\n   */\n  get maxChannelValue(): number;\n\n  /**\n   * The maximum value of a palette index, based on the **format** of the image.\n   * This differs from **maxChannelValue** in that it will not be affected by\n   * the format of the **palette**.\n   */\n  get maxIndexValue(): number;\n\n  /**\n   * True if the image has a palette. If the image has a palette, then the\n   * image data has 1 channel for the palette index of the pixel.\n   */\n  get hasPalette(): boolean;\n\n  /**\n   * The **Palette** of the image, or undefined if the image does not have one.\n   */\n  get palette(): Palette | undefined;\n\n  /**\n   * The size of the image data in bytes.\n   */\n  get byteLength(): number;\n\n  /**\n   * The size of the image data in bytes.\n   */\n  get length(): number;\n\n  /**\n   * The **ArrayBufferLike** storage of the image.\n   */\n  get buffer(): ArrayBufferLike;\n\n  /**\n   * The size, in bytes, of a row if pixels in the data.\n   */\n  get rowStride(): number;\n\n  /**\n   * Returns a pixel iterator for iterating over a rectangular range of pixels\n   * in the image.\n   */\n  getRange(\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): Iterator<Pixel>;\n\n  /**\n   * Create a **Color** object with the format and number of channels of the\n   * image.\n   */\n  getColor(r: number, g: number, b: number, a?: number): Color;\n\n  /**\n   * Return the **Pixel** at the given coordinates. If **pixel** is provided,\n   * it will be updated and returned rather than allocating a new **Pixel**.\n   */\n  getPixel(x: number, y: number, pixel?: Pixel): Pixel;\n\n  /**\n   * Set the color of the pixel at the given coordinates to the color of the\n   * given Color **c**.\n   */\n  setPixel(x: number, y: number, c: Color): void;\n\n  /**\n   * Set the red channel of the pixel, or the index value for palette images.\n   */\n  setPixelR(x: number, y: number, r: number): void;\n\n  /**\n   * Set the color of the **Pixel** at the given coordinates to the given\n   * color values **r**, **g**, **b**.\n   */\n  setPixelRgb(x: number, y: number, r: number, g: number, b: number): void;\n\n  /**\n   * Set the color of the **Pixel** at the given coordinates to the given\n   * color values **r**, **g**, **b**, and **a**.\n   */\n  setPixelRgba(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void;\n\n  /**\n   * Calls **setPixelRgb**, but ensures **x** and **y** are within the extents\n   * of the image, otherwise it returns without setting the pixel.\n   */\n  setPixelRgbSafe(x: number, y: number, r: number, g: number, b: number): void;\n\n  /**\n   * Calls **setPixelRgba**, but ensures **x** and **y** are within the extents\n   * of the image, otherwise it returns without setting the pixel.\n   */\n  setPixelRgbaSafe(\n    x: number,\n    y: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ): void;\n\n  /**\n   * Set all of the pixels to the Color **c**, or all values to 0 if **c** is not\n   * given.\n   */\n  clear(c?: Color): void;\n\n  /**\n   * Get the copy of this image data.\n   */\n  clone(noPixels?: boolean): MemoryImageData;\n\n  /**\n   * The storage data of the image.\n   */\n  toUint8Array(): Uint8Array;\n\n  /**\n   * Similar to toUint8Array, but will convert the channels of the image pixels\n   * to the given **order**. If that happens, the returned bytes will be a copy\n   * and not a direct view of the image data.\n   */\n  getBytes(order?: ChannelOrder): Uint8Array;\n}\n", "/** @format */\n\nimport { Format } from '../color/format';\n\nexport interface Palette {\n  /**\n   * The size of the palette data in bytes.\n   */\n  get byteLength(): number;\n  /**\n   * The byte buffer storage of the palette data.\n   */\n  get buffer(): ArrayBufferLike;\n  /**\n   * The number of colors stored in the palette.\n   */\n  get numColors(): number;\n  /**\n   * The number of channels per color.\n   */\n  get numChannels(): number;\n  get maxChannelValue(): number;\n  /**\n   * The format of the color data.\n   */\n  get format(): Format;\n  /**\n   * Set the RGB color of a palette entry at **index**. If the palette has fewer\n   * channels than are set, the unsupported channels will be ignored.\n   */\n  setRgb(index: number, r: number, g: number, b: number): void;\n  /**\n   * Set the RGBA color of a palette entry at **index**. If the palette has fewer\n   * channels than are set, the unsupported channels will be ignored.\n   */\n  setRgba(index: number, r: number, g: number, b: number, a: number): void;\n  /**\n   * Set a specific **channel** **value** of the palette entry at **index**. If the\n   * palette has fewer channels than **channel**, the value will be ignored.\n   */\n  set(index: number, channel: number, value: number): void;\n  /**\n   * Get the the value of a specific **channel** of the palette entry at **index**.\n   * If the palette has fewer colors than **index** or fewer channels than\n   * **channel**, 0 will be returned.\n   */\n  get(index: number, channel: number): number;\n  /**\n   * Get the red channel of the palette entry at **index**. If the palette has\n   * fewer colors or channels, 0 will be returned.\n   */\n  getRed(index: number): number;\n  /**\n   * Set the red channel of the palette entry at **index**. If the palette has\n   * fewer colors or channels, it will be ignored.\n   */\n  setRed(index: number, value: number): void;\n  /**\n   * Get the green channel of the palette entry at **index**. If the palette has\n   * fewer colors or channels, 0 will be returned.\n   */\n  getGreen(index: number): number;\n  /**\n   * Set the green channel of the palette entry at **index**. If the palette has\n   * fewer colors or channels, it will be ignored.\n   */\n  setGreen(index: number, value: number): void;\n  /**\n   * Get the blue channel of the palette entry at **index**. If the palette has\n   * fewer colors or channels, 0 will be returned.\n   */\n  getBlue(index: number): number;\n  /**\n   * Set the blue channel of the palette entry at **index**. If the palette has\n   * fewer colors or channels, it will be ignored.\n   */\n  setBlue(index: number, value: number): void;\n  /**\n   * Get the alpha channel of the palette entry at **index**. If the palette has\n   * fewer colors or channels, 0 will be returned.\n   */\n  getAlpha(index: number): number;\n  /**\n   * Set the alpha channel of the palette entry at **index**. If the palette has\n   * fewer colors or channels, it will be ignored.\n   */\n  setAlpha(index: number, value: number): void;\n  /**\n   * Create a copy of the Palette.\n   */\n  clone(): Palette;\n  /**\n   * A Uint8Array view of the palette buffer storage.\n   */\n  toUint8Array(): Uint8Array;\n}\n", "/** @format */\n\nimport { Color } from '../color/color';\nimport { MemoryImage } from './image';\nimport { Palette } from './palette';\n\n/**\n * Interface for color quantizers, which reduce the total number of colors\n * used by an image to a given maximum, used to convert images to palette\n * images.\n */\nexport interface Quantizer {\n  get palette(): Palette;\n\n  getColorIndex(c: Color): number;\n\n  getColorIndexRgb(r: number, g: number, b: number): number;\n\n  /**\n   * Find the index of the closest color to **c** in the **palette**.\n   */\n  getQuantizedColor(c: Color): Color;\n\n  /**\n   * Convert the **image** to a palette image.\n   */\n  getIndexImage(image: MemoryImage): MemoryImage;\n}\n", "/** @format */\n\nexport enum FlipDirection {\n  /**\n   * Flip the image horizontally.\n   */\n  horizontal,\n\n  /**\n   * Flip the image vertically.\n   */\n  vertical,\n\n  /**\n   * Flip the image both horizontally and vertically.\n   */\n  both,\n}\n", "/** @format */\n\nexport enum TrimSide {\n  top = 1,\n  bottom = 2,\n  left = 4,\n  right = 8,\n  all = top | bottom | left | right,\n}\n", "/** @format */\n\nexport enum TrimMode {\n  /**\n   * Trim an image to the top-left and bottom-right most non-transparent pixels\n   */\n  transparent,\n  /**\n   * Trim an image to the top-left and bottom-right most pixels that are not\n   * the same as the top-left most pixel of the image.\n   */\n  topLeftColor,\n  /**\n   * Trim an image to the top-left and bottom-right most pixels that are not\n   * the same as the bottom-right most pixel of the image.\n   */\n  bottomRightColor,\n}\n", "/** @format */\n\nimport { LibError } from '../error/lib-error';\nimport { Point } from '../common/point';\nimport { Interpolation } from '../common/interpolation';\nimport { MathUtils } from '../common/math-utils';\nimport { ExifData } from '../exif/exif-data';\nimport { MemoryImage } from '../image/image';\nimport { ImageUtils } from '../image/image-utils';\nimport { Pixel } from '../image/pixel';\nimport { FlipDirection } from './flip-direction';\nimport { TrimSide } from './trim-side';\nimport { Rectangle } from '../common/rectangle';\nimport { Draw } from '../draw/draw';\nimport { BlendMode } from '../draw/blend-mode';\nimport { TrimMode } from './trim-mode';\n\nexport interface TransformOptions {\n  image: MemoryImage;\n}\n\nexport interface CopyCropCircleOptions extends TransformOptions {\n  radius?: number;\n  center?: Point;\n  antialias?: boolean;\n}\n\nexport interface CopyCropOptions extends TransformOptions {\n  rect: Rectangle;\n  radius?: number;\n  antialias?: boolean;\n}\n\nexport interface CopyRectifyOptions extends TransformOptions {\n  topLeft: Point;\n  topRight: Point;\n  bottomLeft: Point;\n  bottomRight: Point;\n  interpolation?: Interpolation;\n  toImage?: MemoryImage;\n}\n\nexport interface CopyResizeCropSquareOptions extends TransformOptions {\n  size: number;\n  interpolation?: Interpolation;\n  radius?: number;\n  antialias?: boolean;\n}\n\nexport interface CopyResizeOptionsUsingWidth extends TransformOptions {\n  width: number;\n  height?: number;\n  interpolation?: Interpolation;\n}\n\nexport interface CopyResizeOptionsUsingHeight extends TransformOptions {\n  height: number;\n  width?: number;\n  interpolation?: Interpolation;\n}\n\nexport interface CopyRotateOptions extends TransformOptions {\n  angle: number;\n  interpolation?: Interpolation;\n}\n\nexport interface FlipOptions extends TransformOptions {\n  direction: FlipDirection;\n}\n\nexport interface TrimOptions extends TransformOptions {\n  mode?: TrimMode;\n  sides?: TrimSide;\n}\n\nexport abstract class Transform {\n  private static rotate90(src: MemoryImage) {\n    let firstFrame: MemoryImage | undefined = undefined;\n    for (const frame of src.frames) {\n      const dst: MemoryImage =\n        firstFrame?.addFrame() ??\n        MemoryImage.fromResized(frame, frame.height, frame.width, true);\n      firstFrame ??= dst;\n      const hm1 = frame.height - 1;\n      for (let y = 0; y < dst.height; ++y) {\n        for (let x = 0; x < dst.width; ++x) {\n          dst.setPixel(x, y, frame.getPixel(y, hm1 - x));\n        }\n      }\n    }\n    return firstFrame!;\n  }\n\n  private static rotate180(src: MemoryImage) {\n    let firstFrame: MemoryImage | undefined = undefined;\n    for (const frame of src.frames) {\n      const wm1 = frame.width - 1;\n      const hm1 = frame.height - 1;\n      const dst: MemoryImage =\n        firstFrame?.addFrame() ?? MemoryImage.from(frame, true, true);\n      firstFrame ??= dst;\n      for (let y = 0; y < dst.height; ++y) {\n        for (let x = 0; x < dst.width; ++x) {\n          dst.setPixel(x, y, frame.getPixel(wm1 - x, hm1 - y));\n        }\n      }\n    }\n    return firstFrame!;\n  }\n\n  private static rotate270(src: MemoryImage) {\n    let firstFrame: MemoryImage | undefined = undefined;\n    for (const frame of src.frames) {\n      const wm1 = src.width - 1;\n      const dst: MemoryImage =\n        firstFrame?.addFrame() ??\n        MemoryImage.fromResized(frame, frame.height, frame.width, true);\n      firstFrame ??= dst;\n      for (let y = 0; y < dst.height; ++y) {\n        for (let x = 0; x < dst.width; ++x) {\n          dst.setPixel(x, y, frame.getPixel(wm1 - y, x));\n        }\n      }\n    }\n    return firstFrame!;\n  }\n\n  /**\n   * Find the crop area to be used by the trim function.\n   *\n   * Returns the Rectangle. You could pass these constraints\n   * to the **copyCrop** function to crop the image.\n   */\n  private static findTrim(opt: TrimOptions): Rectangle {\n    const mode = opt.mode ?? TrimMode.transparent;\n    const sides = opt.sides ?? TrimSide.all;\n\n    let h = opt.image.height;\n    let w = opt.image.width;\n\n    const bg =\n      mode === TrimMode.topLeftColor\n        ? opt.image.getPixel(0, 0)\n        : mode === TrimMode.bottomRightColor\n        ? opt.image.getPixel(w - 1, h - 1)\n        : undefined;\n\n    let xMin = w;\n    let xMax = 0;\n    let yMin: number | undefined = undefined;\n    let yMax = 0;\n\n    for (let y = 0; y < h; ++y) {\n      let first = true;\n      for (let x = 0; x < w; ++x) {\n        const c = opt.image.getPixel(x, y);\n        if (\n          (mode === TrimMode.transparent && c.a !== 0) ||\n          (mode !== TrimMode.transparent && (bg === undefined || !c.equals(bg)))\n        ) {\n          if (xMin > x) {\n            xMin = x;\n          }\n          if (xMax < x) {\n            xMax = x;\n          }\n          yMin ??= y;\n\n          yMax = y;\n\n          if (first) {\n            x = xMax;\n            first = false;\n          }\n        }\n      }\n    }\n\n    // A trim wasn't found\n    if (yMin === undefined) {\n      return new Rectangle(0, 0, w, h);\n    }\n\n    if (!(sides & TrimSide.top)) {\n      yMin = 0;\n    }\n    if (!(sides & TrimSide.bottom)) {\n      yMax = h - 1;\n    }\n    if (!(sides & TrimSide.left)) {\n      xMin = 0;\n    }\n    if (!(sides & TrimSide.right)) {\n      xMax = w - 1;\n    }\n\n    // Image width in pixels\n    w = 1 + xMax - xMin;\n    // Image height in pixels\n    h = 1 + yMax - yMin;\n\n    return Rectangle.fromXYWH(xMin, yMin, w, h);\n  }\n\n  /**\n   * If **image** has an orientation value in its exif data, this will rotate the\n   * image so that it physically matches its orientation. This can be used to\n   * bake the orientation of the image for image formats that don't support exif\n   * data.\n   */\n  public static bakeOrientation(opt: TransformOptions): MemoryImage {\n    const bakedImage = MemoryImage.from(opt.image);\n    if (\n      !opt.image.exifData.imageIfd.hasOrientation ||\n      opt.image.exifData.imageIfd.orientation === 1\n    ) {\n      return bakedImage;\n    }\n\n    // Copy all exif data except for orientation\n    bakedImage.exifData = ExifData.from(opt.image.exifData);\n    bakedImage.exifData.imageIfd.orientation = undefined;\n\n    switch (opt.image.exifData.imageIfd.orientation) {\n      case 2:\n        return Transform.flipHorizontal({\n          image: bakedImage,\n        });\n      case 3:\n        return Transform.flip({\n          image: bakedImage,\n          direction: FlipDirection.both,\n        });\n      case 4: {\n        const rotated = Transform.copyRotate({\n          image: bakedImage,\n          angle: 180,\n        });\n        return Transform.flipHorizontal({\n          image: rotated,\n        });\n      }\n      case 5: {\n        const rotated = Transform.copyRotate({\n          image: bakedImage,\n          angle: 90,\n        });\n        return Transform.flipHorizontal({\n          image: rotated,\n        });\n      }\n      case 6:\n        return Transform.copyRotate({\n          image: bakedImage,\n          angle: 90,\n        });\n      case 7: {\n        const rotated = Transform.copyRotate({\n          image: bakedImage,\n          angle: -90,\n        });\n        return Transform.flipHorizontal({\n          image: rotated,\n        });\n      }\n      case 8:\n        return Transform.copyRotate({\n          image: bakedImage,\n          angle: -90,\n        });\n    }\n    return bakedImage;\n  }\n\n  /**\n   * Returns a cropped copy of **image**.\n   */\n  public static copyCrop(opt: CopyCropOptions): MemoryImage {\n    let image = opt.image;\n    const radius = opt.radius ?? 0;\n    const antialias = opt.antialias ?? true;\n\n    // Make sure crop rectangle is within the range of the src image.\n    const x = MathUtils.clampInt(opt.rect.left, 0, image.width - 1);\n    const y = MathUtils.clampInt(opt.rect.top, 0, image.height - 1);\n\n    const width =\n      x + opt.rect.width > image.width ? image.width - x : opt.rect.width;\n    const height =\n      y + opt.rect.height > image.height ? image.height - y : opt.rect.height;\n\n    if (radius > 0 && image.hasPalette) {\n      image = image.convert({\n        numChannels: image.numChannels,\n      });\n    }\n\n    let firstFrame: MemoryImage | undefined = undefined;\n    const numFrames = image.numFrames;\n    for (let i = 0; i < numFrames; ++i) {\n      const frame = image.frames[i];\n      const dst: MemoryImage =\n        firstFrame?.addFrame() ??\n        MemoryImage.fromResized(frame, width, height, true);\n      firstFrame ??= dst;\n\n      if (radius > 0) {\n        const rad = Math.round(radius);\n        const rad2 = rad * rad;\n        const x1 = x;\n        const y1 = y;\n        const x2 = x + width;\n        const y2 = y + height;\n        const c1x = x1 + rad - 1;\n        const c1y = y1 + rad - 1;\n        const c2x = x2 - rad + 1;\n        const c2y = y1 + rad - 1;\n        const c3x = x2 - rad + 1;\n        const c3y = y2 - rad + 1;\n        const c4x = x1 + rad - 1;\n        const c4y = y2 - rad + 1;\n\n        const iter = image.getRange(x1, y1, width, height);\n        let iterRes: IteratorResult<Pixel> | undefined = undefined;\n        while (((iterRes = iter.next()), !iterRes.done)) {\n          const p = iterRes.value;\n          const px = p.x;\n          const py = p.y;\n\n          let a = 1;\n          if (px < c1x && py < c1y) {\n            a = ImageUtils.circleTest(p, new Point(c1x, c1y), rad2, antialias);\n            if (a === 0) {\n              dst.setPixelRgba(p.x - x1, p.y - y1, 0, 0, 0, 0);\n              continue;\n            }\n          } else if (px > c2x && py < c2y) {\n            a = ImageUtils.circleTest(p, new Point(c2x, c2y), rad2, antialias);\n            if (a === 0) {\n              dst.setPixelRgba(p.x - x1, p.y - y1, 0, 0, 0, 0);\n              continue;\n            }\n          } else if (px > c3x && py > c3y) {\n            a = ImageUtils.circleTest(p, new Point(c3x, c3y), rad2, antialias);\n            if (a === 0) {\n              dst.setPixelRgba(p.x - x1, p.y - y1, 0, 0, 0, 0);\n              continue;\n            }\n          } else if (px < c4x && py > c4y) {\n            a = ImageUtils.circleTest(p, new Point(c4x, c4y), rad2, antialias);\n            if (a === 0) {\n              dst.setPixelRgba(p.x - x1, p.y - y1, 0, 0, 0, 0);\n              continue;\n            }\n          }\n\n          if (a !== 1) {\n            dst.getPixel(p.x - x1, p.y - y1).setRgba(p.r, p.g, p.b, p.a * a);\n          } else {\n            dst.setPixel(p.x - x1, p.y - y1, p);\n          }\n        }\n      } else {\n        for (const p of dst) {\n          p.set(frame.getPixel(x + p.x, y + p.y));\n        }\n      }\n    }\n\n    return firstFrame!;\n  }\n\n  /**\n   * Returns a circle cropped copy of **image**, centered at **centerX** and\n   * **centerY** and with the given **radius**. If **radius** is not provided,\n   * a radius filling the image will be used. If **centerX** is not provided,\n   * the horizontal mid-point of the image will be used. If **centerY** is not\n   * provided, the vertical mid-point of the image will be used.\n   */\n  public static copyCropCircle(opt: CopyCropCircleOptions): MemoryImage {\n    let image = opt.image;\n    let centerX = opt.center?.x ?? Math.trunc(image.width / 2);\n    let centerY = opt.center?.y ?? Math.trunc(image.height / 2);\n    let radius =\n      opt.radius ?? Math.trunc(Math.min(image.width, image.height) / 2);\n    const antialias = opt.antialias ?? true;\n\n    // Make sure center point is within the range of the src image\n    centerX = MathUtils.clamp(centerX, 0, image.width - 1);\n    centerY = MathUtils.clamp(centerY, 0, image.height - 1);\n    if (radius < 1) {\n      radius = Math.trunc(Math.min(image.width, image.height) / 2);\n    }\n\n    // topLeft.x\n    const tlx = centerX - radius;\n    // topLeft.y\n    const tly = centerY - radius;\n\n    const wh = radius * 2;\n    const radiusSqr = radius * radius;\n\n    if (image.hasPalette) {\n      image = image.convert({\n        numChannels: 4,\n      });\n    }\n\n    let firstFrame: MemoryImage | undefined = undefined;\n    const numFrames = image.numFrames;\n    for (let i = 0; i < numFrames; ++i) {\n      const frame = image.frames[i];\n      const dst: MemoryImage =\n        firstFrame?.addFrame() ?? MemoryImage.fromResized(frame, wh, wh, true);\n      firstFrame ??= dst;\n\n      const bg = frame.backgroundColor ?? image.backgroundColor;\n      if (bg !== undefined) {\n        dst.clear(bg);\n      }\n\n      const dh = dst.height;\n      const dw = radius * 2;\n      for (let yi = 0, sy = tly; yi < dh; ++yi, ++sy) {\n        for (let xi = 0, sx = tlx; xi < dw; ++xi, ++sx) {\n          const p = frame.getPixel(sx, sy);\n          const a = ImageUtils.circleTest(\n            p,\n            new Point(centerX, centerY),\n            radiusSqr,\n            antialias\n          );\n\n          if (a !== 1) {\n            dst.getPixel(xi, yi).setRgba(p.r, p.g, p.b, p.a * a);\n          } else {\n            dst.setPixel(xi, yi, p);\n          }\n        }\n      }\n    }\n\n    return firstFrame!;\n  }\n\n  /**\n   * Returns a copy of the **image** image, flipped by the given **direction**.\n   */\n  public static copyFlip(opt: FlipOptions): MemoryImage {\n    return Transform.flip({\n      image: opt.image.clone(),\n      direction: opt.direction,\n    });\n  }\n\n  /**\n   * Returns a copy of the **image**, where the given rectangle\n   * has been mapped to the full image.\n   */\n  public static copyRectify(opt: CopyRectifyOptions): MemoryImage {\n    const interpolation = opt.interpolation ?? Interpolation.nearest;\n\n    // You can't interpolate index pixels, so we need to convert the image\n    // to a non-palette image if non-nearest interpolation is used.\n    const src =\n      interpolation !== Interpolation.nearest && opt.image.hasPalette\n        ? opt.image.convert({\n            numChannels: opt.image.numChannels,\n          })\n        : opt.image;\n\n    let firstFrame: MemoryImage | undefined = undefined;\n    for (const frame of src.frames) {\n      const dst: MemoryImage =\n        firstFrame?.addFrame() ?? opt.toImage ?? MemoryImage.from(frame, true);\n      firstFrame ??= dst;\n      for (let y = 0; y < dst.height; ++y) {\n        const v = y / (dst.height - 1);\n        for (let x = 0; x < dst.width; ++x) {\n          const u = x / (dst.width - 1);\n          // bilinear interpolation\n          const srcPixelCoord = opt.topLeft\n            .mul((1 - u) * (1 - v))\n            .add(\n              opt.topRight\n                .mul(u * (1 - v))\n                .add(\n                  opt.bottomLeft\n                    .mul((1 - u) * v)\n                    .add(opt.bottomRight.mul(u * v))\n                )\n            );\n\n          const srcPixel =\n            interpolation === Interpolation.nearest\n              ? frame.getPixel(\n                  Math.trunc(srcPixelCoord.x),\n                  Math.trunc(srcPixelCoord.y)\n                )\n              : frame.getPixelInterpolate(\n                  srcPixelCoord.x,\n                  srcPixelCoord.y,\n                  interpolation\n                );\n\n          dst.setPixel(x, y, srcPixel);\n        }\n      }\n    }\n\n    return firstFrame!;\n  }\n\n  /**\n   * Returns a resized copy of the **image**.\n   *\n   * If **height** isn't specified, then it will be determined by the aspect\n   * ratio of **image** and **width**.\n   *\n   * If **width** isn't specified, then it will be determined by the aspect ratio\n   * of **image** and **height**.\n   */\n  public static copyResize(\n    opt: CopyResizeOptionsUsingWidth | CopyResizeOptionsUsingHeight\n  ): MemoryImage {\n    let src = opt.image;\n    let interpolation = opt.interpolation ?? Interpolation.nearest;\n\n    if (opt.width === undefined && opt.height === undefined) {\n      throw new LibError('Invalid size. Please specify the width or height.');\n    }\n\n    // You can't interpolate index pixels\n    if (src.hasPalette) {\n      interpolation = Interpolation.nearest;\n    }\n\n    if (\n      src.exifData.imageIfd.hasOrientation &&\n      src.exifData.imageIfd.orientation !== 1\n    ) {\n      src = Transform.bakeOrientation({\n        image: src,\n      });\n    }\n\n    // this block sets [width] and [height] if null or negative.\n    const height =\n      opt.height === undefined || opt.height <= 0\n        ? Math.trunc(opt.width! * (src.height / src.width))\n        : opt.height;\n\n    const width =\n      opt.width === undefined || opt.width <= 0\n        ? Math.trunc(opt.height! * (src.width / src.height))\n        : opt.width;\n\n    if (width === src.width && height === src.height) {\n      return src.clone();\n    }\n\n    const scaleX = new Int32Array(width);\n    const dx = src.width / width;\n    for (let x = 0; x < width; ++x) {\n      scaleX[x] = Math.trunc(x * dx);\n    }\n\n    let firstFrame: MemoryImage | undefined = undefined;\n    const numFrames = src.numFrames;\n    for (let i = 0; i < numFrames; ++i) {\n      const frame = src.frames[i];\n      const dst: MemoryImage =\n        firstFrame?.addFrame() ??\n        MemoryImage.fromResized(frame, width, height, true);\n      firstFrame ??= dst;\n\n      const dy = frame.height / height;\n      const dx = frame.width / width;\n\n      if (interpolation === Interpolation.average) {\n        for (let y = 0; y < height; ++y) {\n          const y1 = Math.trunc(y * dy);\n          let y2 = Math.trunc((y + 1) * dy);\n          if (y2 === y1) {\n            y2++;\n          }\n\n          for (let x = 0; x < width; ++x) {\n            const x1 = Math.trunc(x * dx);\n            let x2 = Math.trunc((x + 1) * dx);\n            if (x2 === x1) {\n              x2++;\n            }\n\n            let r = 0;\n            let g = 0;\n            let b = 0;\n            let a = 0;\n            let np = 0;\n            for (let sy = y1; sy < y2; ++sy) {\n              for (let sx = x1; sx < x2; ++sx, ++np) {\n                const s = frame.getPixel(sx, sy);\n                r += s.r;\n                g += s.g;\n                b += s.b;\n                a += s.a;\n              }\n            }\n            dst.setPixel(x, y, dst.getColor(r / np, g / np, b / np, a / np));\n          }\n        }\n      } else if (interpolation === Interpolation.nearest) {\n        for (let y = 0; y < height; ++y) {\n          const y2 = Math.trunc(y * dy);\n          for (let x = 0; x < width; ++x) {\n            dst.setPixel(x, y, frame.getPixel(scaleX[x], y2));\n          }\n        }\n      } else {\n        // Copy the pixels from this image to the new image.\n        for (let y = 0; y < height; ++y) {\n          const y2 = y * dy;\n          for (let x = 0; x < width; ++x) {\n            const x2 = x * dx;\n            dst.setPixel(\n              x,\n              y,\n              frame.getPixelInterpolate(x2, y2, interpolation)\n            );\n          }\n        }\n      }\n    }\n\n    return firstFrame!;\n  }\n\n  /**\n   * Returns a resized and square cropped copy of the **image** of **size** size.\n   */\n  public static copyResizeCropSquare(\n    opt: CopyResizeCropSquareOptions\n  ): MemoryImage {\n    const src = opt.image;\n    let interpolation = opt.interpolation ?? Interpolation.nearest;\n    const radius = opt.radius ?? 0;\n    const antialias = opt.antialias ?? true;\n\n    if (opt.size <= 0) {\n      throw new LibError('Invalid size.');\n    }\n\n    // You can't interpolate index pixels\n    if (src.hasPalette) {\n      interpolation = Interpolation.nearest;\n    }\n\n    let height = opt.size;\n    let width = opt.size;\n    if (src.width < src.height) {\n      height = Math.trunc(opt.size * (src.height / src.width));\n    } else if (src.width > src.height) {\n      width = Math.trunc(opt.size * (src.width / src.height));\n    }\n\n    const dy = src.height / height;\n    const dx = src.width / width;\n\n    const xOffset = Math.trunc((width - opt.size) / 2);\n    const yOffset = Math.trunc((height - opt.size) / 2);\n\n    const scaleX =\n      interpolation === Interpolation.nearest\n        ? new Int32Array(opt.size)\n        : undefined;\n\n    if (scaleX !== undefined) {\n      for (let x = 0; x < opt.size; ++x) {\n        scaleX[x] = Math.trunc((x + xOffset) * dx);\n      }\n    }\n\n    let firstFrame: MemoryImage | undefined = undefined;\n    for (const frame of src.frames) {\n      const dst: MemoryImage =\n        firstFrame?.addFrame() ??\n        MemoryImage.fromResized(frame, opt.size, opt.size, true);\n      firstFrame ??= dst;\n\n      // Rounded corners\n      if (radius > 0) {\n        const rad = Math.round(radius);\n        const rad2 = rad * rad;\n        const x1 = 0;\n        const y1 = 0;\n        const x2 = opt.size - 1;\n        const y2 = opt.size - 1;\n        const c1x = x1 + rad - 1;\n        const c1y = y1 + rad - 1;\n        const c2x = x2 - rad + 1;\n        const c2y = y1 + rad - 1;\n        const c3x = x2 - rad + 1;\n        const c3y = y2 - rad + 1;\n        const c4x = x1 + rad - 1;\n        const c4y = y2 - rad + 1;\n\n        const iter = dst.getRange(x1, y1, width, height);\n        let iterRes: IteratorResult<Pixel> | undefined = undefined;\n        while (((iterRes = iter.next()), !iterRes.done)) {\n          const p = iterRes.value;\n          const px = p.x;\n          const py = p.y;\n\n          let a = 1;\n          if (px < c1x && py < c1y) {\n            a = ImageUtils.circleTest(p, new Point(c1x, c1y), rad2, antialias);\n            if (a === 0) {\n              p.setRgba(0, 0, 0, 0);\n              continue;\n            }\n          } else if (px > c2x && py < c2y) {\n            a = ImageUtils.circleTest(p, new Point(c2x, c2y), rad2, antialias);\n            if (a === 0) {\n              p.setRgba(0, 0, 0, 0);\n              continue;\n            }\n          } else if (px > c3x && py > c3y) {\n            a = ImageUtils.circleTest(p, new Point(c3x, c3y), rad2, antialias);\n            if (a === 0) {\n              p.setRgba(0, 0, 0, 0);\n              continue;\n            }\n          } else if (px < c4x && py > c4y) {\n            a = ImageUtils.circleTest(p, new Point(c4x, c4y), rad2, antialias);\n            if (a === 0) {\n              p.setRgba(0, 0, 0, 0);\n              continue;\n            }\n          }\n\n          if (interpolation === Interpolation.nearest) {\n            const sy = Math.trunc((p.y + yOffset) * dy);\n            const sp = frame.getPixel(scaleX![p.x], sy);\n            p.setRgba(sp.r, sp.g, sp.b, sp.a * a);\n          } else {\n            const x = p.x * dx;\n            const y = p.y * dy;\n            const sp = frame.getPixelInterpolate(x, y, interpolation);\n            const spa = sp.a * a;\n            p.setRgba(sp.r, sp.g, sp.b, spa);\n          }\n        }\n\n        return dst;\n      }\n\n      if (interpolation === Interpolation.nearest) {\n        for (let y = 0; y < opt.size; ++y) {\n          const y2 = Math.trunc((y + yOffset) * dy);\n          for (let x = 0; x < opt.size; ++x) {\n            dst.setPixel(x, y, frame.getPixel(scaleX![x], y2));\n          }\n        }\n      } else {\n        for (const p of dst) {\n          const x = p.x * dx;\n          const y = p.y * dy;\n          p.set(frame.getPixelInterpolate(x, y, interpolation));\n        }\n      }\n    }\n\n    return firstFrame!;\n  }\n\n  /**\n   * Returns a copy of the **image**, rotated by **angle** degrees.\n   */\n  public static copyRotate(opt: CopyRotateOptions): MemoryImage {\n    const src = opt.image;\n    let interpolation = opt.interpolation ?? Interpolation.nearest;\n\n    const nAngle = opt.angle % 360;\n\n    // You can't interpolate index pixels\n    if (src.hasPalette) {\n      interpolation = Interpolation.nearest;\n    }\n\n    // Optimized version for orthogonal angles.\n    if (nAngle % 90 === 0) {\n      const iAngle = Math.trunc(nAngle / 90);\n      switch (iAngle) {\n        case 1:\n          // 90 deg.\n          return Transform.rotate90(src);\n        case 2:\n          // 180 deg.\n          return Transform.rotate180(src);\n        case 3:\n          // 270 deg.\n          return Transform.rotate270(src);\n        default:\n          // 0 deg.\n          return MemoryImage.from(src);\n      }\n    }\n\n    // Generic angle.\n    const rad = (nAngle * Math.PI) / 180;\n    const ca = Math.cos(rad);\n    const sa = Math.sin(rad);\n    const ux = Math.abs(src.width * ca);\n    const uy = Math.abs(src.width * sa);\n    const vx = Math.abs(src.height * sa);\n    const vy = Math.abs(src.height * ca);\n    const w2 = 0.5 * src.width;\n    const h2 = 0.5 * src.height;\n    const dw2 = 0.5 * (ux + vx);\n    const dh2 = 0.5 * (uy + vy);\n\n    let firstFrame: MemoryImage | undefined = undefined;\n    const numFrames = src.numFrames;\n    for (let i = 0; i < numFrames; ++i) {\n      const frame = src.frames[i];\n      const dst: MemoryImage =\n        firstFrame?.addFrame() ??\n        MemoryImage.fromResized(\n          src,\n          Math.trunc(ux + vx),\n          Math.trunc(uy + vy),\n          true\n        );\n      firstFrame ??= dst;\n      const bg = frame.backgroundColor ?? src.backgroundColor;\n      if (bg !== undefined) {\n        dst.clear(bg);\n      }\n\n      for (const p of dst) {\n        const x = p.x;\n        const y = p.y;\n        const x2 = w2 + (x - dw2) * ca + (y - dh2) * sa;\n        const y2 = h2 - (x - dw2) * sa + (y - dh2) * ca;\n        if (frame.isBoundsSafe(x2, y2)) {\n          const c = frame.getPixelInterpolate(x2, y2, interpolation);\n          dst.setPixel(x, y, c);\n        }\n      }\n    }\n\n    return firstFrame!;\n  }\n\n  /**\n   * Flips the **image** using the given **direction**, which can be one of:\n   * _FlipDirection.horizontal_, _FlipDirection.vertical_ or _FlipDirection.both_.\n   */\n  public static flip(opt: FlipOptions): MemoryImage {\n    switch (opt.direction) {\n      case FlipDirection.horizontal:\n        Transform.flipHorizontal(opt);\n        break;\n      case FlipDirection.vertical:\n        Transform.flipVertical(opt);\n        break;\n      case FlipDirection.both:\n        Transform.flipHorizontalVertical(opt);\n        break;\n    }\n\n    return opt.image;\n  }\n\n  /**\n   * Flips the **image** vertically.\n   */\n  public static flipVertical(opt: TransformOptions): MemoryImage {\n    const numFrames = opt.image.numFrames;\n    for (let i = 0; i < numFrames; ++i) {\n      const frame = opt.image.frames[i];\n      const w = frame.width;\n      const h = frame.height;\n      const h2 = Math.trunc(h / 2);\n      if (opt.image.hasPalette) {\n        for (let y = 0, y2 = h - 1; y < h2; ++y, --y2) {\n          for (let x = 0; x < w; ++x) {\n            const p1 = frame.getPixel(x, y);\n            const p2 = frame.getPixel(x, y2);\n            const t = p1.index;\n            p1.index = p2.index;\n            p2.index = t;\n          }\n        }\n      } else {\n        for (let y = 0, y2 = h - 1; y < h2; ++y, --y2) {\n          for (let x = 0; x < w; ++x) {\n            const p1 = frame.getPixel(x, y);\n            const p2 = frame.getPixel(x, y2);\n            let t = p1.r;\n            p1.r = p2.r;\n            p2.r = t;\n\n            t = p1.g;\n            p1.g = p2.g;\n            p2.g = t;\n\n            t = p1.b;\n            p1.b = p2.b;\n            p2.b = t;\n\n            t = p1.a;\n            p1.a = p2.a;\n            p2.a = t;\n          }\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Flips the **image** horizontally.\n   */\n  public static flipHorizontal(opt: TransformOptions): MemoryImage {\n    const numFrames = opt.image.numFrames;\n    for (let i = 0; i < numFrames; ++i) {\n      const frame = opt.image.frames[i];\n      const w = frame.width;\n      const h = frame.height;\n      const w2 = Math.trunc(w / 2);\n      if (opt.image.hasPalette) {\n        for (let y = 0; y < h; ++y) {\n          for (let x = 0, x2 = w - 1; x < w2; ++x, --x2) {\n            const p1 = frame.getPixel(x, y);\n            const p2 = frame.getPixel(x2, y);\n            const t = p1.index;\n            p1.index = p2.index;\n            p2.index = t;\n          }\n        }\n      } else {\n        for (let y = 0; y < h; ++y) {\n          for (let x = 0, x2 = w - 1; x < w2; ++x, --x2) {\n            const p1 = frame.getPixel(x, y);\n            const p2 = frame.getPixel(x2, y);\n            let t = p1.r;\n            p1.r = p2.r;\n            p2.r = t;\n\n            t = p1.g;\n            p1.g = p2.g;\n            p2.g = t;\n\n            t = p1.b;\n            p1.b = p2.b;\n            p2.b = t;\n\n            t = p1.a;\n            p1.a = p2.a;\n            p2.a = t;\n          }\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Flip the **image** horizontally and vertically.\n   */\n  public static flipHorizontalVertical(opt: TransformOptions): MemoryImage {\n    const numFrames = opt.image.numFrames;\n    for (let i = 0; i < numFrames; ++i) {\n      const frame = opt.image.frames[i];\n      const w = frame.width;\n      const h = frame.height;\n      const h2 = Math.trunc(h / 2);\n      if (frame.hasPalette) {\n        for (let y = 0, y2 = h - 1; y < h2; ++y, --y2) {\n          for (let x = 0, x2 = w - 1; x < w; ++x, --x2) {\n            const p1 = frame.getPixel(x, y);\n            const p2 = frame.getPixel(x2, y2);\n            const t = p1.index;\n            p1.index = p2.index;\n            p2.index = t;\n          }\n        }\n      } else {\n        for (let y = 0, y2 = h - 1; y < h2; ++y, --y2) {\n          for (let x = 0, x2 = w - 1; x < w; ++x, --x2) {\n            const p1 = frame.getPixel(x, y);\n            const p2 = frame.getPixel(x2, y2);\n            let t = p1.r;\n            p1.r = p2.r;\n            p2.r = t;\n\n            t = p1.g;\n            p1.g = p2.g;\n            p2.g = t;\n\n            t = p1.b;\n            p1.b = p2.b;\n            p2.b = t;\n\n            t = p1.a;\n            p1.a = p2.a;\n            p2.a = t;\n          }\n        }\n      }\n    }\n    return opt.image;\n  }\n\n  /**\n   * Automatically crops the image by finding the corners of the image that\n   * meet the **mode** criteria (not transparent or a different color).\n   *\n   * **mode** can be either _TrimMode.transparent_, _TrimMode.topLeftColor_ or\n   * _TrimMode.bottomRightColor_.\n   *\n   * **sides** can be used to control which sides of the image get trimmed,\n   * and can be any combination of _TrimSide.top_, _TrimSide.bottom_, _TrimSide.left_,\n   * and _TrimSide.right_.\n   */\n  public static trim(opt: TrimOptions): MemoryImage {\n    const mode = opt.mode ?? TrimMode.topLeftColor;\n    const sides = opt.sides ?? TrimSide.all;\n\n    if (mode === TrimMode.transparent && opt.image.numChannels === 3) {\n      return MemoryImage.from(opt.image);\n    }\n\n    const crop = Transform.findTrim({\n      image: opt.image,\n      mode: mode,\n      sides: sides,\n    });\n\n    let firstFrame: MemoryImage | undefined = undefined;\n    for (const frame of opt.image.frames) {\n      const dst: MemoryImage =\n        firstFrame?.addFrame() ??\n        MemoryImage.fromResized(frame, crop.width, crop.height, true);\n      firstFrame ??= dst;\n\n      Draw.compositeImage({\n        dst: dst,\n        src: opt.image,\n        srcX: crop.left,\n        srcY: crop.top,\n        srcW: crop.width,\n        srcH: crop.height,\n        blend: BlendMode.direct,\n      });\n    }\n\n    return firstFrame!;\n  }\n}\n", "/** @format */\n\nimport { CompressionLevel, TypedArray } from './common/typings';\nimport { BmpDecoder } from './formats/bmp-decoder';\nimport { BmpEncoder } from './formats/bmp-encoder';\nimport { Encoder } from './formats/encoder';\nimport { Decoder } from './formats/decoder';\nimport { GifDecoder } from './formats/gif-decoder';\nimport { GifEncoder } from './formats/gif-encoder';\nimport { IcoDecoder } from './formats/ico-decoder';\nimport { IcoEncoder } from './formats/ico-encoder';\nimport { JpegDecoder } from './formats/jpeg-decoder';\nimport { JpegEncoder } from './formats/jpeg-encoder';\nimport { PngDecoder } from './formats/png-decoder';\nimport { PngEncoder } from './formats/png-encoder';\nimport { TgaDecoder } from './formats/tga-decoder';\nimport { TgaEncoder } from './formats/tga-encoder';\nimport { TiffDecoder } from './formats/tiff-decoder';\nimport { TiffEncoder } from './formats/tiff-encoder';\nimport { MemoryImage } from './image/image';\nimport { PngFilterType } from './formats/png/png-filter-type';\nimport { DitherKernel } from './filter/dither-kernel';\nimport { ExifData } from './exif/exif-data';\nimport { JpegUtils } from './formats/jpeg/jpeg-utils';\n\n// Export types from 'color' directory\nexport { ChannelOrder, ChannelOrderLength } from './color/channel-order';\nexport { Channel } from './color/channel';\nexport { ColorFloat16 } from './color/color-float16';\nexport { ColorFloat32 } from './color/color-float32';\nexport { ColorFloat64 } from './color/color-float64';\nexport { ColorInt8 } from './color/color-int8';\nexport { ColorInt16 } from './color/color-int16';\nexport { ColorInt32 } from './color/color-int32';\nexport { ColorRgb8 } from './color/color-rgb8';\nexport { ColorRgba8 } from './color/color-rgba8';\nexport { ColorUint1 } from './color/color-uint1';\nexport { ColorUint2 } from './color/color-uint2';\nexport { ColorUint4 } from './color/color-uint4';\nexport { ColorUint8 } from './color/color-uint8';\nexport { ColorUint16 } from './color/color-uint16';\nexport { ColorUint32 } from './color/color-uint32';\nexport { Color, ColorConvertOptions } from './color/color';\nexport {\n  Format,\n  FormatType,\n  FormatMaxValue,\n  FormatSize,\n  FormatToFormatType,\n  convertFormatValue,\n} from './color/format';\n\n// Export types from 'common' directory\nexport { ArrayUtils } from './common/array-utils';\nexport { BitUtils } from './common/bit-utils';\nexport { Crc32, Crc32Options } from './common/crc32';\nexport { Float16 } from './common/float16';\nexport { InputBuffer, InputBufferInitOptions } from './common/input-buffer';\nexport { Interpolation } from './common/interpolation';\nexport { Line } from './common/line';\nexport { MathUtils } from './common/math-utils';\nexport { OutputBuffer, OutputBufferInitOptions } from './common/output-buffer';\nexport { Point } from './common/point';\nexport { RandomUtils } from './common/random-utils';\nexport { Rational } from './common/rational';\nexport { Rectangle } from './common/rectangle';\nexport { StringUtils } from './common/string-utils';\nexport { BufferEncoding, CompressionLevel, TypedArray } from './common/typings';\n\n// Export types from 'draw' directory\nexport { BlendMode } from './draw/blend-mode';\nexport { CircleQuadrant } from './draw/circle-quadrant';\nexport {\n  Draw,\n  CompositeImageOptions,\n  DrawCircleOptions,\n  DrawLineOptions,\n  DrawPixelOptions,\n  DrawPolygonOptions,\n  DrawRectOptions,\n  FillCircleOptions,\n  FillFloodOptions,\n  FillOptions,\n  FillPolygonOptions,\n  FillRectOptions,\n  MaskFloodOptions,\n} from './draw/draw';\n\n// Export types from 'error' directory\nexport { LibError } from './error/lib-error';\n\n// Export types from 'exif' directory\nexport { IfdAsciiValue } from './exif/ifd-value/ifd-ascii-value';\nexport { IfdByteValue } from './exif/ifd-value/ifd-byte-value';\nexport { IfdDoubleValue } from './exif/ifd-value/ifd-double-value';\nexport { IfdLongValue } from './exif/ifd-value/ifd-long-value';\nexport { IfdRationalValue } from './exif/ifd-value/ifd-rational-value';\nexport { IfdSByteValue } from './exif/ifd-value/ifd-sbyte-value';\nexport { IfdShortValue } from './exif/ifd-value/ifd-short-value';\nexport { IfdSingleValue } from './exif/ifd-value/ifd-single-value';\nexport { IfdSLongValue } from './exif/ifd-value/ifd-slong-value';\nexport { IfdSRationalValue } from './exif/ifd-value/ifd-srational-value';\nexport { IfdSShortValue } from './exif/ifd-value/ifd-sshort-value';\nexport { IfdUndefinedValue } from './exif/ifd-value/ifd-undefined-value';\nexport { IfdValue } from './exif/ifd-value/ifd-value';\nexport { ExifData } from './exif/exif-data';\nexport { ExifEntry } from './exif/exif-entry';\nexport {\n  ExifTag,\n  ExifTagInitOptions,\n  ExifGpsTags,\n  ExifImageTags,\n  ExifInteropTags,\n  ExifTagNameToID,\n} from './exif/exif-tag';\nexport { IfdContainer } from './exif/ifd-container';\nexport { IfdDirectory } from './exif/ifd-directory';\nexport {\n  IfdValueType,\n  IfdValueTypeSize,\n  getIfdValueTypeSize,\n  getIfdValueTypeString,\n} from './exif/ifd-value-type';\n\n// Export types from 'filter' directory\nexport { DitherKernel, DitherKernels } from './filter/dither-kernel';\nexport {\n  Filter,\n  AdjustColorOptions,\n  BillboardOptions,\n  BleachBypassOptions,\n  BulgeDistortionOptions,\n  BumpToNormalOptions,\n  ChromaticAberrationOptions,\n  ColorHalftone,\n  ColorOffsetOptions,\n  ContrastOptions,\n  ConvolutionOptions,\n  CopyImageChannelsOptions,\n  DitherImageOptions,\n  DotScreenOptions,\n  DropShadowOptions,\n  EdgeGlowOptions,\n  EmbossOptions,\n  GammaOptions,\n  GaussianBlurOptions,\n  GrayscaleOptions,\n  HdrToLdrOptions,\n  HexagonPixelateOptions,\n  InvertOptions,\n  LuminanceThresholdOptions,\n  MonochromeOptions,\n  NoiseOptions,\n  NormalizeOptions,\n  PixelateOptions,\n  QuantizeOptions,\n  ReinhardToneMapOptions,\n  RemapColorsOptions,\n  ScaleRgbaOptions,\n  SeparableConvolutionOptions,\n  SepiaOptions,\n  SketchOptions,\n  SmoothOptions,\n  SobelOptions,\n  StretchDistortionOptions,\n  VignetteOptions,\n} from './filter/filter';\nexport { NoiseType } from './filter/noise-type';\nexport { PixelateMode } from './filter/pixelate-mode';\nexport { QuantizeMethod } from './filter/quantize-method';\nexport {\n  SeparableKernel,\n  SeparableKernelApplyOptions,\n} from './filter/separable-kernel';\n\n// Export types from 'formats' directory\nexport { BmpCompressionMode } from './formats/bmp/bmp-compression-mode';\nexport { BmpFileHeader } from './formats/bmp/bmp-file-header';\nexport { BmpInfo } from './formats/bmp/bmp-info';\n\nexport { GifColorMap } from './formats/gif/gif-color-map';\nexport { GifImageDesc } from './formats/gif/gif-image-desc';\nexport { GifInfo, GifInfoInitOptions } from './formats/gif/gif-info';\n\nexport { IcoBmpInfo } from './formats/ico/ico-bmp-info';\nexport {\n  IcoInfoImage,\n  IcoInfoImageInitOptions,\n} from './formats/ico/ico-info-image';\nexport { IcoInfo } from './formats/ico/ico-info';\nexport { IcoType, IcoTypeLength } from './formats/ico/ico-type';\n\nexport { HuffmanNode } from './formats/jpeg/huffman-node';\nexport { HuffmanParent } from './formats/jpeg/huffman-parent';\nexport { HuffmanValue } from './formats/jpeg/huffman-value';\nexport { JpegAdobe } from './formats/jpeg/jpeg-adobe';\nexport { JpegComponentData } from './formats/jpeg/jpeg-component-data';\nexport { JpegComponent } from './formats/jpeg/jpeg-component';\nexport { JpegData } from './formats/jpeg/jpeg-data';\nexport { JpegFrame } from './formats/jpeg/jpeg-frame';\nexport { JpegHuffman } from './formats/jpeg/jpeg-huffman';\nexport { JpegInfo } from './formats/jpeg/jpeg-info';\nexport { JpegJfif } from './formats/jpeg/jpeg-jfif';\nexport { JpegMarker } from './formats/jpeg/jpeg-marker';\nexport { JpegQuantize } from './formats/jpeg/jpeg-quantize';\nexport { JpegScan } from './formats/jpeg/jpeg-scan';\nexport { JpegUtils } from './formats/jpeg/jpeg-utils';\n\nexport { PngBlendMode } from './formats/png/png-blend-mode';\nexport { PngColorType } from './formats/png/png-color-type';\nexport { PngDisposeMode } from './formats/png/png-dispose-mode';\nexport { PngFilterType } from './formats/png/png-filter-type';\nexport { PngFrame, PngFrameInitOptions } from './formats/png/png-frame';\nexport { PngInfo, PngInfoInitOptions } from './formats/png/png-info';\n\nexport { TgaImageType, TgaImageTypeLength } from './formats/tga/tga-image-type';\nexport { TgaInfo, TgaInfoInitOptions } from './formats/tga/tga-info';\n\nexport { TiffBitReader } from './formats/tiff/tiff-bit-reader';\nexport { TiffCompression } from './formats/tiff/tiff-compression';\nexport { TiffEntry, TiffEntryInitOptions } from './formats/tiff/tiff-entry';\nexport {\n  TiffFaxDecoder,\n  TiffFaxDecoderInitOptions,\n} from './formats/tiff/tiff-fax-decoder';\nexport { TiffFormat } from './formats/tiff/tiff-format';\nexport { TiffImageType } from './formats/tiff/tiff-image-type';\nexport { TiffImage } from './formats/tiff/tiff-image';\nexport { TiffInfo, TiffInfoInitOptions } from './formats/tiff/tiff-info';\nexport { LzwDecoder } from './formats/tiff/tiff-lzw-decoder';\nexport {\n  TiffPhotometricType,\n  TiffPhotometricTypeLength,\n} from './formats/tiff/tiff-photometric-type';\n\nexport { BmpDecoder } from './formats/bmp-decoder';\nexport { BmpEncoder } from './formats/bmp-encoder';\nexport { DecodeInfo } from './formats/decode-info';\nexport { Decoder } from './formats/decoder';\nexport { DibDecoder } from './formats/dib-decoder';\nexport { Encoder } from './formats/encoder';\nexport { GifDecoder } from './formats/gif-decoder';\nexport { GifEncoder, GifEncoderInitOptions } from './formats/gif-encoder';\nexport { IcoDecoder } from './formats/ico-decoder';\nexport { IcoEncoder } from './formats/ico-encoder';\nexport { JpegDecoder } from './formats/jpeg-decoder';\nexport { JpegEncoder } from './formats/jpeg-encoder';\nexport { PngDecoder } from './formats/png-decoder';\nexport { PngEncoder, PngEncoderInitOptions } from './formats/png-encoder';\nexport { TgaDecoder } from './formats/tga-decoder';\nexport { TgaEncoder } from './formats/tga-encoder';\nexport { TiffDecoder } from './formats/tiff-decoder';\nexport { TiffEncoder } from './formats/tiff-encoder';\nexport { WinEncoder } from './formats/win-encoder';\n\n// Export types from 'image' directory\nexport { FrameType } from './image/frame-type';\nexport { HeapNode } from './image/heap-node';\nexport { IccProfile } from './image/icc-profile';\nexport { IccProfileCompression } from './image/icc-profile-compression';\nexport { MemoryImageDataFloat16 } from './image/image-data-float16';\nexport { MemoryImageDataFloat32 } from './image/image-data-float32';\nexport { MemoryImageDataFloat64 } from './image/image-data-float64';\nexport { MemoryImageDataInt8 } from './image/image-data-int8';\nexport { MemoryImageDataInt16 } from './image/image-data-int16';\nexport { MemoryImageDataInt32 } from './image/image-data-int32';\nexport { MemoryImageDataUint1 } from './image/image-data-uint1';\nexport { MemoryImageDataUint2 } from './image/image-data-uint2';\nexport { MemoryImageDataUint4 } from './image/image-data-uint4';\nexport { MemoryImageDataUint8 } from './image/image-data-uint8';\nexport { MemoryImageDataUint16 } from './image/image-data-uint16';\nexport { MemoryImageDataUint32 } from './image/image-data-uint32';\nexport { MemoryImageData } from './image/image-data';\nexport { ImageUtils } from './image/image-utils';\nexport {\n  MemoryImage,\n  MemoryImageCloneOptions,\n  MemoryImageColorExtremes,\n  MemoryImageConvertOptions,\n  MemoryImageCreateOptions,\n  MemoryImageFromBytesOptions,\n} from './image/image';\nexport { NeuralQuantizer } from './image/neural-quantizer';\nexport { OctreeNode } from './image/octree-node';\nexport { OctreeQuantizer } from './image/octree-quantizer';\nexport { PaletteFloat16 } from './image/palette-float16';\nexport { PaletteFloat32 } from './image/palette-float32';\nexport { PaletteFloat64 } from './image/palette-float64';\nexport { PaletteInt8 } from './image/palette-int8';\nexport { PaletteInt16 } from './image/palette-int16';\nexport { PaletteInt32 } from './image/palette-int32';\nexport { PaletteUint8 } from './image/palette-uint8';\nexport { PaletteUint16 } from './image/palette-uint16';\nexport { PaletteUint32 } from './image/palette-uint32';\nexport { Palette } from './image/palette';\nexport { PixelFloat16 } from './image/pixel-float16';\nexport { PixelFloat32 } from './image/pixel-float32';\nexport { PixelFloat64 } from './image/pixel-float64';\nexport { PixelInt8 } from './image/pixel-int8';\nexport { PixelInt16 } from './image/pixel-int16';\nexport { PixelInt32 } from './image/pixel-int32';\nexport { PixelUint1 } from './image/pixel-uint1';\nexport { PixelUint2 } from './image/pixel-uint2';\nexport { PixelUint4 } from './image/pixel-uint4';\nexport { PixelUint8 } from './image/pixel-uint8';\nexport { PixelUint16 } from './image/pixel-uint16';\nexport { PixelUint32 } from './image/pixel-uint32';\nexport { PixelUndefined } from './image/pixel-undefined';\nexport { PixelRangeIterator } from './image/pixel-range-iterator';\nexport { Pixel, UndefinedPixel } from './image/pixel';\nexport { QuantizerType } from './image/quantizer-type';\nexport { Quantizer } from './image/quantizer';\n\n// Export types from 'transform' directory\nexport { FlipDirection } from './transform/flip-direction';\nexport {\n  Transform,\n  CopyCropCircleOptions,\n  CopyCropOptions,\n  CopyRectifyOptions,\n  CopyResizeCropSquareOptions,\n  CopyResizeOptionsUsingHeight,\n  CopyResizeOptionsUsingWidth,\n  CopyRotateOptions,\n  FlipOptions,\n  TransformOptions,\n  TrimOptions,\n} from './transform/transform';\nexport { TrimMode } from './transform/trim-mode';\nexport { TrimSide } from './transform/trim-side';\n\n// In-place exports\nexport interface DecodeOptions {\n  data: TypedArray;\n}\n\nexport interface DecodeImageOptions extends DecodeOptions {\n  frame?: number;\n}\n\nexport interface DecodeNamedImageOptions extends DecodeImageOptions {\n  name: string;\n}\n\nexport interface EncodeOptions {\n  image: MemoryImage;\n}\n\nexport interface EncodeNamedImageOptions extends EncodeOptions {\n  name: string;\n}\n\nexport interface EncodeJpgOptions extends EncodeOptions {\n  quality?: number;\n}\n\nexport interface InjectJpgExifOptions extends DecodeOptions {\n  exifData: ExifData;\n}\n\nexport interface EncodeAnimatedOptions extends EncodeOptions {\n  singleFrame?: boolean;\n}\n\nexport interface EncodePngOptions extends EncodeAnimatedOptions {\n  level?: CompressionLevel;\n  filter?: PngFilterType;\n}\n\nexport interface EncodeGifOptions extends EncodeAnimatedOptions {\n  repeat?: number;\n  samplingFactor?: number;\n  dither?: DitherKernel;\n  ditherSerpentine?: boolean;\n}\n\nexport interface EncodeIcoImagesOptions {\n  images: MemoryImage[];\n}\n\n/**\n * Return the Decoder that can decode image with the given **name**,\n * by looking at the file extension.\n */\nexport function findDecoderForNamedImage(name: string): Decoder | undefined {\n  const n = name.toLowerCase();\n  if (n.endsWith('.jpg') || n.endsWith('.jpeg')) {\n    return new JpegDecoder();\n  }\n  if (n.endsWith('.png')) {\n    return new PngDecoder();\n  }\n  if (n.endsWith('.tga')) {\n    return new TgaDecoder();\n  }\n  if (n.endsWith('.gif')) {\n    return new GifDecoder();\n  }\n  if (n.endsWith('.tif') || n.endsWith('.tiff')) {\n    return new TiffDecoder();\n  }\n  if (n.endsWith('.bmp')) {\n    return new BmpDecoder();\n  }\n  if (n.endsWith('.ico')) {\n    return new IcoDecoder();\n  }\n  return undefined;\n}\n\n/**\n * Return the Encoder that can decode image with the given **name**,\n * by looking at the file extension.\n */\nexport function findEncoderForNamedImage(name: string): Encoder | undefined {\n  const n = name.toLowerCase();\n  if (n.endsWith('.jpg') || n.endsWith('.jpeg')) {\n    return new JpegEncoder();\n  }\n  if (n.endsWith('.png')) {\n    return new PngEncoder();\n  }\n  if (n.endsWith('.tga')) {\n    return new TgaEncoder();\n  }\n  if (n.endsWith('.gif')) {\n    return new GifEncoder();\n  }\n  if (n.endsWith('.tif') || n.endsWith('.tiff')) {\n    return new TiffEncoder();\n  }\n  if (n.endsWith('.bmp')) {\n    return new BmpEncoder();\n  }\n  if (n.endsWith('.ico')) {\n    return new IcoEncoder();\n  }\n  if (n.endsWith('.cur')) {\n    return new IcoEncoder();\n  }\n  return undefined;\n}\n\n/**\n * Find a Decoder that is able to decode the given image **data**.\n * Use this is you don't know the type of image it is.\n *\n * **WARNING:** Since this will check the image data against all known decoders,\n * it is much slower than using an explicit decoder.\n */\nexport function findDecoderForData(data: TypedArray): Decoder | undefined {\n  // The letious decoders will be creating a Uint8List for their InputStream\n  // if the data isn't already that type, so do it once here to avoid having to\n  // do it multiple times.\n  const bytes = data instanceof Uint8Array ? data : new Uint8Array(data);\n\n  const jpg = new JpegDecoder();\n  if (jpg.isValidFile(bytes)) {\n    return jpg;\n  }\n\n  const png = new PngDecoder();\n  if (png.isValidFile(bytes)) {\n    return png;\n  }\n\n  const gif = new GifDecoder();\n  if (gif.isValidFile(bytes)) {\n    return gif;\n  }\n\n  const tiff = new TiffDecoder();\n  if (tiff.isValidFile(bytes)) {\n    return tiff;\n  }\n\n  const bmp = new BmpDecoder();\n  if (bmp.isValidFile(bytes)) {\n    return bmp;\n  }\n\n  const tga = new TgaDecoder();\n  if (tga.isValidFile(bytes)) {\n    return tga;\n  }\n\n  const ico = new IcoDecoder();\n  if (ico.isValidFile(bytes)) {\n    return ico;\n  }\n\n  return undefined;\n}\n\n/**\n * Decode the given image file bytes by first identifying the format of the\n * file and using that decoder to decode the file into a single frame MemoryImage.\n *\n * **WARNING:** Since this will check the image data against all known decoders,\n * it is much slower than using an explicit decoder.\n */\nexport function decodeImage(opt: DecodeImageOptions): MemoryImage | undefined {\n  const decoder = findDecoderForData(opt.data);\n  if (decoder === undefined) {\n    return undefined;\n  }\n  const dataUint8 = new Uint8Array(opt.data);\n  return decoder.decode(dataUint8, opt.frame);\n}\n\n/**\n * Decodes the given image file bytes, using the filename extension to\n * determine the decoder.\n */\nexport function decodeNamedImage(\n  opt: DecodeNamedImageOptions\n): MemoryImage | undefined {\n  const decoder = findDecoderForNamedImage(opt.name);\n  if (decoder !== undefined) {\n    const dataUint8 = new Uint8Array(opt.data);\n    return decoder.decode(dataUint8, opt.frame);\n  }\n  return decodeImage(opt);\n}\n\n/**\n * Encode the MemoryImage to the format determined by the file extension of **name**.\n * If a format wasn't able to be identified, undefined will be returned.\n * Otherwise the encoded format bytes of the image will be returned.\n */\nexport function encodeNamedImage(\n  opt: EncodeNamedImageOptions\n): Uint8Array | undefined {\n  const encoder = findEncoderForNamedImage(opt.name);\n  if (encoder === undefined) {\n    return undefined;\n  }\n  return encoder.encode(opt.image);\n}\n\n/**\n * Decode a JPG formatted image.\n */\nexport function decodeJpg(opt: DecodeOptions): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(opt.data);\n  return new JpegDecoder().decode(dataUint8);\n}\n\n/**\n * Encode an image to the JPEG format.\n */\nexport function encodeJpg(opt: EncodeJpgOptions): Uint8Array {\n  const quality = opt.quality ?? 100;\n  return new JpegEncoder(quality).encode(opt.image);\n}\n\n/**\n * Decode only the ExifData from a JPEG file, returning undefined if it was\n * unable to.\n */\nexport function decodeJpgExif(opt: DecodeOptions): ExifData | undefined {\n  const dataUint8 = new Uint8Array(opt.data);\n  return new JpegUtils().decodeExif(dataUint8);\n}\n\n/**\n * Inject ExifData into a JPEG file, replacing any existing EXIF data.\n * The new JPEG file bytes will be returned, otherwise undefined if there was an\n * issue.\n */\nexport function injectJpgExif(\n  opt: InjectJpgExifOptions\n): Uint8Array | undefined {\n  const dataUint8 = new Uint8Array(opt.data);\n  return new JpegUtils().injectExif(opt.exifData, dataUint8);\n}\n\n/**\n * Decode a PNG formatted image.\n */\nexport function decodePng(opt: DecodeImageOptions): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(opt.data);\n  return new PngDecoder().decode(dataUint8, opt.frame);\n}\n\n/**\n * Encode an image to the PNG format.\n */\nexport function encodePng(opt: EncodePngOptions): Uint8Array {\n  const singleFrame = opt.singleFrame ?? false;\n  const level = opt.level ?? 6;\n  const filter = opt.filter ?? PngFilterType.paeth;\n  return new PngEncoder({\n    filter: filter,\n    level: level,\n  }).encode(opt.image, singleFrame);\n}\n\n/**\n * Decode a Targa formatted image.\n */\nexport function decodeTga(opt: DecodeImageOptions): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(opt.data);\n  return new TgaDecoder().decode(dataUint8, opt.frame);\n}\n\n/**\n * Encode an image to the Targa format.\n */\nexport function encodeTga(opt: EncodeOptions): Uint8Array {\n  return new TgaEncoder().encode(opt.image);\n}\n\n/**\n * Decode a GIF formatted image (first frame for animations).\n */\nexport function decodeGif(opt: DecodeImageOptions): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(opt.data);\n  return new GifDecoder().decode(dataUint8, opt.frame);\n}\n\n/**\n * Encode an image to the GIF format.\n *\n * The **samplingFactor** specifies the sampling factor for\n * image quantization. It is responsible for reducing\n * the amount of unique colors in your images to 256.\n * According to https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/,\n * a sampling factor of 10 gives you a reasonable trade-off between\n * image quality and quantization speed.\n * If you know that you have less than 256 colors in your frames\n * anyway, you should supply a very large **samplingFactor** for maximum performance.\n */\nexport function encodeGif(opt: EncodeGifOptions): Uint8Array {\n  const singleFrame = opt.singleFrame ?? false;\n  const repeat = opt.repeat ?? 0;\n  const samplingFactor = opt.samplingFactor ?? 10;\n  const dither = opt.dither ?? DitherKernel.floydSteinberg;\n  const ditherSerpentine = opt.ditherSerpentine ?? false;\n  return new GifEncoder({\n    repeat: repeat,\n    samplingFactor: samplingFactor,\n    dither: dither,\n    ditherSerpentine: ditherSerpentine,\n  }).encode(opt.image, singleFrame);\n}\n\n/**\n * Decode a TIFF formatted image.\n */\nexport function decodeTiff(opt: DecodeImageOptions): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(opt.data);\n  return new TiffDecoder().decode(dataUint8, opt.frame);\n}\n\n/**\n * Encode an image to the TIFF format.\n */\nexport function encodeTiff(opt: EncodeAnimatedOptions): Uint8Array {\n  const singleFrame = opt.singleFrame ?? false;\n  return new TiffEncoder().encode(opt.image, singleFrame);\n}\n\n/**\n * Decode a BMP formatted image.\n */\nexport function decodeBmp(opt: DecodeOptions): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(opt.data);\n  return new BmpDecoder().decode(dataUint8);\n}\n\n/**\n * Encode an image to the BMP format.\n */\nexport function encodeBmp(opt: EncodeOptions): Uint8Array {\n  return new BmpEncoder().encode(opt.image);\n}\n\n/**\n * Decode an ICO image.\n */\nexport function decodeIco(opt: DecodeImageOptions): MemoryImage | undefined {\n  const dataUint8 = new Uint8Array(opt.data);\n  return new IcoDecoder().decode(dataUint8, opt.frame);\n}\n\n/**\n * Encode an image to the ICO format.\n */\nexport function encodeIco(opt: EncodeAnimatedOptions): Uint8Array {\n  const singleFrame = opt.singleFrame ?? false;\n  return new IcoEncoder().encode(opt.image, singleFrame);\n}\n\n/**\n * Encode a list of images to the ICO format.\n */\nexport function encodeIcoImages(opt: EncodeIcoImagesOptions): Uint8Array {\n  return new IcoEncoder().encodeImages(opt.images);\n}\n", "\r\n\r\nvar UZIP = {};\r\nif(typeof module == \"object\") module.exports = UZIP;\r\n\r\n\r\nUZIP[\"parse\"] = function(buf, onlyNames)\t// ArrayBuffer\r\n{\r\n\tvar rUs = UZIP.bin.readUshort, rUi = UZIP.bin.readUint, o = 0, out = {};\r\n\tvar data = new Uint8Array(buf);\r\n\tvar eocd = data.length-4;\r\n\t\r\n\twhile(rUi(data, eocd)!=0x06054b50) eocd--;\r\n\t\r\n\tvar o = eocd;\r\n\to+=4;\t// sign  = 0x06054b50\r\n\to+=4;  // disks = 0;\r\n\tvar cnu = rUs(data, o);  o+=2;\r\n\tvar cnt = rUs(data, o);  o+=2;\r\n\t\t\t\r\n\tvar csize = rUi(data, o);  o+=4;\r\n\tvar coffs = rUi(data, o);  o+=4;\r\n\t\r\n\to = coffs;\r\n\tfor(var i=0; i<cnu; i++)\r\n\t{\r\n\t\tvar sign = rUi(data, o);  o+=4;\r\n\t\to += 4;  // versions;\r\n\t\to += 4;  // flag + compr\r\n\t\to += 4;  // time\r\n\t\t\r\n\t\tvar crc32 = rUi(data, o);  o+=4;\r\n\t\tvar csize = rUi(data, o);  o+=4;\r\n\t\tvar usize = rUi(data, o);  o+=4;\r\n\t\t\r\n\t\tvar nl = rUs(data, o), el = rUs(data, o+2), cl = rUs(data, o+4);  o += 6;  // name, extra, comment\r\n\t\to += 8;  // disk, attribs\r\n\t\t\r\n\t\tvar roff = rUi(data, o);  o+=4;\r\n\t\to += nl + el + cl;\r\n\t\t\r\n\t\tUZIP._readLocal(data, roff, out, csize, usize, onlyNames);\r\n\t}\r\n\t//console.log(out);\r\n\treturn out;\r\n}\r\n\r\nUZIP._readLocal = function(data, o, out, csize, usize, onlyNames)\r\n{\r\n\tvar rUs = UZIP.bin.readUshort, rUi = UZIP.bin.readUint;\r\n\tvar sign  = rUi(data, o);  o+=4;\r\n\tvar ver   = rUs(data, o);  o+=2;\r\n\tvar gpflg = rUs(data, o);  o+=2;\r\n\t//if((gpflg&8)!=0) throw \"unknown sizes\";\r\n\tvar cmpr  = rUs(data, o);  o+=2;\r\n\t\r\n\tvar time  = rUi(data, o);  o+=4;\r\n\t\r\n\tvar crc32 = rUi(data, o);  o+=4;\r\n\t//var csize = rUi(data, o);  o+=4;\r\n\t//var usize = rUi(data, o);  o+=4;\r\n\to+=8;\r\n\t\t\r\n\tvar nlen  = rUs(data, o);  o+=2;\r\n\tvar elen  = rUs(data, o);  o+=2;\r\n\t\t\r\n\tvar name =  UZIP.bin.readUTF8(data, o, nlen);  o+=nlen;  //console.log(name);\r\n\to += elen;\r\n\t\t\t\r\n\t//console.log(sign.toString(16), ver, gpflg, cmpr, crc32.toString(16), \"csize, usize\", csize, usize, nlen, elen, name, o);\r\n\tif(onlyNames) {  out[name]={size:usize, csize:csize};  return;  }   \r\n\tvar file = new Uint8Array(data.buffer, o);\r\n\tif(false) {}\r\n\telse if(cmpr==0) out[name] = new Uint8Array(file.buffer.slice(o, o+csize));\r\n\telse if(cmpr==8) {\r\n\t\tvar buf = new Uint8Array(usize);  UZIP.inflateRaw(file, buf);\r\n\t\t/*var nbuf = pako[\"inflateRaw\"](file);\r\n\t\tif(usize>8514000) {\r\n\t\t\t//console.log(PUtils.readASCII(buf , 8514500, 500));\r\n\t\t\t//console.log(PUtils.readASCII(nbuf, 8514500, 500));\r\n\t\t}\r\n\t\tfor(var i=0; i<buf.length; i++) if(buf[i]!=nbuf[i]) {  console.log(buf.length, nbuf.length, usize, i);  throw \"e\";  }\r\n\t\t*/\r\n\t\tout[name] = buf;\r\n\t}\r\n\telse throw \"unknown compression method: \"+cmpr;\r\n}\r\n\r\nUZIP.inflateRaw = function(file, buf) {  return UZIP.F.inflate(file, buf);  }\r\nUZIP.inflate    = function(file, buf) { \r\n\tvar CMF = file[0], FLG = file[1];\r\n\tvar CM = (CMF&15), CINFO = (CMF>>>4);\r\n\t//console.log(CM, CINFO,CMF,FLG);\r\n\treturn UZIP.inflateRaw(new Uint8Array(file.buffer, file.byteOffset+2, file.length-6), buf);  \r\n}\r\nUZIP.deflate    = function(data, opts/*, buf, off*/) {\r\n\tif(opts==null) opts={level:6};\r\n\tvar off=0, buf=new Uint8Array(50+Math.floor(data.length*1.1));\r\n\tbuf[off]=120;  buf[off+1]=156;  off+=2;\r\n\toff = UZIP.F.deflateRaw(data, buf, off, opts.level);\r\n\tvar crc = UZIP.adler(data, 0, data.length);\r\n\tbuf[off+0]=((crc>>>24)&255); \r\n\tbuf[off+1]=((crc>>>16)&255); \r\n\tbuf[off+2]=((crc>>> 8)&255); \r\n\tbuf[off+3]=((crc>>> 0)&255); \t\r\n\treturn new Uint8Array(buf.buffer, 0, off+4);\r\n}\r\nUZIP.deflateRaw = function(data, opts) {\r\n\tif(opts==null) opts={level:6};\r\n\tvar buf=new Uint8Array(50+Math.floor(data.length*1.1));\r\n\tvar off = UZIP.F.deflateRaw(data, buf, off, opts.level);\r\n\treturn new Uint8Array(buf.buffer, 0, off);\r\n}\r\n\r\n\r\nUZIP.encode = function(obj, noCmpr) {\r\n\tif(noCmpr==null) noCmpr=false;\r\n\tvar tot = 0, wUi = UZIP.bin.writeUint, wUs = UZIP.bin.writeUshort;\r\n\tvar zpd = {};\r\n\tfor(var p in obj) {  var cpr = !UZIP._noNeed(p) && !noCmpr, buf = obj[p], crc = UZIP.crc.crc(buf,0,buf.length); \r\n\t\tzpd[p] = {  cpr:cpr, usize:buf.length, crc:crc, file: (cpr ? UZIP.deflateRaw(buf) : buf)  };  }\r\n\t\r\n\tfor(var p in zpd) tot += zpd[p].file.length + 30 + 46 + 2*UZIP.bin.sizeUTF8(p);\r\n\ttot +=  22;\r\n\t\r\n\tvar data = new Uint8Array(tot), o = 0;\r\n\tvar fof = []\r\n\t\r\n\tfor(var p in zpd) {\r\n\t\tvar file = zpd[p];  fof.push(o);\r\n\t\to = UZIP._writeHeader(data, o, p, file, 0);\r\n\t}\r\n\tvar i=0, ioff = o;\r\n\tfor(var p in zpd) {\r\n\t\tvar file = zpd[p];  fof.push(o);\r\n\t\to = UZIP._writeHeader(data, o, p, file, 1, fof[i++]);\t\t\r\n\t}\r\n\tvar csize = o-ioff;\r\n\t\r\n\twUi(data, o, 0x06054b50);  o+=4;\r\n\to += 4;  // disks\r\n\twUs(data, o, i);  o += 2;\r\n\twUs(data, o, i);  o += 2;\t// number of c d records\r\n\twUi(data, o, csize);  o += 4;\r\n\twUi(data, o, ioff );  o += 4;\r\n\to += 2;\r\n\treturn data.buffer;\r\n}\r\n// no need to compress .PNG, .ZIP, .JPEG ....\r\nUZIP._noNeed = function(fn) {  var ext = fn.split(\".\").pop().toLowerCase();  return \"png,jpg,jpeg,zip\".indexOf(ext)!=-1;  }\r\n\r\nUZIP._writeHeader = function(data, o, p, obj, t, roff)\r\n{\r\n\tvar wUi = UZIP.bin.writeUint, wUs = UZIP.bin.writeUshort;\r\n\tvar file = obj.file;\r\n\t\r\n\twUi(data, o, t==0 ? 0x04034b50 : 0x02014b50);  o+=4; // sign\r\n\tif(t==1) o+=2;  // ver made by\r\n\twUs(data, o, 20);  o+=2;\t// ver\r\n\twUs(data, o,  0);  o+=2;    // gflip\r\n\twUs(data, o,  obj.cpr?8:0);  o+=2;\t// cmpr\r\n\t\t\r\n\twUi(data, o,  0);  o+=4;\t// time\t\t\r\n\twUi(data, o, obj.crc);  o+=4;\t// crc32\r\n\twUi(data, o, file.length);  o+=4;\t// csize\r\n\twUi(data, o, obj.usize);  o+=4;\t// usize\r\n\t\t\r\n\twUs(data, o, UZIP.bin.sizeUTF8(p));  o+=2;\t// nlen\r\n\twUs(data, o, 0);  o+=2;\t// elen\r\n\t\r\n\tif(t==1) {\r\n\t\to += 2;  // comment length\r\n\t\to += 2;  // disk number\r\n\t\to += 6;  // attributes\r\n\t\twUi(data, o, roff);  o+=4;\t// usize\r\n\t}\r\n\tvar nlen = UZIP.bin.writeUTF8(data, o, p);  o+= nlen;\t\r\n\tif(t==0) {  data.set(file, o);  o += file.length;  }\r\n\treturn o;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nUZIP.crc = {\r\n\ttable : ( function() {\r\n\t   var tab = new Uint32Array(256);\r\n\t   for (var n=0; n<256; n++) {\r\n\t\t\tvar c = n;\r\n\t\t\tfor (var k=0; k<8; k++) {\r\n\t\t\t\tif (c & 1)  c = 0xedb88320 ^ (c >>> 1);\r\n\t\t\t\telse        c = c >>> 1;\r\n\t\t\t}\r\n\t\t\ttab[n] = c;  }    \r\n\t\treturn tab;  })(),\r\n\tupdate : function(c, buf, off, len) {\r\n\t\tfor (var i=0; i<len; i++)  c = UZIP.crc.table[(c ^ buf[off+i]) & 0xff] ^ (c >>> 8);\r\n\t\treturn c;\r\n\t},\r\n\tcrc : function(b,o,l)  {  return UZIP.crc.update(0xffffffff,b,o,l) ^ 0xffffffff;  }\r\n}\r\nUZIP.adler = function(data,o,len) {\r\n\tvar a = 1, b = 0;\r\n\tvar off = o, end=o+len;\r\n\twhile(off<end) {\r\n\t\tvar eend = Math.min(off+5552, end);\r\n\t\twhile(off<eend) {\r\n\t\t\ta += data[off++];\r\n\t\t\tb += a;\r\n\t\t}\r\n\t\ta=a%65521;\r\n\t\tb=b%65521;\r\n\t}\r\n    return (b << 16) | a;\r\n}\r\n\r\nUZIP.bin = {\r\n\treadUshort : function(buff,p)  {  return (buff[p]) | (buff[p+1]<<8);  },\r\n\twriteUshort: function(buff,p,n){  buff[p] = (n)&255;  buff[p+1] = (n>>8)&255;  },\r\n\treadUint   : function(buff,p)  {  return (buff[p+3]*(256*256*256)) + ((buff[p+2]<<16) | (buff[p+1]<< 8) | buff[p]);  },\r\n\twriteUint  : function(buff,p,n){  buff[p]=n&255;  buff[p+1]=(n>>8)&255;  buff[p+2]=(n>>16)&255;  buff[p+3]=(n>>24)&255;  },\r\n\treadASCII  : function(buff,p,l){  var s = \"\";  for(var i=0; i<l; i++) s += String.fromCharCode(buff[p+i]);  return s;    },\r\n\twriteASCII : function(data,p,s){  for(var i=0; i<s.length; i++) data[p+i] = s.charCodeAt(i);  },\r\n\tpad : function(n) { return n.length < 2 ? \"0\" + n : n; },\r\n\treadUTF8 : function(buff, p, l) {\r\n\t\tvar s = \"\", ns;\r\n\t\tfor(var i=0; i<l; i++) s += \"%\" + UZIP.bin.pad(buff[p+i].toString(16));\r\n\t\ttry {  ns = decodeURIComponent(s); }\r\n\t\tcatch(e) {  return UZIP.bin.readASCII(buff, p, l);  }\r\n\t\treturn  ns;\r\n\t},\r\n\twriteUTF8 : function(buff, p, str) {\r\n\t\tvar strl = str.length, i=0;\r\n\t\tfor(var ci=0; ci<strl; ci++)\r\n\t\t{\r\n\t\t\tvar code = str.charCodeAt(ci);\r\n\t\t\tif     ((code&(0xffffffff-(1<< 7)+1))==0) {  buff[p+i] = (     code     );  i++;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<11)+1))==0) {  buff[p+i] = (192|(code>> 6));  buff[p+i+1] = (128|((code>> 0)&63));  i+=2;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<16)+1))==0) {  buff[p+i] = (224|(code>>12));  buff[p+i+1] = (128|((code>> 6)&63));  buff[p+i+2] = (128|((code>>0)&63));  i+=3;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<21)+1))==0) {  buff[p+i] = (240|(code>>18));  buff[p+i+1] = (128|((code>>12)&63));  buff[p+i+2] = (128|((code>>6)&63));  buff[p+i+3] = (128|((code>>0)&63)); i+=4;  }\r\n\t\t\telse throw \"e\";\r\n\t\t}\r\n\t\treturn i;\r\n\t},\r\n\tsizeUTF8 : function(str) {\r\n\t\tvar strl = str.length, i=0;\r\n\t\tfor(var ci=0; ci<strl; ci++)\r\n\t\t{\r\n\t\t\tvar code = str.charCodeAt(ci);\r\n\t\t\tif     ((code&(0xffffffff-(1<< 7)+1))==0) {  i++ ;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<11)+1))==0) {  i+=2;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<16)+1))==0) {  i+=3;  }\r\n\t\t\telse if((code&(0xffffffff-(1<<21)+1))==0) {  i+=4;  }\r\n\t\t\telse throw \"e\";\r\n\t\t}\r\n\t\treturn i;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nUZIP.F = {};\r\n\r\nUZIP.F.deflateRaw = function(data, out, opos, lvl) {\t\r\n\tvar opts = [\r\n\t/*\r\n\t\t ush good_length; /* reduce lazy search above this match length \r\n\t\t ush max_lazy;    /* do not perform lazy search above this match length \r\n         ush nice_length; /* quit search above this match length \r\n\t*/\r\n\t/*      good lazy nice chain */\r\n\t/* 0 */ [ 0,   0,   0,    0,0],  /* store only */\r\n\t/* 1 */ [ 4,   4,   8,    4,0], /* max speed, no lazy matches */\r\n\t/* 2 */ [ 4,   5,  16,    8,0],\r\n\t/* 3 */ [ 4,   6,  16,   16,0],\r\n\r\n\t/* 4 */ [ 4,  10,  16,   32,0],  /* lazy matches */\r\n\t/* 5 */ [ 8,  16,  32,   32,0],\r\n\t/* 6 */ [ 8,  16, 128,  128,0],\r\n\t/* 7 */ [ 8,  32, 128,  256,0],\r\n\t/* 8 */ [32, 128, 258, 1024,1],\r\n\t/* 9 */ [32, 258, 258, 4096,1]]; /* max compression */\r\n\t\r\n\tvar opt = opts[lvl];\r\n\t\r\n\t\r\n\tvar U = UZIP.F.U, goodIndex = UZIP.F._goodIndex, hash = UZIP.F._hash, putsE = UZIP.F._putsE;\r\n\tvar i = 0, pos = opos<<3, cvrd = 0, dlen = data.length;\r\n\t\r\n\tif(lvl==0) {\r\n\t\twhile(i<dlen) {   var len = Math.min(0xffff, dlen-i);\r\n\t\t\tputsE(out, pos, (i+len==dlen ? 1 : 0));  pos = UZIP.F._copyExact(data, i, len, out, pos+8);  i += len;  }\r\n\t\treturn pos>>>3;\r\n\t}\r\n\r\n\tvar lits = U.lits, strt=U.strt, prev=U.prev, li=0, lc=0, bs=0, ebits=0, c=0, nc=0;  // last_item, literal_count, block_start\r\n\tif(dlen>2) {  nc=UZIP.F._hash(data,0);  strt[nc]=0;  }\r\n\tvar nmch=0,nmci=0;\r\n\t\r\n\tfor(i=0; i<dlen; i++)  {\r\n\t\tc = nc;\r\n\t\t//*\r\n\t\tif(i+1<dlen-2) {\r\n\t\t\tnc = UZIP.F._hash(data, i+1);\r\n\t\t\tvar ii = ((i+1)&0x7fff);\r\n\t\t\tprev[ii]=strt[nc];\r\n\t\t\tstrt[nc]=ii;\r\n\t\t} //*/\r\n\t\tif(cvrd<=i) {\r\n\t\t\tif((li>14000 || lc>26697) && (dlen-i)>100) {\r\n\t\t\t\tif(cvrd<i) {  lits[li]=i-cvrd;  li+=2;  cvrd=i;  }\r\n\t\t\t\tpos = UZIP.F._writeBlock(((i==dlen-1) || (cvrd==dlen))?1:0, lits, li, ebits, data,bs,i-bs, out, pos);  li=lc=ebits=0;  bs=i;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar mch = 0;\r\n\t\t\t//if(nmci==i) mch= nmch;  else \r\n\t\t\tif(i<dlen-2) mch = UZIP.F._bestMatch(data, i, prev, c, Math.min(opt[2],dlen-i), opt[3]);\r\n\t\t\t/*\r\n\t\t\tif(mch!=0 && opt[4]==1 && (mch>>>16)<opt[1] && i+1<dlen-2) {\r\n\t\t\t\tnmch = UZIP.F._bestMatch(data, i+1, prev, nc, opt[2], opt[3]);  nmci=i+1;\r\n\t\t\t\t//var mch2 = UZIP.F._bestMatch(data, i+2, prev, nnc);  //nmci=i+1;\r\n\t\t\t\tif((nmch>>>16)>(mch>>>16)) mch=0;\r\n\t\t\t}//*/\r\n\t\t\tvar len = mch>>>16, dst = mch&0xffff;  //if(i-dst<0) throw \"e\";\r\n\t\t\tif(mch!=0) { \r\n\t\t\t\tvar len = mch>>>16, dst = mch&0xffff;  //if(i-dst<0) throw \"e\";\r\n\t\t\t\tvar lgi = goodIndex(len, U.of0);  U.lhst[257+lgi]++; \r\n\t\t\t\tvar dgi = goodIndex(dst, U.df0);  U.dhst[    dgi]++;  ebits += U.exb[lgi] + U.dxb[dgi]; \r\n\t\t\t\tlits[li] = (len<<23)|(i-cvrd);  lits[li+1] = (dst<<16)|(lgi<<8)|dgi;  li+=2;\r\n\t\t\t\tcvrd = i + len;  \r\n\t\t\t}\r\n\t\t\telse {\tU.lhst[data[i]]++;  }\r\n\t\t\tlc++;\r\n\t\t}\r\n\t}\r\n\tif(bs!=i || data.length==0) {\r\n\t\tif(cvrd<i) {  lits[li]=i-cvrd;  li+=2;  cvrd=i;  }\r\n\t\tpos = UZIP.F._writeBlock(1, lits, li, ebits, data,bs,i-bs, out, pos);  li=0;  lc=0;  li=lc=ebits=0;  bs=i;\r\n\t}\r\n\twhile((pos&7)!=0) pos++;\r\n\treturn pos>>>3;\r\n}\r\nUZIP.F._bestMatch = function(data, i, prev, c, nice, chain) {\r\n\tvar ci = (i&0x7fff), pi=prev[ci];  \r\n\t//console.log(\"----\", i);\r\n\tvar dif = ((ci-pi + (1<<15)) & 0x7fff);  if(pi==ci || c!=UZIP.F._hash(data,i-dif)) return 0;\r\n\tvar tl=0, td=0;  // top length, top distance\r\n\tvar dlim = Math.min(0x7fff, i);\r\n\twhile(dif<=dlim && --chain!=0 && pi!=ci /*&& c==UZIP.F._hash(data,i-dif)*/) {\r\n\t\tif(tl==0 || (data[i+tl]==data[i+tl-dif])) {\r\n\t\t\tvar cl = UZIP.F._howLong(data, i, dif);\r\n\t\t\tif(cl>tl) {  \r\n\t\t\t\ttl=cl;  td=dif;  if(tl>=nice) break;    //* \r\n\t\t\t\tif(dif+2<cl) cl = dif+2;\r\n\t\t\t\tvar maxd = 0; // pi does not point to the start of the word\r\n\t\t\t\tfor(var j=0; j<cl-2; j++) {\r\n\t\t\t\t\tvar ei =  (i-dif+j+ (1<<15)) & 0x7fff;\r\n\t\t\t\t\tvar li = prev[ei];\r\n\t\t\t\t\tvar curd = (ei-li + (1<<15)) & 0x7fff;\r\n\t\t\t\t\tif(curd>maxd) {  maxd=curd;  pi = ei; }\r\n\t\t\t\t}  //*/\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tci=pi;  pi = prev[ci];\r\n\t\tdif += ((ci-pi + (1<<15)) & 0x7fff);\r\n\t}\r\n\treturn (tl<<16)|td;\r\n}\r\nUZIP.F._howLong = function(data, i, dif) {\r\n\tif(data[i]!=data[i-dif] || data[i+1]!=data[i+1-dif] || data[i+2]!=data[i+2-dif]) return 0;\r\n\tvar oi=i, l = Math.min(data.length, i+258);  i+=3;\r\n\t//while(i+4<l && data[i]==data[i-dif] && data[i+1]==data[i+1-dif] && data[i+2]==data[i+2-dif] && data[i+3]==data[i+3-dif]) i+=4;\r\n\twhile(i<l && data[i]==data[i-dif]) i++;\r\n\treturn i-oi;\r\n}\r\nUZIP.F._hash = function(data, i) {\r\n\treturn (((data[i]<<8) | data[i+1])+(data[i+2]<<4))&0xffff;\r\n\t//var hash_shift = 0, hash_mask = 255;\r\n\t//var h = data[i+1] % 251;\r\n\t//h = (((h << 8) + data[i+2]) % 251);\r\n\t//h = (((h << 8) + data[i+2]) % 251);\r\n\t//h = ((h<<hash_shift) ^ (c) ) & hash_mask;\r\n\t//return h | (data[i]<<8);\r\n\t//return (data[i] | (data[i+1]<<8));\r\n}\r\n//UZIP.___toth = 0;\r\nUZIP.saved = 0;\r\nUZIP.F._writeBlock = function(BFINAL, lits, li, ebits, data,o0,l0, out, pos) {\r\n\tvar U = UZIP.F.U, putsF = UZIP.F._putsF, putsE = UZIP.F._putsE;\r\n\t\r\n\t//*\r\n\tvar T, ML, MD, MH, numl, numd, numh, lset, dset;  U.lhst[256]++;\r\n\tT = UZIP.F.getTrees(); ML=T[0]; MD=T[1]; MH=T[2]; numl=T[3]; numd=T[4]; numh=T[5]; lset=T[6]; dset=T[7];\r\n\t\r\n\tvar cstSize = (((pos+3)&7)==0 ? 0 : 8-((pos+3)&7)) + 32 + (l0<<3);\r\n\tvar fxdSize = ebits + UZIP.F.contSize(U.fltree, U.lhst) + UZIP.F.contSize(U.fdtree, U.dhst);\r\n\tvar dynSize = ebits + UZIP.F.contSize(U.ltree , U.lhst) + UZIP.F.contSize(U.dtree , U.dhst);\r\n\tdynSize    += 14 + 3*numh + UZIP.F.contSize(U.itree, U.ihst) + (U.ihst[16]*2 + U.ihst[17]*3 + U.ihst[18]*7);\r\n\t\r\n\tfor(var j=0; j<286; j++) U.lhst[j]=0;   for(var j=0; j<30; j++) U.dhst[j]=0;   for(var j=0; j<19; j++) U.ihst[j]=0;\r\n\t//*/\r\n\tvar BTYPE = (cstSize<fxdSize && cstSize<dynSize) ? 0 : ( fxdSize<dynSize ? 1 : 2 );\r\n\tputsF(out, pos, BFINAL);  putsF(out, pos+1, BTYPE);  pos+=3;\r\n\t\r\n\tvar opos = pos;\r\n\tif(BTYPE==0) {\r\n\t\twhile((pos&7)!=0) pos++;\r\n\t\tpos = UZIP.F._copyExact(data, o0, l0, out, pos);\r\n\t}\r\n\telse {\r\n\t\tvar ltree, dtree;\r\n\t\tif(BTYPE==1) {  ltree=U.fltree;  dtree=U.fdtree;  }\r\n\t\tif(BTYPE==2) {\t\r\n\t\t\tUZIP.F.makeCodes(U.ltree, ML);  UZIP.F.revCodes(U.ltree, ML);\r\n\t\t\tUZIP.F.makeCodes(U.dtree, MD);  UZIP.F.revCodes(U.dtree, MD);\r\n\t\t\tUZIP.F.makeCodes(U.itree, MH);  UZIP.F.revCodes(U.itree, MH);\r\n\t\t\t\r\n\t\t\tltree = U.ltree;  dtree = U.dtree;\r\n\t\t\t\r\n\t\t\tputsE(out, pos,numl-257);  pos+=5;  // 286\r\n\t\t\tputsE(out, pos,numd-  1);  pos+=5;  // 30\r\n\t\t\tputsE(out, pos,numh-  4);  pos+=4;  // 19\r\n\t\t\t\r\n\t\t\tfor(var i=0; i<numh; i++) putsE(out, pos+i*3, U.itree[(U.ordr[i]<<1)+1]);   pos+=3* numh;\r\n\t\t\tpos = UZIP.F._codeTiny(lset, U.itree, out, pos);\r\n\t\t\tpos = UZIP.F._codeTiny(dset, U.itree, out, pos);\r\n\t\t}\r\n\t\t\r\n\t\tvar off=o0;\r\n\t\tfor(var si=0; si<li; si+=2) {\r\n\t\t\tvar qb=lits[si], len=(qb>>>23), end = off+(qb&((1<<23)-1));\r\n\t\t\twhile(off<end) pos = UZIP.F._writeLit(data[off++], ltree, out, pos);\r\n\t\t\t\r\n\t\t\tif(len!=0) {\r\n\t\t\t\tvar qc = lits[si+1], dst=(qc>>16), lgi=(qc>>8)&255, dgi=(qc&255);\r\n\t\t\t\tpos = UZIP.F._writeLit(257+lgi, ltree, out, pos);\r\n\t\t\t\tputsE(out, pos, len-U.of0[lgi]);  pos+=U.exb[lgi];\r\n\t\t\t\t\r\n\t\t\t\tpos = UZIP.F._writeLit(dgi, dtree, out, pos);\r\n\t\t\t\tputsF(out, pos, dst-U.df0[dgi]);  pos+=U.dxb[dgi];  off+=len;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpos = UZIP.F._writeLit(256, ltree, out, pos);\r\n\t}\r\n\t//console.log(pos-opos, fxdSize, dynSize, cstSize);\r\n\treturn pos;\r\n}\r\nUZIP.F._copyExact = function(data,off,len,out,pos) {\r\n\tvar p8 = (pos>>>3);\r\n\tout[p8]=(len);  out[p8+1]=(len>>>8);  out[p8+2]=255-out[p8];  out[p8+3]=255-out[p8+1];  p8+=4;\r\n\tout.set(new Uint8Array(data.buffer, off, len), p8);\r\n\t//for(var i=0; i<len; i++) out[p8+i]=data[off+i];\r\n\treturn pos + ((len+4)<<3);\r\n}\r\n/*\r\n\tInteresting facts:\r\n\t- decompressed block can have bytes, which do not occur in a Huffman tree (copied from the previous block by reference)\r\n*/\r\n\r\nUZIP.F.getTrees = function() {\r\n\tvar U = UZIP.F.U;\r\n\tvar ML = UZIP.F._hufTree(U.lhst, U.ltree, 15);\r\n\tvar MD = UZIP.F._hufTree(U.dhst, U.dtree, 15);\r\n\tvar lset = [], numl = UZIP.F._lenCodes(U.ltree, lset);\r\n\tvar dset = [], numd = UZIP.F._lenCodes(U.dtree, dset);\r\n\tfor(var i=0; i<lset.length; i+=2) U.ihst[lset[i]]++;\r\n\tfor(var i=0; i<dset.length; i+=2) U.ihst[dset[i]]++;\r\n\tvar MH = UZIP.F._hufTree(U.ihst, U.itree,  7);\r\n\tvar numh = 19;  while(numh>4 && U.itree[(U.ordr[numh-1]<<1)+1]==0) numh--;\r\n\treturn [ML, MD, MH, numl, numd, numh, lset, dset];\r\n}\r\nUZIP.F.getSecond= function(a) {  var b=[];  for(var i=0; i<a.length; i+=2) b.push  (a[i+1]);  return b;  }\r\nUZIP.F.nonZero  = function(a) {  var b= \"\";  for(var i=0; i<a.length; i+=2) if(a[i+1]!=0)b+=(i>>1)+\",\";  return b;  }\r\nUZIP.F.contSize = function(tree, hst) {  var s=0;  for(var i=0; i<hst.length; i++) s+= hst[i]*tree[(i<<1)+1];  return s;  }\r\nUZIP.F._codeTiny = function(set, tree, out, pos) {\r\n\tfor(var i=0; i<set.length; i+=2) {\r\n\t\tvar l = set[i], rst = set[i+1];  //console.log(l, pos, tree[(l<<1)+1]);\r\n\t\tpos = UZIP.F._writeLit(l, tree, out, pos);\r\n\t\tvar rsl = l==16 ? 2 : (l==17 ? 3 : 7);\r\n\t\tif(l>15) {  UZIP.F._putsE(out, pos, rst, rsl);  pos+=rsl;  }\r\n\t}\r\n\treturn pos;\r\n}\r\nUZIP.F._lenCodes = function(tree, set) {\r\n\tvar len=tree.length;  while(len!=2 && tree[len-1]==0) len-=2;  // when no distances, keep one code with length 0\r\n\tfor(var i=0; i<len; i+=2) {\r\n\t\tvar l = tree[i+1], nxt = (i+3<len ? tree[i+3]:-1),  nnxt = (i+5<len ? tree[i+5]:-1),  prv = (i==0 ? -1 : tree[i-1]);\r\n\t\tif(l==0 && nxt==l && nnxt==l) {\r\n\t\t\tvar lz = i+5;\r\n\t\t\twhile(lz+2<len && tree[lz+2]==l) lz+=2;\r\n\t\t\tvar zc = Math.min((lz+1-i)>>>1, 138);\r\n\t\t\tif(zc<11) set.push(17, zc-3);\r\n\t\t\telse set.push(18, zc-11);\r\n\t\t\ti += zc*2-2;\r\n\t\t}\r\n\t\telse if(l==prv && nxt==l && nnxt==l) {\r\n\t\t\tvar lz = i+5;\r\n\t\t\twhile(lz+2<len && tree[lz+2]==l) lz+=2;\r\n\t\t\tvar zc = Math.min((lz+1-i)>>>1, 6);\r\n\t\t\tset.push(16, zc-3);\r\n\t\t\ti += zc*2-2;\r\n\t\t}\r\n\t\telse set.push(l, 0);\r\n\t}\r\n\treturn len>>>1;\r\n}\r\nUZIP.F._hufTree   = function(hst, tree, MAXL) {\r\n\tvar list=[], hl = hst.length, tl=tree.length, i=0;\r\n\tfor(i=0; i<tl; i+=2) {  tree[i]=0;  tree[i+1]=0;  }\t\r\n\tfor(i=0; i<hl; i++) if(hst[i]!=0) list.push({lit:i, f:hst[i]});\r\n\tvar end = list.length, l2=list.slice(0);\r\n\tif(end==0) return 0;  // empty histogram (usually for dist)\r\n\tif(end==1) {  var lit=list[0].lit, l2=lit==0?1:0;  tree[(lit<<1)+1]=1;  tree[(l2<<1)+1]=1;  return 1;  }\r\n\tlist.sort(function(a,b){return a.f-b.f;});\r\n\tvar a=list[0], b=list[1], i0=0, i1=1, i2=2;  list[0]={lit:-1,f:a.f+b.f,l:a,r:b,d:0};\r\n\twhile(i1!=end-1) {\r\n\t\tif(i0!=i1 && (i2==end || list[i0].f<list[i2].f)) {  a=list[i0++];  }  else {  a=list[i2++];  }\r\n\t\tif(i0!=i1 && (i2==end || list[i0].f<list[i2].f)) {  b=list[i0++];  }  else {  b=list[i2++];  }\r\n\t\tlist[i1++]={lit:-1,f:a.f+b.f, l:a,r:b};\r\n\t}\r\n\tvar maxl = UZIP.F.setDepth(list[i1-1], 0);\r\n\tif(maxl>MAXL) {  UZIP.F.restrictDepth(l2, MAXL, maxl);  maxl = MAXL;  }\r\n\tfor(i=0; i<end; i++) tree[(l2[i].lit<<1)+1]=l2[i].d;\r\n\treturn maxl;\r\n}\r\n\r\nUZIP.F.setDepth  = function(t, d) {\r\n\tif(t.lit!=-1) {  t.d=d;  return d;  }\r\n\treturn Math.max( UZIP.F.setDepth(t.l, d+1),  UZIP.F.setDepth(t.r, d+1) );\r\n}\r\n\r\nUZIP.F.restrictDepth = function(dps, MD, maxl) {\r\n\tvar i=0, bCost=1<<(maxl-MD), dbt=0;\r\n\tdps.sort(function(a,b){return b.d==a.d ? a.f-b.f : b.d-a.d;});\r\n\t\r\n\tfor(i=0; i<dps.length; i++) if(dps[i].d>MD) {  var od=dps[i].d;  dps[i].d=MD;  dbt+=bCost-(1<<(maxl-od));  }  else break;\r\n\tdbt = dbt>>>(maxl-MD);\r\n\twhile(dbt>0) {  var od=dps[i].d;  if(od<MD) {  dps[i].d++;  dbt-=(1<<(MD-od-1));  }  else  i++;  }\r\n\tfor(; i>=0; i--) if(dps[i].d==MD && dbt<0) {  dps[i].d--;  dbt++;  }  if(dbt!=0) console.log(\"debt left\");\r\n}\r\n\r\nUZIP.F._goodIndex = function(v, arr) {\r\n\tvar i=0;  if(arr[i|16]<=v) i|=16;  if(arr[i|8]<=v) i|=8;  if(arr[i|4]<=v) i|=4;  if(arr[i|2]<=v) i|=2;  if(arr[i|1]<=v) i|=1;  return i;\r\n}\r\nUZIP.F._writeLit = function(ch, ltree, out, pos) {\r\n\tUZIP.F._putsF(out, pos, ltree[ch<<1]);\r\n\treturn pos+ltree[(ch<<1)+1];\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nUZIP.F.inflate = function(data, buf) {\r\n\tvar u8=Uint8Array;\r\n\tif(data[0]==3 && data[1]==0) return (buf ? buf : new u8(0));\r\n\tvar F=UZIP.F, bitsF = F._bitsF, bitsE = F._bitsE, decodeTiny = F._decodeTiny, makeCodes = F.makeCodes, codes2map=F.codes2map, get17 = F._get17;\r\n\tvar U = F.U;\r\n\t\r\n\tvar noBuf = (buf==null);\r\n\tif(noBuf) buf = new u8((data.length>>>2)<<3);\r\n\t\r\n\tvar BFINAL=0, BTYPE=0, HLIT=0, HDIST=0, HCLEN=0, ML=0, MD=0; \t\r\n\tvar off = 0, pos = 0;\r\n\tvar lmap, dmap;\r\n\t\r\n\twhile(BFINAL==0) {\t\t\r\n\t\tBFINAL = bitsF(data, pos  , 1);\r\n\t\tBTYPE  = bitsF(data, pos+1, 2);  pos+=3;\r\n\t\t//console.log(BFINAL, BTYPE);\r\n\t\t\r\n\t\tif(BTYPE==0) {\r\n\t\t\tif((pos&7)!=0) pos+=8-(pos&7);\r\n\t\t\tvar p8 = (pos>>>3)+4, len = data[p8-4]|(data[p8-3]<<8);  //console.log(len);//bitsF(data, pos, 16), \r\n\t\t\tif(noBuf) buf=UZIP.F._check(buf, off+len);\r\n\t\t\tbuf.set(new u8(data.buffer, data.byteOffset+p8, len), off);\r\n\t\t\t//for(var i=0; i<len; i++) buf[off+i] = data[p8+i];\r\n\t\t\t//for(var i=0; i<len; i++) if(buf[off+i] != data[p8+i]) throw \"e\";\r\n\t\t\tpos = ((p8+len)<<3);  off+=len;  continue;\r\n\t\t}\r\n\t\tif(noBuf) buf=UZIP.F._check(buf, off+(1<<17));  // really not enough in many cases (but PNG and ZIP provide buffer in advance)\r\n\t\tif(BTYPE==1) {  lmap = U.flmap;  dmap = U.fdmap;  ML = (1<<9)-1;  MD = (1<<5)-1;   }\r\n\t\tif(BTYPE==2) {\r\n\t\t\tHLIT  = bitsE(data, pos   , 5)+257;  \r\n\t\t\tHDIST = bitsE(data, pos+ 5, 5)+  1;  \r\n\t\t\tHCLEN = bitsE(data, pos+10, 4)+  4;  pos+=14;\r\n\t\t\t\r\n\t\t\tvar ppos = pos;\r\n\t\t\tfor(var i=0; i<38; i+=2) {  U.itree[i]=0;  U.itree[i+1]=0;  }\r\n\t\t\tvar tl = 1;\r\n\t\t\tfor(var i=0; i<HCLEN; i++) {  var l=bitsE(data, pos+i*3, 3);  U.itree[(U.ordr[i]<<1)+1] = l;  if(l>tl)tl=l;  }     pos+=3*HCLEN;  //console.log(itree);\r\n\t\t\tmakeCodes(U.itree, tl);\r\n\t\t\tcodes2map(U.itree, tl, U.imap);\r\n\t\t\t\r\n\t\t\tlmap = U.lmap;  dmap = U.dmap;\r\n\t\t\t\r\n\t\t\tpos = decodeTiny(U.imap, (1<<tl)-1, HLIT+HDIST, data, pos, U.ttree);\r\n\t\t\tvar mx0 = F._copyOut(U.ttree,    0, HLIT , U.ltree);  ML = (1<<mx0)-1;\r\n\t\t\tvar mx1 = F._copyOut(U.ttree, HLIT, HDIST, U.dtree);  MD = (1<<mx1)-1;\r\n\t\t\t\r\n\t\t\t//var ml = decodeTiny(U.imap, (1<<tl)-1, HLIT , data, pos, U.ltree); ML = (1<<(ml>>>24))-1;  pos+=(ml&0xffffff);\r\n\t\t\tmakeCodes(U.ltree, mx0);\r\n\t\t\tcodes2map(U.ltree, mx0, lmap);\r\n\t\t\t\r\n\t\t\t//var md = decodeTiny(U.imap, (1<<tl)-1, HDIST, data, pos, U.dtree); MD = (1<<(md>>>24))-1;  pos+=(md&0xffffff);\r\n\t\t\tmakeCodes(U.dtree, mx1);\r\n\t\t\tcodes2map(U.dtree, mx1, dmap);\r\n\t\t}\r\n\t\t//var ooff=off, opos=pos;\r\n\t\twhile(true) {\r\n\t\t\tvar code = lmap[get17(data, pos) & ML];  pos += code&15;\r\n\t\t\tvar lit = code>>>4;  //U.lhst[lit]++;  \r\n\t\t\tif((lit>>>8)==0) {  buf[off++] = lit;  }\r\n\t\t\telse if(lit==256) {  break;  }\r\n\t\t\telse {\r\n\t\t\t\tvar end = off+lit-254;\r\n\t\t\t\tif(lit>264) { var ebs = U.ldef[lit-257];  end = off + (ebs>>>3) + bitsE(data, pos, ebs&7);  pos += ebs&7;  }\r\n\t\t\t\t//UZIP.F.dst[end-off]++;\r\n\t\t\t\t\r\n\t\t\t\tvar dcode = dmap[get17(data, pos) & MD];  pos += dcode&15;\r\n\t\t\t\tvar dlit = dcode>>>4;\r\n\t\t\t\tvar dbs = U.ddef[dlit], dst = (dbs>>>4) + bitsF(data, pos, dbs&15);  pos += dbs&15;\r\n\t\t\t\t\r\n\t\t\t\t//var o0 = off-dst, stp = Math.min(end-off, dst);\r\n\t\t\t\t//if(stp>20) while(off<end) {  buf.copyWithin(off, o0, o0+stp);  off+=stp;  }  else\r\n\t\t\t\t//if(end-dst<=off) buf.copyWithin(off, off-dst, end-dst);  else\r\n\t\t\t\t//if(dst==1) buf.fill(buf[off-1], off, end);  else\r\n\t\t\t\tif(noBuf) buf=UZIP.F._check(buf, off+(1<<17));\r\n\t\t\t\twhile(off<end) {  buf[off]=buf[off++-dst];    buf[off]=buf[off++-dst];  buf[off]=buf[off++-dst];  buf[off]=buf[off++-dst];  }   \r\n\t\t\t\toff=end;\r\n\t\t\t\t//while(off!=end) {  buf[off]=buf[off++-dst];  }\r\n\t\t\t}\r\n\t\t}\r\n\t\t//console.log(off-ooff, (pos-opos)>>>3);\r\n\t}\r\n\t//console.log(UZIP.F.dst);\r\n\t//console.log(tlen, dlen, off-tlen+tcnt);\r\n\treturn buf.length==off ? buf : buf.slice(0,off);\r\n}\r\nUZIP.F._check=function(buf, len) {\r\n\tvar bl=buf.length;  if(len<=bl) return buf;\r\n\tvar nbuf = new Uint8Array(Math.max(bl<<1,len));  nbuf.set(buf,0);\r\n\t//for(var i=0; i<bl; i+=4) {  nbuf[i]=buf[i];  nbuf[i+1]=buf[i+1];  nbuf[i+2]=buf[i+2];  nbuf[i+3]=buf[i+3];  }\r\n\treturn nbuf;\r\n}\r\n\r\nUZIP.F._decodeTiny = function(lmap, LL, len, data, pos, tree) {\r\n\tvar bitsE = UZIP.F._bitsE, get17 = UZIP.F._get17;\r\n\tvar i = 0;\r\n\twhile(i<len) {\r\n\t\tvar code = lmap[get17(data, pos)&LL];  pos+=code&15;\r\n\t\tvar lit = code>>>4; \r\n\t\tif(lit<=15) {  tree[i]=lit;  i++;  }\r\n\t\telse {\r\n\t\t\tvar ll = 0, n = 0;\r\n\t\t\tif(lit==16) {\r\n\t\t\t\tn = (3  + bitsE(data, pos, 2));  pos += 2;  ll = tree[i-1];\r\n\t\t\t}\r\n\t\t\telse if(lit==17) {\r\n\t\t\t\tn = (3  + bitsE(data, pos, 3));  pos += 3;\r\n\t\t\t}\r\n\t\t\telse if(lit==18) {\r\n\t\t\t\tn = (11 + bitsE(data, pos, 7));  pos += 7;\r\n\t\t\t}\r\n\t\t\tvar ni = i+n;\r\n\t\t\twhile(i<ni) {  tree[i]=ll;  i++; }\r\n\t\t}\r\n\t}\r\n\treturn pos;\r\n}\r\nUZIP.F._copyOut = function(src, off, len, tree) {\r\n\tvar mx=0, i=0, tl=tree.length>>>1;\r\n\twhile(i<len) {  var v=src[i+off];  tree[(i<<1)]=0;  tree[(i<<1)+1]=v;  if(v>mx)mx=v;  i++;  }\r\n\twhile(i<tl ) {  tree[(i<<1)]=0;  tree[(i<<1)+1]=0;  i++;  }\r\n\treturn mx;\r\n}\r\n\r\nUZIP.F.makeCodes = function(tree, MAX_BITS) {  // code, length\r\n\tvar U = UZIP.F.U;\r\n\tvar max_code = tree.length;\r\n\tvar code, bits, n, i, len;\r\n\t\r\n\tvar bl_count = U.bl_count;  for(var i=0; i<=MAX_BITS; i++) bl_count[i]=0;\r\n\tfor(i=1; i<max_code; i+=2) bl_count[tree[i]]++;\r\n\t\r\n\tvar next_code = U.next_code;\t// smallest code for each length\r\n\t\r\n\tcode = 0;\r\n\tbl_count[0] = 0;\r\n\tfor (bits = 1; bits <= MAX_BITS; bits++) {\r\n\t\tcode = (code + bl_count[bits-1]) << 1;\r\n\t\tnext_code[bits] = code;\r\n\t}\r\n\t\r\n\tfor (n = 0; n < max_code; n+=2) {\r\n\t\tlen = tree[n+1];\r\n\t\tif (len != 0) {\r\n\t\t\ttree[n] = next_code[len];\r\n\t\t\tnext_code[len]++;\r\n\t\t}\r\n\t}\r\n}\r\nUZIP.F.codes2map = function(tree, MAX_BITS, map) {\r\n\tvar max_code = tree.length;\r\n\tvar U=UZIP.F.U, r15 = U.rev15;\r\n\tfor(var i=0; i<max_code; i+=2) if(tree[i+1]!=0)  {\r\n\t\tvar lit = i>>1;\r\n\t\tvar cl = tree[i+1], val = (lit<<4)|cl; // :  (0x8000 | (U.of0[lit-257]<<7) | (U.exb[lit-257]<<4) | cl);\r\n\t\tvar rest = (MAX_BITS-cl), i0 = tree[i]<<rest, i1 = i0 + (1<<rest);\r\n\t\t//tree[i]=r15[i0]>>>(15-MAX_BITS);\r\n\t\twhile(i0!=i1) {\r\n\t\t\tvar p0 = r15[i0]>>>(15-MAX_BITS);\r\n\t\t\tmap[p0]=val;  i0++;\r\n\t\t}\r\n\t}\r\n}\r\nUZIP.F.revCodes = function(tree, MAX_BITS) {\r\n\tvar r15 = UZIP.F.U.rev15, imb = 15-MAX_BITS;\r\n\tfor(var i=0; i<tree.length; i+=2) {  var i0 = (tree[i]<<(MAX_BITS-tree[i+1]));  tree[i] = r15[i0]>>>imb;  }\r\n}\r\n\r\n// used only in deflate\r\nUZIP.F._putsE= function(dt, pos, val   ) {  val = val<<(pos&7);  var o=(pos>>>3);  dt[o]|=val;  dt[o+1]|=(val>>>8);                        }\r\nUZIP.F._putsF= function(dt, pos, val   ) {  val = val<<(pos&7);  var o=(pos>>>3);  dt[o]|=val;  dt[o+1]|=(val>>>8);  dt[o+2]|=(val>>>16);  }\r\n\r\nUZIP.F._bitsE= function(dt, pos, length) {  return ((dt[pos>>>3] | (dt[(pos>>>3)+1]<<8)                        )>>>(pos&7))&((1<<length)-1);  }\r\nUZIP.F._bitsF= function(dt, pos, length) {  return ((dt[pos>>>3] | (dt[(pos>>>3)+1]<<8) | (dt[(pos>>>3)+2]<<16))>>>(pos&7))&((1<<length)-1);  }\r\n/*\r\nUZIP.F._get9 = function(dt, pos) {\r\n\treturn ((dt[pos>>>3] | (dt[(pos>>>3)+1]<<8))>>>(pos&7))&511;\r\n} */\r\nUZIP.F._get17= function(dt, pos) {\t// return at least 17 meaningful bytes\r\n\treturn (dt[pos>>>3] | (dt[(pos>>>3)+1]<<8) | (dt[(pos>>>3)+2]<<16) )>>>(pos&7);\r\n}\r\nUZIP.F._get25= function(dt, pos) {\t// return at least 17 meaningful bytes\r\n\treturn (dt[pos>>>3] | (dt[(pos>>>3)+1]<<8) | (dt[(pos>>>3)+2]<<16) | (dt[(pos>>>3)+3]<<24) )>>>(pos&7);\r\n}\r\nUZIP.F.U = function(){\r\n\tvar u16=Uint16Array, u32=Uint32Array;\r\n\treturn {\r\n\t\tnext_code : new u16(16),\r\n\t\tbl_count  : new u16(16),\r\n\t\tordr : [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ],\r\n\t\tof0  : [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,999,999,999],\r\n\t\texb  : [0,0,0,0,0,0,0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,  4,  5,  5,  5,  5,  0,  0,  0,  0],\r\n\t\tldef : new u16(32),\r\n\t\tdf0  : [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577, 65535, 65535],\r\n\t\tdxb  : [0,0,0,0,1,1,2, 2, 3, 3, 4, 4, 5, 5,  6,  6,  7,  7,  8,  8,   9,   9,  10,  10,  11,  11,  12,   12,   13,   13,     0,     0],\r\n\t\tddef : new u32(32),\r\n\t\tflmap: new u16(  512),  fltree: [],\r\n\t\tfdmap: new u16(   32),  fdtree: [],\r\n\t\tlmap : new u16(32768),  ltree : [],  ttree:[],\r\n\t\tdmap : new u16(32768),  dtree : [],\r\n\t\timap : new u16(  512),  itree : [],\r\n\t\t//rev9 : new u16(  512)\r\n\t\trev15: new u16(1<<15),\r\n\t\tlhst : new u32(286), dhst : new u32( 30), ihst : new u32(19),\r\n\t\tlits : new u32(15000),\r\n\t\tstrt : new u16(1<<16),\r\n\t\tprev : new u16(1<<15)\r\n\t};  \r\n} ();\r\n\r\n(function(){\t\r\n\tvar U = UZIP.F.U;\r\n\tvar len = 1<<15;\r\n\tfor(var i=0; i<len; i++) {\r\n\t\tvar x = i;\r\n\t\tx = (((x & 0xaaaaaaaa) >>> 1) | ((x & 0x55555555) << 1));\r\n\t\tx = (((x & 0xcccccccc) >>> 2) | ((x & 0x33333333) << 2));\r\n\t\tx = (((x & 0xf0f0f0f0) >>> 4) | ((x & 0x0f0f0f0f) << 4));\r\n\t\tx = (((x & 0xff00ff00) >>> 8) | ((x & 0x00ff00ff) << 8));\r\n\t\tU.rev15[i] = (((x >>> 16) | (x << 16)))>>>17;\r\n\t}\r\n\t\r\n\tfunction pushV(tgt, n, sv) {  while(n--!=0) tgt.push(0,sv);  }\r\n\t\r\n\tfor(var i=0; i<32; i++) {  U.ldef[i]=(U.of0[i]<<3)|U.exb[i];  U.ddef[i]=(U.df0[i]<<4)|U.dxb[i];  }\r\n\t\r\n\tpushV(U.fltree, 144, 8);  pushV(U.fltree, 255-143, 9);  pushV(U.fltree, 279-255, 7);  pushV(U.fltree,287-279,8);\r\n\t/*\r\n\tvar i = 0;\r\n\tfor(; i<=143; i++) U.fltree.push(0,8);\r\n\tfor(; i<=255; i++) U.fltree.push(0,9);\r\n\tfor(; i<=279; i++) U.fltree.push(0,7);\r\n\tfor(; i<=287; i++) U.fltree.push(0,8);\r\n\t*/\r\n\tUZIP.F.makeCodes(U.fltree, 9);\r\n\tUZIP.F.codes2map(U.fltree, 9, U.flmap);\r\n\tUZIP.F.revCodes (U.fltree, 9)\r\n\t\r\n\tpushV(U.fdtree,32,5);\r\n\t//for(i=0;i<32; i++) U.fdtree.push(0,5);\r\n\tUZIP.F.makeCodes(U.fdtree, 5);\r\n\tUZIP.F.codes2map(U.fdtree, 5, U.fdmap);\r\n\tUZIP.F.revCodes (U.fdtree, 5)\r\n\t\r\n\tpushV(U.itree,19,0);  pushV(U.ltree,286,0);  pushV(U.dtree,30,0);  pushV(U.ttree,320,0);\r\n\t/*\r\n\tfor(var i=0; i< 19; i++) U.itree.push(0,0);\r\n\tfor(var i=0; i<286; i++) U.ltree.push(0,0);\r\n\tfor(var i=0; i< 30; i++) U.dtree.push(0,0);\r\n\tfor(var i=0; i<320; i++) U.ttree.push(0,0);\r\n\t*/\r\n})()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "/** @format */\n\nimport { inflate } from 'uzip';\nimport { Crc32 } from '../common/crc32';\nimport { InputBuffer } from '../common/input-buffer';\nimport { ArrayUtils } from '../common/array-utils';\nimport { StringUtils } from '../common/string-utils';\nimport { LibError } from '../error/lib-error';\nimport { DecodeInfo } from './decode-info';\nimport { Decoder } from './decoder';\nimport { PngFrame } from './png/png-frame';\nimport { PngInfo } from './png/png-info';\nimport { PngColorType } from './png/png-color-type';\nimport { PngDisposeMode } from './png/png-dispose-mode';\nimport { PngBlendMode } from './png/png-blend-mode';\nimport { ColorRgba8 } from '../color/color-rgba8';\nimport { ColorRgb8 } from '../color/color-rgb8';\nimport { MemoryImage, MemoryImageCreateOptions } from '../image/image';\nimport { PaletteUint8 } from '../image/palette-uint8';\nimport { Format } from '../color/format';\nimport { IccProfile } from '../image/icc-profile';\nimport { IccProfileCompression } from '../image/icc-profile-compression';\nimport { Draw } from '../draw/draw';\nimport { BlendMode } from '../draw/blend-mode';\nimport { PngFilterType } from './png/png-filter-type';\nimport { Pixel } from '../image/pixel';\n\n/**\n * Decode a PNG encoded image.\n */\nexport class PngDecoder implements Decoder {\n  private _input?: InputBuffer;\n  public get input(): InputBuffer | undefined {\n    return this._input;\n  }\n\n  private _info: PngInfo = new PngInfo();\n  public get info(): PngInfo {\n    return this._info;\n  }\n\n  private _progressY = 0;\n  public get progressY(): number {\n    return this._progressY;\n  }\n\n  private _bitBuffer = 0;\n  public get bitBuffer(): number {\n    return this._bitBuffer;\n  }\n\n  private _bitBufferLen = 0;\n  public get bitBufferLen(): number {\n    return this._bitBufferLen;\n  }\n\n  /**\n   * The number of frames that can be decoded.\n   */\n  public get numFrames(): number {\n    return this._info.numFrames;\n  }\n\n  private static unfilter(\n    filterType: PngFilterType,\n    bpp: number,\n    row: Uint8Array,\n    prevRow?: Uint8Array\n  ): void {\n    const rowBytes = row.length;\n\n    switch (filterType) {\n      case PngFilterType.none:\n        break;\n      case PngFilterType.sub:\n        for (let x = bpp; x < rowBytes; ++x) {\n          row[x] = (row[x] + row[x - bpp]) & 0xff;\n        }\n        break;\n      case PngFilterType.up:\n        for (let x = 0; x < rowBytes; ++x) {\n          const b = prevRow !== undefined ? prevRow[x] : 0;\n          row[x] = (row[x] + b) & 0xff;\n        }\n        break;\n      case PngFilterType.average:\n        for (let x = 0; x < rowBytes; ++x) {\n          const a = x < bpp ? 0 : row[x - bpp];\n          const b = prevRow !== undefined ? prevRow[x] : 0;\n          row[x] = (row[x] + ((a + b) >> 1)) & 0xff;\n        }\n        break;\n      case PngFilterType.paeth:\n        for (let x = 0; x < rowBytes; ++x) {\n          const a = x < bpp ? 0 : row[x - bpp];\n          const b = prevRow !== undefined ? prevRow[x] : 0;\n          const c = x < bpp || prevRow === undefined ? 0 : prevRow[x - bpp];\n\n          const p = a + b - c;\n\n          const pa = Math.abs(p - a);\n          const pb = Math.abs(p - b);\n          const pc = Math.abs(p - c);\n\n          let paeth = 0;\n          if (pa <= pb && pa <= pc) {\n            paeth = a;\n          } else if (pb <= pc) {\n            paeth = b;\n          } else {\n            paeth = c;\n          }\n\n          row[x] = (row[x] + paeth) & 0xff;\n        }\n        break;\n      default:\n        throw new LibError(`Invalid filter value: ${filterType}`);\n    }\n  }\n\n  /**\n   * Return the CRC of the bytes\n   */\n  private static crc(type: string, bytes: Uint8Array): number {\n    const typeCodeUnits = StringUtils.getCodePoints(type);\n    const crc = Crc32.getChecksum({\n      buffer: typeCodeUnits,\n    });\n    return Crc32.getChecksum({\n      buffer: bytes,\n      baseCrc: crc,\n    });\n  }\n\n  /**\n   * Process a pass of an interlaced image.\n   */\n  private processPass(\n    input: InputBuffer,\n    image: MemoryImage,\n    xOffset: number,\n    yOffset: number,\n    xStep: number,\n    yStep: number,\n    passWidth: number,\n    passHeight: number\n  ): void {\n    let channels = 1;\n    if (this._info.colorType === PngColorType.grayscaleAlpha) {\n      channels = 2;\n    } else if (this._info.colorType === PngColorType.rgb) {\n      channels = 3;\n    } else if (this._info.colorType === PngColorType.rgba) {\n      channels = 4;\n    }\n\n    const pixelDepth = channels * this._info.bits;\n    const bpp = (pixelDepth + 7) >> 3;\n    const rowBytes = (pixelDepth * passWidth + 7) >> 3;\n\n    const inData: Array<Uint8Array | undefined> = [undefined, undefined];\n\n    const pixel = [0, 0, 0, 0];\n\n    // Let pi: number = 0;\n    for (\n      let srcY = 0, dstY = yOffset, ri = 0;\n      srcY < passHeight;\n      ++srcY, dstY += yStep, ri = 1 - ri, this._progressY++\n    ) {\n      const filterType = input.readByte() as PngFilterType;\n      inData[ri] = input.readBytes(rowBytes).toUint8Array();\n\n      const row = inData[ri]!;\n      const prevRow = inData[1 - ri];\n\n      // Before the image is compressed, it was filtered to improve compression.\n      // Reverse the filter now.\n      PngDecoder.unfilter(filterType, bpp, row, prevRow);\n\n      // Scanlines are always on byte boundaries, so for bit depths < 8,\n      // reset the bit stream counter.\n      this.resetBits();\n\n      const rowInput = new InputBuffer({\n        buffer: row,\n        bigEndian: true,\n      });\n\n      const blockHeight = xStep;\n      const blockWidth = xStep - xOffset;\n\n      // Let yMax: number = Math.min(dstY + blockHeight, _info.height);\n\n      for (\n        let srcX = 0, dstX = xOffset;\n        srcX < passWidth;\n        ++srcX, dstX += xStep\n      ) {\n        this.readPixel(rowInput, pixel);\n        this.setPixel(image.getPixel(dstX, dstY), pixel);\n\n        if (blockWidth > 1 || blockHeight > 1) {\n          for (let i = 0; i < blockHeight; ++i) {\n            for (let j = 0; j < blockWidth; ++j) {\n              this.setPixel(image.getPixelSafe(dstX + j, dstY + i), pixel);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private process(input: InputBuffer, image: MemoryImage): void {\n    let channels = 1;\n    if (this._info.colorType === PngColorType.grayscaleAlpha) {\n      channels = 2;\n    } else if (this._info.colorType === PngColorType.rgb) {\n      channels = 3;\n    } else if (this._info.colorType === PngColorType.rgba) {\n      channels = 4;\n    }\n\n    const pixelDepth = channels * this._info!.bits!;\n\n    const w = this._info.width;\n    const h = this._info.height;\n\n    const rowBytes = (w * pixelDepth + 7) >> 3;\n    const bpp = (pixelDepth + 7) >> 3;\n\n    const line = new Uint8Array(rowBytes);\n    const inData = [line, line];\n\n    const pixel = [0, 0, 0, 0];\n\n    const pIter = image[Symbol.iterator]();\n    let pIterRes = pIter.next();\n    for (let y = 0, ri = 0; y < h; ++y, ri = 1 - ri) {\n      const filterType = input.readByte() as PngFilterType;\n      inData[ri] = input.readBytes(rowBytes).toUint8Array();\n\n      const row = inData[ri];\n      const prevRow = inData[1 - ri];\n\n      // Before the image is compressed, it was filtered to improve compression.\n      // Reverse the filter now.\n      PngDecoder.unfilter(filterType, bpp, row, prevRow);\n\n      // Scanlines are always on byte boundaries, so for bit depths < 8,\n      // reset the bit stream counter.\n      this.resetBits();\n\n      const rowInput = new InputBuffer({\n        buffer: inData[ri],\n        bigEndian: true,\n      });\n\n      for (let x = 0; x < w; ++x) {\n        this.readPixel(rowInput, pixel);\n        this.setPixel(pIterRes.value, pixel);\n        pIterRes = pIter.next();\n      }\n    }\n  }\n\n  private resetBits(): void {\n    this._bitBuffer = 0;\n    this._bitBufferLen = 0;\n  }\n\n  /**\n   * Read a number of bits from the input stream.\n   */\n  private readBits(input: InputBuffer, numBits: number): number {\n    if (numBits === 0) {\n      return 0;\n    }\n\n    if (numBits === 8) {\n      return input.readByte();\n    }\n\n    if (numBits === 16) {\n      return input.readUint16();\n    }\n\n    // Not enough buffer\n    while (this._bitBufferLen < numBits) {\n      if (input.isEOS) {\n        throw new LibError('Invalid PNG data.');\n      }\n\n      // Input byte\n      const octet = input.readByte();\n\n      // Concat octet\n      this._bitBuffer = octet << this._bitBufferLen;\n      this._bitBufferLen += 8;\n    }\n\n    // Output byte\n    let mask = 0;\n    switch (numBits) {\n      case 1:\n        mask = 1;\n        break;\n      case 2:\n        mask = 3;\n        break;\n      case 4:\n        mask = 0xf;\n        break;\n      case 8:\n        mask = 0xff;\n        break;\n      case 16:\n        mask = 0xffff;\n        break;\n      default:\n        mask = 0;\n        break;\n    }\n\n    const octet = (this._bitBuffer >> (this._bitBufferLen - numBits)) & mask;\n\n    this._bitBufferLen -= numBits;\n\n    return octet;\n  }\n\n  /**\n   * Read the next pixel from the input stream.\n   */\n  private readPixel(input: InputBuffer, pixel: number[]): void {\n    switch (this._info.colorType) {\n      case PngColorType.grayscale:\n        pixel[0] = this.readBits(input, this._info.bits!);\n        return;\n      case PngColorType.rgb:\n        pixel[0] = this.readBits(input, this._info.bits!);\n        pixel[1] = this.readBits(input, this._info.bits!);\n        pixel[2] = this.readBits(input, this._info.bits!);\n        return;\n      case PngColorType.indexed:\n        pixel[0] = this.readBits(input, this._info.bits!);\n        return;\n      case PngColorType.grayscaleAlpha:\n        pixel[0] = this.readBits(input, this._info.bits!);\n        pixel[1] = this.readBits(input, this._info.bits!);\n        return;\n      case PngColorType.rgba:\n        pixel[0] = this.readBits(input, this._info.bits!);\n        pixel[1] = this.readBits(input, this._info.bits!);\n        pixel[2] = this.readBits(input, this._info.bits!);\n        pixel[3] = this.readBits(input, this._info.bits!);\n        return;\n    }\n    throw new LibError(`Invalid color type: ${this._info.colorType}.`);\n  }\n\n  // Get the color with the list of components.\n  private setPixel(p: Pixel, raw: number[]): void {\n    switch (this._info.colorType) {\n      case PngColorType.grayscale:\n        if (this._info.transparency !== undefined && this._info.bits > 8) {\n          const t = this._info.transparency!;\n          const a = ((t[0] & 0xff) << 24) | (t[1] & 0xff);\n          const g = raw[0];\n          p.setRgba(g, g, g, g !== a ? p.maxChannelValue : 0);\n          return;\n        }\n        p.setRgb(raw[0], 0, 0);\n        return;\n      case PngColorType.rgb:\n        {\n          const r = raw[0];\n          const g = raw[1];\n          const b = raw[2];\n\n          if (this._info.transparency !== undefined) {\n            const t = this._info.transparency!;\n            const tr = ((t[0] & 0xff) << 8) | (t[1] & 0xff);\n            const tg = ((t[2] & 0xff) << 8) | (t[3] & 0xff);\n            const tb = ((t[4] & 0xff) << 8) | (t[5] & 0xff);\n            if (raw[0] !== tr || raw[1] !== tg || raw[2] !== tb) {\n              p.setRgba(r, g, b, p.maxChannelValue);\n              return;\n            }\n          }\n\n          p.setRgb(r, g, b);\n        }\n        return;\n      case PngColorType.indexed:\n        p.index = raw[0];\n        return;\n      case PngColorType.grayscaleAlpha:\n        p.setRgb(raw[0], raw[1], 0);\n        return;\n      case PngColorType.rgba:\n        p.setRgba(raw[0], raw[1], raw[2], raw[3]);\n        return;\n    }\n\n    throw new LibError(`Invalid color type: ${this._info.colorType}.`);\n  }\n\n  /**\n   * Is the given file a valid PNG image?\n   */\n  public isValidFile(bytes: Uint8Array): boolean {\n    this._input = new InputBuffer({\n      buffer: bytes,\n      bigEndian: true,\n    });\n    const headerBytes = this._input.readBytes(8);\n    const expectedHeaderBytes = [137, 80, 78, 71, 13, 10, 26, 10];\n    for (let i = 0; i < 8; ++i) {\n      if (headerBytes.getByte(i) !== expectedHeaderBytes[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Start decoding the data as an animation sequence, but don't actually\n   * process the frames until they are requested with decodeFrame.\n   */\n  public startDecode(bytes: Uint8Array): DecodeInfo | undefined {\n    if (!this.isValidFile(bytes) || this._input === undefined) {\n      return undefined;\n    }\n\n    while (true) {\n      const inputPos = this._input.position;\n      let chunkSize = this._input.readUint32();\n      const chunkType = this._input.readString(4);\n      switch (chunkType) {\n        case 'tEXt':\n          {\n            const txtData = this._input.readBytes(chunkSize).toUint8Array();\n            const l = txtData.length;\n            for (let i = 0; i < l; ++i) {\n              if (txtData[i] === 0) {\n                const key = StringUtils.latin1Decoder.decode(\n                  ArrayUtils.copyUint8(txtData, 0, i)\n                );\n                const text = StringUtils.latin1Decoder.decode(\n                  ArrayUtils.copyUint8(txtData, i + 1)\n                );\n                this._info.textData.set(key, text);\n                break;\n              }\n            }\n            // CRC\n            this._input.skip(4);\n          }\n          break;\n        case 'IHDR': {\n          const hdr = InputBuffer.from(this._input.readBytes(chunkSize));\n          const hdrBytes: Uint8Array = hdr.toUint8Array();\n          this._info.width = hdr.readUint32();\n          this._info.height = hdr.readUint32();\n          this._info.bits = hdr.readByte();\n          this._info.colorType = hdr.readByte();\n          this._info.compressionMethod = hdr.readByte();\n          this._info.filterMethod = hdr.readByte();\n          this._info.interlaceMethod = hdr.readByte();\n\n          if (this._info.filterMethod !== 0) {\n            return undefined;\n          }\n\n          switch (this._info.colorType) {\n            case PngColorType.grayscale:\n              if (![1, 2, 4, 8, 16].includes(this._info.bits!)) {\n                return undefined;\n              }\n              break;\n            case PngColorType.rgb:\n              if (![8, 16].includes(this._info.bits!)) {\n                return undefined;\n              }\n              break;\n            case PngColorType.indexed:\n              if (![1, 2, 4, 8].includes(this._info.bits!)) {\n                return undefined;\n              }\n              break;\n            case PngColorType.grayscaleAlpha:\n              if (![8, 16].includes(this._info.bits!)) {\n                return undefined;\n              }\n              break;\n            case PngColorType.rgba:\n              if (![8, 16].includes(this._info.bits!)) {\n                return undefined;\n              }\n              break;\n            default:\n              // The proposed image data is not supported.\n              return undefined;\n          }\n\n          const crc = this._input.readUint32();\n          const computedCrc = PngDecoder.crc(chunkType, hdrBytes);\n          if (crc !== computedCrc) {\n            throw new LibError(`Invalid ${chunkType} checksum`);\n          }\n          break;\n        }\n        case 'PLTE': {\n          this._info.palette = this._input.readBytes(chunkSize).toUint8Array();\n          const crc = this._input.readUint32();\n          const computedCrc = PngDecoder.crc(chunkType, this._info.palette);\n          if (crc !== computedCrc) {\n            throw new LibError(`Invalid ${chunkType} checksum`);\n          }\n          break;\n        }\n        case 'tRNS': {\n          this._info.transparency = this._input\n            .readBytes(chunkSize)\n            .toUint8Array();\n          const crc = this._input.readUint32();\n          const computedCrc = PngDecoder.crc(\n            chunkType,\n            this._info.transparency\n          );\n          if (crc !== computedCrc) {\n            throw new LibError(`Invalid ${chunkType} checksum`);\n          }\n          break;\n        }\n        case 'IEND': {\n          // End of the image\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'gAMA': {\n          if (chunkSize !== 4) {\n            throw new LibError('Invalid gAMA chunk');\n          }\n          const gammaInt = this._input.readUint32();\n          // CRC\n          this._input.skip(4);\n          // A gamma of 1 doesn't have any affect, so pretend we didn't get\n          // a gamma in that case.\n          if (gammaInt !== 100000) {\n            this._info.gamma = gammaInt / 100000.0;\n          }\n          break;\n        }\n        case 'IDAT': {\n          this._info.idat.push(inputPos);\n          this._input.skip(chunkSize);\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'acTL': {\n          // Animation control chunk\n          this._info.numFrames = this._input.readUint32();\n          this._info.repeat = this._input.readUint32();\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'fcTL': {\n          // Frame control chunk\n          const sequenceNumber = this._input.readUint32();\n          const width = this._input.readUint32();\n          const height = this._input.readUint32();\n          const xOffset = this._input.readUint32();\n          const yOffset = this._input.readUint32();\n          const delayNum = this._input.readUint16();\n          const delayDen = this._input.readUint16();\n          const dispose = this._input.readByte() as PngDisposeMode;\n          const blend = this._input.readByte() as PngBlendMode;\n          // CRC\n          this._input.skip(4);\n\n          const frame: PngFrame = new PngFrame({\n            sequenceNumber: sequenceNumber,\n            width: width,\n            height: height,\n            xOffset: xOffset,\n            yOffset: yOffset,\n            delayNum: delayNum,\n            delayDen: delayDen,\n            dispose: dispose,\n            blend: blend,\n          });\n          this._info.frames.push(frame);\n          break;\n        }\n        case 'fdAT': {\n          const sequenceNumber = this._input.readUint32();\n          const frame = this._info.frames[this._info.frames.length - 1];\n          frame.fdat.push(inputPos);\n          this._input.skip(chunkSize - 4);\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'bKGD': {\n          if (this._info.colorType === PngColorType.indexed) {\n            const paletteIndex = this._input.readByte();\n            chunkSize--;\n            const p3 = paletteIndex * 3;\n            const r = this._info.palette![p3]!;\n            const g = this._info.palette![p3 + 1]!;\n            const b = this._info.palette![p3 + 2]!;\n            if (this._info.transparency !== undefined) {\n              const isTransparent =\n                this._info.transparency.includes(paletteIndex);\n              this._info.backgroundColor = new ColorRgba8(\n                r,\n                g,\n                b,\n                isTransparent ? 0 : 255\n              );\n            } else {\n              this._info.backgroundColor = new ColorRgb8(r, g, b);\n            }\n          } else if (\n            this._info.colorType === PngColorType.grayscale ||\n            this._info.colorType === PngColorType.grayscaleAlpha\n          ) {\n            /* Const gray: number = */\n            this._input.readUint16();\n            chunkSize -= 2;\n          } else if (\n            this._info.colorType === PngColorType.rgb ||\n            this._info.colorType === PngColorType.rgba\n          ) {\n            /* Const r: number = */\n            this._input.readUint16();\n            /* Const g: number = */\n            this._input.readUint16();\n            /* Const b: number = */\n            this._input.readUint16();\n            chunkSize -= 24;\n          }\n          if (chunkSize > 0) {\n            this._input.skip(chunkSize);\n          }\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        case 'iCCP': {\n          this._info.iccpName = this._input.readString();\n          // 0: deflate\n          this._info.iccpCompression = this._input.readByte();\n          chunkSize -= this._info.iccpName.length + 2;\n          const profile = this._input.readBytes(chunkSize);\n          this._info.iccpData = profile.toUint8Array();\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n        default: {\n          this._input.skip(chunkSize);\n          // CRC\n          this._input.skip(4);\n          break;\n        }\n      }\n\n      if (chunkType === 'IEND') {\n        break;\n      }\n\n      if (this._input.isEOS) {\n        return undefined;\n      }\n    }\n\n    return this._info;\n  }\n\n  /**\n   * Decode the frame (assuming **startDecode** has already been called).\n   */\n  public decodeFrame(frame: number): MemoryImage | undefined {\n    if (this._input === undefined) {\n      return undefined;\n    }\n\n    let imageData: Uint8Array | undefined = undefined;\n    let width: number | undefined = this._info.width;\n    let height: number | undefined = this._info.height;\n\n    if (!this._info.isAnimated || frame === 0) {\n      let totalSize = 0;\n      const len = this._info.idat.length;\n      const dataBlocks: Uint8Array[] = new Array<Uint8Array>();\n      for (let i = 0; i < len; ++i) {\n        this._input.offset = this._info.idat[i];\n        const chunkSize = this._input.readUint32();\n        const chunkType = this._input.readString(4);\n        const data = this._input.readBytes(chunkSize).toUint8Array();\n        totalSize += data.length;\n        dataBlocks.push(data);\n        const crc = this._input.readUint32();\n        const computedCrc = PngDecoder.crc(chunkType, data);\n        if (crc !== computedCrc) {\n          throw new LibError(`Invalid ${chunkType} checksum`);\n        }\n      }\n      imageData = new Uint8Array(totalSize);\n      let offset = 0;\n      for (const data of dataBlocks) {\n        imageData.set(data, offset);\n        offset += data.length;\n      }\n    } else {\n      if (frame < 0 || frame >= this._info.frames.length) {\n        throw new LibError(`Invalid Frame Number: ${frame}`);\n      }\n\n      const f = this._info.frames[frame];\n      width = f.width;\n      height = f.height;\n      let totalSize = 0;\n      const dataBlocks: Uint8Array[] = new Array<Uint8Array>();\n      for (let i = 0; i < f.fdat.length; ++i) {\n        this._input.offset = f.fdat[i];\n        const chunkSize = this._input.readUint32();\n        // fDat chunk header\n        this._input.readString(4);\n        // Sequence number\n        this._input.skip(4);\n        const data = this._input.readBytes(chunkSize - 4).toUint8Array();\n        totalSize += data.length;\n        dataBlocks.push(data);\n      }\n\n      imageData = new Uint8Array(totalSize);\n      let offset = 0;\n      for (const data of dataBlocks) {\n        imageData.set(data, offset);\n        offset += data.length;\n      }\n    }\n\n    let numChannels =\n      this._info.colorType === PngColorType.indexed\n        ? 1\n        : this._info.colorType === PngColorType.grayscale\n        ? 1\n        : this._info.colorType === PngColorType.grayscaleAlpha\n        ? 2\n        : this._info.colorType === PngColorType.rgba\n        ? 4\n        : 3;\n\n    let uncompressed: Uint8Array | undefined = undefined;\n    try {\n      uncompressed = inflate(imageData);\n    } catch (error) {\n      console.error(error);\n      return undefined;\n    }\n\n    // Input is the decompressed data.\n    const input = new InputBuffer({\n      buffer: uncompressed,\n      bigEndian: true,\n    });\n    this.resetBits();\n\n    let palette: PaletteUint8 | undefined = undefined;\n\n    // Non-indexed PNGs may have a palette, but it only provides a suggested\n    // set of colors to which an RGB color can be quantized if not displayed\n    // directly. In this case, just ignore the palette.\n    if (this._info.colorType === PngColorType.indexed) {\n      if (this._info.palette !== undefined) {\n        const p = this._info.palette!;\n        const numColors = Math.trunc(p.length / 3);\n        const t = this._info.transparency;\n        const tl = t !== undefined ? t.length : 0;\n        const nc = t !== undefined ? 4 : 3;\n        palette = new PaletteUint8(numColors, nc);\n        for (let i = 0, pi = 0; i < numColors; ++i, pi += 3) {\n          let a = 255;\n          if (nc === 4 && i < tl) {\n            a = t![i];\n          }\n          palette.setRgba(i, p[pi]!, p[pi + 1]!, p[pi + 2]!, a);\n        }\n      }\n    }\n\n    // grayscale images with no palette but with transparency, get\n    // converted to a indexed palette image.\n    if (\n      this._info.colorType === PngColorType.grayscale &&\n      this._info.transparency !== undefined &&\n      palette === undefined &&\n      this._info.bits <= 8\n    ) {\n      const t = this._info.transparency!;\n      const nt = t.length;\n      const numColors = 1 << this._info.bits;\n      palette = new PaletteUint8(numColors, 4);\n      // palette color are 8-bit, so convert the grayscale bit value to the\n      // 8-bit palette value.\n      const to8bit =\n        this._info.bits === 1\n          ? 255\n          : this._info.bits === 2\n          ? 85\n          : this._info.bits === 4\n          ? 17\n          : 1;\n      for (let i = 0; i < numColors; ++i) {\n        const g = i * to8bit;\n        palette.setRgba(i, g, g, g, 255);\n      }\n      for (let i = 0; i < nt; i += 2) {\n        const ti = ((t[i] & 0xff) << 8) | (t[i + 1] & 0xff);\n        if (ti < numColors) {\n          palette.set(ti, 3, 0);\n        }\n      }\n    }\n\n    const format =\n      this._info.bits === 1\n        ? Format.uint1\n        : this._info.bits === 2\n        ? Format.uint2\n        : this._info.bits === 4\n        ? Format.uint4\n        : this._info.bits === 16\n        ? Format.uint16\n        : Format.uint8;\n\n    if (\n      this._info.colorType === PngColorType.grayscale &&\n      this._info.transparency !== undefined &&\n      this._info.bits > 8\n    ) {\n      numChannels = 4;\n    }\n\n    if (\n      this._info.colorType === PngColorType.rgb &&\n      this._info.transparency !== undefined\n    ) {\n      numChannels = 4;\n    }\n\n    const opt: MemoryImageCreateOptions = {\n      width: width,\n      height: height,\n      numChannels: numChannels,\n      palette: palette,\n      format: format,\n    };\n\n    if (this._info.iccpData !== undefined) {\n      opt.iccProfile = new IccProfile(\n        this._info.iccpName,\n        IccProfileCompression.deflate,\n        this._info.iccpData\n      );\n    }\n\n    if (this._info.textData.size > 0) {\n      opt.textData = new Map<string, string>(this._info.textData);\n    }\n\n    const image = new MemoryImage(opt);\n\n    const origW = this._info.width;\n    const origH = this._info.height;\n    this._info.width = width;\n    this._info.height = height;\n\n    const w = width;\n    const h = height;\n    this._progressY = 0;\n    if (this._info.interlaceMethod !== 0) {\n      this.processPass(input, image, 0, 0, 8, 8, (w + 7) >> 3, (h + 7) >> 3);\n      this.processPass(input, image, 4, 0, 8, 8, (w + 3) >> 3, (h + 7) >> 3);\n      this.processPass(input, image, 0, 4, 4, 8, (w + 3) >> 2, (h + 3) >> 3);\n      this.processPass(input, image, 2, 0, 4, 4, (w + 1) >> 2, (h + 3) >> 2);\n      this.processPass(input, image, 0, 2, 2, 4, (w + 1) >> 1, (h + 1) >> 2);\n      this.processPass(input, image, 1, 0, 2, 2, w >> 1, (h + 1) >> 1);\n      this.processPass(input, image, 0, 1, 1, 2, w, h >> 1);\n    } else {\n      this.process(input, image);\n    }\n\n    this._info.width = origW;\n    this._info.height = origH;\n\n    return image;\n  }\n\n  public decode(bytes: Uint8Array, frame?: number): MemoryImage | undefined {\n    if (this.startDecode(bytes) === undefined) {\n      return undefined;\n    }\n\n    if (!this._info.isAnimated || frame !== undefined) {\n      return this.decodeFrame(frame ?? 0);\n    }\n\n    let firstImage: MemoryImage | undefined = undefined;\n    let lastImage: MemoryImage | undefined = undefined;\n    for (let i = 0; i < this._info.numFrames; ++i) {\n      const frame = this._info.frames[i];\n      const image = this.decodeFrame(i);\n      if (image === undefined) {\n        continue;\n      }\n\n      if (firstImage === undefined || lastImage === undefined) {\n        firstImage = image;\n        lastImage = image;\n        // Convert to MS\n        lastImage.frameDuration = Math.trunc(frame.delay * 1000);\n        continue;\n      }\n\n      if (\n        image.width === lastImage.width &&\n        image.height === lastImage.height &&\n        frame.xOffset === 0 &&\n        frame.yOffset === 0 &&\n        frame.blend === PngBlendMode.source\n      ) {\n        lastImage = image;\n        // Convert to MS\n        lastImage.frameDuration = Math.trunc(frame.delay * 1000);\n        firstImage.addFrame(lastImage);\n        continue;\n      }\n\n      const dispose = frame.dispose;\n      if (dispose === PngDisposeMode.background) {\n        lastImage = MemoryImage.from(lastImage);\n        lastImage.clear(this._info.backgroundColor);\n      } else if (dispose === PngDisposeMode.previous) {\n        lastImage = MemoryImage.from(lastImage);\n      } else {\n        lastImage = MemoryImage.from(lastImage);\n      }\n\n      // Convert to MS\n      lastImage.frameDuration = Math.trunc(frame.delay * 1000);\n\n      Draw.compositeImage({\n        dst: lastImage,\n        src: image,\n        dstX: frame.xOffset,\n        dstY: frame.yOffset,\n        blend:\n          frame.blend === PngBlendMode.over\n            ? BlendMode.alpha\n            : BlendMode.direct,\n      });\n\n      firstImage.addFrame(lastImage);\n    }\n\n    return firstImage;\n  }\n}\n", "/** @format */\n\nimport { InputBuffer } from '../common/input-buffer';\nimport { OutputBuffer } from '../common/output-buffer';\nimport { BmpFileHeader } from './bmp/bmp-file-header';\nimport { Decoder } from './decoder';\nimport { DibDecoder } from './dib-decoder';\nimport { IcoBmpInfo } from './ico/ico-bmp-info';\nimport { IcoInfo } from './ico/ico-info';\nimport { PngDecoder } from './png-decoder';\nimport { MemoryImage } from '../image/image';\nimport { FrameType } from '../image/frame-type';\n\nexport class IcoDecoder implements Decoder {\n  private _input?: InputBuffer;\n  private _info?: IcoInfo;\n\n  public get numFrames(): number {\n    return this._info !== undefined ? this._info.numFrames : 0;\n  }\n\n  public isValidFile(bytes: Uint8Array): boolean {\n    this._input = new InputBuffer({\n      buffer: bytes,\n    });\n    this._info = IcoInfo.read(this._input);\n    return this._info !== undefined;\n  }\n\n  public startDecode(bytes: Uint8Array): IcoInfo | undefined {\n    this._input = new InputBuffer({\n      buffer: bytes,\n    });\n    this._info = IcoInfo.read(this._input);\n    return this._info;\n  }\n\n  public decode(bytes: Uint8Array, frame?: number): MemoryImage | undefined {\n    const info = this.startDecode(bytes);\n    if (info === undefined) {\n      return undefined;\n    }\n\n    if (info.images.length === 1 || frame !== undefined) {\n      return this.decodeFrame(frame ?? 0);\n    }\n\n    let firstImage: MemoryImage | undefined = undefined;\n    for (let i = 0; i < info.images.length; i++) {\n      const frame = this.decodeFrame(i);\n      if (frame === undefined) {\n        continue;\n      }\n      if (firstImage === undefined) {\n        frame.frameType = FrameType.sequence;\n        firstImage = frame;\n      } else {\n        firstImage.addFrame(frame);\n      }\n    }\n\n    return firstImage;\n  }\n\n  public decodeFrame(frame: number): MemoryImage | undefined {\n    if (\n      this._input === undefined ||\n      this._info === undefined ||\n      frame >= this._info.numFrames\n    ) {\n      return undefined;\n    }\n\n    const imageInfo = this._info.images[frame];\n    const imageBuffer = this._input.buffer.subarray(\n      this._input.start + imageInfo.bytesOffset,\n      this._input.start + imageInfo.bytesOffset + imageInfo.bytesSize\n    );\n\n    const png = new PngDecoder();\n    if (png.isValidFile(imageBuffer)) {\n      return png.decode(imageBuffer);\n    }\n\n    // should be bmp.\n    const dummyBmpHeader = new OutputBuffer({\n      size: 14,\n    });\n    dummyBmpHeader.writeUint16(BmpFileHeader.signature);\n    dummyBmpHeader.writeUint32(imageInfo.bytesSize);\n    dummyBmpHeader.writeUint32(0);\n    dummyBmpHeader.writeUint32(0);\n\n    const bmpInfo = new IcoBmpInfo(\n      new InputBuffer({\n        buffer: imageBuffer,\n      }),\n      new BmpFileHeader(\n        new InputBuffer({\n          buffer: dummyBmpHeader.getBytes(),\n        })\n      )\n    );\n\n    if (bmpInfo.headerSize !== 40 && bmpInfo.planes !== 1) {\n      // invalid header.\n      return undefined;\n    }\n\n    let offset = 0;\n    if (bmpInfo.totalColors === 0 && bmpInfo.bitsPerPixel <= 8) {\n      offset = 40 + 4 * (1 << bmpInfo.bitsPerPixel);\n    } else {\n      offset = 40 + 4 * bmpInfo.totalColors;\n    }\n\n    bmpInfo.header.imageOffset = offset;\n    dummyBmpHeader.length -= 4;\n    dummyBmpHeader.writeUint32(offset);\n    const inp = new InputBuffer({\n      buffer: imageBuffer,\n    });\n    const bmp = new DibDecoder(inp, bmpInfo, true);\n\n    const image = bmp.decodeFrame(0);\n    if (image === undefined || bmpInfo.bitsPerPixel >= 32) {\n      return image;\n    }\n\n    const padding = 32 - (bmpInfo.width % 32);\n    const rowLength = Math.trunc(\n      (padding === 32 ? bmpInfo.width : bmpInfo.width + padding) / 8\n    );\n\n    // AND bitmask\n    for (let y = 0; y < bmpInfo.height; y++) {\n      const line = bmpInfo.readBottomUp ? y : image.height - 1 - y;\n      const row = inp.readBytes(rowLength);\n      const p = image.getPixel(0, line);\n      for (let x = 0; x < bmpInfo.width; ) {\n        const b = row.readByte();\n        for (let j = 7; j > -1 && x < bmpInfo.width; j--) {\n          if ((b & (1 << j)) !== 0) {\n            // set the pixel to completely transparent.\n            p.a = 0;\n          }\n          p.next();\n          x++;\n        }\n      }\n    }\n\n    return image;\n  }\n\n  /**\n   * Decodes the largest frame.\n   */\n  public decodeImageLargest(bytes: Uint8Array): MemoryImage | undefined {\n    const info = this.startDecode(bytes);\n    if (info === undefined) {\n      return undefined;\n    }\n    let largestFrame = 0;\n    let largestSize = 0;\n    for (let i = 0; i < info.images.length; i++) {\n      const image = info.images[i];\n      const size = image.width * image.height;\n      if (size > largestSize) {\n        largestSize = size;\n        largestFrame = i;\n      }\n    }\n    return this.decodeFrame(largestFrame);\n  }\n}\n", ""],
  "mappings": "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AIA,EAAQ,CACV,KAAM,YACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,eACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,mBACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,OACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,QACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,eACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,cACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,kBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,eACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,kBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,iBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,iBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,cACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,cACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,sBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,WACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,YACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,YACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,mBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,mBACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,WACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,WACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,iBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,aACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,mBACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,mBACN,OACA,MAAO,GACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,WACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,WACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,SACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,eACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,YACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,aACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,wBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,WACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,gBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,YACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,aACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,cACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,gBACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,aACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,wBACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,QACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,UACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,UACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,gBACN,MACF,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,eACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,iBACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,iBACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,eACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,UACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,UACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,uBACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,6BACR,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,oBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,mBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,mBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,sBACN,OACA,MAAO,CACT,CAAC,CACH,EAEA,CACE,IACA,IAAIA,EAAQ,CACV,KAAM,mBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,SACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,qBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,YACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,YACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,eACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,UACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,WACN,OACA,MAAO,CACT,CAAC,CACH,EAEA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,YACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,mBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,kBACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,sBACN,MACF,CAAC,CACH,EAEA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,WACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,WACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,MACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,kBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,2BACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,WACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,cACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,mBACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,oBACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,aACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,qBACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,sBACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,0BACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,wBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,mBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,eACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,iBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,mBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,kBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,iBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,aACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,OACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,aACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,aACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,YACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,cACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,YACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,oBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,qBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,SACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,WACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,UACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,YACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,WACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,iBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,aACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,iBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,kBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,kBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,wBACR,CAAC,CACH,EAEA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,aACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,0BACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,uBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,uBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,0BACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,iBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,eACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,eACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,YACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,WACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,YACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,gBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,kBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,uBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,kBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,aACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,UACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,YACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,WACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,0BACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,sBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,eACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,kBACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,mBACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,mBACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,WACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,YACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,mBACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,QACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,SACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,SACR,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,KACA,IAAIA,EAAQ,CACV,KAAM,YACN,MACF,CAAC,CACH,EACA,CACE,MACA,IAAIA,EAAQ,CACV,KAAM,eACN,MACF,CAAC,CACH,CACF,CAAC,EAEYG,GAAkB,IAAI,IAAqB,CACtD,CACE,EACA,IAAIH,EAAQ,CACV,KAAM,eACN,MACF,CAAC,CACH,EACA,CACE,EACA,IAAIA,EAAQ,CACV,KAAM,iBACN,MACF,CAAC,CACH,EACA,CACE,KACA,IAAIA,EAAQ,CACV,KAAM,yBACN,MACF,CAAC,CACH,EACA,CACE,KACA,IAAIA,EAAQ,CACV,KAAM,oBACN,OACA,MAAO,CACT,CAAC,CACH,EACA,CACE,KACA,IAAIA,EAAQ,CACV,KAAM,qBACN,OACA,MAAO,CACT,CAAC,CACH,CACF,CAAC,EAEYI,GAAc,IAAI,IAAqB,CAClD,CACE,EACA,IAAIJ,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,EACA,IAAIA,EAAQ,CACV,KAAM,gBACR,CAAC,CACH,EACA,CACE,EACA,IAAIA,EAAQ,CACV,KAAM,aACR,CAAC,CACH,EACA,CACE,EACA,IAAIA,EAAQ,CACV,KAAM,iBACR,CAAC,CACH,EACA,CACE,EACA,IAAIA,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,EACA,IAAIA,EAAQ,CACV,KAAM,gBACR,CAAC,CACH,EACA,CACE,EACA,IAAIA,EAAQ,CACV,KAAM,aACR,CAAC,CACH,EACA,CACE,EACA,IAAIA,EAAQ,CACV,KAAM,cACR,CAAC,CACH,EACA,CACE,EACA,IAAIA,EAAQ,CACV,KAAM,eACR,CAAC,CACH,EACA,CACE,EACA,IAAIA,EAAQ,CACV,KAAM,WACR,CAAC,CACH,EACA,CACE,GACA,IAAIA,EAAQ,CACV,KAAM,gBACR,CAAC,CACH,EACA,CACE,GACA,IAAIA,EAAQ,CACV,KAAM,QACR,CAAC,CACH,EACA,CACE,GACA,IAAIA,EAAQ,CACV,KAAM,aACR,CAAC,CACH,EACA,CACE,GACA,IAAIA,EAAQ,CACV,KAAM,UACR,CAAC,CACH,EACA,CACE,GACA,IAAIA,EAAQ,CACV,KAAM,aACR,CAAC,CACH,EACA,CACE,GAC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K,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACrC,EArUWA,GA0Ua,kBAA8B,CACpD,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAO,MACpE,MAAO,MAAO,OAAQ,OAAQ,OAAQ,MACxC,EA7UWA,GAkVa,WAAuB,CAE7C,KAAM,KAAM,IAAK,IAAK,GAAI,GAAI,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,EAClC,EAvVWA,GAyVa,aAAyB,CAAC,IAAK,IAAK,IAAK,GAAG,EAzVzDA,GA8Va,OAAmB,CAEzC,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAEzB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAErB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAErB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAErB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,KAAM,KAE9C,KAAM,KAAM,OAAQ,OAAQ,OAAQ,OAAQ,KAAM,KAElD,KAAM,KAAM,OAAQ,OAAQ,IAAK,IAAK,IAAK,IAE3C,IAAK,IAAK,IAAK,IAAK,OAAQ,OAAQ,MAAO,MAE3C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAM,KAEhD,KAAM,KAAM,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAElD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAEtC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,KAAM,KAAM,KAAM,KAAM,IAAM,IAAM,KAAM,KAE1C,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAExC,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,IAEvC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAEnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAA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AAC,EAAA,oBCAA,IAAAC,GAAAC,EAAA,oBCAA,IAAAC,GAAAC,EAAA,oBCAA,IAAAC,GAAAC,EAAA,oBCAA,IAAAC,GAAAC,EAAA,oBCAA,IAAAC,GAAAC,EAAA,oBCAA,IAAAC,GAAAC,EAAA,kBAEAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KAEAC,KACAC,KACAC,KACAC,KACAC,KACAC,OCfA,IAAAC,GAAAC,EAAA,kBAGAC,KACAC,KAGAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KAEAC,KACAC,KAEAC,KAGAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KAEAC,IAUAC,IACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KAIAC,KACAC,KACAC,KAiBAC,KAGAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KAQAC,KACAC,KACAC,KAQAvD,KACAwD,KAyCAC,KACAC,KACAC,KACAC,KAMAC,KACAC,KACAC,KAEAC,KACAC,KACAC,KAEAC,KACAC,KAIAC,KACAC,KAEAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAnF,KAEAoF,KACAC,KACAC,KACAxF,KACAyF,KACAC,KAEAC,KACAC,KAEAC,KACAC,KACAC,KACAC,KAIAC,KACAC,KACAC,KACAC,KACAC,KACAC,KAKApH,KACAC,KAGAoH,KAEAnH,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAyG,KAGAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KAEAC,KACAC,KAQAC,KACAC,KAC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",
  "names": ["ChannelOrderLength", "init_channel_order", "__esmMin", "init_channel", "__esmMin", "LibError", "init_lib_error", "__esmMin", "MathUtils", "init_math_utils", "__esmMin", "x", "edge0", "edge1", "t0", "t", "y", "a", "edge", "z", "_x", "_y", "num", "low", "high", "Rational", "init_rational", "__esmMin", "init_math_utils", "numerator", "denominator", "d", "MathUtils", "other", "ArrayUtils", "init_array_utils", "__esmMin", "init_lib_error", "init_rational", "from", "begin", "end", "LibError", "fromStart", "fromEnd", "to", "toStart", "viewFrom", "length", "value", "func", "a", "a1", "a2", "i", "l", "t", "v", "obj", "Rational", "_BitUtils", "BitUtils", "init_bit_utils", "__esmMin", "v", "c", "_v", "x", "bits", "value", "n", "d", "bitCount", "result", "Float16", "init_float16", "__esmMin", "init_bit_utils", "f", "i", "s", "e", "m", "t", "b", "floatUint32Data", "iMax", "y", "other", "float16", "bits", "n", "xI", "BitUtils", "d", "convertFormatValue", "value", "from", "to", "FormatMaxValue", "MathUtils", "LibError", "Format", "FormatSize", "init_format", "__esmMin", "init_math_utils", "init_lib_error", "ColorFloat32", "init_color_float32", "__esmMin", "init_array_utils", "init_channel", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "index", "value", "nc", "ArrayUtils", "opt", "ColorFloat64", "init_color_float64", "__esmMin", "init_array_utils", "init_channel", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "index", "value", "nc", "ArrayUtils", "opt", "ColorInt16", "init_color_int16", "__esmMin", "init_array_utils", "init_channel", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "index", "value", "nc", "ArrayUtils", "opt", "ColorInt32", "init_color_int32", "__esmMin", "init_array_utils", "init_channel", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "index", "value", "nc", "ArrayUtils", "opt", "ColorInt8", "init_color_int8", "__esmMin", "init_array_utils", "init_channel", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "index", "value", "nc", "ArrayUtils", "opt", "ColorUint1", "init_color_uint1", "__esmMin", "init_array_utils", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "index", "value", "_index", "ArrayUtils", "opt", "ColorUint16", "init_color_uint16", "__esmMin", "init_array_utils", "init_channel", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "index", "value", "nc", "ArrayUtils", "opt", "ColorUint2", "init_color_uint2", "__esmMin", "init_array_utils", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "index", "value", "mask", "x", "ArrayUtils", "opt", "ColorUint32", "init_color_uint32", "__esmMin", "init_array_utils", "init_channel", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "index", "value", "nc", "ArrayUtils", "opt", "ColorUint4", "init_color_uint4", "__esmMin", "init_array_utils", "init_math_utils", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "index", "value", "_index", "vi", "MathUtils", "ArrayUtils", "opt", "ColorUint8", "init_color_uint8", "__esmMin", "init_array_utils", "init_channel", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "channel", "defValue", "index", "value", "nc", "ArrayUtils", "opt", "ColorUtils", "init_color_utils", "__esmMin", "init_math_utils", "init_lib_error", "init_color_float16", "init_color_float32", "init_color_float64", "init_color_int16", "init_color_int32", "init_color_int8", "init_color_uint1", "init_color_uint16", "init_color_uint2", "init_color_uint32", "init_color_uint4", "init_color_uint8", "init_format", "c", "c2", "a", "_a", "_b", "numChannels", "format", "fromFormat", "cl", "g", "convertFormatValue", "ci", "v", "r", "b", "MathUtils", "opt", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "_k", "_l", "_m", "_n", "_o", "_p", "_q", "_r", "_s", "_t", "_u", "alpha", "ColorUint8", "ColorUint1", "ColorUint2", "ColorUint4", "ColorUint16", "ColorUint32", "ColorInt8", "ColorInt16", "ColorInt32", "ColorFloat16", "ColorFloat32", "ColorFloat64", "LibError", "hue", "saturation", "lightness", "gray", "hue2rgb", "p", "q", "t", "brightness", "h", "f", "mx", "mn", "l", "d", "s", "y", "x", "z", "_x", "_y", "_z", "m", "k", "y3", "x3", "z3", "R", "G", "B", "ColorFloat16", "init_color_float16", "__esmMin", "init_array_utils", "init_float16", "init_channel", "init_color_utils", "init_format", "i", "r", "g", "b", "a", "v", "ColorUtils", "data", "other", "c", "color", "l", "Float16", "channel", "index", "value", "nc", "ArrayUtils", "opt", "ColorRgb8", "init_color_rgb8", "__esmMin", "init_color_uint8", "ColorUint8", "r", "g", "b", "data", "other", "ColorRgba8", "init_color_rgba8", "__esmMin", "init_color_uint8", "ColorUint8", "r", "g", "b", "a", "data", "other", "init_color", "__esmMin", "_Crc32", "Crc32", "init_crc32", "__esmMin", "table", "c", "k", "opt", "_a", "_b", "_c", "len", "pos", "end", "result", "i", "StringUtils", "init_string_utils", "__esmMin", "init_lib_error", "str", "array", "i", "codePoint", "LibError", "InputBuffer", "init_input_buffer", "__esmMin", "init_lib_error", "init_bit_utils", "init_string_utils", "v", "opt", "_a", "_b", "other", "offset", "length", "offsetFromOther", "result", "index", "value", "start", "count", "position", "pos", "end", "BitUtils", "bytes", "codes", "c", "LibError", "array", "StringUtils", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "correctedOffset", "correctedLength", "init_interpolation", "__esmMin", "Line", "init_line", "__esmMin", "x1", "y1", "x2", "y2", "other", "x", "y", "tmp", "_OutputBuffer", "OutputBuffer", "init_output_buffer", "__esmMin", "init_array_utils", "v", "opt", "_a", "_b", "required", "blockSize", "newBuffer", "ArrayUtils", "value", "bytes", "length", "bytesLength", "requiredLength", "fb", "b", "start", "end", "correctedStart", "correctedEnd", "Point", "init_point", "__esmMin", "x", "y", "other", "dx", "dy", "n", "p", "RandomUtils", "init_random_utils", "__esmMin", "x1", "w", "x2", "z", "k", "y", "s", "max", "Rectangle", "init_rectangle", "__esmMin", "init_point", "Point", "x1", "y1", "x2", "y2", "x", "y", "width", "height", "other", "init_typings", "__esmMin", "init_blend_mode", "__esmMin", "init_circle_quadrant", "__esmMin", "ImageUtils", "init_image_utils", "__esmMin", "init_point", "p", "center", "rad2", "antialias", "total", "dx1", "dy1", "r1", "dx2", "dy2", "r2", "dx3", "dy3", "r3", "dx4", "dy4", "r4", "dx5", "dy5", "r5", "dx6", "dy6", "r6", "dx7", "dy7", "r7", "dx8", "dy8", "r8", "dx9", "dy9", "r9", "rect", "line", "xmin", "ymin", "xmax", "ymax", "inside", "left", "right", "bottom", "top", "computeOutCode", "code", "outcode1", "Point", "outcode2", "accept", "outcodeOut", "x", "y", "Draw", "init_draw", "__esmMin", "init_channel", "init_color_utils", "init_array_utils", "init_line", "init_math_utils", "init_point", "init_rectangle", "init_image_utils", "init_blend_mode", "init_circle_quadrant", "image", "center", "radius", "points", "Point", "f", "ddFx", "ddFy", "x", "y", "x1", "x2", "y1", "y2", "x3", "x4", "y3", "y4", "opt", "_a", "_b", "drawPixel4", "dx", "dy", "alpha", "quadrants", "maskChannel", "radiusSqr", "quarter", "i", "j", "frc", "MathUtils", "frc2", "flr", "line", "steep", "gradient", "xend", "yend", "xgap", "xpxl1", "ypxl1", "intery", "xpxl2", "ypxl2", "c", "a", "c1", "c2", "compareAlpha", "d1", "d2", "d3", "dA", "src", "refColor", "threshold", "pixel", "pixelColor", "ColorUtils", "array", "mark", "visited", "_x", "_y", "lastRowLength", "rowLength", "sx", "end", "ux", "ox", "oy", "dst", "dstX", "dstY", "dstW", "dstH", "xCache", "yCache", "mask", "p", "sy", "m", "dp", "blend", "linearBlend", "antialias", "pt", "range", "it", "ImageUtils", "_c", "thickness", "Rectangle", "xor", "n", "ac", "wid", "d", "incr1", "incr2", "ydirflag", "wstart", "as", "xdirflag", "Line", "ag", "inc", "frac", "w", "_d", "_e", "_f", "msk", "overlayR", "overlayG", "overlayB", "overlayA", "baseR", "baseG", "baseB", "baseA", "baseOverlayAlphaProduct", "rightHandProductR", "rightHandProductG", "rightHandProductB", "firstBlendColorR", "firstBlendColorG", "firstBlendColorB", "oR", "oG", "oB", "secondBlendColorR", "secondBlendColorG", "secondBlendColorB", "colorChoiceR", "colorChoiceG", "colorChoiceB", "invA", "lbr", "lbg", "lbb", "lor", "log", "lob", "r", "g", "b", "vertices", "numVertices", "rect", "x0", "y0", "rad", "c1x", "c1y", "c2x", "c2y", "c3x", "c3y", "c4x", "c4y", "ht", "dh", "by0", "by1", "bx0", "bx1", "srcColor", "lab", "xMin", "yMin", "xMax", "yMax", "first", "vertex", "inter", "ArrayUtils", "vi", "yi", "v1", "v2", "temp", "x1f", "x2f", "t", "xx0", "yy0", "xx1", "yy1", "ww", "hh", "rad2", "px", "py", "maskValue", "fillValue", "ret", "_g", "_h", "_i", "_j", "_k", "_l", "srcX", "srcY", "srcW", "srcH", "wdt", "height", "_", "ExifEntry", "init_exif_entry", "__esmMin", "v", "tag", "value", "getIfdValueTypeString", "type", "IfdValueType", "getIfdValueTypeSize", "length", "IfdValueTypeSize", "init_ifd_value_type", "__esmMin", "ExifTag", "ExifTagNameToID", "ExifImageTags", "ExifInteropTags", "ExifGpsTags", "init_exif_tag", "__esmMin", "init_ifd_value_type", "opt", "_a", "IfdValue", "init_ifd_value", "__esmMin", "init_rational", "init_lib_error", "init_ifd_value_type", "getIfdValueTypeSize", "getIfdValueTypeString", "_index", "Rational", "_out", "_v", "_numerator", "_denomitator", "_other", "LibError", "IfdAsciiValue", "init_ifd_ascii_value", "__esmMin", "init_string_utils", "init_ifd_value", "init_ifd_value_type", "IfdValue", "value", "StringUtils", "data", "length", "out", "bytes", "v", "other", "IfdShortValue", "init_ifd_short_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_array_utils", "IfdValue", "value", "data", "length", "array", "i", "index", "out", "l", "v", "other", "ArrayUtils", "IfdRationalValue", "init_ifd_rational_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_rational", "init_array_utils", "IfdValue", "value", "Rational", "data", "length", "array", "i", "r", "other", "index", "out", "v", "numerator", "denomitator", "ArrayUtils", "IfdByteValue", "init_ifd_byte_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_array_utils", "IfdValue", "value", "data", "offset", "length", "array", "index", "out", "v", "other", "ArrayUtils", "IfdLongValue", "init_ifd_long_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_array_utils", "IfdValue", "value", "data", "length", "array", "i", "index", "out", "l", "v", "other", "ArrayUtils", "IfdSByteValue", "init_ifd_sbyte_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_array_utils", "IfdValue", "value", "data", "offset", "length", "array", "index", "out", "v", "other", "ArrayUtils", "IfdUndefinedValue", "init_ifd_undefined_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_array_utils", "IfdValue", "value", "data", "offset", "length", "array", "out", "other", "ArrayUtils", "IfdSShortValue", "init_ifd_sshort_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_array_utils", "IfdValue", "value", "data", "length", "array", "i", "index", "out", "v", "vb", "l", "other", "ArrayUtils", "IfdSLongValue", "init_ifd_slong_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_bit_utils", "init_array_utils", "IfdValue", "value", "data", "length", "array", "i", "index", "out", "l", "BitUtils", "v", "other", "ArrayUtils", "IfdSRationalValue", "init_ifd_srational_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_bit_utils", "init_rational", "init_array_utils", "IfdValue", "value", "Rational", "data", "length", "array", "i", "r", "other", "index", "out", "v", "BitUtils", "numerator", "denomitator", "ArrayUtils", "IfdSingleValue", "init_ifd_single_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_array_utils", "IfdValue", "value", "data", "length", "array", "i", "index", "out", "l", "v", "other", "ArrayUtils", "IfdDoubleValue", "init_ifd_double_value", "__esmMin", "init_ifd_value", "init_ifd_value_type", "init_array_utils", "IfdValue", "value", "data", "length", "array", "i", "index", "out", "l", "v", "other", "ArrayUtils", "IfdDirectory", "init_ifd_directory", "__esmMin", "init_rational", "init_exif_tag", "init_ifd_value_type", "init_ifd_container", "init_ifd_value", "init_ifd_ascii_value", "init_ifd_short_value", "init_ifd_rational_value", "init_ifd_byte_value", "init_ifd_long_value", "init_ifd_sbyte_value", "init_ifd_undefined_value", "init_ifd_sshort_value", "init_ifd_slong_value", "init_ifd_srational_value", "init_ifd_single_value", "init_ifd_double_value", "init_string_utils", "init_array_utils", "data", "IfdContainer", "_a", "StringUtils", "v", "codeUnits", "IfdUndefinedValue", "IfdAsciiValue", "IfdShortValue", "dataOffset", "value", "dataSize", "subName", "subIfd", "subSize", "tag", "Rational", "IfdRationalValue", "ArrayUtils", "r", "other", "_tag", "ExifTagNameToID", "IfdValue", "tagInfo", "ExifImageTags", "IfdByteValue", "IfdLongValue", "IfdSByteValue", "IfdSShortValue", "IfdSLongValue", "IfdSRationalValue", "IfdSingleValue", "IfdDoubleValue", "IfdContainer", "init_ifd_container", "__esmMin", "init_ifd_directory", "ifd", "directories", "other", "dirs", "key", "ifdName", "IfdDirectory", "value", "ExifData", "init_exif_data", "__esmMin", "init_exif_entry", "init_exif_tag", "init_ifd_container", "init_ifd_directory", "init_ifd_value_type", "init_ifd_ascii_value", "init_ifd_byte_value", "init_ifd_double_value", "init_ifd_long_value", "init_ifd_rational_value", "init_ifd_sbyte_value", "init_ifd_short_value", "init_ifd_single_value", "init_ifd_slong_value", "init_ifd_srational_value", "init_ifd_sshort_value", "init_ifd_undefined_value", "IfdContainer", "_a", "_b", "out", "ifd", "dataOffset", "offset", "stripOffsetTag", "ExifTagNameToID", "tag", "value", "tagType", "tagLength", "size", "block", "blockOffset", "format", "count", "entry", "ExifEntry", "IfdValueType", "f", "fsize", "IfdValueTypeSize", "endOffset", "fieldOffset", "data", "IfdSByteValue", "IfdByteValue", "IfdUndefinedValue", "IfdAsciiValue", "IfdShortValue", "IfdLongValue", "IfdRationalValue", "IfdSRationalValue", "IfdSShortValue", "IfdSLongValue", "IfdSingleValue", "IfdDoubleValue", "other", "dirs", "input", "directory", "ExifImageTags", "saveEndian", "IfdDirectory", "offsets", "name", "dataSize", "subName", "subIfd", "subSize", "dirArray", "i", "nextName", "endian", "ifdOffset", "index", "numEntries", "dir", "subTags", "d", "dt", "s", "subDirectory", "DitherKernels", "init_dither_kernel", "__esmMin", "init_frame_type", "__esmMin", "PixelFloat16", "init_pixel_float16", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_float16", "init_image_data_float16", "i", "Float16", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "image", "MemoryImageDataFloat16", "other", "channel", "value", "color", "ArrayUtils", "opt", "PixelRangeIterator", "init_pixel_range_iterator", "__esmMin", "pixel", "x", "y", "width", "height", "MemoryImageDataFloat16", "init_image_data_float16", "__esmMin", "init_channel_order", "init_format", "init_pixel_float16", "init_pixel_range_iterator", "init_color_float16", "init_float16", "PixelFloat16", "width", "height", "numChannels", "data", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorFloat16", "pixel", "p", "index", "Float16", "_c", "order", "tempImage", "PixelFloat32", "init_pixel_float32", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_image_data_float32", "i", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "image", "MemoryImageDataFloat32", "other", "channel", "value", "color", "ArrayUtils", "opt", "MemoryImageDataFloat32", "init_image_data_float32", "__esmMin", "init_channel_order", "init_format", "init_pixel_float32", "init_pixel_range_iterator", "init_color_float32", "PixelFloat32", "width", "height", "numChannels", "data", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorFloat32", "pixel", "p", "index", "_c", "order", "tempImage", "PixelFloat64", "init_pixel_float64", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_image_data_float64", "i", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "image", "MemoryImageDataFloat64", "other", "channel", "value", "color", "ArrayUtils", "opt", "MemoryImageDataFloat64", "init_image_data_float64", "__esmMin", "init_channel_order", "init_format", "init_pixel_float64", "init_pixel_range_iterator", "init_color_float64", "PixelFloat64", "width", "height", "numChannels", "data", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorFloat64", "pixel", "p", "index", "_c", "order", "tempImage", "PixelInt16", "init_pixel_int16", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_image_data_int16", "i", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "image", "MemoryImageDataInt16", "other", "channel", "value", "color", "ArrayUtils", "opt", "MemoryImageDataInt16", "init_image_data_int16", "__esmMin", "init_channel_order", "init_color_int16", "init_format", "init_pixel_int16", "init_pixel_range_iterator", "PixelInt16", "width", "height", "numChannels", "data", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorInt16", "pixel", "p", "index", "_c", "order", "tempImage", "PixelInt32", "init_pixel_int32", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_image_data_int32", "i", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "image", "MemoryImageDataInt32", "other", "channel", "value", "color", "ArrayUtils", "opt", "MemoryImageDataInt32", "init_image_data_int32", "__esmMin", "init_channel_order", "init_color_int32", "init_format", "init_pixel_int32", "init_pixel_range_iterator", "PixelInt32", "width", "height", "numChannels", "data", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorInt32", "pixel", "p", "index", "_c", "order", "tempImage", "PixelInt8", "init_pixel_int8", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_image_data_int8", "i", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "image", "MemoryImageDataInt8", "other", "channel", "value", "color", "ArrayUtils", "opt", "MemoryImageDataInt8", "init_image_data_int8", "__esmMin", "init_channel_order", "init_color_int8", "init_format", "init_pixel_int8", "init_pixel_range_iterator", "PixelInt8", "width", "height", "numChannels", "data", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorInt8", "pixel", "p", "index", "_c", "order", "tempImage", "PixelUint1", "init_pixel_uint1", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_math_utils", "init_image_data_uint1", "i", "_a", "_b", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "bitIndex", "rowOffset", "image", "MemoryImageDataUint1", "other", "channel", "bi", "nc", "bpp", "value", "vi", "MathUtils", "mask", "color", "ArrayUtils", "opt", "MemoryImageDataUint1", "init_image_data_uint1", "__esmMin", "init_channel_order", "init_format", "init_pixel_uint1", "init_pixel_range_iterator", "init_color_uint1", "PixelUint1", "_a", "_b", "width", "height", "numChannels", "data", "palette", "rowStride", "d", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorUint1", "pixel", "p", "_c", "order", "tempImage", "PixelUint16", "init_pixel_uint16", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_image_data_uint16", "i", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "image", "MemoryImageDataUint16", "other", "channel", "value", "color", "ArrayUtils", "opt", "MemoryImageDataUint16", "init_image_data_uint16", "__esmMin", "init_channel_order", "init_format", "init_pixel_uint16", "init_pixel_range_iterator", "init_color_uint16", "PixelUint16", "width", "height", "numChannels", "data", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorUint16", "pixel", "p", "index", "_c", "order", "tempImage", "PixelUint2", "init_pixel_uint2", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_math_utils", "init_image_data_uint2", "i", "_a", "_b", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "bitIndex", "rowOffset", "image", "MemoryImageDataUint2", "other", "channel", "bi", "nc", "bpp", "value", "vi", "MathUtils", "mask", "color", "ArrayUtils", "opt", "MemoryImageDataUint2", "init_image_data_uint2", "__esmMin", "init_channel_order", "init_format", "init_pixel_uint2", "init_pixel_range_iterator", "init_color_uint2", "PixelUint2", "_a", "_b", "width", "height", "numChannels", "data", "palette", "rowStride", "d", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorUint2", "pixel", "p", "_c", "order", "tempImage", "PixelUint32", "init_pixel_uint32", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_image_data_uint32", "i", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "image", "MemoryImageDataUint32", "other", "channel", "value", "color", "ArrayUtils", "opt", "MemoryImageDataUint32", "init_image_data_uint32", "__esmMin", "init_channel_order", "init_format", "init_pixel_uint32", "init_pixel_range_iterator", "init_color_uint32", "PixelUint32", "width", "height", "numChannels", "data", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorUint32", "pixel", "p", "index", "_c", "order", "tempImage", "PixelUint4", "init_pixel_uint4", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_math_utils", "init_image_data_uint4", "i", "_a", "_b", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "bitIndex", "image", "MemoryImageDataUint4", "other", "channel", "bi", "nc", "bpp", "w", "rowStride", "value", "vi", "MathUtils", "color", "ArrayUtils", "opt", "MemoryImageDataUint4", "init_image_data_uint4", "__esmMin", "init_channel_order", "init_format", "init_pixel_uint4", "init_pixel_range_iterator", "init_color_uint4", "PixelUint4", "_a", "_b", "width", "height", "numChannels", "data", "palette", "rowStride", "d", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorUint4", "pixel", "p", "_c", "order", "tempImage", "PixelUint8", "init_pixel_uint8", "__esmMin", "init_channel", "init_color_utils", "init_format", "init_array_utils", "init_math_utils", "init_image_data_uint8", "i", "MathUtils", "_a", "_b", "r", "g", "b", "a", "v", "ColorUtils", "x", "y", "index", "image", "MemoryImageDataUint8", "other", "channel", "value", "color", "ArrayUtils", "opt", "MemoryImageDataUint8", "init_image_data_uint8", "__esmMin", "init_channel_order", "init_format", "init_pixel_uint8", "init_pixel_range_iterator", "init_color_rgb8", "init_color_rgba8", "init_math_utils", "PixelUint8", "_a", "_b", "width", "height", "numChannels", "data", "palette", "d", "other", "skipPixels", "x", "y", "PixelRangeIterator", "r", "g", "b", "a", "ColorRgb8", "MathUtils", "ColorRgba8", "pixel", "p", "index", "c", "c8", "ri", "rg", "gi", "bi", "rgba", "order", "tempImage", "PaletteFloat16", "init_palette_float16", "__esmMin", "init_format", "init_float16", "numColors", "numChannels", "data", "other", "index", "r", "g", "b", "_index", "Float16", "a", "channel", "value", "PaletteFloat32", "init_palette_float32", "__esmMin", "init_format", "numColors", "numChannels", "data", "other", "index", "r", "g", "b", "_index", "a", "channel", "value", "PaletteFloat64", "init_palette_float64", "__esmMin", "init_format", "numColors", "numChannels", "data", "other", "index", "r", "g", "b", "_index", "a", "channel", "value", "PaletteInt16", "init_palette_int16", "__esmMin", "init_format", "numColors", "numChannels", "data", "other", "index", "r", "g", "b", "_index", "a", "channel", "value", "PaletteInt32", "init_palette_int32", "__esmMin", "init_format", "numColors", "numChannels", "data", "other", "index", "r", "g", "b", "_index", "a", "channel", "value", "PaletteInt8", "init_palette_int8", "__esmMin", "init_format", "numColors", "numChannels", "data", "other", "index", "r", "g", "b", "_index", "a", "channel", "value", "PaletteUint16", "init_palette_uint16", "__esmMin", "init_format", "numColors", "numChannels", "data", "other", "index", "r", "g", "b", "_index", "a", "channel", "value", "PaletteUint32", "init_palette_uint32", "__esmMin", "init_format", "numColors", "numChannels", "data", "other", "index", "r", "g", "b", "_index", "a", "channel", "value", "PaletteUint8", "init_palette_uint8", "__esmMin", "init_format", "numColors", "numChannels", "data", "other", "index", "r", "g", "b", "_index", "a", "channel", "value", "_PixelUndefined", "PixelUndefined", "init_pixel_undefined", "__esmMin", "init_format", "init_image_data_uint8", "_i", "_r", "_g", "_b", "_a", "_v", "_channel", "_value", "_color", "_options", "_x", "_y", "other", "MemoryImageDataUint8", "UndefinedPixel", "init_pixel", "__esmMin", "init_pixel_undefined", "PixelUndefined", "MemoryImage", "init_image", "__esmMin", "init_channel_order", "init_color_uint8", "init_color_utils", "init_format", "init_array_utils", "init_interpolation", "init_math_utils", "init_lib_error", "init_exif_data", "init_frame_type", "init_image_data_float16", "init_image_data_float32", "init_image_data_float64", "init_image_data_int16", "init_image_data_int32", "init_image_data_int8", "init_image_data_uint1", "init_image_data_uint16", "init_image_data_uint2", "init_image_data_uint32", "init_image_data_uint4", "init_image_data_uint8", "init_palette_float16", "init_palette_float32", "init_palette_float64", "init_palette_int16", "init_palette_int32", "init_palette_int8", "init_palette_uint16", "init_palette_uint32", "init_palette_uint8", "init_pixel", "opt", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "ExifData", "exif", "v", "other", "width", "height", "skipAnimation", "image", "numFrames", "fi", "frame", "skipPixels", "_i", "_j", "format", "withPalette", "paletteFormat", "numChannels", "ChannelOrderLength", "LibError", "channelOrder", "toBytes", "fromBytes", "rowStride", "FormatSize", "dataStride", "stride", "dOff", "bOff", "y", "ArrayUtils", "p", "r", "g", "b", "a", "palette", "MemoryImageDataUint1", "MemoryImageDataUint2", "MemoryImageDataUint4", "MemoryImageDataUint8", "MemoryImageDataUint16", "MemoryImageDataUint32", "MemoryImageDataInt8", "MemoryImageDataInt16", "MemoryImageDataInt32", "MemoryImageDataFloat16", "MemoryImageDataFloat32", "MemoryImageDataFloat64", "PaletteUint8", "PaletteUint16", "PaletteUint32", "PaletteInt8", "PaletteInt16", "PaletteInt32", "PaletteFloat16", "PaletteFloat32", "PaletteFloat64", "img", "index", "name", "data", "x", "order", "ColorUint8", "pixel", "UndefinedPixel", "_x", "MathUtils", "_y", "fx", "fy", "interpolation", "nx", "ny", "dx", "dy", "linear", "icc", "inc", "icn", "inn", "px", "ax", "py", "ay", "cubic", "ipp", "icp", "inp", "iap", "ip0", "ip1", "ip2", "ip3", "ipc", "iac", "ic0", "ic1", "ic2", "ic3", "ipn", "ian", "in0", "in1", "in2", "in3", "ipa", "ica", "ina", "iaa", "ia0", "ia1", "ia2", "ia3", "c0", "c1", "c2", "c3", "c", "i", "color", "alpha", "FormatMaxValue", "firstFrame", "newImage", "pal", "f", "usedColors", "numColors", "op", "np", "nr", "ng", "nb", "h", "ColorUtils", "key", "value", "first", "min", "max", "Format", "_NeuralQuantizer", "NeuralQuantizer", "init_neural_quantizer", "__esmMin", "init_color_rgb8", "init_color_rgba8", "init_math_utils", "init_image", "init_palette_uint32", "init_palette_uint8", "image", "numberOfColors", "samplingFactor", "PaletteUint32", "PaletteUint8", "f", "i", "p", "rad", "alpha", "b", "g", "r", "bestD", "bestBiasDist", "bestPos", "bestBiasPos", "dist", "a", "biasDist", "_", "lo", "hi", "j", "k", "biasRadius", "alphaDec", "lengthCount", "samplePixels", "delta", "step", "pos", "w", "h", "x", "y", "red", "green", "blue", "MathUtils", "previousColor", "startPos", "smallPos", "smallVal", "q", "best", "c", "out", "ColorRgba8", "ColorRgb8", "target", "MemoryImage", "imageIt", "targetIt", "imageItRes", "targetItRes", "HeapNode", "init_heap_node", "__esmMin", "OctreeNode", "init_octree_node", "__esmMin", "init_array_utils", "childIndex", "depth", "parent", "ArrayUtils", "v", "_OctreeQuantizer", "OctreeQuantizer", "init_octree_quantizer", "__esmMin", "init_color_rgb8", "init_heap_node", "init_image", "init_octree_node", "init_palette_uint8", "image", "numberOfColors", "OctreeNode", "heap", "HeapNode", "p", "r", "g", "b", "nc", "i", "got", "c", "nodes", "PaletteUint8", "l", "n", "root", "_root", "depth", "bit", "h", "ret", "m", "prev", "q", "a", "ac", "bc", "node", "_a", "ColorRgb8", "target", "MemoryImage", "imageIt", "targetIt", "imageItRes", "targetItRes", "init_noise_type", "__esmMin", "init_pixelate_mode", "__esmMin", "init_quantize_method", "__esmMin", "SeparableKernel", "init_separable_kernel", "__esmMin", "init_channel", "init_array_utils", "init_math_utils", "size", "ArrayUtils", "max", "x", "src", "dst", "y", "width", "horizontal", "maskChannel", "mask", "r", "g", "b", "a", "j", "j2", "c", "gr", "sc", "p", "msk", "MathUtils", "index", "opt", "_a", "_b", "s", "i", "_Filter", "Filter", "init_filter", "__esmMin", "init_channel", "init_color_rgba8", "init_interpolation", "init_math_utils", "init_neural_quantizer", "init_octree_quantizer", "init_random_utils", "init_draw", "init_image", "init_dither_kernel", "init_noise_type", "init_pixelate_mode", "init_quantize_method", "init_separable_kernel", "init_color_utils", "opt", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "_k", "_l", "_m", "_n", "_o", "_p", "_q", "_r", "_s", "_t", "_u", "_v", "maskChannel", "contrast", "MathUtils", "saturation", "brightness", "gamma", "exposure", "amount", "hue", "degToRad", "avgLumR", "avgLumG", "avgLumB", "lumCoeffR", "lumCoeffG", "lumCoeffB", "useBlacksWhitesMids", "br", "bg", "bb", "wr", "wg", "wb", "mr", "mg", "mb", "invSaturation", "invContrast", "hueR", "hueG", "hueB", "s", "c", "frame", "p", "or", "og", "ob", "r", "g", "b", "tb", "lum", "hr", "hg", "hb", "blend", "grid", "rs", "w", "h", "aspect", "stepX", "stepY", "orig", "uvX", "uvY", "offX", "offY", "x2", "y2", "op", "prcX", "prcY", "pwX", "pwY", "gr", "y", "ls", "lb", "lf", "msk", "mx", "luminanceR", "luminanceG", "luminanceB", "lr", "lg", "l", "mixAmount", "branch1R", "branch1G", "branch1B", "branch2R", "branch2G", "branch2B", "nr", "ng", "nb", "scale", "interpolation", "cx", "cy", "rad", "radSqr", "x", "deltaX", "deltaY", "dist", "percent", "percentSqr", "p2", "strength", "dest", "MemoryImage", "height", "du", "dv", "z", "dw", "nX", "nY", "nZ", "shift", "shiftLeft", "shiftRight", "lc", "rc", "angle", "size", "pattern", "tx", "ty", "px", "py", "cmyC", "cmyM", "cmyY", "cmyK", "red", "green", "blue", "alpha", "i", "div", "offset", "tmp", "tmpFrame", "j", "fi", "yv", "xv", "c2", "scaled", "dx", "dy", "fromPixel", "a", "quantizer", "NeuralQuantizer", "kernel", "serpentine", "ds", "DitherKernels", "width", "direction", "palette", "indexedImage", "pIter", "itRes", "index", "x0", "x1", "pc", "r1", "g1", "b1", "idx", "r2", "g2", "b2", "er", "eg", "eb", "i0", "i1", "y1", "d", "cntX", "cntY", "texX", "texY", "pointX", "pointY", "average", "pat", "blur", "shadowColor", "ColorRgba8", "shadowWidth", "shadowHeight", "shadowOffsetX", "shadowOffsetY", "newImageWidth", "newImageHeight", "imageOffsetX", "imageOffsetY", "dst", "Draw", "ny", "nx", "t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "xxR", "xxG", "xxB", "yyR", "yyG", "yyB", "rrR", "rrG", "rrB", "filter", "sigma", "SeparableKernel", "sum", "numColors", "ColorUtils", "knee", "f", "m", "image", "nc", "hp", "ri", "gi", "bi", "mi", "ax", "ay", "bx", "by", "tex2X", "tex2Y", "tex2Z", "a2x", "a2y", "a2z", "b2x", "b2y", "b2z", "c2x", "c2y", "c2z", "aLen", "bLen", "cLen", "choiceX", "choiceY", "newColor", "max", "threshold", "outputColor", "sl", "type", "nSigma", "min", "extremes", "RandomUtils", "sqrt2", "val0", "re", "im", "val", "mn", "fm", "fM", "xr", "xg", "xb", "xa", "mode", "lx", "ly", "by2", "bx2", "total", "numberOfColors", "method", "dither", "ditherSerpentine", "OctreeQuantizer", "yw", "ywa", "invY2", "dr", "dg", "db", "da", "bottomLeft", "topLeft", "bottomRight", "topRight", "left", "right", "bottom", "top", "v", "mag", "invMx", "nCntX", "nCntY", "ncX", "ncY", "sX", "sY", "start", "end", "cr", "cg", "cb", "ca", "_BmpFileHeader", "BmpFileHeader", "init_bmp_file_header", "__esmMin", "init_input_buffer", "init_lib_error", "v", "b", "LibError", "InputBuffer", "init_bmp_compression_mode", "__esmMin", "init_bmp_info", "__esmMin", "init_bit_utils", "init_lib_error", "init_palette_uint8", "init_bmp_compression_mode", "init_bmp_file_header", "init_bmp_decoder", "__esmMin", "init_format", "init_input_buffer", "init_image", "init_bmp_file_header", "init_bmp_info", "init_bmp_encoder", "__esmMin", "init_format", "init_output_buffer", "init_palette_uint8", "init_bmp_compression_mode", "init_bmp_file_header", "init_decode_info", "__esmMin", "init_decoder", "__esmMin", "init_dib_decoder", "__esmMin", "init_bmp_decoder", "init_encoder", "__esmMin", "GifColorMap", "init_gif_color_map", "__esmMin", "init_color_uint8", "init_palette_uint8", "v", "numColors", "palette", "PaletteUint8", "n", "i", "other", "r", "index", "g", "b", "a", "ColorUint8", "color", "p", "l", "GifImageDesc", "init_gif_image_desc", "__esmMin", "init_gif_color_map", "input", "b", "bitsPerPixel", "GifColorMap", "v", "GifInfo", "init_gif_info", "__esmMin", "opt", "_a", "_b", "_c", "_d", "_e", "_GifDecoder", "GifDecoder", "init_gif_decoder", "__esmMin", "init_input_buffer", "init_array_utils", "init_gif_color_map", "init_gif_image_desc", "init_gif_info", "init_image", "init_color_uint8", "bytes", "prefix", "code", "clearCode", "c", "i", "image", "y", "colorMap", "line", "width", "x", "tag", "height", "b", "colorResolution", "bitsPerPixel", "backgroundColor", "ColorUint8", "globalColorMap", "GifColorMap", "r", "g", "isGif89", "GifInfo", "gifImage", "GifImageDesc", "input", "blockSize", "b1", "b2", "duration", "transparent", "disposalMethod", "transparentFlag", "lineLen", "currentPrefix", "j", "prefixChar", "nextByte", "from", "ArrayUtils", "MemoryImage", "row", "InputBuffer", "extCode", "error", "frame", "firstImage", "lastImage", "p", "init_quantizer_type", "__esmMin", "_GifEncoder", "GifEncoder", "init_gif_encoder", "__esmMin", "init_neural_quantizer", "init_output_buffer", "init_string_utils", "init_quantizer_type", "init_octree_quantizer", "init_filter", "init_lib_error", "init_dither_kernel", "opt", "_a", "_b", "_c", "_d", "_e", "image", "width", "height", "LibError", "palette", "numColors", "out", "paletteBytes", "numChannels", "i", "pi", "g", "initCodeSize", "hTab", "codeTab", "pIter", "pIterRes", "pFinished", "nextPixel", "r", "ent", "hShift", "fCode", "hSizeReg", "outerLoop", "c", "fcode", "disp", "code", "appCodeUnits", "StringUtils", "transparentIndex", "hasTransparency", "nc", "pa", "p", "l", "fields", "idCodeUnits", "bytes", "duration", "OutputBuffer", "NeuralQuantizer", "OctreeQuantizer", "Filter", "singleFrame", "f", "init_ico_bmp_info", "__esmMin", "init_bmp_info", "init_ico_info_image", "__esmMin", "init_ico_type", "__esmMin", "init_ico_info", "__esmMin", "init_array_utils", "init_ico_info_image", "init_ico_type", "init_png_filter_type", "__esmMin", "init_png_color_type", "__esmMin", "import_uzip", "init_png_encoder", "__esmMin", "init_crc32", "init_output_buffer", "init_string_utils", "init_png_filter_type", "init_format", "init_neural_quantizer", "init_png_color_type", "init_win_encoder", "__esmMin", "init_output_buffer", "init_lib_error", "init_png_encoder", "init_ico_encoder", "__esmMin", "init_win_encoder", "JpegComponentData", "init_jpeg_component_data", "__esmMin", "hSamples", "maxHSamples", "vSamples", "maxVSamples", "lines", "JpegAdobe", "init_jpeg_adobe", "__esmMin", "version", "flags0", "flags1", "transformCode", "JpegComponent", "init_jpeg_component", "__esmMin", "hSamples", "vSamples", "quantizationTableList", "quantizationIndex", "v", "blocks", "blocksPerLine", "blocksPerColumn", "JpegFrame", "init_jpeg_frame", "__esmMin", "init_array_utils", "components", "componentsOrder", "extended", "progressive", "precision", "scanLines", "samplesPerLine", "_", "component", "blocksPerLine", "blocksPerColumn", "blocksPerLineForMcu", "blocksPerColumnForMcu", "blocks", "ArrayUtils", "JpegHuffman", "init_jpeg_huffman", "__esmMin", "JpegInfo", "init_jpeg_info", "__esmMin", "width", "height", "JpegJfif", "init_jpeg_jfif", "__esmMin", "thumbWidth", "thumbHeight", "majorVersion", "minorVersion", "densityUnits", "xDensity", "yDensity", "thumbData", "_JpegQuantize", "JpegQuantize", "init_jpeg_quantize", "__esmMin", "init_math_utils", "init_lib_error", "init_exif_data", "init_image", "result", "i", "quantizationTable", "coefBlock", "dataOut", "dataIn", "p", "cos1", "sin1", "cos3", "sin3", "cos6", "sin6", "sqrt2", "sqrt102", "row", "t", "v0", "v1", "v2", "v3", "v4", "v7", "v5", "v6", "col", "jpeg", "orientation", "w", "h", "flipWidthHeight", "width", "height", "image", "MemoryImage", "ExifData", "component1", "component2", "component3", "component4", "component1Line", "component2Line", "component3Line", "component4Line", "colorTransform", "h1", "w1", "lines", "hShift1", "vShift1", "y", "y1", "x", "x1", "cy", "lines1", "lines2", "lines3", "hShift2", "vShift2", "hShift3", "vShift3", "y2", "y3", "x2", "x3", "cb", "cr", "r", "g", "b", "MathUtils", "LibError", "lines4", "hShift4", "vShift4", "y4", "x4", "cc", "cm", "ck", "HuffmanNode", "init_huffman_node", "__esmMin", "HuffmanParent", "init_huffman_parent", "__esmMin", "init_huffman_node", "HuffmanNode", "children", "HuffmanValue", "init_huffman_value", "__esmMin", "init_huffman_node", "HuffmanNode", "value", "init_jpeg_marker", "__esmMin", "JpegScan", "init_jpeg_scan", "__esmMin", "init_lib_error", "init_huffman_parent", "init_huffman_value", "init_jpeg_data", "init_jpeg_marker", "input", "frame", "components", "spectralStart", "spectralEnd", "successivePrev", "successive", "resetInterval", "nextByte", "marker", "LibError", "tree", "node", "HuffmanParent", "bit", "HuffmanValue", "length", "n", "len", "component", "zz", "t", "diff", "k", "rs", "r", "z", "JpegData", "_", "e", "s", "decodeFn", "mcu", "row", "col", "mcuRow", "mcuCol", "blockRow", "blockCol", "numCols", "componentsLength", "mcuExpected", "h", "v", "i", "j", "m1", "m2", "_JpegData", "JpegData", "init_jpeg_data", "__esmMin", "init_input_buffer", "init_lib_error", "init_jpeg_component_data", "init_jpeg_adobe", "init_jpeg_component", "init_jpeg_frame", "init_jpeg_huffman", "init_jpeg_info", "init_jpeg_jfif", "init_jpeg_quantize", "init_jpeg_scan", "init_exif_data", "init_array_utils", "init_jpeg_marker", "init_huffman_value", "init_huffman_parent", "ExifData", "ArrayUtils", "marker", "LibError", "block", "length", "bytes", "InputBuffer", "soiCheck", "hasSOF", "hasSOS", "sectionByteSize", "info", "JpegInfo", "i", "component", "JpegComponentData", "JpegQuantize", "codeLengths", "values", "k", "code", "JpegHuffman", "p", "j", "HuffmanValue", "q", "HuffmanParent", "blocksPerLine", "blocksPerColumn", "samplesPerLine", "R", "r", "lines", "l", "blockRow", "scanLine", "blockCol", "offset", "sample", "line", "val", "c", "appData", "majorVersion", "minorVersion", "densityUnits", "xDensity", "yDensity", "thumbWidth", "thumbHeight", "thumbSize", "thumbData", "JpegJfif", "version", "flags0", "flags1", "transformCode", "JpegAdobe", "_", "n", "prec", "tableData", "tmp", "extended", "progressive", "precision", "scanLines", "numComponents", "components", "componentsOrder", "componentId", "x", "h", "v", "qId", "JpegComponent", "JpegFrame", "index", "bits", "count", "huffmanValues", "ht", "id", "dcTableNumber", "acTableNumber", "spectralStart", "spectralEnd", "successiveApproximation", "ah", "al", "JpegScan", "JpegDecoder", "init_jpeg_decoder", "__esmMin", "init_input_buffer", "init_lib_error", "init_jpeg_data", "bytes", "JpegData", "InputBuffer", "_", "jpeg", "LibError", "_frame", "_JpegEncoder", "JpegEncoder", "init_jpeg_encoder", "__esmMin", "init_array_utils", "init_math_utils", "init_output_buffer", "init_jpeg_marker", "quality", "ArrayUtils", "nrcodes", "stdTable", "codeValue", "posInTable", "ht", "k", "j", "index", "fp", "marker", "out", "exif", "exifData", "OutputBuffer", "exifBytes", "exifSignature", "width", "height", "i", "l", "m", "n", "o", "p", "nrLower", "nrUpper", "cat", "nr", "nrneg", "q", "MathUtils", "sf", "yqt", "t", "uvqt", "u", "aasf", "row", "col", "data", "fdtbl", "dataOff", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "tmp0", "tmp7", "tmp1", "tmp6", "tmp2", "tmp5", "tmp3", "tmp4", "tmp10", "tmp13", "tmp11", "tmp12", "z1", "z5", "z2", "z4", "z3", "z11", "z13", "tmp0p2", "tmp7p2", "tmp1p2", "tmp6p2", "tmp2p2", "tmp5p2", "tmp3p2", "tmp4p2", "tmp10p2", "tmp13p2", "tmp11p2", "tmp12p2", "z1p2", "z5p2", "z2p2", "z4p2", "z3p2", "z11p2", "z13p2", "fDCTQuant", "bits", "value", "posval", "cdu", "dc", "htac", "htdc", "eob", "m16Zeroes", "I16", "I63", "I64", "duDct", "_dc", "pos", "diff", "end0pos", "startpos", "nrzeroes", "lng", "nrmarker", "image", "_singleFrame", "dcy", "dcu", "dcv", "y", "x", "yy", "xx", "r", "g", "b", "fillBits", "_JpegUtils", "JpegUtils", "init_jpeg_utils", "__esmMin", "init_input_buffer", "init_output_buffer", "init_exif_data", "init_jpeg_marker", "block", "ExifData", "out", "exif", "exifData", "OutputBuffer", "exifBytes", "input", "length", "output", "c", "data", "InputBuffer", "soiCheck", "marker", "hasExifBlock", "startOffset", "saveOffset", "signature", "init_png_blend_mode", "__esmMin", "init_png_dispose_mode", "__esmMin", "init_png_frame", "__esmMin", "init_png_blend_mode", "init_png_dispose_mode", "init_png_info", "__esmMin", "init_tga_image_type", "__esmMin", "init_tga_info", "__esmMin", "init_tga_image_type", "init_tga_decoder", "__esmMin", "init_input_buffer", "init_image", "init_tga_image_type", "init_tga_info", "init_tga_encoder", "__esmMin", "init_output_buffer", "_TiffBitReader", "TiffBitReader", "init_tiff_bit_reader", "__esmMin", "input", "numBits", "nBits", "value", "init_tiff_compression", "__esmMin", "TiffEntry", "init_tiff_entry", "__esmMin", "init_exif_tag", "init_ifd_value_type", "init_ifd_ascii_value", "init_ifd_byte_value", "init_ifd_double_value", "init_ifd_long_value", "init_ifd_rational_value", "init_ifd_sbyte_value", "init_ifd_single_value", "init_ifd_slong_value", "init_ifd_srational_value", "init_ifd_sshort_value", "IfdValueTypeSize", "opt", "data", "IfdByteValue", "IfdAsciiValue", "IfdSShortValue", "IfdLongValue", "IfdRationalValue", "IfdSingleValue", "IfdDoubleValue", "IfdSByteValue", "IfdSLongValue", "IfdSRationalValue", "exifTag", "ExifImageTags", "_TiffFaxDecoder", "TiffFaxDecoder", "init_tiff_fax_decoder", "__esmMin", "init_lib_error", "opt", "bitsToGet", "b", "next", "next2next", "l", "bp", "LibError", "bitsLeft", "bitsFromNextByte", "bitsFromNext2NextByte", "i1", "i2", "i3", "shift", "bitsToMoveBack", "i", "buffer", "lineOffset", "bitOffset", "numBits", "bitNum", "lastBit", "byteNum", "maskVal", "val", "offset", "bits", "code", "isT", "current", "entry", "twoBits", "isWhite", "n", "a0", "ret", "pce", "ces", "start", "temp", "runLength", "out", "compData", "startX", "height", "scanlineStride", "tiffT4Options", "a1", "currIndex", "lines", "b1", "b2", "number", "tiffT6Options", "cce", "zeros", "exit", "init_tiff_format", "__esmMin", "init_tiff_image_type", "__esmMin", "_LzwDecoder", "LzwDecoder", "init_tiff_lzw_decoder", "__esmMin", "init_lib_error", "string", "newString", "code", "c", "i", "p", "out", "outLen", "LibError", "oldCode", "init_tiff_photometric_type", "__esmMin", "import_uzip", "TiffImage", "init_tiff_image", "__esmMin", "init_color_utils", "init_format", "init_array_utils", "init_bit_utils", "init_float16", "init_input_buffer", "init_lib_error", "init_exif_tag", "init_ifd_value_type", "init_image", "init_jpeg_decoder", "init_tiff_bit_reader", "init_tiff_compression", "init_tiff_entry", "init_tiff_fax_decoder", "init_tiff_format", "init_tiff_image_type", "init_tiff_lzw_decoder", "init_tiff_photometric_type", "p", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "_k", "_l", "_m", "_n", "p3", "InputBuffer", "numDirEntries", "i", "tag", "ti", "type", "typeSize", "IfdValueTypeSize", "count", "valueOffset", "entry", "TiffEntry", "ExifTagNameToID", "v", "pt", "cm", "len", "l", "infinity", "s", "defaultValue", "value", "ArrayUtils", "image", "tileX", "tileY", "tileIndex", "outX", "outY", "byteCount", "byteData", "bytesInThisTile", "LzwDecoder", "j", "b", "TiffFaxDecoder", "_", "data", "outData", "LibError", "br", "TiffBitReader", "mx", "black", "white", "y", "py", "x", "px", "decoder", "e", "tile", "JpegDecoder", "sample", "Float16", "gray", "alpha", "r", "g", "a", "rgba", "ColorUtils", "tileWidth", "tileHeight", "width", "height", "arraySize", "dst", "srcCount", "dstCount", "BitUtils", "repeat", "isFloat", "isInt", "format", "hasPalette", "numChannels", "MemoryImage", "numColors", "TiffInfo", "init_tiff_info", "__esmMin", "opt", "_TiffDecoder", "TiffDecoder", "init_tiff_decoder", "__esmMin", "init_input_buffer", "init_exif_data", "init_frame_type", "init_tiff_image", "init_tiff_info", "p", "byteOrder", "bigEndian", "signature", "offset", "ifdOffset", "p2", "InputBuffer", "images", "img", "TiffImage", "error", "TiffInfo", "bytes", "buffer", "ExifData", "frame", "image", "len", "i", "init_tiff_encoder", "__esmMin", "init_format", "init_output_buffer", "init_lib_error", "init_exif_data", "init_ifd_undefined_value", "init_tiff_compression", "init_tiff_format", "init_tiff_photometric_type", "init_icc_profile_compression", "__esmMin", "import_uzip", "init_icc_profile", "__esmMin", "init_array_utils", "init_icc_profile_compression", "init_image_data", "__esmMin", "init_palette", "__esmMin", "init_quantizer", "__esmMin", "init_flip_direction", "__esmMin", "init_trim_side", "__esmMin", "init_trim_mode", "__esmMin", "init_transform", "__esmMin", "init_lib_error", "init_point", "init_interpolation", "init_math_utils", "init_exif_data", "init_image", "init_image_utils", "init_flip_direction", "init_trim_side", "init_rectangle", "init_draw", "init_blend_mode", "init_trim_mode", "init_src", "__esmMin", "init_bmp_decoder", "init_bmp_encoder", "init_gif_decoder", "init_gif_encoder", "init_ico_decoder", "init_ico_encoder", "init_jpeg_decoder", "init_jpeg_encoder", "init_png_decoder", "init_png_encoder", "init_tga_decoder", "init_tga_encoder", "init_tiff_decoder", "init_tiff_encoder", "init_png_filter_type", "init_dither_kernel", "init_jpeg_utils", "init_channel_order", "init_channel", "init_color_float16", "init_color_float32", "init_color_float64", "init_color_int8", "init_color_int16", "init_color_int32", "init_color_rgb8", "init_color_rgba8", "init_color_uint1", "init_color_uint2", "init_color_uint4", "init_color_uint8", "init_color_uint16", "init_color_uint32", "init_format", "init_array_utils", "init_bit_utils", "init_crc32", "init_float16", "init_input_buffer", "init_interpolation", "init_line", "init_math_utils", "init_output_buffer", "init_point", "init_random_utils", "init_rational", "init_rectangle", "init_string_utils", "init_blend_mode", "init_circle_quadrant", "init_draw", "init_lib_error", "init_ifd_ascii_value", "init_ifd_byte_value", "init_ifd_double_value", "init_ifd_long_value", "init_ifd_rational_value", "init_ifd_sbyte_value", "init_ifd_short_value", "init_ifd_single_value", "init_ifd_slong_value", "init_ifd_srational_value", "init_ifd_sshort_value", "init_ifd_undefined_value", "init_ifd_value", "init_exif_data", "init_exif_entry", "init_exif_tag", "init_ifd_container", "init_ifd_directory", "init_ifd_value_type", "init_filter", "init_noise_type", "init_pixelate_mode", "init_quantize_method", "init_separable_kernel", "init_bmp_compression_mode", "init_bmp_file_header", "init_bmp_info", "init_gif_color_map", "init_gif_image_desc", "init_gif_info", "init_ico_bmp_info", "init_ico_info_image", "init_ico_info", "init_ico_type", "init_huffman_node", "init_huffman_parent", "init_huffman_value", "init_jpeg_adobe", "init_jpeg_component_data", "init_jpeg_component", "init_jpeg_data", "init_jpeg_frame", "init_jpeg_huffman", "init_jpeg_info", "init_jpeg_jfif", "init_jpeg_marker", "init_jpeg_quantize", "init_jpeg_scan", "init_png_blend_mode", "init_png_color_type", "init_png_dispose_mode", "init_png_frame", "init_png_info", "init_tga_image_type", "init_tga_info", "init_tiff_bit_reader", "init_tiff_compression", "init_tiff_entry", "init_tiff_fax_decoder", "init_tiff_format", "init_tiff_image_type", "init_tiff_image", "init_tiff_info", "init_tiff_lzw_decoder", "init_tiff_photometric_type", "init_dib_decoder", "init_win_encoder", "init_frame_type", "init_heap_node", "init_icc_profile", "init_icc_profile_compression", "init_image_data_float16", "init_image_data_float32", "init_image_data_float64", "init_image_data_int8", "init_image_data_int16", "init_image_data_int32", "init_image_data_uint1", "init_image_data_uint2", "init_image_data_uint4", "init_image_data_uint8", "init_image_data_uint16", "init_image_data_uint32", "init_image_utils", "init_image", "init_neural_quantizer", "init_octree_node", "init_octree_quantizer", "init_palette_float16", "init_palette_float32", "init_palette_float64", "init_palette_int8", "init_palette_int16", "init_palette_int32", "init_palette_uint8", "init_palette_uint16", "init_palette_uint32", "init_pixel_float16", "init_pixel_float32", "init_pixel_float64", "init_pixel_int8", "init_pixel_int16", "init_pixel_int32", "init_pixel_uint1", "init_pixel_uint2", "init_pixel_uint4", "init_pixel_uint8", "init_pixel_uint16", "init_pixel_uint32", "init_pixel_undefined", "init_pixel_range_iterator", "init_pixel", "init_quantizer_type", "init_flip_direction", "init_transform", "init_trim_mode", "init_trim_side", "require_UZIP", "__commonJSMin", "exports", "module", "init_channel_order", "init_channel", "init_color_float16", "init_color_float32", "init_color_float64", "init_color_int16", "init_color_int32", "init_color_int8", "init_color_rgb8", "init_color_rgba8", "init_color_uint1", "init_color_uint16", "init_color_uint2", "init_color_uint32", "init_color_uint4", "init_color_uint8", "init_color_utils", "init_color", "init_format", "init_array_utils", "init_bit_utils", "init_crc32", "init_float16", "init_input_buffer", "init_interpolation", "init_line", "init_math_utils", "init_output_buffer", "init_point", "init_random_utils", "init_rational", "init_rectangle", "init_string_utils", "init_typings", "init_blend_mode", "init_circle_quadrant", "init_draw", "init_lib_error", "init_exif_data", "init_exif_entry", "init_exif_tag", "init_ifd_container", "init_ifd_directory", "init_ifd_value_type", "init_ifd_ascii_value", "init_ifd_byte_value", "init_ifd_double_value", "init_ifd_long_value", "init_ifd_rational_value", "init_ifd_sbyte_value", "init_ifd_short_value", "init_ifd_single_value", "init_ifd_slong_value", "init_ifd_srational_value", "init_ifd_sshort_value", "init_ifd_undefined_value", "init_ifd_value", "init_dither_kernel", "init_filter", "init_noise_type", "init_pixelate_mode", "init_quantize_method", "init_separable_kernel", "init_bmp_decoder", "init_bmp_encoder", "init_bmp_compression_mode", "init_bmp_file_header", "init_bmp_info", "init_decode_info", "init_decoder", "init_dib_decoder", "init_encoder", "init_gif_decoder", "init_gif_encoder", "init_gif_color_map", "init_gif_image_desc", "init_gif_info", "init_ico_decoder", "init_ico_encoder", "init_ico_bmp_info", "init_ico_info_image", "init_ico_info", "init_ico_type", "init_jpeg_decoder", "init_jpeg_encoder", "init_huffman_node", "init_huffman_parent", "init_huffman_value", "init_jpeg_adobe", "init_jpeg_component_data", "init_jpeg_component", "init_jpeg_data", "init_jpeg_frame", "init_jpeg_huffman", "init_jpeg_info", "init_jpeg_jfif", "init_jpeg_marker", "init_jpeg_quantize", "init_jpeg_scan", "init_jpeg_utils", "init_png_decoder", "init_png_encoder", "init_png_blend_mode", "init_png_color_type", "init_png_dispose_mode", "init_png_filter_type", "init_png_frame", "init_png_info", "init_tga_decoder", "init_tga_encoder", "init_tga_image_type", "init_tga_info", "init_tiff_decoder", "init_tiff_encoder", "init_tiff_bit_reader", "init_tiff_compression", "init_tiff_entry", "init_tiff_fax_decoder", "init_tiff_format", "init_tiff_image_type", "init_tiff_image", "init_tiff_info", "init_tiff_lzw_decoder", "init_tiff_photometric_type", "init_win_encoder", "init_frame_type", "init_heap_node", "init_icc_profile_compression", "init_icc_profile", "init_image_data_float16", "init_image_data_float32", "init_image_data_float64", "init_image_data_int16", "init_image_data_int32", "init_image_data_int8", "init_image_data_uint1", "init_image_data_uint16", "init_image_data_uint2", "init_image_data_uint32", "init_image_data_uint4", "init_image_data_uint8", "init_image_data", "init_image_utils", "init_image", "init_neural_quantizer", "init_octree_node", "init_octree_quantizer", "init_palette_float16", "init_palette_float32", "init_palette_float64", "init_palette_int16", "init_palette_int32", "init_palette_int8", "init_palette_uint16", "init_palette_uint32", "init_palette_uint8", "init_palette", "init_pixel_float16", "init_pixel_float32", "init_pixel_float64", "init_pixel_int16", "init_pixel_int32", "init_pixel_int8", "init_pixel_range_iterator", "init_pixel_uint1", "init_pixel_uint16", "init_pixel_uint2", "init_pixel_uint32", "init_pixel_uint4", "init_pixel_uint8", "init_pixel_undefined", "init_pixel", "init_quantizer_type", "init_quantizer", "init_src", "init_flip_direction", "init_transform", "init_trim_mode", "init_trim_side", "UZIP", "buf", "onlyNames", "rUs", "rUi", "o", "out", "data", "eocd", "cnu", "cnt", "csize", "coffs", "i", "sign", "crc32", "usize", "nl", "el", "cl", "roff", "ver", "gpflg", "cmpr", "time", "nlen", "elen", "name", "file", "CMF", "FLG", "CM", "CINFO", "opts", "off", "crc", "obj", "noCmpr", "tot", "wUi", "wUs", "zpd", "p", "cpr", "fof", "ioff", "fn", "ext", "t", "tab", "n", "c", "k", "len", "b", "l", "a", "end", "eend", "buff", "s", "ns", "str", "strl", "ci", "code", "opos", "lvl", "opt", "U", "goodIndex", "hash", "putsE", "pos", "cvrd", "dlen", "lits", "strt", "prev", "li", "lc", "bs", "ebits", "nc", "nmch", "nmci", "ii", "mch", "dst", "lgi", "dgi", "nice", "chain", "pi", "dif", "tl", "td", "dlim", "maxd", "j", "ei", "curd", "oi", "BFINAL", "o0", "l0", "putsF", "T", "ML", "MD", "MH", "numl", "numd", "numh", "lset", "dset", "cstSize", "fxdSize", "dynSize", "BTYPE", "ltree", "dtree", "si", "qb", "qc", "p8", "tree", "hst", "set", "rst", "rsl", "nxt", "nnxt", "prv", "lz", "zc", "MAXL", "list", "hl", "l2", "lit", "i0", "i1", "i2", "maxl", "d", "dps", "bCost", "dbt", "od", "v", "arr", "ch", "u8", "F", "bitsF", "bitsE", "decodeTiny", "makeCodes", "codes2map", "get17", "noBuf", "HLIT", "HDIST", "HCLEN", "lmap", "dmap", "ppos", "mx0", "mx1", "ebs", "dcode", "dlit", "dbs", "bl", "nbuf", "LL", "ll", "ni", "src", "mx", "MAX_BITS", "max_code", "bits", "bl_count", "next_code", "map", "r15", "val", "rest", "p0", "imb", "dt", "length", "u16", "u32", "x", "pushV", "tgt", "sv", "import_uzip", "init_png_decoder", "__esmMin", "init_crc32", "init_input_buffer", "init_array_utils", "init_string_utils", "init_lib_error", "init_png_frame", "init_png_info", "init_png_color_type", "init_png_dispose_mode", "init_png_blend_mode", "init_color_rgba8", "init_color_rgb8", "init_image", "init_palette_uint8", "init_format", "init_icc_profile", "init_icc_profile_compression", "init_draw", "init_blend_mode", "init_png_filter_type", "init_ico_decoder", "__esmMin", "init_input_buffer", "init_output_buffer", "init_bmp_file_header", "init_dib_decoder", "init_ico_bmp_info", "init_ico_info", "init_png_decoder", "init_frame_type", "init_channel_order", "init_channel", "init_color_float16", "init_color_float32", "init_color_float64", "init_color_int16", "init_color_int32", "init_color_int8", "init_color_rgb8", "init_color_rgba8", "init_color_uint1", "init_color_uint16", "init_color_uint2", "init_color_uint32", "init_color_uint4", "init_color_uint8", "init_color_utils", "init_color", "init_format", "init_array_utils", "init_bit_utils", "init_crc32", "init_float16", "init_input_buffer", "init_interpolation", "init_line", "init_math_utils", "init_output_buffer", "init_point", "init_random_utils", "init_rational", "init_rectangle", "init_string_utils", "init_typings", "init_blend_mode", "init_circle_quadrant", "init_draw", "init_lib_error", "init_exif_data", "init_exif_entry", "init_exif_tag", "init_ifd_container", "init_ifd_directory", "init_ifd_value_type", "init_ifd_ascii_value", "init_ifd_byte_value", "init_ifd_double_value", "init_ifd_long_value", "init_ifd_rational_value", "init_ifd_sbyte_value", "init_ifd_short_value", "init_ifd_single_value", "init_ifd_slong_value", "init_ifd_srational_value", "init_ifd_sshort_value", "init_ifd_undefined_value", "init_ifd_value", "init_dither_kernel", "init_filter", "init_noise_type", "init_pixelate_mode", "init_quantize_method", "init_separable_kernel", "init_bmp_decoder", "init_bmp_encoder", "init_bmp_compression_mode", "init_bmp_file_header", "init_bmp_info", "init_decode_info", "init_decoder", "init_dib_decoder", "init_encoder", "init_gif_decoder", "init_gif_encoder", "init_gif_color_map", "init_gif_image_desc", "init_gif_info", "init_ico_decoder", "init_ico_encoder", "init_ico_bmp_info", "init_ico_info_image", "init_ico_info", "init_ico_type", "init_jpeg_decoder", "init_jpeg_encoder", "init_huffman_node", "init_huffman_parent", "init_huffman_value", "init_jpeg_adobe", "init_jpeg_component_data", "init_jpeg_component", "init_jpeg_data", "init_jpeg_frame", "init_jpeg_huffman", "init_jpeg_info", "init_jpeg_jfif", "init_jpeg_marker", "init_jpeg_quantize", "init_jpeg_scan", "init_jpeg_utils", "init_png_decoder", "init_png_encoder", "init_png_blend_mode", "init_png_color_type", "init_png_dispose_mode", "init_png_filter_type", "init_png_frame", "init_png_info", "init_tga_decoder", "init_tga_encoder", "init_tga_image_type", "init_tga_info", "init_tiff_decoder", "init_tiff_encoder", "init_tiff_bit_reader", "init_tiff_compression", "init_tiff_entry", "init_tiff_fax_decoder", "init_tiff_format", "init_tiff_image_type", "init_tiff_image", "init_tiff_info", "init_tiff_lzw_decoder", "init_tiff_photometric_type", "init_win_encoder", "init_frame_type", "init_heap_node", "init_icc_profile_compression", "init_icc_profile", "init_image_data_float16", "init_image_data_float32", "init_image_data_float64", "init_image_data_int16", "init_image_data_int32", "init_image_data_int8", "init_image_data_uint1", "init_image_data_uint16", "init_image_data_uint2", "init_image_data_uint32", "init_image_data_uint4", "init_image_data_uint8", "init_image_data", "init_image_utils", "init_image", "init_neural_quantizer", "init_octree_node", "init_octree_quantizer", "init_palette_float16", "init_palette_float32", "init_palette_float64", "init_palette_int16", "init_palette_int32", "init_palette_int8", "init_palette_uint16", "init_palette_uint32", "init_palette_uint8", "init_palette", "init_pixel_float16", "init_pixel_float32", "init_pixel_float64", "init_pixel_int16", "init_pixel_int32", "init_pixel_int8", "init_pixel_range_iterator", "init_pixel_uint1", "init_pixel_uint16", "init_pixel_uint2", "init_pixel_uint32", "init_pixel_uint4", "init_pixel_uint8", "init_pixel_undefined", "init_pixel", "init_quantizer_type", "init_quantizer", "init_src", "init_flip_direction", "init_transform", "init_trim_mode", "init_trim_side"]
}
